

Microchip MPLAB XC8 Assembler V2.05 build -831301201 
                                                                                               Tue May 07 14:26:19 2019

Microchip MPLAB XC8 C Compiler v2.05 (Free license) build 20181220022703 Og1 
     1                           	processor	16F18856
     2                           	opt	pw 120
     3                           	opt	flic
     4                           	psect	idataBANK1,global,class=CODE,delta=2
     5                           	psect	stringtext1,global,class=STRCODE,delta=2
     6                           	psect	stringtext2,global,class=STRCODE,delta=2
     7                           	psect	stringtext3,global,class=STRCODE,delta=2
     8                           	psect	stringtext4,global,class=STRCODE,delta=2
     9                           	psect	stringtext5,global,class=STRCODE,delta=2
    10                           	psect	stringtext6,global,class=STRCODE,delta=2
    11                           	psect	stringtext7,global,class=STRCODE,delta=2
    12                           	psect	stringtext8,global,class=STRCODE,delta=2
    13                           	psect	stringtext9,global,class=STRCODE,delta=2
    14                           	psect	cinit,global,class=CODE,merge=1,delta=2
    15                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    16                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    17                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
    18                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    19                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    20                           	psect	inittext,global,class=CODE,delta=2
    21                           	psect	clrtext,global,class=CODE,delta=2
    22                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    23                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    24                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    25                           	psect	text1,local,class=CODE,merge=1,delta=2
    26                           	psect	text2,local,class=CODE,merge=1,delta=2
    27                           	psect	text3,local,class=CODE,merge=1,delta=2
    28                           	psect	text4,local,class=CODE,merge=1,delta=2
    29                           	psect	text5,local,class=CODE,merge=1,delta=2
    30                           	psect	text6,local,class=CODE,merge=1,delta=2
    31                           	psect	text7,local,class=CODE,merge=1,delta=2
    32                           	psect	text8,local,class=CODE,merge=1,delta=2
    33                           	psect	text9,local,class=CODE,merge=1,delta=2
    34                           	psect	text10,local,class=CODE,merge=1,delta=2
    35                           	psect	text11,local,class=CODE,merge=1,delta=2
    36                           	psect	text12,local,class=CODE,merge=1,delta=2
    37                           	psect	text13,local,class=CODE,merge=1,delta=2
    38                           	psect	text14,local,class=CODE,merge=1,delta=2
    39                           	psect	text15,local,class=CODE,merge=1,delta=2
    40                           	psect	text16,local,class=CODE,merge=1,delta=2
    41                           	psect	text17,local,class=CODE,merge=1,delta=2
    42                           	psect	text18,local,class=CODE,merge=1,delta=2
    43                           	psect	text19,local,class=CODE,merge=1,delta=2
    44                           	psect	text20,local,class=CODE,merge=1,delta=2
    45                           	psect	text21,local,class=CODE,merge=1,delta=2
    46                           	psect	text22,local,class=CODE,merge=1,delta=2
    47                           	psect	text23,local,class=CODE,merge=1,delta=2
    48                           	psect	text24,local,class=CODE,merge=1,delta=2
    49                           	psect	text25,local,class=CODE,merge=1,delta=2
    50                           	psect	text26,local,class=CODE,merge=1,delta=2
    51                           	psect	text27,local,class=CODE,merge=1,delta=2
    52                           	psect	text28,local,class=CODE,merge=1,inline,delta=2
    53                           	psect	text29,local,class=CODE,merge=1,delta=2
    54                           	psect	text30,local,class=CODE,merge=1,delta=2
    55                           	psect	text31,local,class=CODE,merge=1,inline,delta=2
    56                           	psect	text32,local,class=CODE,merge=1,inline,delta=2
    57                           	psect	text33,local,class=CODE,merge=1,delta=2
    58                           	psect	text34,local,class=CODE,merge=1,delta=2
    59                           	psect	text35,local,class=CODE,merge=1,delta=2
    60                           	psect	text36,local,class=CODE,merge=1,delta=2
    61                           	psect	text37,local,class=CODE,merge=1,delta=2
    62                           	psect	text38,local,class=CODE,merge=1,inline,delta=2
    63                           	psect	text39,local,class=CODE,merge=1,inline,delta=2
    64                           	psect	text40,local,class=CODE,merge=1,delta=2
    65                           	psect	text41,local,class=CODE,merge=1,delta=2
    66                           	psect	text42,local,class=CODE,merge=1,delta=2
    67                           	psect	text43,local,class=CODE,merge=1,delta=2
    68                           	psect	text44,local,class=CODE,merge=1,delta=2
    69                           	psect	text45,local,class=CODE,merge=1,delta=2,group=2
    70                           	psect	text46,local,class=CODE,merge=1,delta=2
    71                           	psect	text47,local,class=CODE,merge=1,delta=2
    72                           	psect	text48,local,class=CODE,merge=1,delta=2
    73                           	psect	text49,local,class=CODE,merge=1,delta=2
    74                           	psect	text50,local,class=CODE,merge=1,delta=2
    75                           	psect	text51,local,class=CODE,merge=1,delta=2
    76                           	psect	text52,local,class=CODE,merge=1,delta=2
    77                           	psect	text53,local,class=CODE,merge=1,delta=2
    78                           	psect	text54,local,class=CODE,merge=1,delta=2
    79                           	psect	text55,local,class=CODE,merge=1,delta=2
    80                           	psect	text56,local,class=CODE,merge=1,delta=2
    81                           	psect	text57,local,class=CODE,merge=1,delta=2
    82                           	psect	text58,local,class=CODE,merge=1,delta=2
    83                           	psect	text59,local,class=CODE,merge=1,delta=2
    84                           	psect	text60,local,class=CODE,merge=1,delta=2
    85                           	psect	text61,local,class=CODE,merge=1,delta=2
    86                           	psect	text62,local,class=CODE,merge=1,delta=2,group=1
    87                           	psect	text63,local,class=CODE,merge=1,delta=2
    88                           	psect	text64,local,class=CODE,merge=1,delta=2
    89                           	psect	text65,local,class=CODE,merge=1,delta=2
    90                           	psect	text66,local,class=CODE,merge=1,delta=2
    91                           	psect	text67,local,class=CODE,merge=1,delta=2
    92                           	psect	text68,local,class=CODE,merge=1,delta=2
    93                           	psect	text69,local,class=CODE,merge=1,delta=2
    94                           	psect	intentry,global,class=CODE,delta=2
    95                           	psect	text71,local,class=CODE,merge=1,delta=2
    96                           	psect	text72,local,class=CODE,merge=1,delta=2
    97                           	psect	text73,local,class=CODE,merge=1,delta=2
    98                           	psect	text74,local,class=CODE,merge=1,delta=2
    99                           	psect	text75,local,class=CODE,merge=1,delta=2
   100                           	psect	text76,local,class=CODE,merge=1,delta=2
   101                           	psect	text77,local,class=CODE,merge=1,delta=2
   102                           	psect	text78,local,class=CODE,merge=1,delta=2
   103                           	psect	text79,local,class=CODE,merge=1,delta=2
   104                           	psect	text80,local,class=CODE,merge=1,delta=2
   105                           	psect	text81,local,class=CODE,merge=1,delta=2
   106                           	psect	text82,local,class=CODE,merge=1,inline,delta=2
   107                           	psect	text83,local,class=CODE,merge=1,delta=2
   108                           	psect	text84,local,class=CODE,merge=1,inline,delta=2
   109                           	psect	text85,local,class=CODE,merge=1,delta=2
   110                           	psect	text86,local,class=CODE,merge=1,delta=2
   111                           	psect	text87,local,class=CODE,merge=1,delta=2
   112                           	psect	text88,local,class=CODE,merge=1,delta=2
   113                           	psect	text89,local,class=CODE,merge=1,inline,delta=2
   114                           	psect	text90,local,class=CODE,merge=1,delta=2
   115                           	psect	text91,local,class=CODE,merge=1,delta=2
   116                           	psect	text92,local,class=CODE,merge=1,inline,delta=2
   117                           	psect	text93,local,class=CODE,merge=1,inline,delta=2
   118                           	psect	text94,local,class=CODE,merge=1,inline,delta=2
   119                           	dabs	1,0x7E,2
   120  0000                     
   121                           ; Version 2.05
   122                           ; Generated 20/12/2018 GMT
   123                           ; 
   124                           ; Copyright Â© 2018, Microchip Technology Inc. and its subsidiaries ("Microchip")
   125                           ; All rights reserved.
   126                           ; 
   127                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
   128                           ; 
   129                           ; Redistribution and use in source and binary forms, with or without modification, are
   130                           ; permitted provided that the following conditions are met:
   131                           ; 
   132                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   133                           ;        conditions and the following disclaimer.
   134                           ; 
   135                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   136                           ;        of conditions and the following disclaimer in the documentation and/or other
   137                           ;        materials provided with the distribution.
   138                           ; 
   139                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   140                           ;        software without specific prior written permission.
   141                           ; 
   142                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   143                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   144                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   145                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   146                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   147                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   148                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   149                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   150                           ; 
   151                           ; 
   152                           ; Code-generator required, PIC16F18856 Definitions
   153                           ; 
   154                           ; SFR Addresses
   155  0000                     	;# 
   156  0001                     	;# 
   157  0002                     	;# 
   158  0003                     	;# 
   159  0004                     	;# 
   160  0005                     	;# 
   161  0006                     	;# 
   162  0007                     	;# 
   163  0008                     	;# 
   164  0009                     	;# 
   165  000A                     	;# 
   166  000B                     	;# 
   167  000C                     	;# 
   168  000D                     	;# 
   169  000E                     	;# 
   170  0010                     	;# 
   171  0011                     	;# 
   172  0012                     	;# 
   173  0013                     	;# 
   174  0016                     	;# 
   175  0017                     	;# 
   176  0018                     	;# 
   177  001C                     	;# 
   178  001C                     	;# 
   179  001D                     	;# 
   180  001D                     	;# 
   181  001E                     	;# 
   182  001F                     	;# 
   183  008C                     	;# 
   184  008C                     	;# 
   185  008D                     	;# 
   186  008E                     	;# 
   187  008E                     	;# 
   188  008F                     	;# 
   189  0090                     	;# 
   190  0090                     	;# 
   191  0091                     	;# 
   192  0093                     	;# 
   193  0094                     	;# 
   194  0095                     	;# 
   195  0096                     	;# 
   196  0097                     	;# 
   197  0098                     	;# 
   198  0099                     	;# 
   199  009A                     	;# 
   200  009B                     	;# 
   201  009C                     	;# 
   202  009D                     	;# 
   203  009E                     	;# 
   204  010C                     	;# 
   205  010D                     	;# 
   206  010E                     	;# 
   207  010E                     	;# 
   208  010F                     	;# 
   209  0110                     	;# 
   210  0110                     	;# 
   211  0111                     	;# 
   212  0112                     	;# 
   213  0112                     	;# 
   214  0113                     	;# 
   215  0114                     	;# 
   216  0114                     	;# 
   217  0115                     	;# 
   218  0116                     	;# 
   219  0116                     	;# 
   220  0117                     	;# 
   221  0119                     	;# 
   222  0119                     	;# 
   223  0119                     	;# 
   224  011A                     	;# 
   225  011A                     	;# 
   226  011A                     	;# 
   227  011B                     	;# 
   228  011B                     	;# 
   229  011B                     	;# 
   230  011B                     	;# 
   231  011B                     	;# 
   232  011C                     	;# 
   233  011C                     	;# 
   234  011C                     	;# 
   235  011D                     	;# 
   236  011D                     	;# 
   237  011D                     	;# 
   238  011E                     	;# 
   239  011E                     	;# 
   240  011E                     	;# 
   241  011F                     	;# 
   242  011F                     	;# 
   243  011F                     	;# 
   244  011F                     	;# 
   245  011F                     	;# 
   246  018C                     	;# 
   247  018D                     	;# 
   248  018E                     	;# 
   249  018F                     	;# 
   250  0190                     	;# 
   251  0191                     	;# 
   252  0192                     	;# 
   253  0196                     	;# 
   254  0197                     	;# 
   255  0198                     	;# 
   256  0199                     	;# 
   257  019A                     	;# 
   258  019B                     	;# 
   259  019C                     	;# 
   260  020C                     	;# 
   261  020C                     	;# 
   262  020D                     	;# 
   263  020E                     	;# 
   264  020F                     	;# 
   265  020F                     	;# 
   266  0210                     	;# 
   267  0210                     	;# 
   268  0211                     	;# 
   269  0211                     	;# 
   270  0212                     	;# 
   271  0212                     	;# 
   272  0213                     	;# 
   273  0214                     	;# 
   274  0215                     	;# 
   275  0215                     	;# 
   276  0216                     	;# 
   277  0216                     	;# 
   278  0217                     	;# 
   279  0217                     	;# 
   280  0218                     	;# 
   281  0218                     	;# 
   282  0219                     	;# 
   283  021A                     	;# 
   284  021B                     	;# 
   285  021B                     	;# 
   286  021C                     	;# 
   287  021C                     	;# 
   288  021D                     	;# 
   289  021D                     	;# 
   290  021E                     	;# 
   291  021F                     	;# 
   292  028C                     	;# 
   293  028C                     	;# 
   294  028D                     	;# 
   295  028D                     	;# 
   296  028E                     	;# 
   297  028F                     	;# 
   298  0290                     	;# 
   299  0290                     	;# 
   300  0291                     	;# 
   301  0292                     	;# 
   302  0292                     	;# 
   303  0293                     	;# 
   304  0293                     	;# 
   305  0294                     	;# 
   306  0295                     	;# 
   307  0296                     	;# 
   308  0296                     	;# 
   309  0297                     	;# 
   310  0298                     	;# 
   311  0298                     	;# 
   312  0299                     	;# 
   313  0299                     	;# 
   314  029A                     	;# 
   315  029B                     	;# 
   316  029C                     	;# 
   317  029C                     	;# 
   318  029D                     	;# 
   319  030C                     	;# 
   320  030C                     	;# 
   321  030D                     	;# 
   322  030E                     	;# 
   323  030F                     	;# 
   324  0310                     	;# 
   325  0310                     	;# 
   326  0311                     	;# 
   327  0312                     	;# 
   328  0313                     	;# 
   329  0314                     	;# 
   330  0314                     	;# 
   331  0315                     	;# 
   332  0316                     	;# 
   333  0317                     	;# 
   334  0318                     	;# 
   335  0318                     	;# 
   336  0319                     	;# 
   337  031A                     	;# 
   338  031B                     	;# 
   339  031C                     	;# 
   340  031C                     	;# 
   341  031D                     	;# 
   342  031E                     	;# 
   343  031F                     	;# 
   344  038C                     	;# 
   345  038C                     	;# 
   346  038D                     	;# 
   347  038E                     	;# 
   348  0390                     	;# 
   349  0390                     	;# 
   350  0391                     	;# 
   351  0392                     	;# 
   352  040C                     	;# 
   353  040D                     	;# 
   354  040E                     	;# 
   355  040F                     	;# 
   356  0410                     	;# 
   357  0411                     	;# 
   358  0416                     	;# 
   359  0416                     	;# 
   360  0417                     	;# 
   361  0418                     	;# 
   362  0418                     	;# 
   363  0419                     	;# 
   364  041A                     	;# 
   365  041A                     	;# 
   366  041B                     	;# 
   367  041C                     	;# 
   368  041C                     	;# 
   369  041D                     	;# 
   370  041E                     	;# 
   371  041F                     	;# 
   372  048C                     	;# 
   373  048C                     	;# 
   374  048D                     	;# 
   375  048E                     	;# 
   376  048F                     	;# 
   377  048F                     	;# 
   378  0490                     	;# 
   379  0491                     	;# 
   380  0492                     	;# 
   381  0492                     	;# 
   382  0493                     	;# 
   383  0494                     	;# 
   384  0495                     	;# 
   385  0495                     	;# 
   386  0496                     	;# 
   387  0497                     	;# 
   388  0498                     	;# 
   389  0499                     	;# 
   390  049A                     	;# 
   391  049B                     	;# 
   392  049C                     	;# 
   393  049D                     	;# 
   394  050C                     	;# 
   395  050C                     	;# 
   396  050D                     	;# 
   397  050E                     	;# 
   398  050F                     	;# 
   399  050F                     	;# 
   400  0510                     	;# 
   401  0511                     	;# 
   402  0512                     	;# 
   403  0512                     	;# 
   404  0513                     	;# 
   405  0514                     	;# 
   406  0515                     	;# 
   407  0515                     	;# 
   408  0516                     	;# 
   409  0517                     	;# 
   410  0518                     	;# 
   411  0519                     	;# 
   412  051A                     	;# 
   413  051B                     	;# 
   414  051C                     	;# 
   415  051D                     	;# 
   416  058C                     	;# 
   417  058C                     	;# 
   418  058D                     	;# 
   419  058E                     	;# 
   420  058F                     	;# 
   421  058F                     	;# 
   422  0590                     	;# 
   423  0591                     	;# 
   424  0592                     	;# 
   425  0593                     	;# 
   426  060C                     	;# 
   427  060D                     	;# 
   428  060E                     	;# 
   429  060F                     	;# 
   430  0610                     	;# 
   431  0611                     	;# 
   432  0612                     	;# 
   433  0613                     	;# 
   434  0614                     	;# 
   435  0616                     	;# 
   436  0617                     	;# 
   437  0618                     	;# 
   438  0619                     	;# 
   439  061A                     	;# 
   440  061B                     	;# 
   441  061C                     	;# 
   442  061D                     	;# 
   443  061E                     	;# 
   444  068C                     	;# 
   445  068D                     	;# 
   446  068E                     	;# 
   447  068F                     	;# 
   448  0690                     	;# 
   449  0691                     	;# 
   450  0692                     	;# 
   451  0693                     	;# 
   452  0694                     	;# 
   453  070C                     	;# 
   454  070D                     	;# 
   455  070E                     	;# 
   456  070F                     	;# 
   457  0710                     	;# 
   458  0711                     	;# 
   459  0712                     	;# 
   460  0713                     	;# 
   461  0714                     	;# 
   462  0716                     	;# 
   463  0717                     	;# 
   464  0718                     	;# 
   465  0719                     	;# 
   466  071A                     	;# 
   467  071B                     	;# 
   468  071C                     	;# 
   469  071D                     	;# 
   470  071E                     	;# 
   471  0796                     	;# 
   472  0797                     	;# 
   473  0798                     	;# 
   474  0799                     	;# 
   475  079A                     	;# 
   476  079B                     	;# 
   477  080C                     	;# 
   478  080D                     	;# 
   479  080E                     	;# 
   480  080F                     	;# 
   481  0810                     	;# 
   482  0811                     	;# 
   483  0812                     	;# 
   484  0813                     	;# 
   485  0814                     	;# 
   486  081A                     	;# 
   487  081B                     	;# 
   488  081C                     	;# 
   489  081D                     	;# 
   490  081E                     	;# 
   491  081F                     	;# 
   492  088C                     	;# 
   493  088D                     	;# 
   494  088E                     	;# 
   495  088F                     	;# 
   496  0890                     	;# 
   497  0891                     	;# 
   498  0892                     	;# 
   499  0893                     	;# 
   500  0895                     	;# 
   501  0896                     	;# 
   502  0897                     	;# 
   503  0898                     	;# 
   504  0899                     	;# 
   505  089A                     	;# 
   506  089B                     	;# 
   507  090C                     	;# 
   508  090E                     	;# 
   509  090F                     	;# 
   510  091F                     	;# 
   511  098F                     	;# 
   512  098F                     	;# 
   513  0990                     	;# 
   514  0991                     	;# 
   515  0992                     	;# 
   516  0993                     	;# 
   517  0994                     	;# 
   518  0995                     	;# 
   519  0996                     	;# 
   520  0997                     	;# 
   521  0E0F                     	;# 
   522  0E10                     	;# 
   523  0E11                     	;# 
   524  0E12                     	;# 
   525  0E13                     	;# 
   526  0E14                     	;# 
   527  0E15                     	;# 
   528  0E16                     	;# 
   529  0E17                     	;# 
   530  0E18                     	;# 
   531  0E19                     	;# 
   532  0E1A                     	;# 
   533  0E1B                     	;# 
   534  0E1C                     	;# 
   535  0E1D                     	;# 
   536  0E1E                     	;# 
   537  0E1F                     	;# 
   538  0E20                     	;# 
   539  0E21                     	;# 
   540  0E22                     	;# 
   541  0E23                     	;# 
   542  0E24                     	;# 
   543  0E25                     	;# 
   544  0E26                     	;# 
   545  0E27                     	;# 
   546  0E28                     	;# 
   547  0E29                     	;# 
   548  0E2A                     	;# 
   549  0E2B                     	;# 
   550  0E2C                     	;# 
   551  0E2D                     	;# 
   552  0E2E                     	;# 
   553  0E2F                     	;# 
   554  0E30                     	;# 
   555  0E31                     	;# 
   556  0E32                     	;# 
   557  0E33                     	;# 
   558  0E34                     	;# 
   559  0E35                     	;# 
   560  0E36                     	;# 
   561  0E37                     	;# 
   562  0E8F                     	;# 
   563  0E90                     	;# 
   564  0E91                     	;# 
   565  0E92                     	;# 
   566  0E93                     	;# 
   567  0E94                     	;# 
   568  0E95                     	;# 
   569  0E96                     	;# 
   570  0E97                     	;# 
   571  0E9C                     	;# 
   572  0E9D                     	;# 
   573  0E9E                     	;# 
   574  0EA1                     	;# 
   575  0EA2                     	;# 
   576  0EA3                     	;# 
   577  0EA4                     	;# 
   578  0EA5                     	;# 
   579  0EA9                     	;# 
   580  0EAA                     	;# 
   581  0EAB                     	;# 
   582  0EAC                     	;# 
   583  0EB1                     	;# 
   584  0EB2                     	;# 
   585  0EB3                     	;# 
   586  0EB8                     	;# 
   587  0EB9                     	;# 
   588  0EBA                     	;# 
   589  0EBB                     	;# 
   590  0EBC                     	;# 
   591  0EBD                     	;# 
   592  0EBE                     	;# 
   593  0EC3                     	;# 
   594  0EC5                     	;# 
   595  0EC6                     	;# 
   596  0EC7                     	;# 
   597  0EC8                     	;# 
   598  0EC9                     	;# 
   599  0ECA                     	;# 
   600  0ECB                     	;# 
   601  0ECC                     	;# 
   602  0F10                     	;# 
   603  0F11                     	;# 
   604  0F12                     	;# 
   605  0F13                     	;# 
   606  0F14                     	;# 
   607  0F15                     	;# 
   608  0F16                     	;# 
   609  0F17                     	;# 
   610  0F18                     	;# 
   611  0F19                     	;# 
   612  0F1A                     	;# 
   613  0F1B                     	;# 
   614  0F1C                     	;# 
   615  0F1D                     	;# 
   616  0F1E                     	;# 
   617  0F1F                     	;# 
   618  0F20                     	;# 
   619  0F21                     	;# 
   620  0F22                     	;# 
   621  0F23                     	;# 
   622  0F24                     	;# 
   623  0F25                     	;# 
   624  0F26                     	;# 
   625  0F27                     	;# 
   626  0F38                     	;# 
   627  0F39                     	;# 
   628  0F3A                     	;# 
   629  0F3B                     	;# 
   630  0F3C                     	;# 
   631  0F3D                     	;# 
   632  0F3E                     	;# 
   633  0F3F                     	;# 
   634  0F40                     	;# 
   635  0F41                     	;# 
   636  0F43                     	;# 
   637  0F44                     	;# 
   638  0F45                     	;# 
   639  0F46                     	;# 
   640  0F47                     	;# 
   641  0F48                     	;# 
   642  0F49                     	;# 
   643  0F4A                     	;# 
   644  0F4B                     	;# 
   645  0F4C                     	;# 
   646  0F4E                     	;# 
   647  0F4F                     	;# 
   648  0F50                     	;# 
   649  0F51                     	;# 
   650  0F52                     	;# 
   651  0F53                     	;# 
   652  0F54                     	;# 
   653  0F55                     	;# 
   654  0F56                     	;# 
   655  0F57                     	;# 
   656  0F65                     	;# 
   657  0F68                     	;# 
   658  0F69                     	;# 
   659  0F6A                     	;# 
   660  0F6B                     	;# 
   661  0FE4                     	;# 
   662  0FE5                     	;# 
   663  0FE6                     	;# 
   664  0FE7                     	;# 
   665  0FE8                     	;# 
   666  0FE9                     	;# 
   667  0FEA                     	;# 
   668  0FEB                     	;# 
   669  0FED                     	;# 
   670  0FEE                     	;# 
   671  0FEF                     	;# 
   672  0000                     	;# 
   673  0001                     	;# 
   674  0002                     	;# 
   675  0003                     	;# 
   676  0004                     	;# 
   677  0005                     	;# 
   678  0006                     	;# 
   679  0007                     	;# 
   680  0008                     	;# 
   681  0009                     	;# 
   682  000A                     	;# 
   683  000B                     	;# 
   684  000C                     	;# 
   685  000D                     	;# 
   686  000E                     	;# 
   687  0010                     	;# 
   688  0011                     	;# 
   689  0012                     	;# 
   690  0013                     	;# 
   691  0016                     	;# 
   692  0017                     	;# 
   693  0018                     	;# 
   694  001C                     	;# 
   695  001C                     	;# 
   696  001D                     	;# 
   697  001D                     	;# 
   698  001E                     	;# 
   699  001F                     	;# 
   700  008C                     	;# 
   701  008C                     	;# 
   702  008D                     	;# 
   703  008E                     	;# 
   704  008E                     	;# 
   705  008F                     	;# 
   706  0090                     	;# 
   707  0090                     	;# 
   708  0091                     	;# 
   709  0093                     	;# 
   710  0094                     	;# 
   711  0095                     	;# 
   712  0096                     	;# 
   713  0097                     	;# 
   714  0098                     	;# 
   715  0099                     	;# 
   716  009A                     	;# 
   717  009B                     	;# 
   718  009C                     	;# 
   719  009D                     	;# 
   720  009E                     	;# 
   721  010C                     	;# 
   722  010D                     	;# 
   723  010E                     	;# 
   724  010E                     	;# 
   725  010F                     	;# 
   726  0110                     	;# 
   727  0110                     	;# 
   728  0111                     	;# 
   729  0112                     	;# 
   730  0112                     	;# 
   731  0113                     	;# 
   732  0114                     	;# 
   733  0114                     	;# 
   734  0115                     	;# 
   735  0116                     	;# 
   736  0116                     	;# 
   737  0117                     	;# 
   738  0119                     	;# 
   739  0119                     	;# 
   740  0119                     	;# 
   741  011A                     	;# 
   742  011A                     	;# 
   743  011A                     	;# 
   744  011B                     	;# 
   745  011B                     	;# 
   746  011B                     	;# 
   747  011B                     	;# 
   748  011B                     	;# 
   749  011C                     	;# 
   750  011C                     	;# 
   751  011C                     	;# 
   752  011D                     	;# 
   753  011D                     	;# 
   754  011D                     	;# 
   755  011E                     	;# 
   756  011E                     	;# 
   757  011E                     	;# 
   758  011F                     	;# 
   759  011F                     	;# 
   760  011F                     	;# 
   761  011F                     	;# 
   762  011F                     	;# 
   763  018C                     	;# 
   764  018D                     	;# 
   765  018E                     	;# 
   766  018F                     	;# 
   767  0190                     	;# 
   768  0191                     	;# 
   769  0192                     	;# 
   770  0196                     	;# 
   771  0197                     	;# 
   772  0198                     	;# 
   773  0199                     	;# 
   774  019A                     	;# 
   775  019B                     	;# 
   776  019C                     	;# 
   777  020C                     	;# 
   778  020C                     	;# 
   779  020D                     	;# 
   780  020E                     	;# 
   781  020F                     	;# 
   782  020F                     	;# 
   783  0210                     	;# 
   784  0210                     	;# 
   785  0211                     	;# 
   786  0211                     	;# 
   787  0212                     	;# 
   788  0212                     	;# 
   789  0213                     	;# 
   790  0214                     	;# 
   791  0215                     	;# 
   792  0215                     	;# 
   793  0216                     	;# 
   794  0216                     	;# 
   795  0217                     	;# 
   796  0217                     	;# 
   797  0218                     	;# 
   798  0218                     	;# 
   799  0219                     	;# 
   800  021A                     	;# 
   801  021B                     	;# 
   802  021B                     	;# 
   803  021C                     	;# 
   804  021C                     	;# 
   805  021D                     	;# 
   806  021D                     	;# 
   807  021E                     	;# 
   808  021F                     	;# 
   809  028C                     	;# 
   810  028C                     	;# 
   811  028D                     	;# 
   812  028D                     	;# 
   813  028E                     	;# 
   814  028F                     	;# 
   815  0290                     	;# 
   816  0290                     	;# 
   817  0291                     	;# 
   818  0292                     	;# 
   819  0292                     	;# 
   820  0293                     	;# 
   821  0293                     	;# 
   822  0294                     	;# 
   823  0295                     	;# 
   824  0296                     	;# 
   825  0296                     	;# 
   826  0297                     	;# 
   827  0298                     	;# 
   828  0298                     	;# 
   829  0299                     	;# 
   830  0299                     	;# 
   831  029A                     	;# 
   832  029B                     	;# 
   833  029C                     	;# 
   834  029C                     	;# 
   835  029D                     	;# 
   836  030C                     	;# 
   837  030C                     	;# 
   838  030D                     	;# 
   839  030E                     	;# 
   840  030F                     	;# 
   841  0310                     	;# 
   842  0310                     	;# 
   843  0311                     	;# 
   844  0312                     	;# 
   845  0313                     	;# 
   846  0314                     	;# 
   847  0314                     	;# 
   848  0315                     	;# 
   849  0316                     	;# 
   850  0317                     	;# 
   851  0318                     	;# 
   852  0318                     	;# 
   853  0319                     	;# 
   854  031A                     	;# 
   855  031B                     	;# 
   856  031C                     	;# 
   857  031C                     	;# 
   858  031D                     	;# 
   859  031E                     	;# 
   860  031F                     	;# 
   861  038C                     	;# 
   862  038C                     	;# 
   863  038D                     	;# 
   864  038E                     	;# 
   865  0390                     	;# 
   866  0390                     	;# 
   867  0391                     	;# 
   868  0392                     	;# 
   869  040C                     	;# 
   870  040D                     	;# 
   871  040E                     	;# 
   872  040F                     	;# 
   873  0410                     	;# 
   874  0411                     	;# 
   875  0416                     	;# 
   876  0416                     	;# 
   877  0417                     	;# 
   878  0418                     	;# 
   879  0418                     	;# 
   880  0419                     	;# 
   881  041A                     	;# 
   882  041A                     	;# 
   883  041B                     	;# 
   884  041C                     	;# 
   885  041C                     	;# 
   886  041D                     	;# 
   887  041E                     	;# 
   888  041F                     	;# 
   889  048C                     	;# 
   890  048C                     	;# 
   891  048D                     	;# 
   892  048E                     	;# 
   893  048F                     	;# 
   894  048F                     	;# 
   895  0490                     	;# 
   896  0491                     	;# 
   897  0492                     	;# 
   898  0492                     	;# 
   899  0493                     	;# 
   900  0494                     	;# 
   901  0495                     	;# 
   902  0495                     	;# 
   903  0496                     	;# 
   904  0497                     	;# 
   905  0498                     	;# 
   906  0499                     	;# 
   907  049A                     	;# 
   908  049B                     	;# 
   909  049C                     	;# 
   910  049D                     	;# 
   911  050C                     	;# 
   912  050C                     	;# 
   913  050D                     	;# 
   914  050E                     	;# 
   915  050F                     	;# 
   916  050F                     	;# 
   917  0510                     	;# 
   918  0511                     	;# 
   919  0512                     	;# 
   920  0512                     	;# 
   921  0513                     	;# 
   922  0514                     	;# 
   923  0515                     	;# 
   924  0515                     	;# 
   925  0516                     	;# 
   926  0517                     	;# 
   927  0518                     	;# 
   928  0519                     	;# 
   929  051A                     	;# 
   930  051B                     	;# 
   931  051C                     	;# 
   932  051D                     	;# 
   933  058C                     	;# 
   934  058C                     	;# 
   935  058D                     	;# 
   936  058E                     	;# 
   937  058F                     	;# 
   938  058F                     	;# 
   939  0590                     	;# 
   940  0591                     	;# 
   941  0592                     	;# 
   942  0593                     	;# 
   943  060C                     	;# 
   944  060D                     	;# 
   945  060E                     	;# 
   946  060F                     	;# 
   947  0610                     	;# 
   948  0611                     	;# 
   949  0612                     	;# 
   950  0613                     	;# 
   951  0614                     	;# 
   952  0616                     	;# 
   953  0617                     	;# 
   954  0618                     	;# 
   955  0619                     	;# 
   956  061A                     	;# 
   957  061B                     	;# 
   958  061C                     	;# 
   959  061D                     	;# 
   960  061E                     	;# 
   961  068C                     	;# 
   962  068D                     	;# 
   963  068E                     	;# 
   964  068F                     	;# 
   965  0690                     	;# 
   966  0691                     	;# 
   967  0692                     	;# 
   968  0693                     	;# 
   969  0694                     	;# 
   970  070C                     	;# 
   971  070D                     	;# 
   972  070E                     	;# 
   973  070F                     	;# 
   974  0710                     	;# 
   975  0711                     	;# 
   976  0712                     	;# 
   977  0713                     	;# 
   978  0714                     	;# 
   979  0716                     	;# 
   980  0717                     	;# 
   981  0718                     	;# 
   982  0719                     	;# 
   983  071A                     	;# 
   984  071B                     	;# 
   985  071C                     	;# 
   986  071D                     	;# 
   987  071E                     	;# 
   988  0796                     	;# 
   989  0797                     	;# 
   990  0798                     	;# 
   991  0799                     	;# 
   992  079A                     	;# 
   993  079B                     	;# 
   994  080C                     	;# 
   995  080D                     	;# 
   996  080E                     	;# 
   997  080F                     	;# 
   998  0810                     	;# 
   999  0811                     	;# 
  1000  0812                     	;# 
  1001  0813                     	;# 
  1002  0814                     	;# 
  1003  081A                     	;# 
  1004  081B                     	;# 
  1005  081C                     	;# 
  1006  081D                     	;# 
  1007  081E                     	;# 
  1008  081F                     	;# 
  1009  088C                     	;# 
  1010  088D                     	;# 
  1011  088E                     	;# 
  1012  088F                     	;# 
  1013  0890                     	;# 
  1014  0891                     	;# 
  1015  0892                     	;# 
  1016  0893                     	;# 
  1017  0895                     	;# 
  1018  0896                     	;# 
  1019  0897                     	;# 
  1020  0898                     	;# 
  1021  0899                     	;# 
  1022  089A                     	;# 
  1023  089B                     	;# 
  1024  090C                     	;# 
  1025  090E                     	;# 
  1026  090F                     	;# 
  1027  091F                     	;# 
  1028  098F                     	;# 
  1029  098F                     	;# 
  1030  0990                     	;# 
  1031  0991                     	;# 
  1032  0992                     	;# 
  1033  0993                     	;# 
  1034  0994                     	;# 
  1035  0995                     	;# 
  1036  0996                     	;# 
  1037  0997                     	;# 
  1038  0E0F                     	;# 
  1039  0E10                     	;# 
  1040  0E11                     	;# 
  1041  0E12                     	;# 
  1042  0E13                     	;# 
  1043  0E14                     	;# 
  1044  0E15                     	;# 
  1045  0E16                     	;# 
  1046  0E17                     	;# 
  1047  0E18                     	;# 
  1048  0E19                     	;# 
  1049  0E1A                     	;# 
  1050  0E1B                     	;# 
  1051  0E1C                     	;# 
  1052  0E1D                     	;# 
  1053  0E1E                     	;# 
  1054  0E1F                     	;# 
  1055  0E20                     	;# 
  1056  0E21                     	;# 
  1057  0E22                     	;# 
  1058  0E23                     	;# 
  1059  0E24                     	;# 
  1060  0E25                     	;# 
  1061  0E26                     	;# 
  1062  0E27                     	;# 
  1063  0E28                     	;# 
  1064  0E29                     	;# 
  1065  0E2A                     	;# 
  1066  0E2B                     	;# 
  1067  0E2C                     	;# 
  1068  0E2D                     	;# 
  1069  0E2E                     	;# 
  1070  0E2F                     	;# 
  1071  0E30                     	;# 
  1072  0E31                     	;# 
  1073  0E32                     	;# 
  1074  0E33                     	;# 
  1075  0E34                     	;# 
  1076  0E35                     	;# 
  1077  0E36                     	;# 
  1078  0E37                     	;# 
  1079  0E8F                     	;# 
  1080  0E90                     	;# 
  1081  0E91                     	;# 
  1082  0E92                     	;# 
  1083  0E93                     	;# 
  1084  0E94                     	;# 
  1085  0E95                     	;# 
  1086  0E96                     	;# 
  1087  0E97                     	;# 
  1088  0E9C                     	;# 
  1089  0E9D                     	;# 
  1090  0E9E                     	;# 
  1091  0EA1                     	;# 
  1092  0EA2                     	;# 
  1093  0EA3                     	;# 
  1094  0EA4                     	;# 
  1095  0EA5                     	;# 
  1096  0EA9                     	;# 
  1097  0EAA                     	;# 
  1098  0EAB                     	;# 
  1099  0EAC                     	;# 
  1100  0EB1                     	;# 
  1101  0EB2                     	;# 
  1102  0EB3                     	;# 
  1103  0EB8                     	;# 
  1104  0EB9                     	;# 
  1105  0EBA                     	;# 
  1106  0EBB                     	;# 
  1107  0EBC                     	;# 
  1108  0EBD                     	;# 
  1109  0EBE                     	;# 
  1110  0EC3                     	;# 
  1111  0EC5                     	;# 
  1112  0EC6                     	;# 
  1113  0EC7                     	;# 
  1114  0EC8                     	;# 
  1115  0EC9                     	;# 
  1116  0ECA                     	;# 
  1117  0ECB                     	;# 
  1118  0ECC                     	;# 
  1119  0F10                     	;# 
  1120  0F11                     	;# 
  1121  0F12                     	;# 
  1122  0F13                     	;# 
  1123  0F14                     	;# 
  1124  0F15                     	;# 
  1125  0F16                     	;# 
  1126  0F17                     	;# 
  1127  0F18                     	;# 
  1128  0F19                     	;# 
  1129  0F1A                     	;# 
  1130  0F1B                     	;# 
  1131  0F1C                     	;# 
  1132  0F1D                     	;# 
  1133  0F1E                     	;# 
  1134  0F1F                     	;# 
  1135  0F20                     	;# 
  1136  0F21                     	;# 
  1137  0F22                     	;# 
  1138  0F23                     	;# 
  1139  0F24                     	;# 
  1140  0F25                     	;# 
  1141  0F26                     	;# 
  1142  0F27                     	;# 
  1143  0F38                     	;# 
  1144  0F39                     	;# 
  1145  0F3A                     	;# 
  1146  0F3B                     	;# 
  1147  0F3C                     	;# 
  1148  0F3D                     	;# 
  1149  0F3E                     	;# 
  1150  0F3F                     	;# 
  1151  0F40                     	;# 
  1152  0F41                     	;# 
  1153  0F43                     	;# 
  1154  0F44                     	;# 
  1155  0F45                     	;# 
  1156  0F46                     	;# 
  1157  0F47                     	;# 
  1158  0F48                     	;# 
  1159  0F49                     	;# 
  1160  0F4A                     	;# 
  1161  0F4B                     	;# 
  1162  0F4C                     	;# 
  1163  0F4E                     	;# 
  1164  0F4F                     	;# 
  1165  0F50                     	;# 
  1166  0F51                     	;# 
  1167  0F52                     	;# 
  1168  0F53                     	;# 
  1169  0F54                     	;# 
  1170  0F55                     	;# 
  1171  0F56                     	;# 
  1172  0F57                     	;# 
  1173  0F65                     	;# 
  1174  0F68                     	;# 
  1175  0F69                     	;# 
  1176  0F6A                     	;# 
  1177  0F6B                     	;# 
  1178  0FE4                     	;# 
  1179  0FE5                     	;# 
  1180  0FE6                     	;# 
  1181  0FE7                     	;# 
  1182  0FE8                     	;# 
  1183  0FE9                     	;# 
  1184  0FEA                     	;# 
  1185  0FEB                     	;# 
  1186  0FED                     	;# 
  1187  0FEE                     	;# 
  1188  0FEF                     	;# 
  1189  0000                     	;# 
  1190  0001                     	;# 
  1191  0002                     	;# 
  1192  0003                     	;# 
  1193  0004                     	;# 
  1194  0005                     	;# 
  1195  0006                     	;# 
  1196  0007                     	;# 
  1197  0008                     	;# 
  1198  0009                     	;# 
  1199  000A                     	;# 
  1200  000B                     	;# 
  1201  000C                     	;# 
  1202  000D                     	;# 
  1203  000E                     	;# 
  1204  0010                     	;# 
  1205  0011                     	;# 
  1206  0012                     	;# 
  1207  0013                     	;# 
  1208  0016                     	;# 
  1209  0017                     	;# 
  1210  0018                     	;# 
  1211  001C                     	;# 
  1212  001C                     	;# 
  1213  001D                     	;# 
  1214  001D                     	;# 
  1215  001E                     	;# 
  1216  001F                     	;# 
  1217  008C                     	;# 
  1218  008C                     	;# 
  1219  008D                     	;# 
  1220  008E                     	;# 
  1221  008E                     	;# 
  1222  008F                     	;# 
  1223  0090                     	;# 
  1224  0090                     	;# 
  1225  0091                     	;# 
  1226  0093                     	;# 
  1227  0094                     	;# 
  1228  0095                     	;# 
  1229  0096                     	;# 
  1230  0097                     	;# 
  1231  0098                     	;# 
  1232  0099                     	;# 
  1233  009A                     	;# 
  1234  009B                     	;# 
  1235  009C                     	;# 
  1236  009D                     	;# 
  1237  009E                     	;# 
  1238  010C                     	;# 
  1239  010D                     	;# 
  1240  010E                     	;# 
  1241  010E                     	;# 
  1242  010F                     	;# 
  1243  0110                     	;# 
  1244  0110                     	;# 
  1245  0111                     	;# 
  1246  0112                     	;# 
  1247  0112                     	;# 
  1248  0113                     	;# 
  1249  0114                     	;# 
  1250  0114                     	;# 
  1251  0115                     	;# 
  1252  0116                     	;# 
  1253  0116                     	;# 
  1254  0117                     	;# 
  1255  0119                     	;# 
  1256  0119                     	;# 
  1257  0119                     	;# 
  1258  011A                     	;# 
  1259  011A                     	;# 
  1260  011A                     	;# 
  1261  011B                     	;# 
  1262  011B                     	;# 
  1263  011B                     	;# 
  1264  011B                     	;# 
  1265  011B                     	;# 
  1266  011C                     	;# 
  1267  011C                     	;# 
  1268  011C                     	;# 
  1269  011D                     	;# 
  1270  011D                     	;# 
  1271  011D                     	;# 
  1272  011E                     	;# 
  1273  011E                     	;# 
  1274  011E                     	;# 
  1275  011F                     	;# 
  1276  011F                     	;# 
  1277  011F                     	;# 
  1278  011F                     	;# 
  1279  011F                     	;# 
  1280  018C                     	;# 
  1281  018D                     	;# 
  1282  018E                     	;# 
  1283  018F                     	;# 
  1284  0190                     	;# 
  1285  0191                     	;# 
  1286  0192                     	;# 
  1287  0196                     	;# 
  1288  0197                     	;# 
  1289  0198                     	;# 
  1290  0199                     	;# 
  1291  019A                     	;# 
  1292  019B                     	;# 
  1293  019C                     	;# 
  1294  020C                     	;# 
  1295  020C                     	;# 
  1296  020D                     	;# 
  1297  020E                     	;# 
  1298  020F                     	;# 
  1299  020F                     	;# 
  1300  0210                     	;# 
  1301  0210                     	;# 
  1302  0211                     	;# 
  1303  0211                     	;# 
  1304  0212                     	;# 
  1305  0212                     	;# 
  1306  0213                     	;# 
  1307  0214                     	;# 
  1308  0215                     	;# 
  1309  0215                     	;# 
  1310  0216                     	;# 
  1311  0216                     	;# 
  1312  0217                     	;# 
  1313  0217                     	;# 
  1314  0218                     	;# 
  1315  0218                     	;# 
  1316  0219                     	;# 
  1317  021A                     	;# 
  1318  021B                     	;# 
  1319  021B                     	;# 
  1320  021C                     	;# 
  1321  021C                     	;# 
  1322  021D                     	;# 
  1323  021D                     	;# 
  1324  021E                     	;# 
  1325  021F                     	;# 
  1326  028C                     	;# 
  1327  028C                     	;# 
  1328  028D                     	;# 
  1329  028D                     	;# 
  1330  028E                     	;# 
  1331  028F                     	;# 
  1332  0290                     	;# 
  1333  0290                     	;# 
  1334  0291                     	;# 
  1335  0292                     	;# 
  1336  0292                     	;# 
  1337  0293                     	;# 
  1338  0293                     	;# 
  1339  0294                     	;# 
  1340  0295                     	;# 
  1341  0296                     	;# 
  1342  0296                     	;# 
  1343  0297                     	;# 
  1344  0298                     	;# 
  1345  0298                     	;# 
  1346  0299                     	;# 
  1347  0299                     	;# 
  1348  029A                     	;# 
  1349  029B                     	;# 
  1350  029C                     	;# 
  1351  029C                     	;# 
  1352  029D                     	;# 
  1353  030C                     	;# 
  1354  030C                     	;# 
  1355  030D                     	;# 
  1356  030E                     	;# 
  1357  030F                     	;# 
  1358  0310                     	;# 
  1359  0310                     	;# 
  1360  0311                     	;# 
  1361  0312                     	;# 
  1362  0313                     	;# 
  1363  0314                     	;# 
  1364  0314                     	;# 
  1365  0315                     	;# 
  1366  0316                     	;# 
  1367  0317                     	;# 
  1368  0318                     	;# 
  1369  0318                     	;# 
  1370  0319                     	;# 
  1371  031A                     	;# 
  1372  031B                     	;# 
  1373  031C                     	;# 
  1374  031C                     	;# 
  1375  031D                     	;# 
  1376  031E                     	;# 
  1377  031F                     	;# 
  1378  038C                     	;# 
  1379  038C                     	;# 
  1380  038D                     	;# 
  1381  038E                     	;# 
  1382  0390                     	;# 
  1383  0390                     	;# 
  1384  0391                     	;# 
  1385  0392                     	;# 
  1386  040C                     	;# 
  1387  040D                     	;# 
  1388  040E                     	;# 
  1389  040F                     	;# 
  1390  0410                     	;# 
  1391  0411                     	;# 
  1392  0416                     	;# 
  1393  0416                     	;# 
  1394  0417                     	;# 
  1395  0418                     	;# 
  1396  0418                     	;# 
  1397  0419                     	;# 
  1398  041A                     	;# 
  1399  041A                     	;# 
  1400  041B                     	;# 
  1401  041C                     	;# 
  1402  041C                     	;# 
  1403  041D                     	;# 
  1404  041E                     	;# 
  1405  041F                     	;# 
  1406  048C                     	;# 
  1407  048C                     	;# 
  1408  048D                     	;# 
  1409  048E                     	;# 
  1410  048F                     	;# 
  1411  048F                     	;# 
  1412  0490                     	;# 
  1413  0491                     	;# 
  1414  0492                     	;# 
  1415  0492                     	;# 
  1416  0493                     	;# 
  1417  0494                     	;# 
  1418  0495                     	;# 
  1419  0495                     	;# 
  1420  0496                     	;# 
  1421  0497                     	;# 
  1422  0498                     	;# 
  1423  0499                     	;# 
  1424  049A                     	;# 
  1425  049B                     	;# 
  1426  049C                     	;# 
  1427  049D                     	;# 
  1428  050C                     	;# 
  1429  050C                     	;# 
  1430  050D                     	;# 
  1431  050E                     	;# 
  1432  050F                     	;# 
  1433  050F                     	;# 
  1434  0510                     	;# 
  1435  0511                     	;# 
  1436  0512                     	;# 
  1437  0512                     	;# 
  1438  0513                     	;# 
  1439  0514                     	;# 
  1440  0515                     	;# 
  1441  0515                     	;# 
  1442  0516                     	;# 
  1443  0517                     	;# 
  1444  0518                     	;# 
  1445  0519                     	;# 
  1446  051A                     	;# 
  1447  051B                     	;# 
  1448  051C                     	;# 
  1449  051D                     	;# 
  1450  058C                     	;# 
  1451  058C                     	;# 
  1452  058D                     	;# 
  1453  058E                     	;# 
  1454  058F                     	;# 
  1455  058F                     	;# 
  1456  0590                     	;# 
  1457  0591                     	;# 
  1458  0592                     	;# 
  1459  0593                     	;# 
  1460  060C                     	;# 
  1461  060D                     	;# 
  1462  060E                     	;# 
  1463  060F                     	;# 
  1464  0610                     	;# 
  1465  0611                     	;# 
  1466  0612                     	;# 
  1467  0613                     	;# 
  1468  0614                     	;# 
  1469  0616                     	;# 
  1470  0617                     	;# 
  1471  0618                     	;# 
  1472  0619                     	;# 
  1473  061A                     	;# 
  1474  061B                     	;# 
  1475  061C                     	;# 
  1476  061D                     	;# 
  1477  061E                     	;# 
  1478  068C                     	;# 
  1479  068D                     	;# 
  1480  068E                     	;# 
  1481  068F                     	;# 
  1482  0690                     	;# 
  1483  0691                     	;# 
  1484  0692                     	;# 
  1485  0693                     	;# 
  1486  0694                     	;# 
  1487  070C                     	;# 
  1488  070D                     	;# 
  1489  070E                     	;# 
  1490  070F                     	;# 
  1491  0710                     	;# 
  1492  0711                     	;# 
  1493  0712                     	;# 
  1494  0713                     	;# 
  1495  0714                     	;# 
  1496  0716                     	;# 
  1497  0717                     	;# 
  1498  0718                     	;# 
  1499  0719                     	;# 
  1500  071A                     	;# 
  1501  071B                     	;# 
  1502  071C                     	;# 
  1503  071D                     	;# 
  1504  071E                     	;# 
  1505  0796                     	;# 
  1506  0797                     	;# 
  1507  0798                     	;# 
  1508  0799                     	;# 
  1509  079A                     	;# 
  1510  079B                     	;# 
  1511  080C                     	;# 
  1512  080D                     	;# 
  1513  080E                     	;# 
  1514  080F                     	;# 
  1515  0810                     	;# 
  1516  0811                     	;# 
  1517  0812                     	;# 
  1518  0813                     	;# 
  1519  0814                     	;# 
  1520  081A                     	;# 
  1521  081B                     	;# 
  1522  081C                     	;# 
  1523  081D                     	;# 
  1524  081E                     	;# 
  1525  081F                     	;# 
  1526  088C                     	;# 
  1527  088D                     	;# 
  1528  088E                     	;# 
  1529  088F                     	;# 
  1530  0890                     	;# 
  1531  0891                     	;# 
  1532  0892                     	;# 
  1533  0893                     	;# 
  1534  0895                     	;# 
  1535  0896                     	;# 
  1536  0897                     	;# 
  1537  0898                     	;# 
  1538  0899                     	;# 
  1539  089A                     	;# 
  1540  089B                     	;# 
  1541  090C                     	;# 
  1542  090E                     	;# 
  1543  090F                     	;# 
  1544  091F                     	;# 
  1545  098F                     	;# 
  1546  098F                     	;# 
  1547  0990                     	;# 
  1548  0991                     	;# 
  1549  0992                     	;# 
  1550  0993                     	;# 
  1551  0994                     	;# 
  1552  0995                     	;# 
  1553  0996                     	;# 
  1554  0997                     	;# 
  1555  0E0F                     	;# 
  1556  0E10                     	;# 
  1557  0E11                     	;# 
  1558  0E12                     	;# 
  1559  0E13                     	;# 
  1560  0E14                     	;# 
  1561  0E15                     	;# 
  1562  0E16                     	;# 
  1563  0E17                     	;# 
  1564  0E18                     	;# 
  1565  0E19                     	;# 
  1566  0E1A                     	;# 
  1567  0E1B                     	;# 
  1568  0E1C                     	;# 
  1569  0E1D                     	;# 
  1570  0E1E                     	;# 
  1571  0E1F                     	;# 
  1572  0E20                     	;# 
  1573  0E21                     	;# 
  1574  0E22                     	;# 
  1575  0E23                     	;# 
  1576  0E24                     	;# 
  1577  0E25                     	;# 
  1578  0E26                     	;# 
  1579  0E27                     	;# 
  1580  0E28                     	;# 
  1581  0E29                     	;# 
  1582  0E2A                     	;# 
  1583  0E2B                     	;# 
  1584  0E2C                     	;# 
  1585  0E2D                     	;# 
  1586  0E2E                     	;# 
  1587  0E2F                     	;# 
  1588  0E30                     	;# 
  1589  0E31                     	;# 
  1590  0E32                     	;# 
  1591  0E33                     	;# 
  1592  0E34                     	;# 
  1593  0E35                     	;# 
  1594  0E36                     	;# 
  1595  0E37                     	;# 
  1596  0E8F                     	;# 
  1597  0E90                     	;# 
  1598  0E91                     	;# 
  1599  0E92                     	;# 
  1600  0E93                     	;# 
  1601  0E94                     	;# 
  1602  0E95                     	;# 
  1603  0E96                     	;# 
  1604  0E97                     	;# 
  1605  0E9C                     	;# 
  1606  0E9D                     	;# 
  1607  0E9E                     	;# 
  1608  0EA1                     	;# 
  1609  0EA2                     	;# 
  1610  0EA3                     	;# 
  1611  0EA4                     	;# 
  1612  0EA5                     	;# 
  1613  0EA9                     	;# 
  1614  0EAA                     	;# 
  1615  0EAB                     	;# 
  1616  0EAC                     	;# 
  1617  0EB1                     	;# 
  1618  0EB2                     	;# 
  1619  0EB3                     	;# 
  1620  0EB8                     	;# 
  1621  0EB9                     	;# 
  1622  0EBA                     	;# 
  1623  0EBB                     	;# 
  1624  0EBC                     	;# 
  1625  0EBD                     	;# 
  1626  0EBE                     	;# 
  1627  0EC3                     	;# 
  1628  0EC5                     	;# 
  1629  0EC6                     	;# 
  1630  0EC7                     	;# 
  1631  0EC8                     	;# 
  1632  0EC9                     	;# 
  1633  0ECA                     	;# 
  1634  0ECB                     	;# 
  1635  0ECC                     	;# 
  1636  0F10                     	;# 
  1637  0F11                     	;# 
  1638  0F12                     	;# 
  1639  0F13                     	;# 
  1640  0F14                     	;# 
  1641  0F15                     	;# 
  1642  0F16                     	;# 
  1643  0F17                     	;# 
  1644  0F18                     	;# 
  1645  0F19                     	;# 
  1646  0F1A                     	;# 
  1647  0F1B                     	;# 
  1648  0F1C                     	;# 
  1649  0F1D                     	;# 
  1650  0F1E                     	;# 
  1651  0F1F                     	;# 
  1652  0F20                     	;# 
  1653  0F21                     	;# 
  1654  0F22                     	;# 
  1655  0F23                     	;# 
  1656  0F24                     	;# 
  1657  0F25                     	;# 
  1658  0F26                     	;# 
  1659  0F27                     	;# 
  1660  0F38                     	;# 
  1661  0F39                     	;# 
  1662  0F3A                     	;# 
  1663  0F3B                     	;# 
  1664  0F3C                     	;# 
  1665  0F3D                     	;# 
  1666  0F3E                     	;# 
  1667  0F3F                     	;# 
  1668  0F40                     	;# 
  1669  0F41                     	;# 
  1670  0F43                     	;# 
  1671  0F44                     	;# 
  1672  0F45                     	;# 
  1673  0F46                     	;# 
  1674  0F47                     	;# 
  1675  0F48                     	;# 
  1676  0F49                     	;# 
  1677  0F4A                     	;# 
  1678  0F4B                     	;# 
  1679  0F4C                     	;# 
  1680  0F4E                     	;# 
  1681  0F4F                     	;# 
  1682  0F50                     	;# 
  1683  0F51                     	;# 
  1684  0F52                     	;# 
  1685  0F53                     	;# 
  1686  0F54                     	;# 
  1687  0F55                     	;# 
  1688  0F56                     	;# 
  1689  0F57                     	;# 
  1690  0F65                     	;# 
  1691  0F68                     	;# 
  1692  0F69                     	;# 
  1693  0F6A                     	;# 
  1694  0F6B                     	;# 
  1695  0FE4                     	;# 
  1696  0FE5                     	;# 
  1697  0FE6                     	;# 
  1698  0FE7                     	;# 
  1699  0FE8                     	;# 
  1700  0FE9                     	;# 
  1701  0FEA                     	;# 
  1702  0FEB                     	;# 
  1703  0FED                     	;# 
  1704  0FEE                     	;# 
  1705  0FEF                     	;# 
  1706  0000                     	;# 
  1707  0001                     	;# 
  1708  0002                     	;# 
  1709  0003                     	;# 
  1710  0004                     	;# 
  1711  0005                     	;# 
  1712  0006                     	;# 
  1713  0007                     	;# 
  1714  0008                     	;# 
  1715  0009                     	;# 
  1716  000A                     	;# 
  1717  000B                     	;# 
  1718  000C                     	;# 
  1719  000D                     	;# 
  1720  000E                     	;# 
  1721  0010                     	;# 
  1722  0011                     	;# 
  1723  0012                     	;# 
  1724  0013                     	;# 
  1725  0016                     	;# 
  1726  0017                     	;# 
  1727  0018                     	;# 
  1728  001C                     	;# 
  1729  001C                     	;# 
  1730  001D                     	;# 
  1731  001D                     	;# 
  1732  001E                     	;# 
  1733  001F                     	;# 
  1734  008C                     	;# 
  1735  008C                     	;# 
  1736  008D                     	;# 
  1737  008E                     	;# 
  1738  008E                     	;# 
  1739  008F                     	;# 
  1740  0090                     	;# 
  1741  0090                     	;# 
  1742  0091                     	;# 
  1743  0093                     	;# 
  1744  0094                     	;# 
  1745  0095                     	;# 
  1746  0096                     	;# 
  1747  0097                     	;# 
  1748  0098                     	;# 
  1749  0099                     	;# 
  1750  009A                     	;# 
  1751  009B                     	;# 
  1752  009C                     	;# 
  1753  009D                     	;# 
  1754  009E                     	;# 
  1755  010C                     	;# 
  1756  010D                     	;# 
  1757  010E                     	;# 
  1758  010E                     	;# 
  1759  010F                     	;# 
  1760  0110                     	;# 
  1761  0110                     	;# 
  1762  0111                     	;# 
  1763  0112                     	;# 
  1764  0112                     	;# 
  1765  0113                     	;# 
  1766  0114                     	;# 
  1767  0114                     	;# 
  1768  0115                     	;# 
  1769  0116                     	;# 
  1770  0116                     	;# 
  1771  0117                     	;# 
  1772  0119                     	;# 
  1773  0119                     	;# 
  1774  0119                     	;# 
  1775  011A                     	;# 
  1776  011A                     	;# 
  1777  011A                     	;# 
  1778  011B                     	;# 
  1779  011B                     	;# 
  1780  011B                     	;# 
  1781  011B                     	;# 
  1782  011B                     	;# 
  1783  011C                     	;# 
  1784  011C                     	;# 
  1785  011C                     	;# 
  1786  011D                     	;# 
  1787  011D                     	;# 
  1788  011D                     	;# 
  1789  011E                     	;# 
  1790  011E                     	;# 
  1791  011E                     	;# 
  1792  011F                     	;# 
  1793  011F                     	;# 
  1794  011F                     	;# 
  1795  011F                     	;# 
  1796  011F                     	;# 
  1797  018C                     	;# 
  1798  018D                     	;# 
  1799  018E                     	;# 
  1800  018F                     	;# 
  1801  0190                     	;# 
  1802  0191                     	;# 
  1803  0192                     	;# 
  1804  0196                     	;# 
  1805  0197                     	;# 
  1806  0198                     	;# 
  1807  0199                     	;# 
  1808  019A                     	;# 
  1809  019B                     	;# 
  1810  019C                     	;# 
  1811  020C                     	;# 
  1812  020C                     	;# 
  1813  020D                     	;# 
  1814  020E                     	;# 
  1815  020F                     	;# 
  1816  020F                     	;# 
  1817  0210                     	;# 
  1818  0210                     	;# 
  1819  0211                     	;# 
  1820  0211                     	;# 
  1821  0212                     	;# 
  1822  0212                     	;# 
  1823  0213                     	;# 
  1824  0214                     	;# 
  1825  0215                     	;# 
  1826  0215                     	;# 
  1827  0216                     	;# 
  1828  0216                     	;# 
  1829  0217                     	;# 
  1830  0217                     	;# 
  1831  0218                     	;# 
  1832  0218                     	;# 
  1833  0219                     	;# 
  1834  021A                     	;# 
  1835  021B                     	;# 
  1836  021B                     	;# 
  1837  021C                     	;# 
  1838  021C                     	;# 
  1839  021D                     	;# 
  1840  021D                     	;# 
  1841  021E                     	;# 
  1842  021F                     	;# 
  1843  028C                     	;# 
  1844  028C                     	;# 
  1845  028D                     	;# 
  1846  028D                     	;# 
  1847  028E                     	;# 
  1848  028F                     	;# 
  1849  0290                     	;# 
  1850  0290                     	;# 
  1851  0291                     	;# 
  1852  0292                     	;# 
  1853  0292                     	;# 
  1854  0293                     	;# 
  1855  0293                     	;# 
  1856  0294                     	;# 
  1857  0295                     	;# 
  1858  0296                     	;# 
  1859  0296                     	;# 
  1860  0297                     	;# 
  1861  0298                     	;# 
  1862  0298                     	;# 
  1863  0299                     	;# 
  1864  0299                     	;# 
  1865  029A                     	;# 
  1866  029B                     	;# 
  1867  029C                     	;# 
  1868  029C                     	;# 
  1869  029D                     	;# 
  1870  030C                     	;# 
  1871  030C                     	;# 
  1872  030D                     	;# 
  1873  030E                     	;# 
  1874  030F                     	;# 
  1875  0310                     	;# 
  1876  0310                     	;# 
  1877  0311                     	;# 
  1878  0312                     	;# 
  1879  0313                     	;# 
  1880  0314                     	;# 
  1881  0314                     	;# 
  1882  0315                     	;# 
  1883  0316                     	;# 
  1884  0317                     	;# 
  1885  0318                     	;# 
  1886  0318                     	;# 
  1887  0319                     	;# 
  1888  031A                     	;# 
  1889  031B                     	;# 
  1890  031C                     	;# 
  1891  031C                     	;# 
  1892  031D                     	;# 
  1893  031E                     	;# 
  1894  031F                     	;# 
  1895  038C                     	;# 
  1896  038C                     	;# 
  1897  038D                     	;# 
  1898  038E                     	;# 
  1899  0390                     	;# 
  1900  0390                     	;# 
  1901  0391                     	;# 
  1902  0392                     	;# 
  1903  040C                     	;# 
  1904  040D                     	;# 
  1905  040E                     	;# 
  1906  040F                     	;# 
  1907  0410                     	;# 
  1908  0411                     	;# 
  1909  0416                     	;# 
  1910  0416                     	;# 
  1911  0417                     	;# 
  1912  0418                     	;# 
  1913  0418                     	;# 
  1914  0419                     	;# 
  1915  041A                     	;# 
  1916  041A                     	;# 
  1917  041B                     	;# 
  1918  041C                     	;# 
  1919  041C                     	;# 
  1920  041D                     	;# 
  1921  041E                     	;# 
  1922  041F                     	;# 
  1923  048C                     	;# 
  1924  048C                     	;# 
  1925  048D                     	;# 
  1926  048E                     	;# 
  1927  048F                     	;# 
  1928  048F                     	;# 
  1929  0490                     	;# 
  1930  0491                     	;# 
  1931  0492                     	;# 
  1932  0492                     	;# 
  1933  0493                     	;# 
  1934  0494                     	;# 
  1935  0495                     	;# 
  1936  0495                     	;# 
  1937  0496                     	;# 
  1938  0497                     	;# 
  1939  0498                     	;# 
  1940  0499                     	;# 
  1941  049A                     	;# 
  1942  049B                     	;# 
  1943  049C                     	;# 
  1944  049D                     	;# 
  1945  050C                     	;# 
  1946  050C                     	;# 
  1947  050D                     	;# 
  1948  050E                     	;# 
  1949  050F                     	;# 
  1950  050F                     	;# 
  1951  0510                     	;# 
  1952  0511                     	;# 
  1953  0512                     	;# 
  1954  0512                     	;# 
  1955  0513                     	;# 
  1956  0514                     	;# 
  1957  0515                     	;# 
  1958  0515                     	;# 
  1959  0516                     	;# 
  1960  0517                     	;# 
  1961  0518                     	;# 
  1962  0519                     	;# 
  1963  051A                     	;# 
  1964  051B                     	;# 
  1965  051C                     	;# 
  1966  051D                     	;# 
  1967  058C                     	;# 
  1968  058C                     	;# 
  1969  058D                     	;# 
  1970  058E                     	;# 
  1971  058F                     	;# 
  1972  058F                     	;# 
  1973  0590                     	;# 
  1974  0591                     	;# 
  1975  0592                     	;# 
  1976  0593                     	;# 
  1977  060C                     	;# 
  1978  060D                     	;# 
  1979  060E                     	;# 
  1980  060F                     	;# 
  1981  0610                     	;# 
  1982  0611                     	;# 
  1983  0612                     	;# 
  1984  0613                     	;# 
  1985  0614                     	;# 
  1986  0616                     	;# 
  1987  0617                     	;# 
  1988  0618                     	;# 
  1989  0619                     	;# 
  1990  061A                     	;# 
  1991  061B                     	;# 
  1992  061C                     	;# 
  1993  061D                     	;# 
  1994  061E                     	;# 
  1995  068C                     	;# 
  1996  068D                     	;# 
  1997  068E                     	;# 
  1998  068F                     	;# 
  1999  0690                     	;# 
  2000  0691                     	;# 
  2001  0692                     	;# 
  2002  0693                     	;# 
  2003  0694                     	;# 
  2004  070C                     	;# 
  2005  070D                     	;# 
  2006  070E                     	;# 
  2007  070F                     	;# 
  2008  0710                     	;# 
  2009  0711                     	;# 
  2010  0712                     	;# 
  2011  0713                     	;# 
  2012  0714                     	;# 
  2013  0716                     	;# 
  2014  0717                     	;# 
  2015  0718                     	;# 
  2016  0719                     	;# 
  2017  071A                     	;# 
  2018  071B                     	;# 
  2019  071C                     	;# 
  2020  071D                     	;# 
  2021  071E                     	;# 
  2022  0796                     	;# 
  2023  0797                     	;# 
  2024  0798                     	;# 
  2025  0799                     	;# 
  2026  079A                     	;# 
  2027  079B                     	;# 
  2028  080C                     	;# 
  2029  080D                     	;# 
  2030  080E                     	;# 
  2031  080F                     	;# 
  2032  0810                     	;# 
  2033  0811                     	;# 
  2034  0812                     	;# 
  2035  0813                     	;# 
  2036  0814                     	;# 
  2037  081A                     	;# 
  2038  081B                     	;# 
  2039  081C                     	;# 
  2040  081D                     	;# 
  2041  081E                     	;# 
  2042  081F                     	;# 
  2043  088C                     	;# 
  2044  088D                     	;# 
  2045  088E                     	;# 
  2046  088F                     	;# 
  2047  0890                     	;# 
  2048  0891                     	;# 
  2049  0892                     	;# 
  2050  0893                     	;# 
  2051  0895                     	;# 
  2052  0896                     	;# 
  2053  0897                     	;# 
  2054  0898                     	;# 
  2055  0899                     	;# 
  2056  089A                     	;# 
  2057  089B                     	;# 
  2058  090C                     	;# 
  2059  090E                     	;# 
  2060  090F                     	;# 
  2061  091F                     	;# 
  2062  098F                     	;# 
  2063  098F                     	;# 
  2064  0990                     	;# 
  2065  0991                     	;# 
  2066  0992                     	;# 
  2067  0993                     	;# 
  2068  0994                     	;# 
  2069  0995                     	;# 
  2070  0996                     	;# 
  2071  0997                     	;# 
  2072  0E0F                     	;# 
  2073  0E10                     	;# 
  2074  0E11                     	;# 
  2075  0E12                     	;# 
  2076  0E13                     	;# 
  2077  0E14                     	;# 
  2078  0E15                     	;# 
  2079  0E16                     	;# 
  2080  0E17                     	;# 
  2081  0E18                     	;# 
  2082  0E19                     	;# 
  2083  0E1A                     	;# 
  2084  0E1B                     	;# 
  2085  0E1C                     	;# 
  2086  0E1D                     	;# 
  2087  0E1E                     	;# 
  2088  0E1F                     	;# 
  2089  0E20                     	;# 
  2090  0E21                     	;# 
  2091  0E22                     	;# 
  2092  0E23                     	;# 
  2093  0E24                     	;# 
  2094  0E25                     	;# 
  2095  0E26                     	;# 
  2096  0E27                     	;# 
  2097  0E28                     	;# 
  2098  0E29                     	;# 
  2099  0E2A                     	;# 
  2100  0E2B                     	;# 
  2101  0E2C                     	;# 
  2102  0E2D                     	;# 
  2103  0E2E                     	;# 
  2104  0E2F                     	;# 
  2105  0E30                     	;# 
  2106  0E31                     	;# 
  2107  0E32                     	;# 
  2108  0E33                     	;# 
  2109  0E34                     	;# 
  2110  0E35                     	;# 
  2111  0E36                     	;# 
  2112  0E37                     	;# 
  2113  0E8F                     	;# 
  2114  0E90                     	;# 
  2115  0E91                     	;# 
  2116  0E92                     	;# 
  2117  0E93                     	;# 
  2118  0E94                     	;# 
  2119  0E95                     	;# 
  2120  0E96                     	;# 
  2121  0E97                     	;# 
  2122  0E9C                     	;# 
  2123  0E9D                     	;# 
  2124  0E9E                     	;# 
  2125  0EA1                     	;# 
  2126  0EA2                     	;# 
  2127  0EA3                     	;# 
  2128  0EA4                     	;# 
  2129  0EA5                     	;# 
  2130  0EA9                     	;# 
  2131  0EAA                     	;# 
  2132  0EAB                     	;# 
  2133  0EAC                     	;# 
  2134  0EB1                     	;# 
  2135  0EB2                     	;# 
  2136  0EB3                     	;# 
  2137  0EB8                     	;# 
  2138  0EB9                     	;# 
  2139  0EBA                     	;# 
  2140  0EBB                     	;# 
  2141  0EBC                     	;# 
  2142  0EBD                     	;# 
  2143  0EBE                     	;# 
  2144  0EC3                     	;# 
  2145  0EC5                     	;# 
  2146  0EC6                     	;# 
  2147  0EC7                     	;# 
  2148  0EC8                     	;# 
  2149  0EC9                     	;# 
  2150  0ECA                     	;# 
  2151  0ECB                     	;# 
  2152  0ECC                     	;# 
  2153  0F10                     	;# 
  2154  0F11                     	;# 
  2155  0F12                     	;# 
  2156  0F13                     	;# 
  2157  0F14                     	;# 
  2158  0F15                     	;# 
  2159  0F16                     	;# 
  2160  0F17                     	;# 
  2161  0F18                     	;# 
  2162  0F19                     	;# 
  2163  0F1A                     	;# 
  2164  0F1B                     	;# 
  2165  0F1C                     	;# 
  2166  0F1D                     	;# 
  2167  0F1E                     	;# 
  2168  0F1F                     	;# 
  2169  0F20                     	;# 
  2170  0F21                     	;# 
  2171  0F22                     	;# 
  2172  0F23                     	;# 
  2173  0F24                     	;# 
  2174  0F25                     	;# 
  2175  0F26                     	;# 
  2176  0F27                     	;# 
  2177  0F38                     	;# 
  2178  0F39                     	;# 
  2179  0F3A                     	;# 
  2180  0F3B                     	;# 
  2181  0F3C                     	;# 
  2182  0F3D                     	;# 
  2183  0F3E                     	;# 
  2184  0F3F                     	;# 
  2185  0F40                     	;# 
  2186  0F41                     	;# 
  2187  0F43                     	;# 
  2188  0F44                     	;# 
  2189  0F45                     	;# 
  2190  0F46                     	;# 
  2191  0F47                     	;# 
  2192  0F48                     	;# 
  2193  0F49                     	;# 
  2194  0F4A                     	;# 
  2195  0F4B                     	;# 
  2196  0F4C                     	;# 
  2197  0F4E                     	;# 
  2198  0F4F                     	;# 
  2199  0F50                     	;# 
  2200  0F51                     	;# 
  2201  0F52                     	;# 
  2202  0F53                     	;# 
  2203  0F54                     	;# 
  2204  0F55                     	;# 
  2205  0F56                     	;# 
  2206  0F57                     	;# 
  2207  0F65                     	;# 
  2208  0F68                     	;# 
  2209  0F69                     	;# 
  2210  0F6A                     	;# 
  2211  0F6B                     	;# 
  2212  0FE4                     	;# 
  2213  0FE5                     	;# 
  2214  0FE6                     	;# 
  2215  0FE7                     	;# 
  2216  0FE8                     	;# 
  2217  0FE9                     	;# 
  2218  0FEA                     	;# 
  2219  0FEB                     	;# 
  2220  0FED                     	;# 
  2221  0FEE                     	;# 
  2222  0FEF                     	;# 
  2223  0000                     	;# 
  2224  0001                     	;# 
  2225  0002                     	;# 
  2226  0003                     	;# 
  2227  0004                     	;# 
  2228  0005                     	;# 
  2229  0006                     	;# 
  2230  0007                     	;# 
  2231  0008                     	;# 
  2232  0009                     	;# 
  2233  000A                     	;# 
  2234  000B                     	;# 
  2235  000C                     	;# 
  2236  000D                     	;# 
  2237  000E                     	;# 
  2238  0010                     	;# 
  2239  0011                     	;# 
  2240  0012                     	;# 
  2241  0013                     	;# 
  2242  0016                     	;# 
  2243  0017                     	;# 
  2244  0018                     	;# 
  2245  001C                     	;# 
  2246  001C                     	;# 
  2247  001D                     	;# 
  2248  001D                     	;# 
  2249  001E                     	;# 
  2250  001F                     	;# 
  2251  008C                     	;# 
  2252  008C                     	;# 
  2253  008D                     	;# 
  2254  008E                     	;# 
  2255  008E                     	;# 
  2256  008F                     	;# 
  2257  0090                     	;# 
  2258  0090                     	;# 
  2259  0091                     	;# 
  2260  0093                     	;# 
  2261  0094                     	;# 
  2262  0095                     	;# 
  2263  0096                     	;# 
  2264  0097                     	;# 
  2265  0098                     	;# 
  2266  0099                     	;# 
  2267  009A                     	;# 
  2268  009B                     	;# 
  2269  009C                     	;# 
  2270  009D                     	;# 
  2271  009E                     	;# 
  2272  010C                     	;# 
  2273  010D                     	;# 
  2274  010E                     	;# 
  2275  010E                     	;# 
  2276  010F                     	;# 
  2277  0110                     	;# 
  2278  0110                     	;# 
  2279  0111                     	;# 
  2280  0112                     	;# 
  2281  0112                     	;# 
  2282  0113                     	;# 
  2283  0114                     	;# 
  2284  0114                     	;# 
  2285  0115                     	;# 
  2286  0116                     	;# 
  2287  0116                     	;# 
  2288  0117                     	;# 
  2289  0119                     	;# 
  2290  0119                     	;# 
  2291  0119                     	;# 
  2292  011A                     	;# 
  2293  011A                     	;# 
  2294  011A                     	;# 
  2295  011B                     	;# 
  2296  011B                     	;# 
  2297  011B                     	;# 
  2298  011B                     	;# 
  2299  011B                     	;# 
  2300  011C                     	;# 
  2301  011C                     	;# 
  2302  011C                     	;# 
  2303  011D                     	;# 
  2304  011D                     	;# 
  2305  011D                     	;# 
  2306  011E                     	;# 
  2307  011E                     	;# 
  2308  011E                     	;# 
  2309  011F                     	;# 
  2310  011F                     	;# 
  2311  011F                     	;# 
  2312  011F                     	;# 
  2313  011F                     	;# 
  2314  018C                     	;# 
  2315  018D                     	;# 
  2316  018E                     	;# 
  2317  018F                     	;# 
  2318  0190                     	;# 
  2319  0191                     	;# 
  2320  0192                     	;# 
  2321  0196                     	;# 
  2322  0197                     	;# 
  2323  0198                     	;# 
  2324  0199                     	;# 
  2325  019A                     	;# 
  2326  019B                     	;# 
  2327  019C                     	;# 
  2328  020C                     	;# 
  2329  020C                     	;# 
  2330  020D                     	;# 
  2331  020E                     	;# 
  2332  020F                     	;# 
  2333  020F                     	;# 
  2334  0210                     	;# 
  2335  0210                     	;# 
  2336  0211                     	;# 
  2337  0211                     	;# 
  2338  0212                     	;# 
  2339  0212                     	;# 
  2340  0213                     	;# 
  2341  0214                     	;# 
  2342  0215                     	;# 
  2343  0215                     	;# 
  2344  0216                     	;# 
  2345  0216                     	;# 
  2346  0217                     	;# 
  2347  0217                     	;# 
  2348  0218                     	;# 
  2349  0218                     	;# 
  2350  0219                     	;# 
  2351  021A                     	;# 
  2352  021B                     	;# 
  2353  021B                     	;# 
  2354  021C                     	;# 
  2355  021C                     	;# 
  2356  021D                     	;# 
  2357  021D                     	;# 
  2358  021E                     	;# 
  2359  021F                     	;# 
  2360  028C                     	;# 
  2361  028C                     	;# 
  2362  028D                     	;# 
  2363  028D                     	;# 
  2364  028E                     	;# 
  2365  028F                     	;# 
  2366  0290                     	;# 
  2367  0290                     	;# 
  2368  0291                     	;# 
  2369  0292                     	;# 
  2370  0292                     	;# 
  2371  0293                     	;# 
  2372  0293                     	;# 
  2373  0294                     	;# 
  2374  0295                     	;# 
  2375  0296                     	;# 
  2376  0296                     	;# 
  2377  0297                     	;# 
  2378  0298                     	;# 
  2379  0298                     	;# 
  2380  0299                     	;# 
  2381  0299                     	;# 
  2382  029A                     	;# 
  2383  029B                     	;# 
  2384  029C                     	;# 
  2385  029C                     	;# 
  2386  029D                     	;# 
  2387  030C                     	;# 
  2388  030C                     	;# 
  2389  030D                     	;# 
  2390  030E                     	;# 
  2391  030F                     	;# 
  2392  0310                     	;# 
  2393  0310                     	;# 
  2394  0311                     	;# 
  2395  0312                     	;# 
  2396  0313                     	;# 
  2397  0314                     	;# 
  2398  0314                     	;# 
  2399  0315                     	;# 
  2400  0316                     	;# 
  2401  0317                     	;# 
  2402  0318                     	;# 
  2403  0318                     	;# 
  2404  0319                     	;# 
  2405  031A                     	;# 
  2406  031B                     	;# 
  2407  031C                     	;# 
  2408  031C                     	;# 
  2409  031D                     	;# 
  2410  031E                     	;# 
  2411  031F                     	;# 
  2412  038C                     	;# 
  2413  038C                     	;# 
  2414  038D                     	;# 
  2415  038E                     	;# 
  2416  0390                     	;# 
  2417  0390                     	;# 
  2418  0391                     	;# 
  2419  0392                     	;# 
  2420  040C                     	;# 
  2421  040D                     	;# 
  2422  040E                     	;# 
  2423  040F                     	;# 
  2424  0410                     	;# 
  2425  0411                     	;# 
  2426  0416                     	;# 
  2427  0416                     	;# 
  2428  0417                     	;# 
  2429  0418                     	;# 
  2430  0418                     	;# 
  2431  0419                     	;# 
  2432  041A                     	;# 
  2433  041A                     	;# 
  2434  041B                     	;# 
  2435  041C                     	;# 
  2436  041C                     	;# 
  2437  041D                     	;# 
  2438  041E                     	;# 
  2439  041F                     	;# 
  2440  048C                     	;# 
  2441  048C                     	;# 
  2442  048D                     	;# 
  2443  048E                     	;# 
  2444  048F                     	;# 
  2445  048F                     	;# 
  2446  0490                     	;# 
  2447  0491                     	;# 
  2448  0492                     	;# 
  2449  0492                     	;# 
  2450  0493                     	;# 
  2451  0494                     	;# 
  2452  0495                     	;# 
  2453  0495                     	;# 
  2454  0496                     	;# 
  2455  0497                     	;# 
  2456  0498                     	;# 
  2457  0499                     	;# 
  2458  049A                     	;# 
  2459  049B                     	;# 
  2460  049C                     	;# 
  2461  049D                     	;# 
  2462  050C                     	;# 
  2463  050C                     	;# 
  2464  050D                     	;# 
  2465  050E                     	;# 
  2466  050F                     	;# 
  2467  050F                     	;# 
  2468  0510                     	;# 
  2469  0511                     	;# 
  2470  0512                     	;# 
  2471  0512                     	;# 
  2472  0513                     	;# 
  2473  0514                     	;# 
  2474  0515                     	;# 
  2475  0515                     	;# 
  2476  0516                     	;# 
  2477  0517                     	;# 
  2478  0518                     	;# 
  2479  0519                     	;# 
  2480  051A                     	;# 
  2481  051B                     	;# 
  2482  051C                     	;# 
  2483  051D                     	;# 
  2484  058C                     	;# 
  2485  058C                     	;# 
  2486  058D                     	;# 
  2487  058E                     	;# 
  2488  058F                     	;# 
  2489  058F                     	;# 
  2490  0590                     	;# 
  2491  0591                     	;# 
  2492  0592                     	;# 
  2493  0593                     	;# 
  2494  060C                     	;# 
  2495  060D                     	;# 
  2496  060E                     	;# 
  2497  060F                     	;# 
  2498  0610                     	;# 
  2499  0611                     	;# 
  2500  0612                     	;# 
  2501  0613                     	;# 
  2502  0614                     	;# 
  2503  0616                     	;# 
  2504  0617                     	;# 
  2505  0618                     	;# 
  2506  0619                     	;# 
  2507  061A                     	;# 
  2508  061B                     	;# 
  2509  061C                     	;# 
  2510  061D                     	;# 
  2511  061E                     	;# 
  2512  068C                     	;# 
  2513  068D                     	;# 
  2514  068E                     	;# 
  2515  068F                     	;# 
  2516  0690                     	;# 
  2517  0691                     	;# 
  2518  0692                     	;# 
  2519  0693                     	;# 
  2520  0694                     	;# 
  2521  070C                     	;# 
  2522  070D                     	;# 
  2523  070E                     	;# 
  2524  070F                     	;# 
  2525  0710                     	;# 
  2526  0711                     	;# 
  2527  0712                     	;# 
  2528  0713                     	;# 
  2529  0714                     	;# 
  2530  0716                     	;# 
  2531  0717                     	;# 
  2532  0718                     	;# 
  2533  0719                     	;# 
  2534  071A                     	;# 
  2535  071B                     	;# 
  2536  071C                     	;# 
  2537  071D                     	;# 
  2538  071E                     	;# 
  2539  0796                     	;# 
  2540  0797                     	;# 
  2541  0798                     	;# 
  2542  0799                     	;# 
  2543  079A                     	;# 
  2544  079B                     	;# 
  2545  080C                     	;# 
  2546  080D                     	;# 
  2547  080E                     	;# 
  2548  080F                     	;# 
  2549  0810                     	;# 
  2550  0811                     	;# 
  2551  0812                     	;# 
  2552  0813                     	;# 
  2553  0814                     	;# 
  2554  081A                     	;# 
  2555  081B                     	;# 
  2556  081C                     	;# 
  2557  081D                     	;# 
  2558  081E                     	;# 
  2559  081F                     	;# 
  2560  088C                     	;# 
  2561  088D                     	;# 
  2562  088E                     	;# 
  2563  088F                     	;# 
  2564  0890                     	;# 
  2565  0891                     	;# 
  2566  0892                     	;# 
  2567  0893                     	;# 
  2568  0895                     	;# 
  2569  0896                     	;# 
  2570  0897                     	;# 
  2571  0898                     	;# 
  2572  0899                     	;# 
  2573  089A                     	;# 
  2574  089B                     	;# 
  2575  090C                     	;# 
  2576  090E                     	;# 
  2577  090F                     	;# 
  2578  091F                     	;# 
  2579  098F                     	;# 
  2580  098F                     	;# 
  2581  0990                     	;# 
  2582  0991                     	;# 
  2583  0992                     	;# 
  2584  0993                     	;# 
  2585  0994                     	;# 
  2586  0995                     	;# 
  2587  0996                     	;# 
  2588  0997                     	;# 
  2589  0E0F                     	;# 
  2590  0E10                     	;# 
  2591  0E11                     	;# 
  2592  0E12                     	;# 
  2593  0E13                     	;# 
  2594  0E14                     	;# 
  2595  0E15                     	;# 
  2596  0E16                     	;# 
  2597  0E17                     	;# 
  2598  0E18                     	;# 
  2599  0E19                     	;# 
  2600  0E1A                     	;# 
  2601  0E1B                     	;# 
  2602  0E1C                     	;# 
  2603  0E1D                     	;# 
  2604  0E1E                     	;# 
  2605  0E1F                     	;# 
  2606  0E20                     	;# 
  2607  0E21                     	;# 
  2608  0E22                     	;# 
  2609  0E23                     	;# 
  2610  0E24                     	;# 
  2611  0E25                     	;# 
  2612  0E26                     	;# 
  2613  0E27                     	;# 
  2614  0E28                     	;# 
  2615  0E29                     	;# 
  2616  0E2A                     	;# 
  2617  0E2B                     	;# 
  2618  0E2C                     	;# 
  2619  0E2D                     	;# 
  2620  0E2E                     	;# 
  2621  0E2F                     	;# 
  2622  0E30                     	;# 
  2623  0E31                     	;# 
  2624  0E32                     	;# 
  2625  0E33                     	;# 
  2626  0E34                     	;# 
  2627  0E35                     	;# 
  2628  0E36                     	;# 
  2629  0E37                     	;# 
  2630  0E8F                     	;# 
  2631  0E90                     	;# 
  2632  0E91                     	;# 
  2633  0E92                     	;# 
  2634  0E93                     	;# 
  2635  0E94                     	;# 
  2636  0E95                     	;# 
  2637  0E96                     	;# 
  2638  0E97                     	;# 
  2639  0E9C                     	;# 
  2640  0E9D                     	;# 
  2641  0E9E                     	;# 
  2642  0EA1                     	;# 
  2643  0EA2                     	;# 
  2644  0EA3                     	;# 
  2645  0EA4                     	;# 
  2646  0EA5                     	;# 
  2647  0EA9                     	;# 
  2648  0EAA                     	;# 
  2649  0EAB                     	;# 
  2650  0EAC                     	;# 
  2651  0EB1                     	;# 
  2652  0EB2                     	;# 
  2653  0EB3                     	;# 
  2654  0EB8                     	;# 
  2655  0EB9                     	;# 
  2656  0EBA                     	;# 
  2657  0EBB                     	;# 
  2658  0EBC                     	;# 
  2659  0EBD                     	;# 
  2660  0EBE                     	;# 
  2661  0EC3                     	;# 
  2662  0EC5                     	;# 
  2663  0EC6                     	;# 
  2664  0EC7                     	;# 
  2665  0EC8                     	;# 
  2666  0EC9                     	;# 
  2667  0ECA                     	;# 
  2668  0ECB                     	;# 
  2669  0ECC                     	;# 
  2670  0F10                     	;# 
  2671  0F11                     	;# 
  2672  0F12                     	;# 
  2673  0F13                     	;# 
  2674  0F14                     	;# 
  2675  0F15                     	;# 
  2676  0F16                     	;# 
  2677  0F17                     	;# 
  2678  0F18                     	;# 
  2679  0F19                     	;# 
  2680  0F1A                     	;# 
  2681  0F1B                     	;# 
  2682  0F1C                     	;# 
  2683  0F1D                     	;# 
  2684  0F1E                     	;# 
  2685  0F1F                     	;# 
  2686  0F20                     	;# 
  2687  0F21                     	;# 
  2688  0F22                     	;# 
  2689  0F23                     	;# 
  2690  0F24                     	;# 
  2691  0F25                     	;# 
  2692  0F26                     	;# 
  2693  0F27                     	;# 
  2694  0F38                     	;# 
  2695  0F39                     	;# 
  2696  0F3A                     	;# 
  2697  0F3B                     	;# 
  2698  0F3C                     	;# 
  2699  0F3D                     	;# 
  2700  0F3E                     	;# 
  2701  0F3F                     	;# 
  2702  0F40                     	;# 
  2703  0F41                     	;# 
  2704  0F43                     	;# 
  2705  0F44                     	;# 
  2706  0F45                     	;# 
  2707  0F46                     	;# 
  2708  0F47                     	;# 
  2709  0F48                     	;# 
  2710  0F49                     	;# 
  2711  0F4A                     	;# 
  2712  0F4B                     	;# 
  2713  0F4C                     	;# 
  2714  0F4E                     	;# 
  2715  0F4F                     	;# 
  2716  0F50                     	;# 
  2717  0F51                     	;# 
  2718  0F52                     	;# 
  2719  0F53                     	;# 
  2720  0F54                     	;# 
  2721  0F55                     	;# 
  2722  0F56                     	;# 
  2723  0F57                     	;# 
  2724  0F65                     	;# 
  2725  0F68                     	;# 
  2726  0F69                     	;# 
  2727  0F6A                     	;# 
  2728  0F6B                     	;# 
  2729  0FE4                     	;# 
  2730  0FE5                     	;# 
  2731  0FE6                     	;# 
  2732  0FE7                     	;# 
  2733  0FE8                     	;# 
  2734  0FE9                     	;# 
  2735  0FEA                     	;# 
  2736  0FEB                     	;# 
  2737  0FED                     	;# 
  2738  0FEE                     	;# 
  2739  0FEF                     	;# 
  2740  0000                     	;# 
  2741  0001                     	;# 
  2742  0002                     	;# 
  2743  0003                     	;# 
  2744  0004                     	;# 
  2745  0005                     	;# 
  2746  0006                     	;# 
  2747  0007                     	;# 
  2748  0008                     	;# 
  2749  0009                     	;# 
  2750  000A                     	;# 
  2751  000B                     	;# 
  2752  000C                     	;# 
  2753  000D                     	;# 
  2754  000E                     	;# 
  2755  0010                     	;# 
  2756  0011                     	;# 
  2757  0012                     	;# 
  2758  0013                     	;# 
  2759  0016                     	;# 
  2760  0017                     	;# 
  2761  0018                     	;# 
  2762  001C                     	;# 
  2763  001C                     	;# 
  2764  001D                     	;# 
  2765  001D                     	;# 
  2766  001E                     	;# 
  2767  001F                     	;# 
  2768  008C                     	;# 
  2769  008C                     	;# 
  2770  008D                     	;# 
  2771  008E                     	;# 
  2772  008E                     	;# 
  2773  008F                     	;# 
  2774  0090                     	;# 
  2775  0090                     	;# 
  2776  0091                     	;# 
  2777  0093                     	;# 
  2778  0094                     	;# 
  2779  0095                     	;# 
  2780  0096                     	;# 
  2781  0097                     	;# 
  2782  0098                     	;# 
  2783  0099                     	;# 
  2784  009A                     	;# 
  2785  009B                     	;# 
  2786  009C                     	;# 
  2787  009D                     	;# 
  2788  009E                     	;# 
  2789  010C                     	;# 
  2790  010D                     	;# 
  2791  010E                     	;# 
  2792  010E                     	;# 
  2793  010F                     	;# 
  2794  0110                     	;# 
  2795  0110                     	;# 
  2796  0111                     	;# 
  2797  0112                     	;# 
  2798  0112                     	;# 
  2799  0113                     	;# 
  2800  0114                     	;# 
  2801  0114                     	;# 
  2802  0115                     	;# 
  2803  0116                     	;# 
  2804  0116                     	;# 
  2805  0117                     	;# 
  2806  0119                     	;# 
  2807  0119                     	;# 
  2808  0119                     	;# 
  2809  011A                     	;# 
  2810  011A                     	;# 
  2811  011A                     	;# 
  2812  011B                     	;# 
  2813  011B                     	;# 
  2814  011B                     	;# 
  2815  011B                     	;# 
  2816  011B                     	;# 
  2817  011C                     	;# 
  2818  011C                     	;# 
  2819  011C                     	;# 
  2820  011D                     	;# 
  2821  011D                     	;# 
  2822  011D                     	;# 
  2823  011E                     	;# 
  2824  011E                     	;# 
  2825  011E                     	;# 
  2826  011F                     	;# 
  2827  011F                     	;# 
  2828  011F                     	;# 
  2829  011F                     	;# 
  2830  011F                     	;# 
  2831  018C                     	;# 
  2832  018D                     	;# 
  2833  018E                     	;# 
  2834  018F                     	;# 
  2835  0190                     	;# 
  2836  0191                     	;# 
  2837  0192                     	;# 
  2838  0196                     	;# 
  2839  0197                     	;# 
  2840  0198                     	;# 
  2841  0199                     	;# 
  2842  019A                     	;# 
  2843  019B                     	;# 
  2844  019C                     	;# 
  2845  020C                     	;# 
  2846  020C                     	;# 
  2847  020D                     	;# 
  2848  020E                     	;# 
  2849  020F                     	;# 
  2850  020F                     	;# 
  2851  0210                     	;# 
  2852  0210                     	;# 
  2853  0211                     	;# 
  2854  0211                     	;# 
  2855  0212                     	;# 
  2856  0212                     	;# 
  2857  0213                     	;# 
  2858  0214                     	;# 
  2859  0215                     	;# 
  2860  0215                     	;# 
  2861  0216                     	;# 
  2862  0216                     	;# 
  2863  0217                     	;# 
  2864  0217                     	;# 
  2865  0218                     	;# 
  2866  0218                     	;# 
  2867  0219                     	;# 
  2868  021A                     	;# 
  2869  021B                     	;# 
  2870  021B                     	;# 
  2871  021C                     	;# 
  2872  021C                     	;# 
  2873  021D                     	;# 
  2874  021D                     	;# 
  2875  021E                     	;# 
  2876  021F                     	;# 
  2877  028C                     	;# 
  2878  028C                     	;# 
  2879  028D                     	;# 
  2880  028D                     	;# 
  2881  028E                     	;# 
  2882  028F                     	;# 
  2883  0290                     	;# 
  2884  0290                     	;# 
  2885  0291                     	;# 
  2886  0292                     	;# 
  2887  0292                     	;# 
  2888  0293                     	;# 
  2889  0293                     	;# 
  2890  0294                     	;# 
  2891  0295                     	;# 
  2892  0296                     	;# 
  2893  0296                     	;# 
  2894  0297                     	;# 
  2895  0298                     	;# 
  2896  0298                     	;# 
  2897  0299                     	;# 
  2898  0299                     	;# 
  2899  029A                     	;# 
  2900  029B                     	;# 
  2901  029C                     	;# 
  2902  029C                     	;# 
  2903  029D                     	;# 
  2904  030C                     	;# 
  2905  030C                     	;# 
  2906  030D                     	;# 
  2907  030E                     	;# 
  2908  030F                     	;# 
  2909  0310                     	;# 
  2910  0310                     	;# 
  2911  0311                     	;# 
  2912  0312                     	;# 
  2913  0313                     	;# 
  2914  0314                     	;# 
  2915  0314                     	;# 
  2916  0315                     	;# 
  2917  0316                     	;# 
  2918  0317                     	;# 
  2919  0318                     	;# 
  2920  0318                     	;# 
  2921  0319                     	;# 
  2922  031A                     	;# 
  2923  031B                     	;# 
  2924  031C                     	;# 
  2925  031C                     	;# 
  2926  031D                     	;# 
  2927  031E                     	;# 
  2928  031F                     	;# 
  2929  038C                     	;# 
  2930  038C                     	;# 
  2931  038D                     	;# 
  2932  038E                     	;# 
  2933  0390                     	;# 
  2934  0390                     	;# 
  2935  0391                     	;# 
  2936  0392                     	;# 
  2937  040C                     	;# 
  2938  040D                     	;# 
  2939  040E                     	;# 
  2940  040F                     	;# 
  2941  0410                     	;# 
  2942  0411                     	;# 
  2943  0416                     	;# 
  2944  0416                     	;# 
  2945  0417                     	;# 
  2946  0418                     	;# 
  2947  0418                     	;# 
  2948  0419                     	;# 
  2949  041A                     	;# 
  2950  041A                     	;# 
  2951  041B                     	;# 
  2952  041C                     	;# 
  2953  041C                     	;# 
  2954  041D                     	;# 
  2955  041E                     	;# 
  2956  041F                     	;# 
  2957  048C                     	;# 
  2958  048C                     	;# 
  2959  048D                     	;# 
  2960  048E                     	;# 
  2961  048F                     	;# 
  2962  048F                     	;# 
  2963  0490                     	;# 
  2964  0491                     	;# 
  2965  0492                     	;# 
  2966  0492                     	;# 
  2967  0493                     	;# 
  2968  0494                     	;# 
  2969  0495                     	;# 
  2970  0495                     	;# 
  2971  0496                     	;# 
  2972  0497                     	;# 
  2973  0498                     	;# 
  2974  0499                     	;# 
  2975  049A                     	;# 
  2976  049B                     	;# 
  2977  049C                     	;# 
  2978  049D                     	;# 
  2979  050C                     	;# 
  2980  050C                     	;# 
  2981  050D                     	;# 
  2982  050E                     	;# 
  2983  050F                     	;# 
  2984  050F                     	;# 
  2985  0510                     	;# 
  2986  0511                     	;# 
  2987  0512                     	;# 
  2988  0512                     	;# 
  2989  0513                     	;# 
  2990  0514                     	;# 
  2991  0515                     	;# 
  2992  0515                     	;# 
  2993  0516                     	;# 
  2994  0517                     	;# 
  2995  0518                     	;# 
  2996  0519                     	;# 
  2997  051A                     	;# 
  2998  051B                     	;# 
  2999  051C                     	;# 
  3000  051D                     	;# 
  3001  058C                     	;# 
  3002  058C                     	;# 
  3003  058D                     	;# 
  3004  058E                     	;# 
  3005  058F                     	;# 
  3006  058F                     	;# 
  3007  0590                     	;# 
  3008  0591                     	;# 
  3009  0592                     	;# 
  3010  0593                     	;# 
  3011  060C                     	;# 
  3012  060D                     	;# 
  3013  060E                     	;# 
  3014  060F                     	;# 
  3015  0610                     	;# 
  3016  0611                     	;# 
  3017  0612                     	;# 
  3018  0613                     	;# 
  3019  0614                     	;# 
  3020  0616                     	;# 
  3021  0617                     	;# 
  3022  0618                     	;# 
  3023  0619                     	;# 
  3024  061A                     	;# 
  3025  061B                     	;# 
  3026  061C                     	;# 
  3027  061D                     	;# 
  3028  061E                     	;# 
  3029  068C                     	;# 
  3030  068D                     	;# 
  3031  068E                     	;# 
  3032  068F                     	;# 
  3033  0690                     	;# 
  3034  0691                     	;# 
  3035  0692                     	;# 
  3036  0693                     	;# 
  3037  0694                     	;# 
  3038  070C                     	;# 
  3039  070D                     	;# 
  3040  070E                     	;# 
  3041  070F                     	;# 
  3042  0710                     	;# 
  3043  0711                     	;# 
  3044  0712                     	;# 
  3045  0713                     	;# 
  3046  0714                     	;# 
  3047  0716                     	;# 
  3048  0717                     	;# 
  3049  0718                     	;# 
  3050  0719                     	;# 
  3051  071A                     	;# 
  3052  071B                     	;# 
  3053  071C                     	;# 
  3054  071D                     	;# 
  3055  071E                     	;# 
  3056  0796                     	;# 
  3057  0797                     	;# 
  3058  0798                     	;# 
  3059  0799                     	;# 
  3060  079A                     	;# 
  3061  079B                     	;# 
  3062  080C                     	;# 
  3063  080D                     	;# 
  3064  080E                     	;# 
  3065  080F                     	;# 
  3066  0810                     	;# 
  3067  0811                     	;# 
  3068  0812                     	;# 
  3069  0813                     	;# 
  3070  0814                     	;# 
  3071  081A                     	;# 
  3072  081B                     	;# 
  3073  081C                     	;# 
  3074  081D                     	;# 
  3075  081E                     	;# 
  3076  081F                     	;# 
  3077  088C                     	;# 
  3078  088D                     	;# 
  3079  088E                     	;# 
  3080  088F                     	;# 
  3081  0890                     	;# 
  3082  0891                     	;# 
  3083  0892                     	;# 
  3084  0893                     	;# 
  3085  0895                     	;# 
  3086  0896                     	;# 
  3087  0897                     	;# 
  3088  0898                     	;# 
  3089  0899                     	;# 
  3090  089A                     	;# 
  3091  089B                     	;# 
  3092  090C                     	;# 
  3093  090E                     	;# 
  3094  090F                     	;# 
  3095  091F                     	;# 
  3096  098F                     	;# 
  3097  098F                     	;# 
  3098  0990                     	;# 
  3099  0991                     	;# 
  3100  0992                     	;# 
  3101  0993                     	;# 
  3102  0994                     	;# 
  3103  0995                     	;# 
  3104  0996                     	;# 
  3105  0997                     	;# 
  3106  0E0F                     	;# 
  3107  0E10                     	;# 
  3108  0E11                     	;# 
  3109  0E12                     	;# 
  3110  0E13                     	;# 
  3111  0E14                     	;# 
  3112  0E15                     	;# 
  3113  0E16                     	;# 
  3114  0E17                     	;# 
  3115  0E18                     	;# 
  3116  0E19                     	;# 
  3117  0E1A                     	;# 
  3118  0E1B                     	;# 
  3119  0E1C                     	;# 
  3120  0E1D                     	;# 
  3121  0E1E                     	;# 
  3122  0E1F                     	;# 
  3123  0E20                     	;# 
  3124  0E21                     	;# 
  3125  0E22                     	;# 
  3126  0E23                     	;# 
  3127  0E24                     	;# 
  3128  0E25                     	;# 
  3129  0E26                     	;# 
  3130  0E27                     	;# 
  3131  0E28                     	;# 
  3132  0E29                     	;# 
  3133  0E2A                     	;# 
  3134  0E2B                     	;# 
  3135  0E2C                     	;# 
  3136  0E2D                     	;# 
  3137  0E2E                     	;# 
  3138  0E2F                     	;# 
  3139  0E30                     	;# 
  3140  0E31                     	;# 
  3141  0E32                     	;# 
  3142  0E33                     	;# 
  3143  0E34                     	;# 
  3144  0E35                     	;# 
  3145  0E36                     	;# 
  3146  0E37                     	;# 
  3147  0E8F                     	;# 
  3148  0E90                     	;# 
  3149  0E91                     	;# 
  3150  0E92                     	;# 
  3151  0E93                     	;# 
  3152  0E94                     	;# 
  3153  0E95                     	;# 
  3154  0E96                     	;# 
  3155  0E97                     	;# 
  3156  0E9C                     	;# 
  3157  0E9D                     	;# 
  3158  0E9E                     	;# 
  3159  0EA1                     	;# 
  3160  0EA2                     	;# 
  3161  0EA3                     	;# 
  3162  0EA4                     	;# 
  3163  0EA5                     	;# 
  3164  0EA9                     	;# 
  3165  0EAA                     	;# 
  3166  0EAB                     	;# 
  3167  0EAC                     	;# 
  3168  0EB1                     	;# 
  3169  0EB2                     	;# 
  3170  0EB3                     	;# 
  3171  0EB8                     	;# 
  3172  0EB9                     	;# 
  3173  0EBA                     	;# 
  3174  0EBB                     	;# 
  3175  0EBC                     	;# 
  3176  0EBD                     	;# 
  3177  0EBE                     	;# 
  3178  0EC3                     	;# 
  3179  0EC5                     	;# 
  3180  0EC6                     	;# 
  3181  0EC7                     	;# 
  3182  0EC8                     	;# 
  3183  0EC9                     	;# 
  3184  0ECA                     	;# 
  3185  0ECB                     	;# 
  3186  0ECC                     	;# 
  3187  0F10                     	;# 
  3188  0F11                     	;# 
  3189  0F12                     	;# 
  3190  0F13                     	;# 
  3191  0F14                     	;# 
  3192  0F15                     	;# 
  3193  0F16                     	;# 
  3194  0F17                     	;# 
  3195  0F18                     	;# 
  3196  0F19                     	;# 
  3197  0F1A                     	;# 
  3198  0F1B                     	;# 
  3199  0F1C                     	;# 
  3200  0F1D                     	;# 
  3201  0F1E                     	;# 
  3202  0F1F                     	;# 
  3203  0F20                     	;# 
  3204  0F21                     	;# 
  3205  0F22                     	;# 
  3206  0F23                     	;# 
  3207  0F24                     	;# 
  3208  0F25                     	;# 
  3209  0F26                     	;# 
  3210  0F27                     	;# 
  3211  0F38                     	;# 
  3212  0F39                     	;# 
  3213  0F3A                     	;# 
  3214  0F3B                     	;# 
  3215  0F3C                     	;# 
  3216  0F3D                     	;# 
  3217  0F3E                     	;# 
  3218  0F3F                     	;# 
  3219  0F40                     	;# 
  3220  0F41                     	;# 
  3221  0F43                     	;# 
  3222  0F44                     	;# 
  3223  0F45                     	;# 
  3224  0F46                     	;# 
  3225  0F47                     	;# 
  3226  0F48                     	;# 
  3227  0F49                     	;# 
  3228  0F4A                     	;# 
  3229  0F4B                     	;# 
  3230  0F4C                     	;# 
  3231  0F4E                     	;# 
  3232  0F4F                     	;# 
  3233  0F50                     	;# 
  3234  0F51                     	;# 
  3235  0F52                     	;# 
  3236  0F53                     	;# 
  3237  0F54                     	;# 
  3238  0F55                     	;# 
  3239  0F56                     	;# 
  3240  0F57                     	;# 
  3241  0F65                     	;# 
  3242  0F68                     	;# 
  3243  0F69                     	;# 
  3244  0F6A                     	;# 
  3245  0F6B                     	;# 
  3246  0FE4                     	;# 
  3247  0FE5                     	;# 
  3248  0FE6                     	;# 
  3249  0FE7                     	;# 
  3250  0FE8                     	;# 
  3251  0FE9                     	;# 
  3252  0FEA                     	;# 
  3253  0FEB                     	;# 
  3254  0FED                     	;# 
  3255  0FEE                     	;# 
  3256  0FEF                     	;# 
  3257  0000                     	;# 
  3258  0001                     	;# 
  3259  0002                     	;# 
  3260  0003                     	;# 
  3261  0004                     	;# 
  3262  0005                     	;# 
  3263  0006                     	;# 
  3264  0007                     	;# 
  3265  0008                     	;# 
  3266  0009                     	;# 
  3267  000A                     	;# 
  3268  000B                     	;# 
  3269  000C                     	;# 
  3270  000D                     	;# 
  3271  000E                     	;# 
  3272  0010                     	;# 
  3273  0011                     	;# 
  3274  0012                     	;# 
  3275  0013                     	;# 
  3276  0016                     	;# 
  3277  0017                     	;# 
  3278  0018                     	;# 
  3279  001C                     	;# 
  3280  001C                     	;# 
  3281  001D                     	;# 
  3282  001D                     	;# 
  3283  001E                     	;# 
  3284  001F                     	;# 
  3285  008C                     	;# 
  3286  008C                     	;# 
  3287  008D                     	;# 
  3288  008E                     	;# 
  3289  008E                     	;# 
  3290  008F                     	;# 
  3291  0090                     	;# 
  3292  0090                     	;# 
  3293  0091                     	;# 
  3294  0093                     	;# 
  3295  0094                     	;# 
  3296  0095                     	;# 
  3297  0096                     	;# 
  3298  0097                     	;# 
  3299  0098                     	;# 
  3300  0099                     	;# 
  3301  009A                     	;# 
  3302  009B                     	;# 
  3303  009C                     	;# 
  3304  009D                     	;# 
  3305  009E                     	;# 
  3306  010C                     	;# 
  3307  010D                     	;# 
  3308  010E                     	;# 
  3309  010E                     	;# 
  3310  010F                     	;# 
  3311  0110                     	;# 
  3312  0110                     	;# 
  3313  0111                     	;# 
  3314  0112                     	;# 
  3315  0112                     	;# 
  3316  0113                     	;# 
  3317  0114                     	;# 
  3318  0114                     	;# 
  3319  0115                     	;# 
  3320  0116                     	;# 
  3321  0116                     	;# 
  3322  0117                     	;# 
  3323  0119                     	;# 
  3324  0119                     	;# 
  3325  0119                     	;# 
  3326  011A                     	;# 
  3327  011A                     	;# 
  3328  011A                     	;# 
  3329  011B                     	;# 
  3330  011B                     	;# 
  3331  011B                     	;# 
  3332  011B                     	;# 
  3333  011B                     	;# 
  3334  011C                     	;# 
  3335  011C                     	;# 
  3336  011C                     	;# 
  3337  011D                     	;# 
  3338  011D                     	;# 
  3339  011D                     	;# 
  3340  011E                     	;# 
  3341  011E                     	;# 
  3342  011E                     	;# 
  3343  011F                     	;# 
  3344  011F                     	;# 
  3345  011F                     	;# 
  3346  011F                     	;# 
  3347  011F                     	;# 
  3348  018C                     	;# 
  3349  018D                     	;# 
  3350  018E                     	;# 
  3351  018F                     	;# 
  3352  0190                     	;# 
  3353  0191                     	;# 
  3354  0192                     	;# 
  3355  0196                     	;# 
  3356  0197                     	;# 
  3357  0198                     	;# 
  3358  0199                     	;# 
  3359  019A                     	;# 
  3360  019B                     	;# 
  3361  019C                     	;# 
  3362  020C                     	;# 
  3363  020C                     	;# 
  3364  020D                     	;# 
  3365  020E                     	;# 
  3366  020F                     	;# 
  3367  020F                     	;# 
  3368  0210                     	;# 
  3369  0210                     	;# 
  3370  0211                     	;# 
  3371  0211                     	;# 
  3372  0212                     	;# 
  3373  0212                     	;# 
  3374  0213                     	;# 
  3375  0214                     	;# 
  3376  0215                     	;# 
  3377  0215                     	;# 
  3378  0216                     	;# 
  3379  0216                     	;# 
  3380  0217                     	;# 
  3381  0217                     	;# 
  3382  0218                     	;# 
  3383  0218                     	;# 
  3384  0219                     	;# 
  3385  021A                     	;# 
  3386  021B                     	;# 
  3387  021B                     	;# 
  3388  021C                     	;# 
  3389  021C                     	;# 
  3390  021D                     	;# 
  3391  021D                     	;# 
  3392  021E                     	;# 
  3393  021F                     	;# 
  3394  028C                     	;# 
  3395  028C                     	;# 
  3396  028D                     	;# 
  3397  028D                     	;# 
  3398  028E                     	;# 
  3399  028F                     	;# 
  3400  0290                     	;# 
  3401  0290                     	;# 
  3402  0291                     	;# 
  3403  0292                     	;# 
  3404  0292                     	;# 
  3405  0293                     	;# 
  3406  0293                     	;# 
  3407  0294                     	;# 
  3408  0295                     	;# 
  3409  0296                     	;# 
  3410  0296                     	;# 
  3411  0297                     	;# 
  3412  0298                     	;# 
  3413  0298                     	;# 
  3414  0299                     	;# 
  3415  0299                     	;# 
  3416  029A                     	;# 
  3417  029B                     	;# 
  3418  029C                     	;# 
  3419  029C                     	;# 
  3420  029D                     	;# 
  3421  030C                     	;# 
  3422  030C                     	;# 
  3423  030D                     	;# 
  3424  030E                     	;# 
  3425  030F                     	;# 
  3426  0310                     	;# 
  3427  0310                     	;# 
  3428  0311                     	;# 
  3429  0312                     	;# 
  3430  0313                     	;# 
  3431  0314                     	;# 
  3432  0314                     	;# 
  3433  0315                     	;# 
  3434  0316                     	;# 
  3435  0317                     	;# 
  3436  0318                     	;# 
  3437  0318                     	;# 
  3438  0319                     	;# 
  3439  031A                     	;# 
  3440  031B                     	;# 
  3441  031C                     	;# 
  3442  031C                     	;# 
  3443  031D                     	;# 
  3444  031E                     	;# 
  3445  031F                     	;# 
  3446  038C                     	;# 
  3447  038C                     	;# 
  3448  038D                     	;# 
  3449  038E                     	;# 
  3450  0390                     	;# 
  3451  0390                     	;# 
  3452  0391                     	;# 
  3453  0392                     	;# 
  3454  040C                     	;# 
  3455  040D                     	;# 
  3456  040E                     	;# 
  3457  040F                     	;# 
  3458  0410                     	;# 
  3459  0411                     	;# 
  3460  0416                     	;# 
  3461  0416                     	;# 
  3462  0417                     	;# 
  3463  0418                     	;# 
  3464  0418                     	;# 
  3465  0419                     	;# 
  3466  041A                     	;# 
  3467  041A                     	;# 
  3468  041B                     	;# 
  3469  041C                     	;# 
  3470  041C                     	;# 
  3471  041D                     	;# 
  3472  041E                     	;# 
  3473  041F                     	;# 
  3474  048C                     	;# 
  3475  048C                     	;# 
  3476  048D                     	;# 
  3477  048E                     	;# 
  3478  048F                     	;# 
  3479  048F                     	;# 
  3480  0490                     	;# 
  3481  0491                     	;# 
  3482  0492                     	;# 
  3483  0492                     	;# 
  3484  0493                     	;# 
  3485  0494                     	;# 
  3486  0495                     	;# 
  3487  0495                     	;# 
  3488  0496                     	;# 
  3489  0497                     	;# 
  3490  0498                     	;# 
  3491  0499                     	;# 
  3492  049A                     	;# 
  3493  049B                     	;# 
  3494  049C                     	;# 
  3495  049D                     	;# 
  3496  050C                     	;# 
  3497  050C                     	;# 
  3498  050D                     	;# 
  3499  050E                     	;# 
  3500  050F                     	;# 
  3501  050F                     	;# 
  3502  0510                     	;# 
  3503  0511                     	;# 
  3504  0512                     	;# 
  3505  0512                     	;# 
  3506  0513                     	;# 
  3507  0514                     	;# 
  3508  0515                     	;# 
  3509  0515                     	;# 
  3510  0516                     	;# 
  3511  0517                     	;# 
  3512  0518                     	;# 
  3513  0519                     	;# 
  3514  051A                     	;# 
  3515  051B                     	;# 
  3516  051C                     	;# 
  3517  051D                     	;# 
  3518  058C                     	;# 
  3519  058C                     	;# 
  3520  058D                     	;# 
  3521  058E                     	;# 
  3522  058F                     	;# 
  3523  058F                     	;# 
  3524  0590                     	;# 
  3525  0591                     	;# 
  3526  0592                     	;# 
  3527  0593                     	;# 
  3528  060C                     	;# 
  3529  060D                     	;# 
  3530  060E                     	;# 
  3531  060F                     	;# 
  3532  0610                     	;# 
  3533  0611                     	;# 
  3534  0612                     	;# 
  3535  0613                     	;# 
  3536  0614                     	;# 
  3537  0616                     	;# 
  3538  0617                     	;# 
  3539  0618                     	;# 
  3540  0619                     	;# 
  3541  061A                     	;# 
  3542  061B                     	;# 
  3543  061C                     	;# 
  3544  061D                     	;# 
  3545  061E                     	;# 
  3546  068C                     	;# 
  3547  068D                     	;# 
  3548  068E                     	;# 
  3549  068F                     	;# 
  3550  0690                     	;# 
  3551  0691                     	;# 
  3552  0692                     	;# 
  3553  0693                     	;# 
  3554  0694                     	;# 
  3555  070C                     	;# 
  3556  070D                     	;# 
  3557  070E                     	;# 
  3558  070F                     	;# 
  3559  0710                     	;# 
  3560  0711                     	;# 
  3561  0712                     	;# 
  3562  0713                     	;# 
  3563  0714                     	;# 
  3564  0716                     	;# 
  3565  0717                     	;# 
  3566  0718                     	;# 
  3567  0719                     	;# 
  3568  071A                     	;# 
  3569  071B                     	;# 
  3570  071C                     	;# 
  3571  071D                     	;# 
  3572  071E                     	;# 
  3573  0796                     	;# 
  3574  0797                     	;# 
  3575  0798                     	;# 
  3576  0799                     	;# 
  3577  079A                     	;# 
  3578  079B                     	;# 
  3579  080C                     	;# 
  3580  080D                     	;# 
  3581  080E                     	;# 
  3582  080F                     	;# 
  3583  0810                     	;# 
  3584  0811                     	;# 
  3585  0812                     	;# 
  3586  0813                     	;# 
  3587  0814                     	;# 
  3588  081A                     	;# 
  3589  081B                     	;# 
  3590  081C                     	;# 
  3591  081D                     	;# 
  3592  081E                     	;# 
  3593  081F                     	;# 
  3594  088C                     	;# 
  3595  088D                     	;# 
  3596  088E                     	;# 
  3597  088F                     	;# 
  3598  0890                     	;# 
  3599  0891                     	;# 
  3600  0892                     	;# 
  3601  0893                     	;# 
  3602  0895                     	;# 
  3603  0896                     	;# 
  3604  0897                     	;# 
  3605  0898                     	;# 
  3606  0899                     	;# 
  3607  089A                     	;# 
  3608  089B                     	;# 
  3609  090C                     	;# 
  3610  090E                     	;# 
  3611  090F                     	;# 
  3612  091F                     	;# 
  3613  098F                     	;# 
  3614  098F                     	;# 
  3615  0990                     	;# 
  3616  0991                     	;# 
  3617  0992                     	;# 
  3618  0993                     	;# 
  3619  0994                     	;# 
  3620  0995                     	;# 
  3621  0996                     	;# 
  3622  0997                     	;# 
  3623  0E0F                     	;# 
  3624  0E10                     	;# 
  3625  0E11                     	;# 
  3626  0E12                     	;# 
  3627  0E13                     	;# 
  3628  0E14                     	;# 
  3629  0E15                     	;# 
  3630  0E16                     	;# 
  3631  0E17                     	;# 
  3632  0E18                     	;# 
  3633  0E19                     	;# 
  3634  0E1A                     	;# 
  3635  0E1B                     	;# 
  3636  0E1C                     	;# 
  3637  0E1D                     	;# 
  3638  0E1E                     	;# 
  3639  0E1F                     	;# 
  3640  0E20                     	;# 
  3641  0E21                     	;# 
  3642  0E22                     	;# 
  3643  0E23                     	;# 
  3644  0E24                     	;# 
  3645  0E25                     	;# 
  3646  0E26                     	;# 
  3647  0E27                     	;# 
  3648  0E28                     	;# 
  3649  0E29                     	;# 
  3650  0E2A                     	;# 
  3651  0E2B                     	;# 
  3652  0E2C                     	;# 
  3653  0E2D                     	;# 
  3654  0E2E                     	;# 
  3655  0E2F                     	;# 
  3656  0E30                     	;# 
  3657  0E31                     	;# 
  3658  0E32                     	;# 
  3659  0E33                     	;# 
  3660  0E34                     	;# 
  3661  0E35                     	;# 
  3662  0E36                     	;# 
  3663  0E37                     	;# 
  3664  0E8F                     	;# 
  3665  0E90                     	;# 
  3666  0E91                     	;# 
  3667  0E92                     	;# 
  3668  0E93                     	;# 
  3669  0E94                     	;# 
  3670  0E95                     	;# 
  3671  0E96                     	;# 
  3672  0E97                     	;# 
  3673  0E9C                     	;# 
  3674  0E9D                     	;# 
  3675  0E9E                     	;# 
  3676  0EA1                     	;# 
  3677  0EA2                     	;# 
  3678  0EA3                     	;# 
  3679  0EA4                     	;# 
  3680  0EA5                     	;# 
  3681  0EA9                     	;# 
  3682  0EAA                     	;# 
  3683  0EAB                     	;# 
  3684  0EAC                     	;# 
  3685  0EB1                     	;# 
  3686  0EB2                     	;# 
  3687  0EB3                     	;# 
  3688  0EB8                     	;# 
  3689  0EB9                     	;# 
  3690  0EBA                     	;# 
  3691  0EBB                     	;# 
  3692  0EBC                     	;# 
  3693  0EBD                     	;# 
  3694  0EBE                     	;# 
  3695  0EC3                     	;# 
  3696  0EC5                     	;# 
  3697  0EC6                     	;# 
  3698  0EC7                     	;# 
  3699  0EC8                     	;# 
  3700  0EC9                     	;# 
  3701  0ECA                     	;# 
  3702  0ECB                     	;# 
  3703  0ECC                     	;# 
  3704  0F10                     	;# 
  3705  0F11                     	;# 
  3706  0F12                     	;# 
  3707  0F13                     	;# 
  3708  0F14                     	;# 
  3709  0F15                     	;# 
  3710  0F16                     	;# 
  3711  0F17                     	;# 
  3712  0F18                     	;# 
  3713  0F19                     	;# 
  3714  0F1A                     	;# 
  3715  0F1B                     	;# 
  3716  0F1C                     	;# 
  3717  0F1D                     	;# 
  3718  0F1E                     	;# 
  3719  0F1F                     	;# 
  3720  0F20                     	;# 
  3721  0F21                     	;# 
  3722  0F22                     	;# 
  3723  0F23                     	;# 
  3724  0F24                     	;# 
  3725  0F25                     	;# 
  3726  0F26                     	;# 
  3727  0F27                     	;# 
  3728  0F38                     	;# 
  3729  0F39                     	;# 
  3730  0F3A                     	;# 
  3731  0F3B                     	;# 
  3732  0F3C                     	;# 
  3733  0F3D                     	;# 
  3734  0F3E                     	;# 
  3735  0F3F                     	;# 
  3736  0F40                     	;# 
  3737  0F41                     	;# 
  3738  0F43                     	;# 
  3739  0F44                     	;# 
  3740  0F45                     	;# 
  3741  0F46                     	;# 
  3742  0F47                     	;# 
  3743  0F48                     	;# 
  3744  0F49                     	;# 
  3745  0F4A                     	;# 
  3746  0F4B                     	;# 
  3747  0F4C                     	;# 
  3748  0F4E                     	;# 
  3749  0F4F                     	;# 
  3750  0F50                     	;# 
  3751  0F51                     	;# 
  3752  0F52                     	;# 
  3753  0F53                     	;# 
  3754  0F54                     	;# 
  3755  0F55                     	;# 
  3756  0F56                     	;# 
  3757  0F57                     	;# 
  3758  0F65                     	;# 
  3759  0F68                     	;# 
  3760  0F69                     	;# 
  3761  0F6A                     	;# 
  3762  0F6B                     	;# 
  3763  0FE4                     	;# 
  3764  0FE5                     	;# 
  3765  0FE6                     	;# 
  3766  0FE7                     	;# 
  3767  0FE8                     	;# 
  3768  0FE9                     	;# 
  3769  0FEA                     	;# 
  3770  0FEB                     	;# 
  3771  0FED                     	;# 
  3772  0FEE                     	;# 
  3773  0FEF                     	;# 
  3774  0000                     	;# 
  3775  0001                     	;# 
  3776  0002                     	;# 
  3777  0003                     	;# 
  3778  0004                     	;# 
  3779  0005                     	;# 
  3780  0006                     	;# 
  3781  0007                     	;# 
  3782  0008                     	;# 
  3783  0009                     	;# 
  3784  000A                     	;# 
  3785  000B                     	;# 
  3786  000C                     	;# 
  3787  000D                     	;# 
  3788  000E                     	;# 
  3789  0010                     	;# 
  3790  0011                     	;# 
  3791  0012                     	;# 
  3792  0013                     	;# 
  3793  0016                     	;# 
  3794  0017                     	;# 
  3795  0018                     	;# 
  3796  001C                     	;# 
  3797  001C                     	;# 
  3798  001D                     	;# 
  3799  001D                     	;# 
  3800  001E                     	;# 
  3801  001F                     	;# 
  3802  008C                     	;# 
  3803  008C                     	;# 
  3804  008D                     	;# 
  3805  008E                     	;# 
  3806  008E                     	;# 
  3807  008F                     	;# 
  3808  0090                     	;# 
  3809  0090                     	;# 
  3810  0091                     	;# 
  3811  0093                     	;# 
  3812  0094                     	;# 
  3813  0095                     	;# 
  3814  0096                     	;# 
  3815  0097                     	;# 
  3816  0098                     	;# 
  3817  0099                     	;# 
  3818  009A                     	;# 
  3819  009B                     	;# 
  3820  009C                     	;# 
  3821  009D                     	;# 
  3822  009E                     	;# 
  3823  010C                     	;# 
  3824  010D                     	;# 
  3825  010E                     	;# 
  3826  010E                     	;# 
  3827  010F                     	;# 
  3828  0110                     	;# 
  3829  0110                     	;# 
  3830  0111                     	;# 
  3831  0112                     	;# 
  3832  0112                     	;# 
  3833  0113                     	;# 
  3834  0114                     	;# 
  3835  0114                     	;# 
  3836  0115                     	;# 
  3837  0116                     	;# 
  3838  0116                     	;# 
  3839  0117                     	;# 
  3840  0119                     	;# 
  3841  0119                     	;# 
  3842  0119                     	;# 
  3843  011A                     	;# 
  3844  011A                     	;# 
  3845  011A                     	;# 
  3846  011B                     	;# 
  3847  011B                     	;# 
  3848  011B                     	;# 
  3849  011B                     	;# 
  3850  011B                     	;# 
  3851  011C                     	;# 
  3852  011C                     	;# 
  3853  011C                     	;# 
  3854  011D                     	;# 
  3855  011D                     	;# 
  3856  011D                     	;# 
  3857  011E                     	;# 
  3858  011E                     	;# 
  3859  011E                     	;# 
  3860  011F                     	;# 
  3861  011F                     	;# 
  3862  011F                     	;# 
  3863  011F                     	;# 
  3864  011F                     	;# 
  3865  018C                     	;# 
  3866  018D                     	;# 
  3867  018E                     	;# 
  3868  018F                     	;# 
  3869  0190                     	;# 
  3870  0191                     	;# 
  3871  0192                     	;# 
  3872  0196                     	;# 
  3873  0197                     	;# 
  3874  0198                     	;# 
  3875  0199                     	;# 
  3876  019A                     	;# 
  3877  019B                     	;# 
  3878  019C                     	;# 
  3879  020C                     	;# 
  3880  020C                     	;# 
  3881  020D                     	;# 
  3882  020E                     	;# 
  3883  020F                     	;# 
  3884  020F                     	;# 
  3885  0210                     	;# 
  3886  0210                     	;# 
  3887  0211                     	;# 
  3888  0211                     	;# 
  3889  0212                     	;# 
  3890  0212                     	;# 
  3891  0213                     	;# 
  3892  0214                     	;# 
  3893  0215                     	;# 
  3894  0215                     	;# 
  3895  0216                     	;# 
  3896  0216                     	;# 
  3897  0217                     	;# 
  3898  0217                     	;# 
  3899  0218                     	;# 
  3900  0218                     	;# 
  3901  0219                     	;# 
  3902  021A                     	;# 
  3903  021B                     	;# 
  3904  021B                     	;# 
  3905  021C                     	;# 
  3906  021C                     	;# 
  3907  021D                     	;# 
  3908  021D                     	;# 
  3909  021E                     	;# 
  3910  021F                     	;# 
  3911  028C                     	;# 
  3912  028C                     	;# 
  3913  028D                     	;# 
  3914  028D                     	;# 
  3915  028E                     	;# 
  3916  028F                     	;# 
  3917  0290                     	;# 
  3918  0290                     	;# 
  3919  0291                     	;# 
  3920  0292                     	;# 
  3921  0292                     	;# 
  3922  0293                     	;# 
  3923  0293                     	;# 
  3924  0294                     	;# 
  3925  0295                     	;# 
  3926  0296                     	;# 
  3927  0296                     	;# 
  3928  0297                     	;# 
  3929  0298                     	;# 
  3930  0298                     	;# 
  3931  0299                     	;# 
  3932  0299                     	;# 
  3933  029A                     	;# 
  3934  029B                     	;# 
  3935  029C                     	;# 
  3936  029C                     	;# 
  3937  029D                     	;# 
  3938  030C                     	;# 
  3939  030C                     	;# 
  3940  030D                     	;# 
  3941  030E                     	;# 
  3942  030F                     	;# 
  3943  0310                     	;# 
  3944  0310                     	;# 
  3945  0311                     	;# 
  3946  0312                     	;# 
  3947  0313                     	;# 
  3948  0314                     	;# 
  3949  0314                     	;# 
  3950  0315                     	;# 
  3951  0316                     	;# 
  3952  0317                     	;# 
  3953  0318                     	;# 
  3954  0318                     	;# 
  3955  0319                     	;# 
  3956  031A                     	;# 
  3957  031B                     	;# 
  3958  031C                     	;# 
  3959  031C                     	;# 
  3960  031D                     	;# 
  3961  031E                     	;# 
  3962  031F                     	;# 
  3963  038C                     	;# 
  3964  038C                     	;# 
  3965  038D                     	;# 
  3966  038E                     	;# 
  3967  0390                     	;# 
  3968  0390                     	;# 
  3969  0391                     	;# 
  3970  0392                     	;# 
  3971  040C                     	;# 
  3972  040D                     	;# 
  3973  040E                     	;# 
  3974  040F                     	;# 
  3975  0410                     	;# 
  3976  0411                     	;# 
  3977  0416                     	;# 
  3978  0416                     	;# 
  3979  0417                     	;# 
  3980  0418                     	;# 
  3981  0418                     	;# 
  3982  0419                     	;# 
  3983  041A                     	;# 
  3984  041A                     	;# 
  3985  041B                     	;# 
  3986  041C                     	;# 
  3987  041C                     	;# 
  3988  041D                     	;# 
  3989  041E                     	;# 
  3990  041F                     	;# 
  3991  048C                     	;# 
  3992  048C                     	;# 
  3993  048D                     	;# 
  3994  048E                     	;# 
  3995  048F                     	;# 
  3996  048F                     	;# 
  3997  0490                     	;# 
  3998  0491                     	;# 
  3999  0492                     	;# 
  4000  0492                     	;# 
  4001  0493                     	;# 
  4002  0494                     	;# 
  4003  0495                     	;# 
  4004  0495                     	;# 
  4005  0496                     	;# 
  4006  0497                     	;# 
  4007  0498                     	;# 
  4008  0499                     	;# 
  4009  049A                     	;# 
  4010  049B                     	;# 
  4011  049C                     	;# 
  4012  049D                     	;# 
  4013  050C                     	;# 
  4014  050C                     	;# 
  4015  050D                     	;# 
  4016  050E                     	;# 
  4017  050F                     	;# 
  4018  050F                     	;# 
  4019  0510                     	;# 
  4020  0511                     	;# 
  4021  0512                     	;# 
  4022  0512                     	;# 
  4023  0513                     	;# 
  4024  0514                     	;# 
  4025  0515                     	;# 
  4026  0515                     	;# 
  4027  0516                     	;# 
  4028  0517                     	;# 
  4029  0518                     	;# 
  4030  0519                     	;# 
  4031  051A                     	;# 
  4032  051B                     	;# 
  4033  051C                     	;# 
  4034  051D                     	;# 
  4035  058C                     	;# 
  4036  058C                     	;# 
  4037  058D                     	;# 
  4038  058E                     	;# 
  4039  058F                     	;# 
  4040  058F                     	;# 
  4041  0590                     	;# 
  4042  0591                     	;# 
  4043  0592                     	;# 
  4044  0593                     	;# 
  4045  060C                     	;# 
  4046  060D                     	;# 
  4047  060E                     	;# 
  4048  060F                     	;# 
  4049  0610                     	;# 
  4050  0611                     	;# 
  4051  0612                     	;# 
  4052  0613                     	;# 
  4053  0614                     	;# 
  4054  0616                     	;# 
  4055  0617                     	;# 
  4056  0618                     	;# 
  4057  0619                     	;# 
  4058  061A                     	;# 
  4059  061B                     	;# 
  4060  061C                     	;# 
  4061  061D                     	;# 
  4062  061E                     	;# 
  4063  068C                     	;# 
  4064  068D                     	;# 
  4065  068E                     	;# 
  4066  068F                     	;# 
  4067  0690                     	;# 
  4068  0691                     	;# 
  4069  0692                     	;# 
  4070  0693                     	;# 
  4071  0694                     	;# 
  4072  070C                     	;# 
  4073  070D                     	;# 
  4074  070E                     	;# 
  4075  070F                     	;# 
  4076  0710                     	;# 
  4077  0711                     	;# 
  4078  0712                     	;# 
  4079  0713                     	;# 
  4080  0714                     	;# 
  4081  0716                     	;# 
  4082  0717                     	;# 
  4083  0718                     	;# 
  4084  0719                     	;# 
  4085  071A                     	;# 
  4086  071B                     	;# 
  4087  071C                     	;# 
  4088  071D                     	;# 
  4089  071E                     	;# 
  4090  0796                     	;# 
  4091  0797                     	;# 
  4092  0798                     	;# 
  4093  0799                     	;# 
  4094  079A                     	;# 
  4095  079B                     	;# 
  4096  080C                     	;# 
  4097  080D                     	;# 
  4098  080E                     	;# 
  4099  080F                     	;# 
  4100  0810                     	;# 
  4101  0811                     	;# 
  4102  0812                     	;# 
  4103  0813                     	;# 
  4104  0814                     	;# 
  4105  081A                     	;# 
  4106  081B                     	;# 
  4107  081C                     	;# 
  4108  081D                     	;# 
  4109  081E                     	;# 
  4110  081F                     	;# 
  4111  088C                     	;# 
  4112  088D                     	;# 
  4113  088E                     	;# 
  4114  088F                     	;# 
  4115  0890                     	;# 
  4116  0891                     	;# 
  4117  0892                     	;# 
  4118  0893                     	;# 
  4119  0895                     	;# 
  4120  0896                     	;# 
  4121  0897                     	;# 
  4122  0898                     	;# 
  4123  0899                     	;# 
  4124  089A                     	;# 
  4125  089B                     	;# 
  4126  090C                     	;# 
  4127  090E                     	;# 
  4128  090F                     	;# 
  4129  091F                     	;# 
  4130  098F                     	;# 
  4131  098F                     	;# 
  4132  0990                     	;# 
  4133  0991                     	;# 
  4134  0992                     	;# 
  4135  0993                     	;# 
  4136  0994                     	;# 
  4137  0995                     	;# 
  4138  0996                     	;# 
  4139  0997                     	;# 
  4140  0E0F                     	;# 
  4141  0E10                     	;# 
  4142  0E11                     	;# 
  4143  0E12                     	;# 
  4144  0E13                     	;# 
  4145  0E14                     	;# 
  4146  0E15                     	;# 
  4147  0E16                     	;# 
  4148  0E17                     	;# 
  4149  0E18                     	;# 
  4150  0E19                     	;# 
  4151  0E1A                     	;# 
  4152  0E1B                     	;# 
  4153  0E1C                     	;# 
  4154  0E1D                     	;# 
  4155  0E1E                     	;# 
  4156  0E1F                     	;# 
  4157  0E20                     	;# 
  4158  0E21                     	;# 
  4159  0E22                     	;# 
  4160  0E23                     	;# 
  4161  0E24                     	;# 
  4162  0E25                     	;# 
  4163  0E26                     	;# 
  4164  0E27                     	;# 
  4165  0E28                     	;# 
  4166  0E29                     	;# 
  4167  0E2A                     	;# 
  4168  0E2B                     	;# 
  4169  0E2C                     	;# 
  4170  0E2D                     	;# 
  4171  0E2E                     	;# 
  4172  0E2F                     	;# 
  4173  0E30                     	;# 
  4174  0E31                     	;# 
  4175  0E32                     	;# 
  4176  0E33                     	;# 
  4177  0E34                     	;# 
  4178  0E35                     	;# 
  4179  0E36                     	;# 
  4180  0E37                     	;# 
  4181  0E8F                     	;# 
  4182  0E90                     	;# 
  4183  0E91                     	;# 
  4184  0E92                     	;# 
  4185  0E93                     	;# 
  4186  0E94                     	;# 
  4187  0E95                     	;# 
  4188  0E96                     	;# 
  4189  0E97                     	;# 
  4190  0E9C                     	;# 
  4191  0E9D                     	;# 
  4192  0E9E                     	;# 
  4193  0EA1                     	;# 
  4194  0EA2                     	;# 
  4195  0EA3                     	;# 
  4196  0EA4                     	;# 
  4197  0EA5                     	;# 
  4198  0EA9                     	;# 
  4199  0EAA                     	;# 
  4200  0EAB                     	;# 
  4201  0EAC                     	;# 
  4202  0EB1                     	;# 
  4203  0EB2                     	;# 
  4204  0EB3                     	;# 
  4205  0EB8                     	;# 
  4206  0EB9                     	;# 
  4207  0EBA                     	;# 
  4208  0EBB                     	;# 
  4209  0EBC                     	;# 
  4210  0EBD                     	;# 
  4211  0EBE                     	;# 
  4212  0EC3                     	;# 
  4213  0EC5                     	;# 
  4214  0EC6                     	;# 
  4215  0EC7                     	;# 
  4216  0EC8                     	;# 
  4217  0EC9                     	;# 
  4218  0ECA                     	;# 
  4219  0ECB                     	;# 
  4220  0ECC                     	;# 
  4221  0F10                     	;# 
  4222  0F11                     	;# 
  4223  0F12                     	;# 
  4224  0F13                     	;# 
  4225  0F14                     	;# 
  4226  0F15                     	;# 
  4227  0F16                     	;# 
  4228  0F17                     	;# 
  4229  0F18                     	;# 
  4230  0F19                     	;# 
  4231  0F1A                     	;# 
  4232  0F1B                     	;# 
  4233  0F1C                     	;# 
  4234  0F1D                     	;# 
  4235  0F1E                     	;# 
  4236  0F1F                     	;# 
  4237  0F20                     	;# 
  4238  0F21                     	;# 
  4239  0F22                     	;# 
  4240  0F23                     	;# 
  4241  0F24                     	;# 
  4242  0F25                     	;# 
  4243  0F26                     	;# 
  4244  0F27                     	;# 
  4245  0F38                     	;# 
  4246  0F39                     	;# 
  4247  0F3A                     	;# 
  4248  0F3B                     	;# 
  4249  0F3C                     	;# 
  4250  0F3D                     	;# 
  4251  0F3E                     	;# 
  4252  0F3F                     	;# 
  4253  0F40                     	;# 
  4254  0F41                     	;# 
  4255  0F43                     	;# 
  4256  0F44                     	;# 
  4257  0F45                     	;# 
  4258  0F46                     	;# 
  4259  0F47                     	;# 
  4260  0F48                     	;# 
  4261  0F49                     	;# 
  4262  0F4A                     	;# 
  4263  0F4B                     	;# 
  4264  0F4C                     	;# 
  4265  0F4E                     	;# 
  4266  0F4F                     	;# 
  4267  0F50                     	;# 
  4268  0F51                     	;# 
  4269  0F52                     	;# 
  4270  0F53                     	;# 
  4271  0F54                     	;# 
  4272  0F55                     	;# 
  4273  0F56                     	;# 
  4274  0F57                     	;# 
  4275  0F65                     	;# 
  4276  0F68                     	;# 
  4277  0F69                     	;# 
  4278  0F6A                     	;# 
  4279  0F6B                     	;# 
  4280  0FE4                     	;# 
  4281  0FE5                     	;# 
  4282  0FE6                     	;# 
  4283  0FE7                     	;# 
  4284  0FE8                     	;# 
  4285  0FE9                     	;# 
  4286  0FEA                     	;# 
  4287  0FEB                     	;# 
  4288  0FED                     	;# 
  4289  0FEE                     	;# 
  4290  0FEF                     	;# 
  4291  0000                     	;# 
  4292  0001                     	;# 
  4293  0002                     	;# 
  4294  0003                     	;# 
  4295  0004                     	;# 
  4296  0005                     	;# 
  4297  0006                     	;# 
  4298  0007                     	;# 
  4299  0008                     	;# 
  4300  0009                     	;# 
  4301  000A                     	;# 
  4302  000B                     	;# 
  4303  000C                     	;# 
  4304  000D                     	;# 
  4305  000E                     	;# 
  4306  0010                     	;# 
  4307  0011                     	;# 
  4308  0012                     	;# 
  4309  0013                     	;# 
  4310  0016                     	;# 
  4311  0017                     	;# 
  4312  0018                     	;# 
  4313  001C                     	;# 
  4314  001C                     	;# 
  4315  001D                     	;# 
  4316  001D                     	;# 
  4317  001E                     	;# 
  4318  001F                     	;# 
  4319  008C                     	;# 
  4320  008C                     	;# 
  4321  008D                     	;# 
  4322  008E                     	;# 
  4323  008E                     	;# 
  4324  008F                     	;# 
  4325  0090                     	;# 
  4326  0090                     	;# 
  4327  0091                     	;# 
  4328  0093                     	;# 
  4329  0094                     	;# 
  4330  0095                     	;# 
  4331  0096                     	;# 
  4332  0097                     	;# 
  4333  0098                     	;# 
  4334  0099                     	;# 
  4335  009A                     	;# 
  4336  009B                     	;# 
  4337  009C                     	;# 
  4338  009D                     	;# 
  4339  009E                     	;# 
  4340  010C                     	;# 
  4341  010D                     	;# 
  4342  010E                     	;# 
  4343  010E                     	;# 
  4344  010F                     	;# 
  4345  0110                     	;# 
  4346  0110                     	;# 
  4347  0111                     	;# 
  4348  0112                     	;# 
  4349  0112                     	;# 
  4350  0113                     	;# 
  4351  0114                     	;# 
  4352  0114                     	;# 
  4353  0115                     	;# 
  4354  0116                     	;# 
  4355  0116                     	;# 
  4356  0117                     	;# 
  4357  0119                     	;# 
  4358  0119                     	;# 
  4359  0119                     	;# 
  4360  011A                     	;# 
  4361  011A                     	;# 
  4362  011A                     	;# 
  4363  011B                     	;# 
  4364  011B                     	;# 
  4365  011B                     	;# 
  4366  011B                     	;# 
  4367  011B                     	;# 
  4368  011C                     	;# 
  4369  011C                     	;# 
  4370  011C                     	;# 
  4371  011D                     	;# 
  4372  011D                     	;# 
  4373  011D                     	;# 
  4374  011E                     	;# 
  4375  011E                     	;# 
  4376  011E                     	;# 
  4377  011F                     	;# 
  4378  011F                     	;# 
  4379  011F                     	;# 
  4380  011F                     	;# 
  4381  011F                     	;# 
  4382  018C                     	;# 
  4383  018D                     	;# 
  4384  018E                     	;# 
  4385  018F                     	;# 
  4386  0190                     	;# 
  4387  0191                     	;# 
  4388  0192                     	;# 
  4389  0196                     	;# 
  4390  0197                     	;# 
  4391  0198                     	;# 
  4392  0199                     	;# 
  4393  019A                     	;# 
  4394  019B                     	;# 
  4395  019C                     	;# 
  4396  020C                     	;# 
  4397  020C                     	;# 
  4398  020D                     	;# 
  4399  020E                     	;# 
  4400  020F                     	;# 
  4401  020F                     	;# 
  4402  0210                     	;# 
  4403  0210                     	;# 
  4404  0211                     	;# 
  4405  0211                     	;# 
  4406  0212                     	;# 
  4407  0212                     	;# 
  4408  0213                     	;# 
  4409  0214                     	;# 
  4410  0215                     	;# 
  4411  0215                     	;# 
  4412  0216                     	;# 
  4413  0216                     	;# 
  4414  0217                     	;# 
  4415  0217                     	;# 
  4416  0218                     	;# 
  4417  0218                     	;# 
  4418  0219                     	;# 
  4419  021A                     	;# 
  4420  021B                     	;# 
  4421  021B                     	;# 
  4422  021C                     	;# 
  4423  021C                     	;# 
  4424  021D                     	;# 
  4425  021D                     	;# 
  4426  021E                     	;# 
  4427  021F                     	;# 
  4428  028C                     	;# 
  4429  028C                     	;# 
  4430  028D                     	;# 
  4431  028D                     	;# 
  4432  028E                     	;# 
  4433  028F                     	;# 
  4434  0290                     	;# 
  4435  0290                     	;# 
  4436  0291                     	;# 
  4437  0292                     	;# 
  4438  0292                     	;# 
  4439  0293                     	;# 
  4440  0293                     	;# 
  4441  0294                     	;# 
  4442  0295                     	;# 
  4443  0296                     	;# 
  4444  0296                     	;# 
  4445  0297                     	;# 
  4446  0298                     	;# 
  4447  0298                     	;# 
  4448  0299                     	;# 
  4449  0299                     	;# 
  4450  029A                     	;# 
  4451  029B                     	;# 
  4452  029C                     	;# 
  4453  029C                     	;# 
  4454  029D                     	;# 
  4455  030C                     	;# 
  4456  030C                     	;# 
  4457  030D                     	;# 
  4458  030E                     	;# 
  4459  030F                     	;# 
  4460  0310                     	;# 
  4461  0310                     	;# 
  4462  0311                     	;# 
  4463  0312                     	;# 
  4464  0313                     	;# 
  4465  0314                     	;# 
  4466  0314                     	;# 
  4467  0315                     	;# 
  4468  0316                     	;# 
  4469  0317                     	;# 
  4470  0318                     	;# 
  4471  0318                     	;# 
  4472  0319                     	;# 
  4473  031A                     	;# 
  4474  031B                     	;# 
  4475  031C                     	;# 
  4476  031C                     	;# 
  4477  031D                     	;# 
  4478  031E                     	;# 
  4479  031F                     	;# 
  4480  038C                     	;# 
  4481  038C                     	;# 
  4482  038D                     	;# 
  4483  038E                     	;# 
  4484  0390                     	;# 
  4485  0390                     	;# 
  4486  0391                     	;# 
  4487  0392                     	;# 
  4488  040C                     	;# 
  4489  040D                     	;# 
  4490  040E                     	;# 
  4491  040F                     	;# 
  4492  0410                     	;# 
  4493  0411                     	;# 
  4494  0416                     	;# 
  4495  0416                     	;# 
  4496  0417                     	;# 
  4497  0418                     	;# 
  4498  0418                     	;# 
  4499  0419                     	;# 
  4500  041A                     	;# 
  4501  041A                     	;# 
  4502  041B                     	;# 
  4503  041C                     	;# 
  4504  041C                     	;# 
  4505  041D                     	;# 
  4506  041E                     	;# 
  4507  041F                     	;# 
  4508  048C                     	;# 
  4509  048C                     	;# 
  4510  048D                     	;# 
  4511  048E                     	;# 
  4512  048F                     	;# 
  4513  048F                     	;# 
  4514  0490                     	;# 
  4515  0491                     	;# 
  4516  0492                     	;# 
  4517  0492                     	;# 
  4518  0493                     	;# 
  4519  0494                     	;# 
  4520  0495                     	;# 
  4521  0495                     	;# 
  4522  0496                     	;# 
  4523  0497                     	;# 
  4524  0498                     	;# 
  4525  0499                     	;# 
  4526  049A                     	;# 
  4527  049B                     	;# 
  4528  049C                     	;# 
  4529  049D                     	;# 
  4530  050C                     	;# 
  4531  050C                     	;# 
  4532  050D                     	;# 
  4533  050E                     	;# 
  4534  050F                     	;# 
  4535  050F                     	;# 
  4536  0510                     	;# 
  4537  0511                     	;# 
  4538  0512                     	;# 
  4539  0512                     	;# 
  4540  0513                     	;# 
  4541  0514                     	;# 
  4542  0515                     	;# 
  4543  0515                     	;# 
  4544  0516                     	;# 
  4545  0517                     	;# 
  4546  0518                     	;# 
  4547  0519                     	;# 
  4548  051A                     	;# 
  4549  051B                     	;# 
  4550  051C                     	;# 
  4551  051D                     	;# 
  4552  058C                     	;# 
  4553  058C                     	;# 
  4554  058D                     	;# 
  4555  058E                     	;# 
  4556  058F                     	;# 
  4557  058F                     	;# 
  4558  0590                     	;# 
  4559  0591                     	;# 
  4560  0592                     	;# 
  4561  0593                     	;# 
  4562  060C                     	;# 
  4563  060D                     	;# 
  4564  060E                     	;# 
  4565  060F                     	;# 
  4566  0610                     	;# 
  4567  0611                     	;# 
  4568  0612                     	;# 
  4569  0613                     	;# 
  4570  0614                     	;# 
  4571  0616                     	;# 
  4572  0617                     	;# 
  4573  0618                     	;# 
  4574  0619                     	;# 
  4575  061A                     	;# 
  4576  061B                     	;# 
  4577  061C                     	;# 
  4578  061D                     	;# 
  4579  061E                     	;# 
  4580  068C                     	;# 
  4581  068D                     	;# 
  4582  068E                     	;# 
  4583  068F                     	;# 
  4584  0690                     	;# 
  4585  0691                     	;# 
  4586  0692                     	;# 
  4587  0693                     	;# 
  4588  0694                     	;# 
  4589  070C                     	;# 
  4590  070D                     	;# 
  4591  070E                     	;# 
  4592  070F                     	;# 
  4593  0710                     	;# 
  4594  0711                     	;# 
  4595  0712                     	;# 
  4596  0713                     	;# 
  4597  0714                     	;# 
  4598  0716                     	;# 
  4599  0717                     	;# 
  4600  0718                     	;# 
  4601  0719                     	;# 
  4602  071A                     	;# 
  4603  071B                     	;# 
  4604  071C                     	;# 
  4605  071D                     	;# 
  4606  071E                     	;# 
  4607  0796                     	;# 
  4608  0797                     	;# 
  4609  0798                     	;# 
  4610  0799                     	;# 
  4611  079A                     	;# 
  4612  079B                     	;# 
  4613  080C                     	;# 
  4614  080D                     	;# 
  4615  080E                     	;# 
  4616  080F                     	;# 
  4617  0810                     	;# 
  4618  0811                     	;# 
  4619  0812                     	;# 
  4620  0813                     	;# 
  4621  0814                     	;# 
  4622  081A                     	;# 
  4623  081B                     	;# 
  4624  081C                     	;# 
  4625  081D                     	;# 
  4626  081E                     	;# 
  4627  081F                     	;# 
  4628  088C                     	;# 
  4629  088D                     	;# 
  4630  088E                     	;# 
  4631  088F                     	;# 
  4632  0890                     	;# 
  4633  0891                     	;# 
  4634  0892                     	;# 
  4635  0893                     	;# 
  4636  0895                     	;# 
  4637  0896                     	;# 
  4638  0897                     	;# 
  4639  0898                     	;# 
  4640  0899                     	;# 
  4641  089A                     	;# 
  4642  089B                     	;# 
  4643  090C                     	;# 
  4644  090E                     	;# 
  4645  090F                     	;# 
  4646  091F                     	;# 
  4647  098F                     	;# 
  4648  098F                     	;# 
  4649  0990                     	;# 
  4650  0991                     	;# 
  4651  0992                     	;# 
  4652  0993                     	;# 
  4653  0994                     	;# 
  4654  0995                     	;# 
  4655  0996                     	;# 
  4656  0997                     	;# 
  4657  0E0F                     	;# 
  4658  0E10                     	;# 
  4659  0E11                     	;# 
  4660  0E12                     	;# 
  4661  0E13                     	;# 
  4662  0E14                     	;# 
  4663  0E15                     	;# 
  4664  0E16                     	;# 
  4665  0E17                     	;# 
  4666  0E18                     	;# 
  4667  0E19                     	;# 
  4668  0E1A                     	;# 
  4669  0E1B                     	;# 
  4670  0E1C                     	;# 
  4671  0E1D                     	;# 
  4672  0E1E                     	;# 
  4673  0E1F                     	;# 
  4674  0E20                     	;# 
  4675  0E21                     	;# 
  4676  0E22                     	;# 
  4677  0E23                     	;# 
  4678  0E24                     	;# 
  4679  0E25                     	;# 
  4680  0E26                     	;# 
  4681  0E27                     	;# 
  4682  0E28                     	;# 
  4683  0E29                     	;# 
  4684  0E2A                     	;# 
  4685  0E2B                     	;# 
  4686  0E2C                     	;# 
  4687  0E2D                     	;# 
  4688  0E2E                     	;# 
  4689  0E2F                     	;# 
  4690  0E30                     	;# 
  4691  0E31                     	;# 
  4692  0E32                     	;# 
  4693  0E33                     	;# 
  4694  0E34                     	;# 
  4695  0E35                     	;# 
  4696  0E36                     	;# 
  4697  0E37                     	;# 
  4698  0E8F                     	;# 
  4699  0E90                     	;# 
  4700  0E91                     	;# 
  4701  0E92                     	;# 
  4702  0E93                     	;# 
  4703  0E94                     	;# 
  4704  0E95                     	;# 
  4705  0E96                     	;# 
  4706  0E97                     	;# 
  4707  0E9C                     	;# 
  4708  0E9D                     	;# 
  4709  0E9E                     	;# 
  4710  0EA1                     	;# 
  4711  0EA2                     	;# 
  4712  0EA3                     	;# 
  4713  0EA4                     	;# 
  4714  0EA5                     	;# 
  4715  0EA9                     	;# 
  4716  0EAA                     	;# 
  4717  0EAB                     	;# 
  4718  0EAC                     	;# 
  4719  0EB1                     	;# 
  4720  0EB2                     	;# 
  4721  0EB3                     	;# 
  4722  0EB8                     	;# 
  4723  0EB9                     	;# 
  4724  0EBA                     	;# 
  4725  0EBB                     	;# 
  4726  0EBC                     	;# 
  4727  0EBD                     	;# 
  4728  0EBE                     	;# 
  4729  0EC3                     	;# 
  4730  0EC5                     	;# 
  4731  0EC6                     	;# 
  4732  0EC7                     	;# 
  4733  0EC8                     	;# 
  4734  0EC9                     	;# 
  4735  0ECA                     	;# 
  4736  0ECB                     	;# 
  4737  0ECC                     	;# 
  4738  0F10                     	;# 
  4739  0F11                     	;# 
  4740  0F12                     	;# 
  4741  0F13                     	;# 
  4742  0F14                     	;# 
  4743  0F15                     	;# 
  4744  0F16                     	;# 
  4745  0F17                     	;# 
  4746  0F18                     	;# 
  4747  0F19                     	;# 
  4748  0F1A                     	;# 
  4749  0F1B                     	;# 
  4750  0F1C                     	;# 
  4751  0F1D                     	;# 
  4752  0F1E                     	;# 
  4753  0F1F                     	;# 
  4754  0F20                     	;# 
  4755  0F21                     	;# 
  4756  0F22                     	;# 
  4757  0F23                     	;# 
  4758  0F24                     	;# 
  4759  0F25                     	;# 
  4760  0F26                     	;# 
  4761  0F27                     	;# 
  4762  0F38                     	;# 
  4763  0F39                     	;# 
  4764  0F3A                     	;# 
  4765  0F3B                     	;# 
  4766  0F3C                     	;# 
  4767  0F3D                     	;# 
  4768  0F3E                     	;# 
  4769  0F3F                     	;# 
  4770  0F40                     	;# 
  4771  0F41                     	;# 
  4772  0F43                     	;# 
  4773  0F44                     	;# 
  4774  0F45                     	;# 
  4775  0F46                     	;# 
  4776  0F47                     	;# 
  4777  0F48                     	;# 
  4778  0F49                     	;# 
  4779  0F4A                     	;# 
  4780  0F4B                     	;# 
  4781  0F4C                     	;# 
  4782  0F4E                     	;# 
  4783  0F4F                     	;# 
  4784  0F50                     	;# 
  4785  0F51                     	;# 
  4786  0F52                     	;# 
  4787  0F53                     	;# 
  4788  0F54                     	;# 
  4789  0F55                     	;# 
  4790  0F56                     	;# 
  4791  0F57                     	;# 
  4792  0F65                     	;# 
  4793  0F68                     	;# 
  4794  0F69                     	;# 
  4795  0F6A                     	;# 
  4796  0F6B                     	;# 
  4797  0FE4                     	;# 
  4798  0FE5                     	;# 
  4799  0FE6                     	;# 
  4800  0FE7                     	;# 
  4801  0FE8                     	;# 
  4802  0FE9                     	;# 
  4803  0FEA                     	;# 
  4804  0FEB                     	;# 
  4805  0FED                     	;# 
  4806  0FEE                     	;# 
  4807  0FEF                     	;# 
  4808  0000                     	;# 
  4809  0001                     	;# 
  4810  0002                     	;# 
  4811  0003                     	;# 
  4812  0004                     	;# 
  4813  0005                     	;# 
  4814  0006                     	;# 
  4815  0007                     	;# 
  4816  0008                     	;# 
  4817  0009                     	;# 
  4818  000A                     	;# 
  4819  000B                     	;# 
  4820  000C                     	;# 
  4821  000D                     	;# 
  4822  000E                     	;# 
  4823  0010                     	;# 
  4824  0011                     	;# 
  4825  0012                     	;# 
  4826  0013                     	;# 
  4827  0016                     	;# 
  4828  0017                     	;# 
  4829  0018                     	;# 
  4830  001C                     	;# 
  4831  001C                     	;# 
  4832  001D                     	;# 
  4833  001D                     	;# 
  4834  001E                     	;# 
  4835  001F                     	;# 
  4836  008C                     	;# 
  4837  008C                     	;# 
  4838  008D                     	;# 
  4839  008E                     	;# 
  4840  008E                     	;# 
  4841  008F                     	;# 
  4842  0090                     	;# 
  4843  0090                     	;# 
  4844  0091                     	;# 
  4845  0093                     	;# 
  4846  0094                     	;# 
  4847  0095                     	;# 
  4848  0096                     	;# 
  4849  0097                     	;# 
  4850  0098                     	;# 
  4851  0099                     	;# 
  4852  009A                     	;# 
  4853  009B                     	;# 
  4854  009C                     	;# 
  4855  009D                     	;# 
  4856  009E                     	;# 
  4857  010C                     	;# 
  4858  010D                     	;# 
  4859  010E                     	;# 
  4860  010E                     	;# 
  4861  010F                     	;# 
  4862  0110                     	;# 
  4863  0110                     	;# 
  4864  0111                     	;# 
  4865  0112                     	;# 
  4866  0112                     	;# 
  4867  0113                     	;# 
  4868  0114                     	;# 
  4869  0114                     	;# 
  4870  0115                     	;# 
  4871  0116                     	;# 
  4872  0116                     	;# 
  4873  0117                     	;# 
  4874  0119                     	;# 
  4875  0119                     	;# 
  4876  0119                     	;# 
  4877  011A                     	;# 
  4878  011A                     	;# 
  4879  011A                     	;# 
  4880  011B                     	;# 
  4881  011B                     	;# 
  4882  011B                     	;# 
  4883  011B                     	;# 
  4884  011B                     	;# 
  4885  011C                     	;# 
  4886  011C                     	;# 
  4887  011C                     	;# 
  4888  011D                     	;# 
  4889  011D                     	;# 
  4890  011D                     	;# 
  4891  011E                     	;# 
  4892  011E                     	;# 
  4893  011E                     	;# 
  4894  011F                     	;# 
  4895  011F                     	;# 
  4896  011F                     	;# 
  4897  011F                     	;# 
  4898  011F                     	;# 
  4899  018C                     	;# 
  4900  018D                     	;# 
  4901  018E                     	;# 
  4902  018F                     	;# 
  4903  0190                     	;# 
  4904  0191                     	;# 
  4905  0192                     	;# 
  4906  0196                     	;# 
  4907  0197                     	;# 
  4908  0198                     	;# 
  4909  0199                     	;# 
  4910  019A                     	;# 
  4911  019B                     	;# 
  4912  019C                     	;# 
  4913  020C                     	;# 
  4914  020C                     	;# 
  4915  020D                     	;# 
  4916  020E                     	;# 
  4917  020F                     	;# 
  4918  020F                     	;# 
  4919  0210                     	;# 
  4920  0210                     	;# 
  4921  0211                     	;# 
  4922  0211                     	;# 
  4923  0212                     	;# 
  4924  0212                     	;# 
  4925  0213                     	;# 
  4926  0214                     	;# 
  4927  0215                     	;# 
  4928  0215                     	;# 
  4929  0216                     	;# 
  4930  0216                     	;# 
  4931  0217                     	;# 
  4932  0217                     	;# 
  4933  0218                     	;# 
  4934  0218                     	;# 
  4935  0219                     	;# 
  4936  021A                     	;# 
  4937  021B                     	;# 
  4938  021B                     	;# 
  4939  021C                     	;# 
  4940  021C                     	;# 
  4941  021D                     	;# 
  4942  021D                     	;# 
  4943  021E                     	;# 
  4944  021F                     	;# 
  4945  028C                     	;# 
  4946  028C                     	;# 
  4947  028D                     	;# 
  4948  028D                     	;# 
  4949  028E                     	;# 
  4950  028F                     	;# 
  4951  0290                     	;# 
  4952  0290                     	;# 
  4953  0291                     	;# 
  4954  0292                     	;# 
  4955  0292                     	;# 
  4956  0293                     	;# 
  4957  0293                     	;# 
  4958  0294                     	;# 
  4959  0295                     	;# 
  4960  0296                     	;# 
  4961  0296                     	;# 
  4962  0297                     	;# 
  4963  0298                     	;# 
  4964  0298                     	;# 
  4965  0299                     	;# 
  4966  0299                     	;# 
  4967  029A                     	;# 
  4968  029B                     	;# 
  4969  029C                     	;# 
  4970  029C                     	;# 
  4971  029D                     	;# 
  4972  030C                     	;# 
  4973  030C                     	;# 
  4974  030D                     	;# 
  4975  030E                     	;# 
  4976  030F                     	;# 
  4977  0310                     	;# 
  4978  0310                     	;# 
  4979  0311                     	;# 
  4980  0312                     	;# 
  4981  0313                     	;# 
  4982  0314                     	;# 
  4983  0314                     	;# 
  4984  0315                     	;# 
  4985  0316                     	;# 
  4986  0317                     	;# 
  4987  0318                     	;# 
  4988  0318                     	;# 
  4989  0319                     	;# 
  4990  031A                     	;# 
  4991  031B                     	;# 
  4992  031C                     	;# 
  4993  031C                     	;# 
  4994  031D                     	;# 
  4995  031E                     	;# 
  4996  031F                     	;# 
  4997  038C                     	;# 
  4998  038C                     	;# 
  4999  038D                     	;# 
  5000  038E                     	;# 
  5001  0390                     	;# 
  5002  0390                     	;# 
  5003  0391                     	;# 
  5004  0392                     	;# 
  5005  040C                     	;# 
  5006  040D                     	;# 
  5007  040E                     	;# 
  5008  040F                     	;# 
  5009  0410                     	;# 
  5010  0411                     	;# 
  5011  0416                     	;# 
  5012  0416                     	;# 
  5013  0417                     	;# 
  5014  0418                     	;# 
  5015  0418                     	;# 
  5016  0419                     	;# 
  5017  041A                     	;# 
  5018  041A                     	;# 
  5019  041B                     	;# 
  5020  041C                     	;# 
  5021  041C                     	;# 
  5022  041D                     	;# 
  5023  041E                     	;# 
  5024  041F                     	;# 
  5025  048C                     	;# 
  5026  048C                     	;# 
  5027  048D                     	;# 
  5028  048E                     	;# 
  5029  048F                     	;# 
  5030  048F                     	;# 
  5031  0490                     	;# 
  5032  0491                     	;# 
  5033  0492                     	;# 
  5034  0492                     	;# 
  5035  0493                     	;# 
  5036  0494                     	;# 
  5037  0495                     	;# 
  5038  0495                     	;# 
  5039  0496                     	;# 
  5040  0497                     	;# 
  5041  0498                     	;# 
  5042  0499                     	;# 
  5043  049A                     	;# 
  5044  049B                     	;# 
  5045  049C                     	;# 
  5046  049D                     	;# 
  5047  050C                     	;# 
  5048  050C                     	;# 
  5049  050D                     	;# 
  5050  050E                     	;# 
  5051  050F                     	;# 
  5052  050F                     	;# 
  5053  0510                     	;# 
  5054  0511                     	;# 
  5055  0512                     	;# 
  5056  0512                     	;# 
  5057  0513                     	;# 
  5058  0514                     	;# 
  5059  0515                     	;# 
  5060  0515                     	;# 
  5061  0516                     	;# 
  5062  0517                     	;# 
  5063  0518                     	;# 
  5064  0519                     	;# 
  5065  051A                     	;# 
  5066  051B                     	;# 
  5067  051C                     	;# 
  5068  051D                     	;# 
  5069  058C                     	;# 
  5070  058C                     	;# 
  5071  058D                     	;# 
  5072  058E                     	;# 
  5073  058F                     	;# 
  5074  058F                     	;# 
  5075  0590                     	;# 
  5076  0591                     	;# 
  5077  0592                     	;# 
  5078  0593                     	;# 
  5079  060C                     	;# 
  5080  060D                     	;# 
  5081  060E                     	;# 
  5082  060F                     	;# 
  5083  0610                     	;# 
  5084  0611                     	;# 
  5085  0612                     	;# 
  5086  0613                     	;# 
  5087  0614                     	;# 
  5088  0616                     	;# 
  5089  0617                     	;# 
  5090  0618                     	;# 
  5091  0619                     	;# 
  5092  061A                     	;# 
  5093  061B                     	;# 
  5094  061C                     	;# 
  5095  061D                     	;# 
  5096  061E                     	;# 
  5097  068C                     	;# 
  5098  068D                     	;# 
  5099  068E                     	;# 
  5100  068F                     	;# 
  5101  0690                     	;# 
  5102  0691                     	;# 
  5103  0692                     	;# 
  5104  0693                     	;# 
  5105  0694                     	;# 
  5106  070C                     	;# 
  5107  070D                     	;# 
  5108  070E                     	;# 
  5109  070F                     	;# 
  5110  0710                     	;# 
  5111  0711                     	;# 
  5112  0712                     	;# 
  5113  0713                     	;# 
  5114  0714                     	;# 
  5115  0716                     	;# 
  5116  0717                     	;# 
  5117  0718                     	;# 
  5118  0719                     	;# 
  5119  071A                     	;# 
  5120  071B                     	;# 
  5121  071C                     	;# 
  5122  071D                     	;# 
  5123  071E                     	;# 
  5124  0796                     	;# 
  5125  0797                     	;# 
  5126  0798                     	;# 
  5127  0799                     	;# 
  5128  079A                     	;# 
  5129  079B                     	;# 
  5130  080C                     	;# 
  5131  080D                     	;# 
  5132  080E                     	;# 
  5133  080F                     	;# 
  5134  0810                     	;# 
  5135  0811                     	;# 
  5136  0812                     	;# 
  5137  0813                     	;# 
  5138  0814                     	;# 
  5139  081A                     	;# 
  5140  081B                     	;# 
  5141  081C                     	;# 
  5142  081D                     	;# 
  5143  081E                     	;# 
  5144  081F                     	;# 
  5145  088C                     	;# 
  5146  088D                     	;# 
  5147  088E                     	;# 
  5148  088F                     	;# 
  5149  0890                     	;# 
  5150  0891                     	;# 
  5151  0892                     	;# 
  5152  0893                     	;# 
  5153  0895                     	;# 
  5154  0896                     	;# 
  5155  0897                     	;# 
  5156  0898                     	;# 
  5157  0899                     	;# 
  5158  089A                     	;# 
  5159  089B                     	;# 
  5160  090C                     	;# 
  5161  090E                     	;# 
  5162  090F                     	;# 
  5163  091F                     	;# 
  5164  098F                     	;# 
  5165  098F                     	;# 
  5166  0990                     	;# 
  5167  0991                     	;# 
  5168  0992                     	;# 
  5169  0993                     	;# 
  5170  0994                     	;# 
  5171  0995                     	;# 
  5172  0996                     	;# 
  5173  0997                     	;# 
  5174  0E0F                     	;# 
  5175  0E10                     	;# 
  5176  0E11                     	;# 
  5177  0E12                     	;# 
  5178  0E13                     	;# 
  5179  0E14                     	;# 
  5180  0E15                     	;# 
  5181  0E16                     	;# 
  5182  0E17                     	;# 
  5183  0E18                     	;# 
  5184  0E19                     	;# 
  5185  0E1A                     	;# 
  5186  0E1B                     	;# 
  5187  0E1C                     	;# 
  5188  0E1D                     	;# 
  5189  0E1E                     	;# 
  5190  0E1F                     	;# 
  5191  0E20                     	;# 
  5192  0E21                     	;# 
  5193  0E22                     	;# 
  5194  0E23                     	;# 
  5195  0E24                     	;# 
  5196  0E25                     	;# 
  5197  0E26                     	;# 
  5198  0E27                     	;# 
  5199  0E28                     	;# 
  5200  0E29                     	;# 
  5201  0E2A                     	;# 
  5202  0E2B                     	;# 
  5203  0E2C                     	;# 
  5204  0E2D                     	;# 
  5205  0E2E                     	;# 
  5206  0E2F                     	;# 
  5207  0E30                     	;# 
  5208  0E31                     	;# 
  5209  0E32                     	;# 
  5210  0E33                     	;# 
  5211  0E34                     	;# 
  5212  0E35                     	;# 
  5213  0E36                     	;# 
  5214  0E37                     	;# 
  5215  0E8F                     	;# 
  5216  0E90                     	;# 
  5217  0E91                     	;# 
  5218  0E92                     	;# 
  5219  0E93                     	;# 
  5220  0E94                     	;# 
  5221  0E95                     	;# 
  5222  0E96                     	;# 
  5223  0E97                     	;# 
  5224  0E9C                     	;# 
  5225  0E9D                     	;# 
  5226  0E9E                     	;# 
  5227  0EA1                     	;# 
  5228  0EA2                     	;# 
  5229  0EA3                     	;# 
  5230  0EA4                     	;# 
  5231  0EA5                     	;# 
  5232  0EA9                     	;# 
  5233  0EAA                     	;# 
  5234  0EAB                     	;# 
  5235  0EAC                     	;# 
  5236  0EB1                     	;# 
  5237  0EB2                     	;# 
  5238  0EB3                     	;# 
  5239  0EB8                     	;# 
  5240  0EB9                     	;# 
  5241  0EBA                     	;# 
  5242  0EBB                     	;# 
  5243  0EBC                     	;# 
  5244  0EBD                     	;# 
  5245  0EBE                     	;# 
  5246  0EC3                     	;# 
  5247  0EC5                     	;# 
  5248  0EC6                     	;# 
  5249  0EC7                     	;# 
  5250  0EC8                     	;# 
  5251  0EC9                     	;# 
  5252  0ECA                     	;# 
  5253  0ECB                     	;# 
  5254  0ECC                     	;# 
  5255  0F10                     	;# 
  5256  0F11                     	;# 
  5257  0F12                     	;# 
  5258  0F13                     	;# 
  5259  0F14                     	;# 
  5260  0F15                     	;# 
  5261  0F16                     	;# 
  5262  0F17                     	;# 
  5263  0F18                     	;# 
  5264  0F19                     	;# 
  5265  0F1A                     	;# 
  5266  0F1B                     	;# 
  5267  0F1C                     	;# 
  5268  0F1D                     	;# 
  5269  0F1E                     	;# 
  5270  0F1F                     	;# 
  5271  0F20                     	;# 
  5272  0F21                     	;# 
  5273  0F22                     	;# 
  5274  0F23                     	;# 
  5275  0F24                     	;# 
  5276  0F25                     	;# 
  5277  0F26                     	;# 
  5278  0F27                     	;# 
  5279  0F38                     	;# 
  5280  0F39                     	;# 
  5281  0F3A                     	;# 
  5282  0F3B                     	;# 
  5283  0F3C                     	;# 
  5284  0F3D                     	;# 
  5285  0F3E                     	;# 
  5286  0F3F                     	;# 
  5287  0F40                     	;# 
  5288  0F41                     	;# 
  5289  0F43                     	;# 
  5290  0F44                     	;# 
  5291  0F45                     	;# 
  5292  0F46                     	;# 
  5293  0F47                     	;# 
  5294  0F48                     	;# 
  5295  0F49                     	;# 
  5296  0F4A                     	;# 
  5297  0F4B                     	;# 
  5298  0F4C                     	;# 
  5299  0F4E                     	;# 
  5300  0F4F                     	;# 
  5301  0F50                     	;# 
  5302  0F51                     	;# 
  5303  0F52                     	;# 
  5304  0F53                     	;# 
  5305  0F54                     	;# 
  5306  0F55                     	;# 
  5307  0F56                     	;# 
  5308  0F57                     	;# 
  5309  0F65                     	;# 
  5310  0F68                     	;# 
  5311  0F69                     	;# 
  5312  0F6A                     	;# 
  5313  0F6B                     	;# 
  5314  0FE4                     	;# 
  5315  0FE5                     	;# 
  5316  0FE6                     	;# 
  5317  0FE7                     	;# 
  5318  0FE8                     	;# 
  5319  0FE9                     	;# 
  5320  0FEA                     	;# 
  5321  0FEB                     	;# 
  5322  0FED                     	;# 
  5323  0FEE                     	;# 
  5324  0FEF                     	;# 
  5325  0000                     	;# 
  5326  0001                     	;# 
  5327  0002                     	;# 
  5328  0003                     	;# 
  5329  0004                     	;# 
  5330  0005                     	;# 
  5331  0006                     	;# 
  5332  0007                     	;# 
  5333  0008                     	;# 
  5334  0009                     	;# 
  5335  000A                     	;# 
  5336  000B                     	;# 
  5337  000C                     	;# 
  5338  000D                     	;# 
  5339  000E                     	;# 
  5340  0010                     	;# 
  5341  0011                     	;# 
  5342  0012                     	;# 
  5343  0013                     	;# 
  5344  0016                     	;# 
  5345  0017                     	;# 
  5346  0018                     	;# 
  5347  001C                     	;# 
  5348  001C                     	;# 
  5349  001D                     	;# 
  5350  001D                     	;# 
  5351  001E                     	;# 
  5352  001F                     	;# 
  5353  008C                     	;# 
  5354  008C                     	;# 
  5355  008D                     	;# 
  5356  008E                     	;# 
  5357  008E                     	;# 
  5358  008F                     	;# 
  5359  0090                     	;# 
  5360  0090                     	;# 
  5361  0091                     	;# 
  5362  0093                     	;# 
  5363  0094                     	;# 
  5364  0095                     	;# 
  5365  0096                     	;# 
  5366  0097                     	;# 
  5367  0098                     	;# 
  5368  0099                     	;# 
  5369  009A                     	;# 
  5370  009B                     	;# 
  5371  009C                     	;# 
  5372  009D                     	;# 
  5373  009E                     	;# 
  5374  010C                     	;# 
  5375  010D                     	;# 
  5376  010E                     	;# 
  5377  010E                     	;# 
  5378  010F                     	;# 
  5379  0110                     	;# 
  5380  0110                     	;# 
  5381  0111                     	;# 
  5382  0112                     	;# 
  5383  0112                     	;# 
  5384  0113                     	;# 
  5385  0114                     	;# 
  5386  0114                     	;# 
  5387  0115                     	;# 
  5388  0116                     	;# 
  5389  0116                     	;# 
  5390  0117                     	;# 
  5391  0119                     	;# 
  5392  0119                     	;# 
  5393  0119                     	;# 
  5394  011A                     	;# 
  5395  011A                     	;# 
  5396  011A                     	;# 
  5397  011B                     	;# 
  5398  011B                     	;# 
  5399  011B                     	;# 
  5400  011B                     	;# 
  5401  011B                     	;# 
  5402  011C                     	;# 
  5403  011C                     	;# 
  5404  011C                     	;# 
  5405  011D                     	;# 
  5406  011D                     	;# 
  5407  011D                     	;# 
  5408  011E                     	;# 
  5409  011E                     	;# 
  5410  011E                     	;# 
  5411  011F                     	;# 
  5412  011F                     	;# 
  5413  011F                     	;# 
  5414  011F                     	;# 
  5415  011F                     	;# 
  5416  018C                     	;# 
  5417  018D                     	;# 
  5418  018E                     	;# 
  5419  018F                     	;# 
  5420  0190                     	;# 
  5421  0191                     	;# 
  5422  0192                     	;# 
  5423  0196                     	;# 
  5424  0197                     	;# 
  5425  0198                     	;# 
  5426  0199                     	;# 
  5427  019A                     	;# 
  5428  019B                     	;# 
  5429  019C                     	;# 
  5430  020C                     	;# 
  5431  020C                     	;# 
  5432  020D                     	;# 
  5433  020E                     	;# 
  5434  020F                     	;# 
  5435  020F                     	;# 
  5436  0210                     	;# 
  5437  0210                     	;# 
  5438  0211                     	;# 
  5439  0211                     	;# 
  5440  0212                     	;# 
  5441  0212                     	;# 
  5442  0213                     	;# 
  5443  0214                     	;# 
  5444  0215                     	;# 
  5445  0215                     	;# 
  5446  0216                     	;# 
  5447  0216                     	;# 
  5448  0217                     	;# 
  5449  0217                     	;# 
  5450  0218                     	;# 
  5451  0218                     	;# 
  5452  0219                     	;# 
  5453  021A                     	;# 
  5454  021B                     	;# 
  5455  021B                     	;# 
  5456  021C                     	;# 
  5457  021C                     	;# 
  5458  021D                     	;# 
  5459  021D                     	;# 
  5460  021E                     	;# 
  5461  021F                     	;# 
  5462  028C                     	;# 
  5463  028C                     	;# 
  5464  028D                     	;# 
  5465  028D                     	;# 
  5466  028E                     	;# 
  5467  028F                     	;# 
  5468  0290                     	;# 
  5469  0290                     	;# 
  5470  0291                     	;# 
  5471  0292                     	;# 
  5472  0292                     	;# 
  5473  0293                     	;# 
  5474  0293                     	;# 
  5475  0294                     	;# 
  5476  0295                     	;# 
  5477  0296                     	;# 
  5478  0296                     	;# 
  5479  0297                     	;# 
  5480  0298                     	;# 
  5481  0298                     	;# 
  5482  0299                     	;# 
  5483  0299                     	;# 
  5484  029A                     	;# 
  5485  029B                     	;# 
  5486  029C                     	;# 
  5487  029C                     	;# 
  5488  029D                     	;# 
  5489  030C                     	;# 
  5490  030C                     	;# 
  5491  030D                     	;# 
  5492  030E                     	;# 
  5493  030F                     	;# 
  5494  0310                     	;# 
  5495  0310                     	;# 
  5496  0311                     	;# 
  5497  0312                     	;# 
  5498  0313                     	;# 
  5499  0314                     	;# 
  5500  0314                     	;# 
  5501  0315                     	;# 
  5502  0316                     	;# 
  5503  0317                     	;# 
  5504  0318                     	;# 
  5505  0318                     	;# 
  5506  0319                     	;# 
  5507  031A                     	;# 
  5508  031B                     	;# 
  5509  031C                     	;# 
  5510  031C                     	;# 
  5511  031D                     	;# 
  5512  031E                     	;# 
  5513  031F                     	;# 
  5514  038C                     	;# 
  5515  038C                     	;# 
  5516  038D                     	;# 
  5517  038E                     	;# 
  5518  0390                     	;# 
  5519  0390                     	;# 
  5520  0391                     	;# 
  5521  0392                     	;# 
  5522  040C                     	;# 
  5523  040D                     	;# 
  5524  040E                     	;# 
  5525  040F                     	;# 
  5526  0410                     	;# 
  5527  0411                     	;# 
  5528  0416                     	;# 
  5529  0416                     	;# 
  5530  0417                     	;# 
  5531  0418                     	;# 
  5532  0418                     	;# 
  5533  0419                     	;# 
  5534  041A                     	;# 
  5535  041A                     	;# 
  5536  041B                     	;# 
  5537  041C                     	;# 
  5538  041C                     	;# 
  5539  041D                     	;# 
  5540  041E                     	;# 
  5541  041F                     	;# 
  5542  048C                     	;# 
  5543  048C                     	;# 
  5544  048D                     	;# 
  5545  048E                     	;# 
  5546  048F                     	;# 
  5547  048F                     	;# 
  5548  0490                     	;# 
  5549  0491                     	;# 
  5550  0492                     	;# 
  5551  0492                     	;# 
  5552  0493                     	;# 
  5553  0494                     	;# 
  5554  0495                     	;# 
  5555  0495                     	;# 
  5556  0496                     	;# 
  5557  0497                     	;# 
  5558  0498                     	;# 
  5559  0499                     	;# 
  5560  049A                     	;# 
  5561  049B                     	;# 
  5562  049C                     	;# 
  5563  049D                     	;# 
  5564  050C                     	;# 
  5565  050C                     	;# 
  5566  050D                     	;# 
  5567  050E                     	;# 
  5568  050F                     	;# 
  5569  050F                     	;# 
  5570  0510                     	;# 
  5571  0511                     	;# 
  5572  0512                     	;# 
  5573  0512                     	;# 
  5574  0513                     	;# 
  5575  0514                     	;# 
  5576  0515                     	;# 
  5577  0515                     	;# 
  5578  0516                     	;# 
  5579  0517                     	;# 
  5580  0518                     	;# 
  5581  0519                     	;# 
  5582  051A                     	;# 
  5583  051B                     	;# 
  5584  051C                     	;# 
  5585  051D                     	;# 
  5586  058C                     	;# 
  5587  058C                     	;# 
  5588  058D                     	;# 
  5589  058E                     	;# 
  5590  058F                     	;# 
  5591  058F                     	;# 
  5592  0590                     	;# 
  5593  0591                     	;# 
  5594  0592                     	;# 
  5595  0593                     	;# 
  5596  060C                     	;# 
  5597  060D                     	;# 
  5598  060E                     	;# 
  5599  060F                     	;# 
  5600  0610                     	;# 
  5601  0611                     	;# 
  5602  0612                     	;# 
  5603  0613                     	;# 
  5604  0614                     	;# 
  5605  0616                     	;# 
  5606  0617                     	;# 
  5607  0618                     	;# 
  5608  0619                     	;# 
  5609  061A                     	;# 
  5610  061B                     	;# 
  5611  061C                     	;# 
  5612  061D                     	;# 
  5613  061E                     	;# 
  5614  068C                     	;# 
  5615  068D                     	;# 
  5616  068E                     	;# 
  5617  068F                     	;# 
  5618  0690                     	;# 
  5619  0691                     	;# 
  5620  0692                     	;# 
  5621  0693                     	;# 
  5622  0694                     	;# 
  5623  070C                     	;# 
  5624  070D                     	;# 
  5625  070E                     	;# 
  5626  070F                     	;# 
  5627  0710                     	;# 
  5628  0711                     	;# 
  5629  0712                     	;# 
  5630  0713                     	;# 
  5631  0714                     	;# 
  5632  0716                     	;# 
  5633  0717                     	;# 
  5634  0718                     	;# 
  5635  0719                     	;# 
  5636  071A                     	;# 
  5637  071B                     	;# 
  5638  071C                     	;# 
  5639  071D                     	;# 
  5640  071E                     	;# 
  5641  0796                     	;# 
  5642  0797                     	;# 
  5643  0798                     	;# 
  5644  0799                     	;# 
  5645  079A                     	;# 
  5646  079B                     	;# 
  5647  080C                     	;# 
  5648  080D                     	;# 
  5649  080E                     	;# 
  5650  080F                     	;# 
  5651  0810                     	;# 
  5652  0811                     	;# 
  5653  0812                     	;# 
  5654  0813                     	;# 
  5655  0814                     	;# 
  5656  081A                     	;# 
  5657  081B                     	;# 
  5658  081C                     	;# 
  5659  081D                     	;# 
  5660  081E                     	;# 
  5661  081F                     	;# 
  5662  088C                     	;# 
  5663  088D                     	;# 
  5664  088E                     	;# 
  5665  088F                     	;# 
  5666  0890                     	;# 
  5667  0891                     	;# 
  5668  0892                     	;# 
  5669  0893                     	;# 
  5670  0895                     	;# 
  5671  0896                     	;# 
  5672  0897                     	;# 
  5673  0898                     	;# 
  5674  0899                     	;# 
  5675  089A                     	;# 
  5676  089B                     	;# 
  5677  090C                     	;# 
  5678  090E                     	;# 
  5679  090F                     	;# 
  5680  091F                     	;# 
  5681  098F                     	;# 
  5682  098F                     	;# 
  5683  0990                     	;# 
  5684  0991                     	;# 
  5685  0992                     	;# 
  5686  0993                     	;# 
  5687  0994                     	;# 
  5688  0995                     	;# 
  5689  0996                     	;# 
  5690  0997                     	;# 
  5691  0E0F                     	;# 
  5692  0E10                     	;# 
  5693  0E11                     	;# 
  5694  0E12                     	;# 
  5695  0E13                     	;# 
  5696  0E14                     	;# 
  5697  0E15                     	;# 
  5698  0E16                     	;# 
  5699  0E17                     	;# 
  5700  0E18                     	;# 
  5701  0E19                     	;# 
  5702  0E1A                     	;# 
  5703  0E1B                     	;# 
  5704  0E1C                     	;# 
  5705  0E1D                     	;# 
  5706  0E1E                     	;# 
  5707  0E1F                     	;# 
  5708  0E20                     	;# 
  5709  0E21                     	;# 
  5710  0E22                     	;# 
  5711  0E23                     	;# 
  5712  0E24                     	;# 
  5713  0E25                     	;# 
  5714  0E26                     	;# 
  5715  0E27                     	;# 
  5716  0E28                     	;# 
  5717  0E29                     	;# 
  5718  0E2A                     	;# 
  5719  0E2B                     	;# 
  5720  0E2C                     	;# 
  5721  0E2D                     	;# 
  5722  0E2E                     	;# 
  5723  0E2F                     	;# 
  5724  0E30                     	;# 
  5725  0E31                     	;# 
  5726  0E32                     	;# 
  5727  0E33                     	;# 
  5728  0E34                     	;# 
  5729  0E35                     	;# 
  5730  0E36                     	;# 
  5731  0E37                     	;# 
  5732  0E8F                     	;# 
  5733  0E90                     	;# 
  5734  0E91                     	;# 
  5735  0E92                     	;# 
  5736  0E93                     	;# 
  5737  0E94                     	;# 
  5738  0E95                     	;# 
  5739  0E96                     	;# 
  5740  0E97                     	;# 
  5741  0E9C                     	;# 
  5742  0E9D                     	;# 
  5743  0E9E                     	;# 
  5744  0EA1                     	;# 
  5745  0EA2                     	;# 
  5746  0EA3                     	;# 
  5747  0EA4                     	;# 
  5748  0EA5                     	;# 
  5749  0EA9                     	;# 
  5750  0EAA                     	;# 
  5751  0EAB                     	;# 
  5752  0EAC                     	;# 
  5753  0EB1                     	;# 
  5754  0EB2                     	;# 
  5755  0EB3                     	;# 
  5756  0EB8                     	;# 
  5757  0EB9                     	;# 
  5758  0EBA                     	;# 
  5759  0EBB                     	;# 
  5760  0EBC                     	;# 
  5761  0EBD                     	;# 
  5762  0EBE                     	;# 
  5763  0EC3                     	;# 
  5764  0EC5                     	;# 
  5765  0EC6                     	;# 
  5766  0EC7                     	;# 
  5767  0EC8                     	;# 
  5768  0EC9                     	;# 
  5769  0ECA                     	;# 
  5770  0ECB                     	;# 
  5771  0ECC                     	;# 
  5772  0F10                     	;# 
  5773  0F11                     	;# 
  5774  0F12                     	;# 
  5775  0F13                     	;# 
  5776  0F14                     	;# 
  5777  0F15                     	;# 
  5778  0F16                     	;# 
  5779  0F17                     	;# 
  5780  0F18                     	;# 
  5781  0F19                     	;# 
  5782  0F1A                     	;# 
  5783  0F1B                     	;# 
  5784  0F1C                     	;# 
  5785  0F1D                     	;# 
  5786  0F1E                     	;# 
  5787  0F1F                     	;# 
  5788  0F20                     	;# 
  5789  0F21                     	;# 
  5790  0F22                     	;# 
  5791  0F23                     	;# 
  5792  0F24                     	;# 
  5793  0F25                     	;# 
  5794  0F26                     	;# 
  5795  0F27                     	;# 
  5796  0F38                     	;# 
  5797  0F39                     	;# 
  5798  0F3A                     	;# 
  5799  0F3B                     	;# 
  5800  0F3C                     	;# 
  5801  0F3D                     	;# 
  5802  0F3E                     	;# 
  5803  0F3F                     	;# 
  5804  0F40                     	;# 
  5805  0F41                     	;# 
  5806  0F43                     	;# 
  5807  0F44                     	;# 
  5808  0F45                     	;# 
  5809  0F46                     	;# 
  5810  0F47                     	;# 
  5811  0F48                     	;# 
  5812  0F49                     	;# 
  5813  0F4A                     	;# 
  5814  0F4B                     	;# 
  5815  0F4C                     	;# 
  5816  0F4E                     	;# 
  5817  0F4F                     	;# 
  5818  0F50                     	;# 
  5819  0F51                     	;# 
  5820  0F52                     	;# 
  5821  0F53                     	;# 
  5822  0F54                     	;# 
  5823  0F55                     	;# 
  5824  0F56                     	;# 
  5825  0F57                     	;# 
  5826  0F65                     	;# 
  5827  0F68                     	;# 
  5828  0F69                     	;# 
  5829  0F6A                     	;# 
  5830  0F6B                     	;# 
  5831  0FE4                     	;# 
  5832  0FE5                     	;# 
  5833  0FE6                     	;# 
  5834  0FE7                     	;# 
  5835  0FE8                     	;# 
  5836  0FE9                     	;# 
  5837  0FEA                     	;# 
  5838  0FEB                     	;# 
  5839  0FED                     	;# 
  5840  0FEE                     	;# 
  5841  0FEF                     	;# 
  5842  0000                     	;# 
  5843  0001                     	;# 
  5844  0002                     	;# 
  5845  0003                     	;# 
  5846  0004                     	;# 
  5847  0005                     	;# 
  5848  0006                     	;# 
  5849  0007                     	;# 
  5850  0008                     	;# 
  5851  0009                     	;# 
  5852  000A                     	;# 
  5853  000B                     	;# 
  5854  000C                     	;# 
  5855  000D                     	;# 
  5856  000E                     	;# 
  5857  0010                     	;# 
  5858  0011                     	;# 
  5859  0012                     	;# 
  5860  0013                     	;# 
  5861  0016                     	;# 
  5862  0017                     	;# 
  5863  0018                     	;# 
  5864  001C                     	;# 
  5865  001C                     	;# 
  5866  001D                     	;# 
  5867  001D                     	;# 
  5868  001E                     	;# 
  5869  001F                     	;# 
  5870  008C                     	;# 
  5871  008C                     	;# 
  5872  008D                     	;# 
  5873  008E                     	;# 
  5874  008E                     	;# 
  5875  008F                     	;# 
  5876  0090                     	;# 
  5877  0090                     	;# 
  5878  0091                     	;# 
  5879  0093                     	;# 
  5880  0094                     	;# 
  5881  0095                     	;# 
  5882  0096                     	;# 
  5883  0097                     	;# 
  5884  0098                     	;# 
  5885  0099                     	;# 
  5886  009A                     	;# 
  5887  009B                     	;# 
  5888  009C                     	;# 
  5889  009D                     	;# 
  5890  009E                     	;# 
  5891  010C                     	;# 
  5892  010D                     	;# 
  5893  010E                     	;# 
  5894  010E                     	;# 
  5895  010F                     	;# 
  5896  0110                     	;# 
  5897  0110                     	;# 
  5898  0111                     	;# 
  5899  0112                     	;# 
  5900  0112                     	;# 
  5901  0113                     	;# 
  5902  0114                     	;# 
  5903  0114                     	;# 
  5904  0115                     	;# 
  5905  0116                     	;# 
  5906  0116                     	;# 
  5907  0117                     	;# 
  5908  0119                     	;# 
  5909  0119                     	;# 
  5910  0119                     	;# 
  5911  011A                     	;# 
  5912  011A                     	;# 
  5913  011A                     	;# 
  5914  011B                     	;# 
  5915  011B                     	;# 
  5916  011B                     	;# 
  5917  011B                     	;# 
  5918  011B                     	;# 
  5919  011C                     	;# 
  5920  011C                     	;# 
  5921  011C                     	;# 
  5922  011D                     	;# 
  5923  011D                     	;# 
  5924  011D                     	;# 
  5925  011E                     	;# 
  5926  011E                     	;# 
  5927  011E                     	;# 
  5928  011F                     	;# 
  5929  011F                     	;# 
  5930  011F                     	;# 
  5931  011F                     	;# 
  5932  011F                     	;# 
  5933  018C                     	;# 
  5934  018D                     	;# 
  5935  018E                     	;# 
  5936  018F                     	;# 
  5937  0190                     	;# 
  5938  0191                     	;# 
  5939  0192                     	;# 
  5940  0196                     	;# 
  5941  0197                     	;# 
  5942  0198                     	;# 
  5943  0199                     	;# 
  5944  019A                     	;# 
  5945  019B                     	;# 
  5946  019C                     	;# 
  5947  020C                     	;# 
  5948  020C                     	;# 
  5949  020D                     	;# 
  5950  020E                     	;# 
  5951  020F                     	;# 
  5952  020F                     	;# 
  5953  0210                     	;# 
  5954  0210                     	;# 
  5955  0211                     	;# 
  5956  0211                     	;# 
  5957  0212                     	;# 
  5958  0212                     	;# 
  5959  0213                     	;# 
  5960  0214                     	;# 
  5961  0215                     	;# 
  5962  0215                     	;# 
  5963  0216                     	;# 
  5964  0216                     	;# 
  5965  0217                     	;# 
  5966  0217                     	;# 
  5967  0218                     	;# 
  5968  0218                     	;# 
  5969  0219                     	;# 
  5970  021A                     	;# 
  5971  021B                     	;# 
  5972  021B                     	;# 
  5973  021C                     	;# 
  5974  021C                     	;# 
  5975  021D                     	;# 
  5976  021D                     	;# 
  5977  021E                     	;# 
  5978  021F                     	;# 
  5979  028C                     	;# 
  5980  028C                     	;# 
  5981  028D                     	;# 
  5982  028D                     	;# 
  5983  028E                     	;# 
  5984  028F                     	;# 
  5985  0290                     	;# 
  5986  0290                     	;# 
  5987  0291                     	;# 
  5988  0292                     	;# 
  5989  0292                     	;# 
  5990  0293                     	;# 
  5991  0293                     	;# 
  5992  0294                     	;# 
  5993  0295                     	;# 
  5994  0296                     	;# 
  5995  0296                     	;# 
  5996  0297                     	;# 
  5997  0298                     	;# 
  5998  0298                     	;# 
  5999  0299                     	;# 
  6000  0299                     	;# 
  6001  029A                     	;# 
  6002  029B                     	;# 
  6003  029C                     	;# 
  6004  029C                     	;# 
  6005  029D                     	;# 
  6006  030C                     	;# 
  6007  030C                     	;# 
  6008  030D                     	;# 
  6009  030E                     	;# 
  6010  030F                     	;# 
  6011  0310                     	;# 
  6012  0310                     	;# 
  6013  0311                     	;# 
  6014  0312                     	;# 
  6015  0313                     	;# 
  6016  0314                     	;# 
  6017  0314                     	;# 
  6018  0315                     	;# 
  6019  0316                     	;# 
  6020  0317                     	;# 
  6021  0318                     	;# 
  6022  0318                     	;# 
  6023  0319                     	;# 
  6024  031A                     	;# 
  6025  031B                     	;# 
  6026  031C                     	;# 
  6027  031C                     	;# 
  6028  031D                     	;# 
  6029  031E                     	;# 
  6030  031F                     	;# 
  6031  038C                     	;# 
  6032  038C                     	;# 
  6033  038D                     	;# 
  6034  038E                     	;# 
  6035  0390                     	;# 
  6036  0390                     	;# 
  6037  0391                     	;# 
  6038  0392                     	;# 
  6039  040C                     	;# 
  6040  040D                     	;# 
  6041  040E                     	;# 
  6042  040F                     	;# 
  6043  0410                     	;# 
  6044  0411                     	;# 
  6045  0416                     	;# 
  6046  0416                     	;# 
  6047  0417                     	;# 
  6048  0418                     	;# 
  6049  0418                     	;# 
  6050  0419                     	;# 
  6051  041A                     	;# 
  6052  041A                     	;# 
  6053  041B                     	;# 
  6054  041C                     	;# 
  6055  041C                     	;# 
  6056  041D                     	;# 
  6057  041E                     	;# 
  6058  041F                     	;# 
  6059  048C                     	;# 
  6060  048C                     	;# 
  6061  048D                     	;# 
  6062  048E                     	;# 
  6063  048F                     	;# 
  6064  048F                     	;# 
  6065  0490                     	;# 
  6066  0491                     	;# 
  6067  0492                     	;# 
  6068  0492                     	;# 
  6069  0493                     	;# 
  6070  0494                     	;# 
  6071  0495                     	;# 
  6072  0495                     	;# 
  6073  0496                     	;# 
  6074  0497                     	;# 
  6075  0498                     	;# 
  6076  0499                     	;# 
  6077  049A                     	;# 
  6078  049B                     	;# 
  6079  049C                     	;# 
  6080  049D                     	;# 
  6081  050C                     	;# 
  6082  050C                     	;# 
  6083  050D                     	;# 
  6084  050E                     	;# 
  6085  050F                     	;# 
  6086  050F                     	;# 
  6087  0510                     	;# 
  6088  0511                     	;# 
  6089  0512                     	;# 
  6090  0512                     	;# 
  6091  0513                     	;# 
  6092  0514                     	;# 
  6093  0515                     	;# 
  6094  0515                     	;# 
  6095  0516                     	;# 
  6096  0517                     	;# 
  6097  0518                     	;# 
  6098  0519                     	;# 
  6099  051A                     	;# 
  6100  051B                     	;# 
  6101  051C                     	;# 
  6102  051D                     	;# 
  6103  058C                     	;# 
  6104  058C                     	;# 
  6105  058D                     	;# 
  6106  058E                     	;# 
  6107  058F                     	;# 
  6108  058F                     	;# 
  6109  0590                     	;# 
  6110  0591                     	;# 
  6111  0592                     	;# 
  6112  0593                     	;# 
  6113  060C                     	;# 
  6114  060D                     	;# 
  6115  060E                     	;# 
  6116  060F                     	;# 
  6117  0610                     	;# 
  6118  0611                     	;# 
  6119  0612                     	;# 
  6120  0613                     	;# 
  6121  0614                     	;# 
  6122  0616                     	;# 
  6123  0617                     	;# 
  6124  0618                     	;# 
  6125  0619                     	;# 
  6126  061A                     	;# 
  6127  061B                     	;# 
  6128  061C                     	;# 
  6129  061D                     	;# 
  6130  061E                     	;# 
  6131  068C                     	;# 
  6132  068D                     	;# 
  6133  068E                     	;# 
  6134  068F                     	;# 
  6135  0690                     	;# 
  6136  0691                     	;# 
  6137  0692                     	;# 
  6138  0693                     	;# 
  6139  0694                     	;# 
  6140  070C                     	;# 
  6141  070D                     	;# 
  6142  070E                     	;# 
  6143  070F                     	;# 
  6144  0710                     	;# 
  6145  0711                     	;# 
  6146  0712                     	;# 
  6147  0713                     	;# 
  6148  0714                     	;# 
  6149  0716                     	;# 
  6150  0717                     	;# 
  6151  0718                     	;# 
  6152  0719                     	;# 
  6153  071A                     	;# 
  6154  071B                     	;# 
  6155  071C                     	;# 
  6156  071D                     	;# 
  6157  071E                     	;# 
  6158  0796                     	;# 
  6159  0797                     	;# 
  6160  0798                     	;# 
  6161  0799                     	;# 
  6162  079A                     	;# 
  6163  079B                     	;# 
  6164  080C                     	;# 
  6165  080D                     	;# 
  6166  080E                     	;# 
  6167  080F                     	;# 
  6168  0810                     	;# 
  6169  0811                     	;# 
  6170  0812                     	;# 
  6171  0813                     	;# 
  6172  0814                     	;# 
  6173  081A                     	;# 
  6174  081B                     	;# 
  6175  081C                     	;# 
  6176  081D                     	;# 
  6177  081E                     	;# 
  6178  081F                     	;# 
  6179  088C                     	;# 
  6180  088D                     	;# 
  6181  088E                     	;# 
  6182  088F                     	;# 
  6183  0890                     	;# 
  6184  0891                     	;# 
  6185  0892                     	;# 
  6186  0893                     	;# 
  6187  0895                     	;# 
  6188  0896                     	;# 
  6189  0897                     	;# 
  6190  0898                     	;# 
  6191  0899                     	;# 
  6192  089A                     	;# 
  6193  089B                     	;# 
  6194  090C                     	;# 
  6195  090E                     	;# 
  6196  090F                     	;# 
  6197  091F                     	;# 
  6198  098F                     	;# 
  6199  098F                     	;# 
  6200  0990                     	;# 
  6201  0991                     	;# 
  6202  0992                     	;# 
  6203  0993                     	;# 
  6204  0994                     	;# 
  6205  0995                     	;# 
  6206  0996                     	;# 
  6207  0997                     	;# 
  6208  0E0F                     	;# 
  6209  0E10                     	;# 
  6210  0E11                     	;# 
  6211  0E12                     	;# 
  6212  0E13                     	;# 
  6213  0E14                     	;# 
  6214  0E15                     	;# 
  6215  0E16                     	;# 
  6216  0E17                     	;# 
  6217  0E18                     	;# 
  6218  0E19                     	;# 
  6219  0E1A                     	;# 
  6220  0E1B                     	;# 
  6221  0E1C                     	;# 
  6222  0E1D                     	;# 
  6223  0E1E                     	;# 
  6224  0E1F                     	;# 
  6225  0E20                     	;# 
  6226  0E21                     	;# 
  6227  0E22                     	;# 
  6228  0E23                     	;# 
  6229  0E24                     	;# 
  6230  0E25                     	;# 
  6231  0E26                     	;# 
  6232  0E27                     	;# 
  6233  0E28                     	;# 
  6234  0E29                     	;# 
  6235  0E2A                     	;# 
  6236  0E2B                     	;# 
  6237  0E2C                     	;# 
  6238  0E2D                     	;# 
  6239  0E2E                     	;# 
  6240  0E2F                     	;# 
  6241  0E30                     	;# 
  6242  0E31                     	;# 
  6243  0E32                     	;# 
  6244  0E33                     	;# 
  6245  0E34                     	;# 
  6246  0E35                     	;# 
  6247  0E36                     	;# 
  6248  0E37                     	;# 
  6249  0E8F                     	;# 
  6250  0E90                     	;# 
  6251  0E91                     	;# 
  6252  0E92                     	;# 
  6253  0E93                     	;# 
  6254  0E94                     	;# 
  6255  0E95                     	;# 
  6256  0E96                     	;# 
  6257  0E97                     	;# 
  6258  0E9C                     	;# 
  6259  0E9D                     	;# 
  6260  0E9E                     	;# 
  6261  0EA1                     	;# 
  6262  0EA2                     	;# 
  6263  0EA3                     	;# 
  6264  0EA4                     	;# 
  6265  0EA5                     	;# 
  6266  0EA9                     	;# 
  6267  0EAA                     	;# 
  6268  0EAB                     	;# 
  6269  0EAC                     	;# 
  6270  0EB1                     	;# 
  6271  0EB2                     	;# 
  6272  0EB3                     	;# 
  6273  0EB8                     	;# 
  6274  0EB9                     	;# 
  6275  0EBA                     	;# 
  6276  0EBB                     	;# 
  6277  0EBC                     	;# 
  6278  0EBD                     	;# 
  6279  0EBE                     	;# 
  6280  0EC3                     	;# 
  6281  0EC5                     	;# 
  6282  0EC6                     	;# 
  6283  0EC7                     	;# 
  6284  0EC8                     	;# 
  6285  0EC9                     	;# 
  6286  0ECA                     	;# 
  6287  0ECB                     	;# 
  6288  0ECC                     	;# 
  6289  0F10                     	;# 
  6290  0F11                     	;# 
  6291  0F12                     	;# 
  6292  0F13                     	;# 
  6293  0F14                     	;# 
  6294  0F15                     	;# 
  6295  0F16                     	;# 
  6296  0F17                     	;# 
  6297  0F18                     	;# 
  6298  0F19                     	;# 
  6299  0F1A                     	;# 
  6300  0F1B                     	;# 
  6301  0F1C                     	;# 
  6302  0F1D                     	;# 
  6303  0F1E                     	;# 
  6304  0F1F                     	;# 
  6305  0F20                     	;# 
  6306  0F21                     	;# 
  6307  0F22                     	;# 
  6308  0F23                     	;# 
  6309  0F24                     	;# 
  6310  0F25                     	;# 
  6311  0F26                     	;# 
  6312  0F27                     	;# 
  6313  0F38                     	;# 
  6314  0F39                     	;# 
  6315  0F3A                     	;# 
  6316  0F3B                     	;# 
  6317  0F3C                     	;# 
  6318  0F3D                     	;# 
  6319  0F3E                     	;# 
  6320  0F3F                     	;# 
  6321  0F40                     	;# 
  6322  0F41                     	;# 
  6323  0F43                     	;# 
  6324  0F44                     	;# 
  6325  0F45                     	;# 
  6326  0F46                     	;# 
  6327  0F47                     	;# 
  6328  0F48                     	;# 
  6329  0F49                     	;# 
  6330  0F4A                     	;# 
  6331  0F4B                     	;# 
  6332  0F4C                     	;# 
  6333  0F4E                     	;# 
  6334  0F4F                     	;# 
  6335  0F50                     	;# 
  6336  0F51                     	;# 
  6337  0F52                     	;# 
  6338  0F53                     	;# 
  6339  0F54                     	;# 
  6340  0F55                     	;# 
  6341  0F56                     	;# 
  6342  0F57                     	;# 
  6343  0F65                     	;# 
  6344  0F68                     	;# 
  6345  0F69                     	;# 
  6346  0F6A                     	;# 
  6347  0F6B                     	;# 
  6348  0FE4                     	;# 
  6349  0FE5                     	;# 
  6350  0FE6                     	;# 
  6351  0FE7                     	;# 
  6352  0FE8                     	;# 
  6353  0FE9                     	;# 
  6354  0FEA                     	;# 
  6355  0FEB                     	;# 
  6356  0FED                     	;# 
  6357  0FEE                     	;# 
  6358  0FEF                     	;# 
  6359                           
  6360                           	psect	idataBANK1
  6361  1789                     __pidataBANK1:	
  6362                           
  6363                           ;initializer for _Button_StateMachine
  6364  1789  3417               	retlw	low _Button_State_Initializing
  6365  178A  340F               	retlw	high _Button_State_Initializing
  6366  178B  348E               	retlw	low _Button_State_NotPressed
  6367  178C  3405               	retlw	high _Button_State_NotPressed
  6368  178D  34B7               	retlw	low _Button_State_Pressed
  6369  178E  340E               	retlw	high _Button_State_Pressed
  6370                           
  6371                           ;initializer for _freq_hop
  6372  178F  3400               	retlw	0
  6373  1790  340F               	retlw	15
  6374  1791  341E               	retlw	30
  6375                           
  6376                           ;initializer for _callback_notPressed
  6377  1792  3402               	retlw	low _Button_DefaultCallback
  6378  1793  3400               	retlw	high _Button_DefaultCallback
  6379                           
  6380                           ;initializer for _callback_pressed
  6381  1794  3402               	retlw	low _Button_DefaultCallback
  6382  1795  3400               	retlw	high _Button_DefaultCallback
  6383                           
  6384                           ;initializer for _callback_sampled
  6385  1796  3403               	retlw	low _Sensor_DefaultCallback
  6386  1797  3400               	retlw	high _Sensor_DefaultCallback
  6387                           
  6388                           	psect	stringtext1
  6389  1800                     __pstringtext1:	
  6390  1800                     _u8_seg:	
  6391  1800  34C0               	retlw	192
  6392  1801  34F9               	retlw	249
  6393  1802  34A4               	retlw	164
  6394  1803  34B0               	retlw	176
  6395  1804  3499               	retlw	153
  6396  1805  3492               	retlw	146
  6397  1806  3482               	retlw	130
  6398  1807  34F8               	retlw	248
  6399  1808  3480               	retlw	128
  6400  1809  3490               	retlw	144
  6401  180A  3400               	retlw	0
  6402  180B  34FF               	retlw	255
  6403  180C  34BF               	retlw	191
  6404  180D  3486               	retlw	134
  6405  180E                     __end_of_u8_seg:	
  6406                           
  6407                           	psect	stringtext2
  6408  180E                     __pstringtext2:	
  6409  180E                     _u16_COMP_StartDelay_Sec:	
  6410  180E  3414               	retlw	20
  6411  180F  3400               	retlw	0
  6412  1810                     __end_of_u16_COMP_StartDelay_Sec:	
  6413                           
  6414                           	psect	stringtext3
  6415  1810                     __pstringtext3:	
  6416  1810                     _u16_SLEEP_StartDelay_Sec:	
  6417  1810  3478               	retlw	120
  6418  1811  3400               	retlw	0
  6419  1812                     __end_of_u16_SLEEP_StartDelay_Sec:	
  6420                           
  6421                           	psect	stringtext4
  6422  1812                     __pstringtext4:	
  6423  1812                     _i8_COMP_ON_Temperature:	
  6424  1812  3404               	retlw	4
  6425  1813                     __end_of_i8_COMP_ON_Temperature:	
  6426                           
  6427                           	psect	stringtext5
  6428  1813                     __pstringtext5:	
  6429  1813                     _i8_PC_TemperatureOffset:	
  6430  1813  3400               	retlw	0
  6431  1814                     __end_of_i8_PC_TemperatureOffset:	
  6432                           
  6433                           	psect	stringtext6
  6434  1814                     __pstringtext6:	
  6435  1814                     _i8_FC_TemperatureOffset:	
  6436  1814  3400               	retlw	0
  6437  1815                     __end_of_i8_FC_TemperatureOffset:	
  6438                           
  6439                           	psect	stringtext7
  6440  1815                     __pstringtext7:	
  6441  1815                     _u8_SuperCool_Hr:	
  6442  1815  3408               	retlw	8
  6443  1816                     __end_of_u8_SuperCool_Hr:	
  6444                           
  6445                           	psect	stringtext8
  6446  1000                     __pstringtext8:	
  6447  1000                     _mtouch_button_init:	
  6448  1000  3400               	retlw	0
  6449  1001  3400               	retlw	0
  6450  1002  3400               	retlw	0
  6451  1003  3400               	retlw	0
  6452  1004  3400               	retlw	0
  6453  1005  3400               	retlw	0
  6454  1006  3400               	retlw	0
  6455  1007  3400               	retlw	0
  6456  1008  3400               	retlw	0
  6457  1009  3400               	retlw	0
  6458  100A  3400               	retlw	0
  6459  100B  3400               	retlw	0
  6460  100C  3400               	retlw	0
  6461  100D  3400               	retlw	0
  6462  100E  3464               	retlw	100
  6463  100F  3401               	retlw	1
  6464  1010  3401               	retlw	1
  6465  1011  3401               	retlw	1
  6466  1012  3400               	retlw	0
  6467  1013  3400               	retlw	0
  6468  1014  3400               	retlw	0
  6469  1015  3400               	retlw	0
  6470  1016  3400               	retlw	0
  6471  1017  3400               	retlw	0
  6472  1018  3400               	retlw	0
  6473  1019  3400               	retlw	0
  6474  101A  3400               	retlw	0
  6475  101B  3400               	retlw	0
  6476  101C  3400               	retlw	0
  6477  101D  3400               	retlw	0
  6478  101E  3464               	retlw	100
  6479  101F  3401               	retlw	1
  6480  1020  3402               	retlw	2
  6481  1021  3402               	retlw	2
  6482  1022  3400               	retlw	0
  6483  1023  3400               	retlw	0
  6484  1024  3400               	retlw	0
  6485  1025  3400               	retlw	0
  6486  1026  3400               	retlw	0
  6487  1027  3400               	retlw	0
  6488  1028  3400               	retlw	0
  6489  1029  3400               	retlw	0
  6490  102A  3400               	retlw	0
  6491  102B  3400               	retlw	0
  6492  102C  3400               	retlw	0
  6493  102D  3400               	retlw	0
  6494  102E  3464               	retlw	100
  6495  102F  3401               	retlw	1
  6496  1030                     __end_of_mtouch_button_init:	
  6497                           
  6498                           	psect	stringtext9
  6499  1030                     __pstringtext9:	
  6500  1030                     _mtouch_sensor_init:	
  6501  1030  3400               	retlw	0
  6502  1031  3401               	retlw	1
  6503  1032  3414               	retlw	20
  6504  1033  340A               	retlw	10
  6505  1034  3420               	retlw	32
  6506  1035  3400               	retlw	0
  6507  1036  3400               	retlw	0
  6508  1037  3400               	retlw	0
  6509  1038  3400               	retlw	0
  6510  1039  3401               	retlw	1
  6511  103A  3402               	retlw	2
  6512  103B  3414               	retlw	20
  6513  103C  340A               	retlw	10
  6514  103D  3420               	retlw	32
  6515  103E  3400               	retlw	0
  6516  103F  3400               	retlw	0
  6517  1040  3400               	retlw	0
  6518  1041  3400               	retlw	0
  6519  1042  3402               	retlw	2
  6520  1043  3403               	retlw	3
  6521  1044  3414               	retlw	20
  6522  1045  340A               	retlw	10
  6523  1046  3420               	retlw	32
  6524  1047  3400               	retlw	0
  6525  1048  3400               	retlw	0
  6526  1049  3400               	retlw	0
  6527  104A  3400               	retlw	0
  6528  104B                     __end_of_mtouch_sensor_init:	
  6529  0018                     _LATCbits	set	24
  6530  001E                     _T0CON0bits	set	30
  6531  001E                     _T0CON0	set	30
  6532  001C                     _TMR0L	set	28
  6533  001D                     _TMR0H	set	29
  6534  001F                     _T0CON1	set	31
  6535  0013                     _TRISC	set	19
  6536  0012                     _TRISB	set	18
  6537  0011                     _TRISA	set	17
  6538  0018                     _LATC	set	24
  6539  0017                     _LATB	set	23
  6540  0016                     _LATA	set	22
  6541  000B                     _INTCONbits	set	11
  6542  0011                     _TRISAbits	set	17
  6543  005F                     _GIE	set	95
  6544  0090                     _ADACC	set	144
  6545  0093                     _ADCON0bits	set	147
  6546  009E                     _ADPCH	set	158
  6547  009C                     _ADPRE	set	156
  6548  009D                     _ADACQ	set	157
  6549  0093                     _ADCON0	set	147
  6550  0096                     _ADCON3	set	150
  6551  0095                     _ADCON2	set	149
  6552  0094                     _ADCON1	set	148
  6553  009B                     _ADCAP	set	155
  6554  009A                     _ADREF	set	154
  6555  0098                     _ADCLK	set	152
  6556  0114                     _ADFLTR	set	276
  6557  0119                     _RC1REG	set	281
  6558  011D                     _RC1STAbits	set	285
  6559  011A                     _TX1REG	set	282
  6560  011E                     _TX1STAbits	set	286
  6561  011C                     _SP1BRGH	set	284
  6562  011B                     _SP1BRGL	set	283
  6563  011E                     _TX1STA	set	286
  6564  011D                     _RC1STA	set	285
  6565  011F                     _BAUD1CON	set	287
  6566  010D                     _ADRPT	set	269
  6567  0113                     _ADSTPTH	set	275
  6568  0112                     _ADSTPTL	set	274
  6569  0111                     _ADUTHH	set	273
  6570  0110                     _ADUTHL	set	272
  6571  010F                     _ADLTHH	set	271
  6572  010E                     _ADLTHL	set	270
  6573  020F                     _T1GCONbits	set	527
  6574  020E                     _T1CONbits	set	526
  6575  020E                     _T1CON	set	526
  6576  020C                     _TMR1L	set	524
  6577  020D                     _TMR1H	set	525
  6578  0211                     _T1CLK	set	529
  6579  0210                     _T1GATE	set	528
  6580  020F                     _T1GCON	set	527
  6581  070F                     _PIR3bits	set	1807
  6582  0719                     _PIE3bits	set	1817
  6583  070C                     _PIR0bits	set	1804
  6584  0716                     _PIE0bits	set	1814
  6585  071A                     _PIE4bits	set	1818
  6586  0710                     _PIR4bits	set	1808
  6587  0717                     _PIE1bits	set	1815
  6588  070D                     _PIR1bits	set	1805
  6589  079B                     _PMD5	set	1947
  6590  079A                     _PMD4	set	1946
  6591  0799                     _PMD3	set	1945
  6592  0798                     _PMD2	set	1944
  6593  0797                     _PMD1	set	1943
  6594  0796                     _PMD0	set	1942
  6595  081F                     _NVMCON2	set	2079
  6596  081C                     _NVMDATL	set	2076
  6597  081D                     _NVMDATH	set	2077
  6598  081E                     _NVMCON1bits	set	2078
  6599  081B                     _NVMADRH	set	2075
  6600  081A                     _NVMADRL	set	2074
  6601  0892                     _OSCTUNE	set	2194
  6602  0893                     _OSCFRQ	set	2195
  6603  0891                     _OSCEN	set	2193
  6604  088F                     _OSCCON3	set	2191
  6605  088D                     _OSCCON1	set	2189
  6606  4480                     _PLLR	set	17536
  6607  0ECB                     _RXPPS	set	3787
  6608  0F26                     _RC6PPS	set	3878
  6609  0F51                     _SLRCONC	set	3921
  6610  0F46                     _SLRCONB	set	3910
  6611  0F3B                     _SLRCONA	set	3899
  6612  0F50                     _ODCONC	set	3920
  6613  0F45                     _ODCONB	set	3909
  6614  0F3A                     _ODCONA	set	3898
  6615  0F4F                     _WPUC	set	3919
  6616  0F39                     _WPUA	set	3897
  6617  0F44                     _WPUB	set	3908
  6618  0F65                     _WPUE	set	3941
  6619  0F38                     _ANSELA	set	3896
  6620  0F43                     _ANSELB	set	3907
  6621  0F4E                     _ANSELC	set	3918
  6622                           
  6623                           ; #config settings
  6624  0000                     
  6625                           	psect	cinit
  6626  0034                     start_initialization:	
  6627  0034                     __initialization:	
  6628                           
  6629                           ; Initialize objects allocated to BANK1
  6630  0034  3089               	movlw	low __pidataBANK1
  6631  0035  0084               	movwf	4
  6632  0036  3097               	movlw	(high __pidataBANK1)| (0+128)
  6633  0037  0085               	movwf	5
  6634  0038  30DC               	movlw	low __pdataBANK1
  6635  0039  0086               	movwf	6
  6636  003A  3000               	movlw	high __pdataBANK1
  6637  003B  0087               	movwf	7
  6638  003C  300F               	movlw	15
  6639  003D  3196  269D  3180   	fcall	init_ram
  6640                           
  6641                           ; Clear objects allocated to BANK0
  6642  0040  3020               	movlw	low __pbssBANK0
  6643  0041  0084               	movwf	4
  6644  0042  3000               	movlw	high __pbssBANK0
  6645  0043  0085               	movwf	5
  6646  0044  3030               	movlw	48
  6647  0045  3196  2697  3180   	fcall	clear_ram0
  6648                           
  6649                           ; Clear objects allocated to BANK1
  6650  0048  30A0               	movlw	low __pbssBANK1
  6651  0049  0084               	movwf	4
  6652  004A  3000               	movlw	high __pbssBANK1
  6653  004B  0085               	movwf	5
  6654  004C  303C               	movlw	60
  6655  004D  3196  2697  3180   	fcall	clear_ram0
  6656                           
  6657                           ; Clear objects allocated to BANK2
  6658  0050  3020               	movlw	low __pbssBANK2
  6659  0051  0084               	movwf	4
  6660  0052  3001               	movlw	high __pbssBANK2
  6661  0053  0085               	movwf	5
  6662  0054  3025               	movlw	37
  6663  0055  3196  2697  3180   	fcall	clear_ram0
  6664                           
  6665                           ; Clear objects allocated to BANK3
  6666  0058  30A0               	movlw	low __pbssBANK3
  6667  0059  0084               	movwf	4
  6668  005A  3001               	movlw	high __pbssBANK3
  6669  005B  0085               	movwf	5
  6670  005C  3030               	movlw	48
  6671  005D  3196  2697         	fcall	clear_ram0
  6672  005F                     end_of_initialization:	
  6673                           ;End of C runtime variable initialization code
  6674                           
  6675  005F                     __end_of__initialization:	
  6676  005F  107E               	bcf	int$flags,0	;clear compiler interrupt flag (level 1)
  6677  0060  0020               	movlb	0
  6678  0061  3180  2863         	ljmp	_main	;jump to C main() function
  6679                           
  6680                           	psect	bssBANK0
  6681  0020                     __pbssBANK0:	
  6682  0020                     _u16_COMP_DelayCount:	
  6683  0020                     	ds	2
  6684  0022                     _u16_SLEEP_DelayCount:	
  6685  0022                     	ds	2
  6686  0024                     _TMR0_InterruptHandler:	
  6687  0024                     	ds	2
  6688  0026                     _timer0ReloadVal16bit:	
  6689  0026                     	ds	2
  6690  0028                     _TMR1_InterruptHandler:	
  6691  0028                     	ds	2
  6692  002A                     _timer1ReloadVal:	
  6693  002A                     	ds	2
  6694  002C                     _i8_R_Temperature:	
  6695  002C                     	ds	1
  6696  002D                     _i8_F_Temperature:	
  6697  002D                     	ds	1
  6698  002E                     _u8_Door_Open:	
  6699  002E                     	ds	1
  6700  002F                     _u8_ErrorCodes:	
  6701  002F                     	ds	1
  6702  0030                     _u8_COMP_Start:	
  6703  0030                     	ds	1
  6704  0031                     _v_u8_RxData:	
  6705  0031                     	ds	1
  6706  0032                     _u8_Tx_Status:	
  6707  0032                     	ds	1
  6708  0033                     _u8_Index:	
  6709  0033                     	ds	1
  6710  0034                     _i8_COMP_OFF_Temperature:	
  6711  0034                     	ds	1
  6712  0035                     _EE_COMP_Flag:	
  6713  0035                     	ds	1
  6714  0036                     _u8_COMP_Status:	
  6715  0036                     	ds	1
  6716  0037                     _u8_LOCK_Status:	
  6717  0037                     	ds	1
  6718  0038                     _u8_SuperCool_Status:	
  6719  0038                     	ds	1
  6720  0039                     _u8_REF_SetLevel:	
  6721  0039                     	ds	1
  6722  003A                     _EE_COMP_TOTAL_RUN_Count_Hr:	
  6723  003A                     	ds	1
  6724  003B                     _EE_COMP_RUN_CountDown_Min:	
  6725  003B                     	ds	1
  6726  003C                     _u8_Timer_Countdown_Min:	
  6727  003C                     	ds	1
  6728  003D                     _u8_TouchDelay:	
  6729  003D                     	ds	1
  6730  003E                     _u8_3sec_Count:	
  6731  003E                     	ds	1
  6732  003F                     _u8_DIS_Channel:	
  6733  003F                     	ds	1
  6734  0040                     _u8_IND_LEV_KEY:	
  6735  0040                     	ds	1
  6736  0041                     _u8_DIG3:	
  6737  0041                     	ds	1
  6738  0042                     _u8_DIG2:	
  6739  0042                     	ds	1
  6740  0043                     _u8_DIG1:	
  6741  0043                     	ds	1
  6742  0044                     _eusartRxCount:	
  6743  0044                     	ds	1
  6744  0045                     _eusartRxTail:	
  6745  0045                     	ds	1
  6746  0046                     _eusartRxHead:	
  6747  0046                     	ds	1
  6748  0047                     _eusartTxBufferRemaining:	
  6749  0047                     	ds	1
  6750  0048                     _eusartTxTail:	
  6751  0048                     	ds	1
  6752  0049                     _eusartTxHead:	
  6753  0049                     	ds	1
  6754  004A                     _sample_delay:	
  6755  004A                     	ds	1
  6756  004B                     _freq_index:	
  6757  004B                     	ds	1
  6758  004C                     _scanInterrupted:	
  6759  004C                     	ds	1
  6760  004D                     _sampling_flag:	
  6761  004D                     	ds	1
  6762  004E                     _currentScanSensor:	
  6763  004E                     	ds	1
  6764  004F                     _mtouch_time_toScan:	
  6765  004F                     	ds	1
  6766                           
  6767                           	psect	bssBANK1
  6768  00A0                     __pbssBANK1:	
  6769  00A0                     _sensor_medianBuffer:	
  6770  00A0                     	ds	18
  6771  00B2                     _u8_Tx_DataBuff:	
  6772  00B2                     	ds	10
  6773  00BC                     _eusartRxBuffer:	
  6774  00BC                     	ds	8
  6775  00C4                     _eusartTxBuffer:	
  6776  00C4                     	ds	8
  6777  00CC                     _packet_sample:	
  6778  00CC                     	ds	6
  6779  00D2                     Sensor_FrequencyHopping_Autotune_Process@varianceOverLimitCounter:	
  6780  00D2                     	ds	3
  6781  00D5                     medianFilter@bufferIndex:	
  6782  00D5                     	ds	3
  6783  00D8                     _EUSART_RxDefaultInterruptHandler:	
  6784  00D8                     	ds	2
  6785  00DA                     _EUSART_TxDefaultInterruptHandler:	
  6786  00DA                     	ds	2
  6787                           
  6788                           	psect	dataBANK1
  6789  00DC                     __pdataBANK1:	
  6790  00DC                     _Button_StateMachine:	
  6791  00DC                     	ds	6
  6792  00E2                     _freq_hop:	
  6793  00E2                     	ds	3
  6794  00E5                     _callback_notPressed:	
  6795  00E5                     	ds	2
  6796  00E7                     _callback_pressed:	
  6797  00E7                     	ds	2
  6798  00E9                     _callback_sampled:	
  6799  00E9                     	ds	2
  6800                           
  6801                           	psect	bssBANK2
  6802  0120                     __pbssBANK2:	
  6803  0120                     _u8_Rx_DataBuff:	
  6804  0120                     	ds	10
  6805  012A                     _mtouch_sensor:	
  6806  012A                     	ds	27
  6807                           
  6808                           	psect	bssBANK3
  6809  01A0                     __pbssBANK3:	
  6810  01A0                     _mtouch_button:	
  6811  01A0                     	ds	48
  6812                           
  6813                           	psect	inittext
  6814  169D                     init_ram:	
  6815  169D  00FE               	movwf	126
  6816  169E                     initloop:	
  6817  169E  0012               	moviw fsr0++
  6818  169F  001E               	movwi fsr1++
  6819  16A0  0BFE               	decfsz	126,f
  6820  16A1  2E9E               	goto	initloop
  6821  16A2  3400               	retlw	0
  6822                           
  6823                           	psect	clrtext
  6824  1697                     clear_ram0:	
  6825                           ;	Called with FSR0 containing the base address, and
  6826                           ;	WREG with the size to clear
  6827                           
  6828  1697  0064               	clrwdt	;clear the watchdog before getting into this loop
  6829  1698                     clrloop0:	
  6830  1698  0180               	clrf	0	;clear RAM location pointed to by FSR
  6831  1699  3101               	addfsr 0,1
  6832  169A  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  6833  169B  2E98               	goto	clrloop0	;have we reached the end yet?
  6834  169C  3400               	retlw	0	;all done for this memory range, return
  6835                           
  6836                           	psect	cstackCOMMON
  6837  0070                     __pcstackCOMMON:	
  6838  0070                     ?_MTOUCH_Sensor_InitializeAll:	
  6839  0070                     ?_MTOUCH_Button_InitializeAll:	
  6840                           ; 1 bytes @ 0x0
  6841                           
  6842  0070                     ?_MTOUCH_Sensor_Sampled_ResetAll:	
  6843                           ; 1 bytes @ 0x0
  6844                           
  6845  0070                     ?_MTOUCH_Sensor_Scan_Initialize:	
  6846                           ; 1 bytes @ 0x0
  6847                           
  6848  0070                     ?_MTOUCH_Sensor_SampleAll:	
  6849                           ; 1 bytes @ 0x0
  6850                           
  6851  0070                     ?_MTOUCH_Button_ServiceAll:	
  6852                           ; 1 bytes @ 0x0
  6853                           
  6854  0070                     ?_MTOUCH_needReburst:	
  6855                           ; 1 bytes @ 0x0
  6856                           
  6857  0070                     ?_MTOUCH_Tick:	
  6858                           ; 1 bytes @ 0x0
  6859                           
  6860  0070                     ?_MTOUCH_Button_Tick:	
  6861                           ; 1 bytes @ 0x0
  6862                           
  6863  0070                     ?_MTOUCH_Sensor_Enable:	
  6864                           ; 1 bytes @ 0x0
  6865                           
  6866  0070                     ?_MTOUCH_Sensor_Calibrate:	
  6867                           ; 1 bytes @ 0x0
  6868                           
  6869  0070                     ?_Sensor_Sampled_Reset:	
  6870                           ; 1 bytes @ 0x0
  6871                           
  6872  0070                     ?_MTOUCH_Sensor_wasSampled:	
  6873                           ; 1 bytes @ 0x0
  6874                           
  6875  0070                     ?_MTOUCH_Sensor_isEnabled:	
  6876                           ; 1 bytes @ 0x0
  6877                           
  6878  0070                     ?_MTOUCH_Sensor_isSampling:	
  6879                           ; 1 bytes @ 0x0
  6880                           
  6881  0070                     ?_Sensor_scheduleNextScan:	
  6882                           ; 1 bytes @ 0x0
  6883                           
  6884  0070                     ?_Sensor_FrequencyHopping:	
  6885                           ; 1 bytes @ 0x0
  6886                           
  6887  0070                     ?_Sensor_isCalibrated:	
  6888                           ; 1 bytes @ 0x0
  6889                           
  6890  0070                     ?_Sensor_isCalibratingAcqTime:	
  6891                           ; 1 bytes @ 0x0
  6892                           
  6893  0070                     ?_Sensor_setCalibratAcqTime:	
  6894                           ; 1 bytes @ 0x0
  6895                           
  6896  0070                     ??_Sensor_setCalibratAcqTime:	
  6897                           ; 1 bytes @ 0x0
  6898                           
  6899  0070                     ?_Sensor_setCalibrated:	
  6900                           ; 1 bytes @ 0x0
  6901                           
  6902  0070                     ??_Sensor_setCalibrated:	
  6903                           ; 1 bytes @ 0x0
  6904                           
  6905  0070                     ?_Sensor_isEnabled:	
  6906                           ; 1 bytes @ 0x0
  6907                           
  6908  0070                     ?_Sensor_setActive:	
  6909                           ; 1 bytes @ 0x0
  6910                           
  6911  0070                     ?_Sensor_setInactive:	
  6912                           ; 1 bytes @ 0x0
  6913                           
  6914  0070                     ?_Sensor_RawSample_Update:	
  6915                           ; 1 bytes @ 0x0
  6916                           
  6917  0070                     ?_MTOUCH_Sensor_Service:	
  6918                           ; 1 bytes @ 0x0
  6919                           
  6920  0070                     ?_Sensor_setSampled:	
  6921                           ; 1 bytes @ 0x0
  6922                           
  6923  0070                     ??_Sensor_setSampled:	
  6924                           ; 1 bytes @ 0x0
  6925                           
  6926  0070                     ?_Sensor_FrequencyHopping_Autotune_Process:	
  6927                           ; 1 bytes @ 0x0
  6928                           
  6929  0070                     ?_Button_Service:	
  6930                           ; 1 bytes @ 0x0
  6931                           
  6932  0070                     ?_Button_Reading_Update:	
  6933                           ; 1 bytes @ 0x0
  6934                           
  6935  0070                     ?_Button_Deviation_Update:	
  6936                           ; 1 bytes @ 0x0
  6937                           
  6938  0070                     ?_Button_Baseline_Initialize:	
  6939                           ; 1 bytes @ 0x0
  6940                           
  6941  0070                     ?_Button_Baseline_Update:	
  6942                           ; 1 bytes @ 0x0
  6943                           
  6944  0070                     ?_Button_Tick_helper:	
  6945                           ; 1 bytes @ 0x0
  6946                           
  6947  0070                     ?_Button_Reading_Update_Helper:	
  6948                           ; 1 bytes @ 0x0
  6949                           
  6950  0070                     ?_TMR1_DefaultInterruptHandler:	
  6951                           ; 1 bytes @ 0x0
  6952                           
  6953  0070                     ??_TMR1_DefaultInterruptHandler:	
  6954                           ; 1 bytes @ 0x0
  6955                           
  6956  0070                     ?_TMR0_ISR:	
  6957                           ; 1 bytes @ 0x0
  6958                           
  6959  0070                     ?_PMD_Initialize:	
  6960                           ; 1 bytes @ 0x0
  6961                           
  6962  0070                     ?_PIN_MANAGER_Initialize:	
  6963                           ; 1 bytes @ 0x0
  6964                           
  6965  0070                     ?_OSCILLATOR_Initialize:	
  6966                           ; 1 bytes @ 0x0
  6967                           
  6968  0070                     ?_TMR0_Initialize:	
  6969                           ; 1 bytes @ 0x0
  6970                           
  6971  0070                     ?_TMR0_DefaultInterruptHandler:	
  6972                           ; 1 bytes @ 0x0
  6973                           
  6974  0070                     ??_TMR0_DefaultInterruptHandler:	
  6975                           ; 1 bytes @ 0x0
  6976                           
  6977  0070                     ?_EUSART_Receive_ISR:	
  6978                           ; 1 bytes @ 0x0
  6979                           
  6980  0070                     ??_EUSART_Receive_ISR:	
  6981                           ; 1 bytes @ 0x0
  6982                           
  6983  0070                     ?_EUSART_Transmit_ISR:	
  6984                           ; 1 bytes @ 0x0
  6985                           
  6986  0070                     ??_EUSART_Transmit_ISR:	
  6987                           ; 1 bytes @ 0x0
  6988                           
  6989  0070                     ?_MTOUCH_Initialize:	
  6990                           ; 1 bytes @ 0x0
  6991                           
  6992  0070                     ?_MTOUCH_Service_Mainloop:	
  6993                           ; 1 bytes @ 0x0
  6994                           
  6995  0070                     ?_MTOUCH_Sensor_Initialize:	
  6996                           ; 1 bytes @ 0x0
  6997                           
  6998  0070                     ?_MTOUCH_Sensor_ADCC_Initialize:	
  6999                           ; 1 bytes @ 0x0
  7000                           
  7001  0070                     ?_Sensor_autoCalibration:	
  7002                           ; 1 bytes @ 0x0
  7003                           
  7004  0070                     ?_Sensor_postAcquisitionProcess:	
  7005                           ; 1 bytes @ 0x0
  7006                           
  7007  0070                     ?_ADCC_ThresholdISR_mTouch:	
  7008                           ; 1 bytes @ 0x0
  7009                           
  7010  0070                     ?_Sensor_setSamplePeriod:	
  7011                           ; 1 bytes @ 0x0
  7012                           
  7013  0070                     ?_MTOUCH_Sensor_isCalibrated:	
  7014                           ; 1 bytes @ 0x0
  7015                           
  7016  0070                     ?_MTOUCH_Button_Initialize:	
  7017                           ; 1 bytes @ 0x0
  7018                           
  7019  0070                     ?_MTOUCH_Button_isPressed:	
  7020                           ; 1 bytes @ 0x0
  7021                           
  7022  0070                     ?_TMR1_Initialize:	
  7023                           ; 1 bytes @ 0x0
  7024                           
  7025  0070                     ?_TMR1_WriteTimer:	
  7026                           ; 1 bytes @ 0x0
  7027                           
  7028  0070                     ?_TMR1_ISR:	
  7029                           ; 1 bytes @ 0x0
  7030                           
  7031  0070                     ?_INTERRUPT_InterruptManager:	
  7032                           ; 1 bytes @ 0x0
  7033                           
  7034  0070                     ?_SYSTEM_Initialize:	
  7035                           ; 1 bytes @ 0x0
  7036                           
  7037  0070                     ?_EUSART_Initialize:	
  7038                           ; 1 bytes @ 0x0
  7039                           
  7040  0070                     ?_EUSART_Read:	
  7041                           ; 1 bytes @ 0x0
  7042                           
  7043  0070                     ?_EUSART_Write:	
  7044                           ; 1 bytes @ 0x0
  7045                           
  7046  0070                     ?_Load_System_Setting:	
  7047                           ; 1 bytes @ 0x0
  7048                           
  7049  0070                     ?_Save_System_Setting:	
  7050                           ; 1 bytes @ 0x0
  7051                           
  7052  0070                     ?_v_service_routine:	
  7053                           ; 1 bytes @ 0x0
  7054                           
  7055  0070                     ?_v_seg_display:	
  7056                           ; 1 bytes @ 0x0
  7057                           
  7058  0070                     ?_v_uart_receive_data:	
  7059                           ; 1 bytes @ 0x0
  7060                           
  7061  0070                     ?_v_uart_send_data:	
  7062                           ; 1 bytes @ 0x0
  7063                           
  7064  0070                     ?_main:	
  7065                           ; 1 bytes @ 0x0
  7066                           
  7067  0070                     ?i1_Sensor_SetTrisBit:	
  7068                           ; 1 bytes @ 0x0
  7069                           
  7070  0070                     ?i1_Sensor_scheduleNextScan:	
  7071                           ; 1 bytes @ 0x0
  7072                           
  7073  0070                     ?i1_MTOUCH_Sensor_isEnabled:	
  7074                           ; 1 bytes @ 0x0
  7075                           
  7076  0070                     ?i1_Sensor_isCalibrated:	
  7077                           ; 1 bytes @ 0x0
  7078                           
  7079  0070                     ??i1_Sensor_isCalibrated:	
  7080                           ; 1 bytes @ 0x0
  7081                           
  7082  0070                     ?i1_Sensor_isCalibratingAcqTime:	
  7083                           ; 1 bytes @ 0x0
  7084                           
  7085  0070                     ??i1_Sensor_isCalibratingAcqTime:	
  7086                           ; 1 bytes @ 0x0
  7087                           
  7088  0070                     ?i1_MTOUCH_Sensor_wasSampled:	
  7089                           ; 1 bytes @ 0x0
  7090                           
  7091  0070                     ?i1_MTOUCH_Button_isPressed:	
  7092                           ; 1 bytes @ 0x0
  7093                           
  7094  0070                     ??i1_MTOUCH_Button_isPressed:	
  7095                           ; 1 bytes @ 0x0
  7096                           
  7097  0070                     ?i1___bmul:	
  7098                           ; 1 bytes @ 0x0
  7099                           
  7100  0070                     ?i1_abs:	
  7101                           ; 1 bytes @ 0x0
  7102                           
  7103  0070                     Sensor_setCalibrated@sensor:	
  7104                           ; 2 bytes @ 0x0
  7105                           
  7106  0070                     Sensor_setSampled@sensor:	
  7107                           ; 1 bytes @ 0x0
  7108                           
  7109  0070                     i1Sensor_SetTrisBit@TrisBit:	
  7110                           ; 1 bytes @ 0x0
  7111                           
  7112  0070                     i1Sensor_isCalibratingAcqTime@sensor:	
  7113                           ; 1 bytes @ 0x0
  7114                           
  7115  0070                     i1___bmul@multiplicand:	
  7116                           ; 1 bytes @ 0x0
  7117                           
  7118  0070                     TMR1_WriteTimer@timerVal:	
  7119                           ; 1 bytes @ 0x0
  7120                           
  7121  0070                     i1abs@a:	
  7122                           ; 2 bytes @ 0x0
  7123                           
  7124                           
  7125                           ; 2 bytes @ 0x0
  7126  0070                     	ds	1
  7127  0071                     ??i1_Sensor_SetTrisBit:	
  7128  0071                     ??i1___bmul:	
  7129                           ; 1 bytes @ 0x1
  7130                           
  7131  0071                     Sensor_setCalibratAcqTime@sensor:	
  7132                           ; 1 bytes @ 0x1
  7133                           
  7134  0071                     i1Sensor_SetTrisBit@sensor:	
  7135                           ; 1 bytes @ 0x1
  7136                           
  7137  0071                     i1Sensor_isCalibrated@sensor:	
  7138                           ; 1 bytes @ 0x1
  7139                           
  7140  0071                     i1MTOUCH_Button_isPressed@name:	
  7141                           ; 1 bytes @ 0x1
  7142                           
  7143                           
  7144                           ; 1 bytes @ 0x1
  7145  0071                     	ds	1
  7146  0072                     ??_TMR1_WriteTimer:	
  7147  0072                     ??_v_service_routine:	
  7148                           ; 1 bytes @ 0x2
  7149                           
  7150  0072                     ??_v_seg_display:	
  7151                           ; 1 bytes @ 0x2
  7152                           
  7153  0072                     ??i1_abs:	
  7154                           ; 1 bytes @ 0x2
  7155                           
  7156  0072                     i1___bmul@multiplier:	
  7157                           ; 1 bytes @ 0x2
  7158                           
  7159                           
  7160                           ; 1 bytes @ 0x2
  7161  0072                     	ds	1
  7162  0073                     ??_TMR0_ISR:	
  7163  0073                     ??_TMR1_ISR:	
  7164                           ; 1 bytes @ 0x3
  7165                           
  7166  0073                     i1___bmul@product:	
  7167                           ; 1 bytes @ 0x3
  7168                           
  7169                           
  7170                           ; 1 bytes @ 0x3
  7171  0073                     	ds	1
  7172  0074                     ??_Sensor_autoCalibration:	
  7173  0074                     ??i1_MTOUCH_Sensor_isEnabled:	
  7174                           ; 1 bytes @ 0x4
  7175                           
  7176  0074                     ??i1_MTOUCH_Sensor_wasSampled:	
  7177                           ; 1 bytes @ 0x4
  7178                           
  7179                           
  7180                           ; 1 bytes @ 0x4
  7181  0074                     	ds	1
  7182  0075                     i1MTOUCH_Sensor_isEnabled@sensor:	
  7183  0075                     i1MTOUCH_Sensor_wasSampled@sensor:	
  7184                           ; 1 bytes @ 0x5
  7185                           
  7186                           
  7187                           ; 1 bytes @ 0x5
  7188  0075                     	ds	1
  7189  0076                     ??i1_Sensor_scheduleNextScan:	
  7190                           
  7191                           ; 1 bytes @ 0x6
  7192  0076                     	ds	2
  7193  0078                     Sensor_autoCalibration@name:	
  7194  0078                     i1Sensor_scheduleNextScan@state:	
  7195                           ; 1 bytes @ 0x8
  7196                           
  7197                           
  7198                           ; 1 bytes @ 0x8
  7199  0078                     	ds	1
  7200  0079                     Sensor_autoCalibration@sensor:	
  7201  0079                     i1Sensor_scheduleNextScan@skipScan:	
  7202                           ; 1 bytes @ 0x9
  7203                           
  7204                           
  7205                           ; 1 bytes @ 0x9
  7206  0079                     	ds	1
  7207  007A                     i1Sensor_scheduleNextScan@sensor:	
  7208                           
  7209                           ; 1 bytes @ 0xA
  7210  007A                     	ds	1
  7211  007B                     ??_MTOUCH_Sensor_Service:	
  7212                           
  7213                           ; 1 bytes @ 0xB
  7214  007B                     	ds	2
  7215  007D                     MTOUCH_Sensor_Service@sensor:	
  7216                           
  7217                           ; 1 bytes @ 0xD
  7218  007D                     	ds	1
  7219  007E                     ??_ADCC_ThresholdISR_mTouch:	
  7220  007E                     ??_INTERRUPT_InterruptManager:	
  7221                           ; 1 bytes @ 0xE
  7222                           
  7223                           
  7224                           	psect	cstackBANK0
  7225  0050                     __pcstackBANK0:	
  7226                           ; 1 bytes @ 0xE
  7227                           
  7228  0050                     ??_MTOUCH_Sensor_Scan_Initialize:	
  7229  0050                     ??_MTOUCH_needReburst:	
  7230                           ; 1 bytes @ 0x0
  7231                           
  7232  0050                     ?_Sensor_DefaultCallback:	
  7233                           ; 1 bytes @ 0x0
  7234                           
  7235  0050                     ??_Sensor_Sampled_Reset:	
  7236                           ; 1 bytes @ 0x0
  7237                           
  7238  0050                     ??_MTOUCH_Sensor_isSampling:	
  7239                           ; 1 bytes @ 0x0
  7240                           
  7241  0050                     ??_Sensor_isCalibrated:	
  7242                           ; 1 bytes @ 0x0
  7243                           
  7244  0050                     ??_Sensor_isCalibratingAcqTime:	
  7245                           ; 1 bytes @ 0x0
  7246                           
  7247  0050                     ??_Sensor_isEnabled:	
  7248                           ; 1 bytes @ 0x0
  7249                           
  7250  0050                     ??_Sensor_setActive:	
  7251                           ; 1 bytes @ 0x0
  7252                           
  7253  0050                     ??_Sensor_setInactive:	
  7254                           ; 1 bytes @ 0x0
  7255                           
  7256  0050                     ?_Button_DefaultCallback:	
  7257                           ; 1 bytes @ 0x0
  7258                           
  7259  0050                     ??_Button_Deviation_Update:	
  7260                           ; 1 bytes @ 0x0
  7261                           
  7262  0050                     ??_Button_Baseline_Update:	
  7263                           ; 1 bytes @ 0x0
  7264                           
  7265  0050                     ??_Button_Tick_helper:	
  7266                           ; 1 bytes @ 0x0
  7267                           
  7268  0050                     ?_TMR1_SetInterruptHandler:	
  7269                           ; 1 bytes @ 0x0
  7270                           
  7271  0050                     ??_PMD_Initialize:	
  7272                           ; 1 bytes @ 0x0
  7273                           
  7274  0050                     ??_PIN_MANAGER_Initialize:	
  7275                           ; 1 bytes @ 0x0
  7276                           
  7277  0050                     ??_OSCILLATOR_Initialize:	
  7278                           ; 1 bytes @ 0x0
  7279                           
  7280  0050                     ?_TMR0_SetInterruptHandler:	
  7281                           ; 1 bytes @ 0x0
  7282                           
  7283  0050                     ?_EUSART_SetRxInterruptHandler:	
  7284                           ; 1 bytes @ 0x0
  7285                           
  7286  0050                     ?_EUSART_SetTxInterruptHandler:	
  7287                           ; 1 bytes @ 0x0
  7288                           
  7289  0050                     ?_Sensor_SetTrisBit:	
  7290                           ; 1 bytes @ 0x0
  7291                           
  7292  0050                     ??_MTOUCH_Sensor_ADCC_Initialize:	
  7293                           ; 1 bytes @ 0x0
  7294                           
  7295  0050                     ??_Sensor_setSamplePeriod:	
  7296                           ; 1 bytes @ 0x0
  7297                           
  7298  0050                     ??_MTOUCH_Button_isPressed:	
  7299                           ; 1 bytes @ 0x0
  7300                           
  7301  0050                     ?_DATAEE_WriteByte:	
  7302                           ; 1 bytes @ 0x0
  7303                           
  7304  0050                     ?_DATAEE_ReadByte:	
  7305                           ; 1 bytes @ 0x0
  7306                           
  7307  0050                     ??_EUSART_Read:	
  7308                           ; 1 bytes @ 0x0
  7309                           
  7310  0050                     ??_EUSART_Write:	
  7311                           ; 1 bytes @ 0x0
  7312                           
  7313  0050                     ?___bmul:	
  7314                           ; 1 bytes @ 0x0
  7315                           
  7316  0050                     Sensor_SetTrisBit@TrisBit:	
  7317                           ; 1 bytes @ 0x0
  7318                           
  7319  0050                     Sensor_DefaultCallback@sensor:	
  7320                           ; 1 bytes @ 0x0
  7321                           
  7322  0050                     Sensor_isEnabled@sensor:	
  7323                           ; 1 bytes @ 0x0
  7324                           
  7325  0050                     Sensor_setActive@sensor:	
  7326                           ; 1 bytes @ 0x0
  7327                           
  7328  0050                     Sensor_setInactive@sensor:	
  7329                           ; 1 bytes @ 0x0
  7330                           
  7331  0050                     Sensor_isCalibratingAcqTime@sensor:	
  7332                           ; 1 bytes @ 0x0
  7333                           
  7334  0050                     Sensor_Sampled_Reset@sensor:	
  7335                           ; 1 bytes @ 0x0
  7336                           
  7337  0050                     Button_DefaultCallback@button:	
  7338                           ; 1 bytes @ 0x0
  7339                           
  7340  0050                     ___bmul@multiplicand:	
  7341                           ; 1 bytes @ 0x0
  7342                           
  7343  0050                     TMR1_SetInterruptHandler@InterruptHandler:	
  7344                           ; 1 bytes @ 0x0
  7345                           
  7346  0050                     TMR0_SetInterruptHandler@InterruptHandler:	
  7347                           ; 2 bytes @ 0x0
  7348                           
  7349  0050                     DATAEE_WriteByte@bAdd:	
  7350                           ; 2 bytes @ 0x0
  7351                           
  7352  0050                     DATAEE_ReadByte@bAdd:	
  7353                           ; 2 bytes @ 0x0
  7354                           
  7355  0050                     EUSART_SetTxInterruptHandler@interruptHandler:	
  7356                           ; 2 bytes @ 0x0
  7357                           
  7358  0050                     EUSART_SetRxInterruptHandler@interruptHandler:	
  7359                           ; 2 bytes @ 0x0
  7360                           
  7361                           
  7362                           ; 2 bytes @ 0x0
  7363  0050                     	ds	1
  7364  0051                     ??_MTOUCH_Sensor_Sampled_ResetAll:	
  7365  0051                     ??_Sensor_DefaultCallback:	
  7366                           ; 1 bytes @ 0x1
  7367                           
  7368  0051                     ??_Button_DefaultCallback:	
  7369                           ; 1 bytes @ 0x1
  7370                           
  7371  0051                     ??_Sensor_SetTrisBit:	
  7372                           ; 1 bytes @ 0x1
  7373                           
  7374  0051                     ??___bmul:	
  7375                           ; 1 bytes @ 0x1
  7376                           
  7377  0051                     Sensor_SetTrisBit@sensor:	
  7378                           ; 1 bytes @ 0x1
  7379                           
  7380  0051                     Sensor_isCalibrated@sensor:	
  7381                           ; 1 bytes @ 0x1
  7382                           
  7383  0051                     MTOUCH_Button_isPressed@name:	
  7384                           ; 1 bytes @ 0x1
  7385                           
  7386  0051                     EUSART_Read@readValue:	
  7387                           ; 1 bytes @ 0x1
  7388                           
  7389  0051                     EUSART_Write@txData:	
  7390                           ; 1 bytes @ 0x1
  7391                           
  7392                           
  7393                           ; 1 bytes @ 0x1
  7394  0051                     	ds	1
  7395  0052                     ??_TMR1_SetInterruptHandler:	
  7396  0052                     ??_TMR0_Initialize:	
  7397                           ; 1 bytes @ 0x2
  7398                           
  7399  0052                     ??_TMR0_SetInterruptHandler:	
  7400                           ; 1 bytes @ 0x2
  7401                           
  7402  0052                     ??_EUSART_SetRxInterruptHandler:	
  7403                           ; 1 bytes @ 0x2
  7404                           
  7405  0052                     ??_EUSART_SetTxInterruptHandler:	
  7406                           ; 1 bytes @ 0x2
  7407                           
  7408  0052                     ??_TMR1_Initialize:	
  7409                           ; 1 bytes @ 0x2
  7410                           
  7411  0052                     ??_DATAEE_ReadByte:	
  7412                           ; 1 bytes @ 0x2
  7413                           
  7414  0052                     ??_EUSART_Initialize:	
  7415                           ; 1 bytes @ 0x2
  7416                           
  7417  0052                     ??_Load_System_Setting:	
  7418                           ; 1 bytes @ 0x2
  7419                           
  7420  0052                     ??_v_uart_receive_data:	
  7421                           ; 1 bytes @ 0x2
  7422                           
  7423  0052                     ??_v_uart_send_data:	
  7424                           ; 1 bytes @ 0x2
  7425                           
  7426  0052                     MTOUCH_Sensor_Sampled_ResetAll@sensor:	
  7427                           ; 1 bytes @ 0x2
  7428                           
  7429  0052                     Button_Tick_helper@button:	
  7430                           ; 1 bytes @ 0x2
  7431                           
  7432  0052                     DATAEE_WriteByte@bData:	
  7433                           ; 1 bytes @ 0x2
  7434                           
  7435  0052                     ___bmul@product:	
  7436                           ; 1 bytes @ 0x2
  7437                           
  7438                           
  7439                           ; 1 bytes @ 0x2
  7440  0052                     	ds	1
  7441  0053                     ??_MTOUCH_Button_Tick:	
  7442  0053                     ??_DATAEE_WriteByte:	
  7443                           ; 1 bytes @ 0x3
  7444                           
  7445  0053                     DATAEE_WriteByte@GIEBitValue:	
  7446                           ; 1 bytes @ 0x3
  7447                           
  7448  0053                     ___bmul@multiplier:	
  7449                           ; 1 bytes @ 0x3
  7450                           
  7451                           
  7452                           ; 1 bytes @ 0x3
  7453  0053                     	ds	1
  7454  0054                     ??_MTOUCH_Sensor_Enable:	
  7455  0054                     ??_MTOUCH_Sensor_Calibrate:	
  7456                           ; 1 bytes @ 0x4
  7457                           
  7458  0054                     ??_MTOUCH_Sensor_wasSampled:	
  7459                           ; 1 bytes @ 0x4
  7460                           
  7461  0054                     ??_MTOUCH_Sensor_isEnabled:	
  7462                           ; 1 bytes @ 0x4
  7463                           
  7464  0054                     ??_MTOUCH_Sensor_isCalibrated:	
  7465                           ; 1 bytes @ 0x4
  7466                           
  7467  0054                     ??_Save_System_Setting:	
  7468                           ; 1 bytes @ 0x4
  7469                           
  7470  0054                     ?_abs:	
  7471                           ; 1 bytes @ 0x4
  7472                           
  7473  0054                     ?_medianFilter:	
  7474                           ; 2 bytes @ 0x4
  7475                           
  7476  0054                     ?_MTOUCH_Sensor_RawSample_Get:	
  7477                           ; 2 bytes @ 0x4
  7478                           
  7479  0054                     MTOUCH_Button_Tick@i:	
  7480                           ; 2 bytes @ 0x4
  7481                           
  7482  0054                     abs@a:	
  7483                           ; 1 bytes @ 0x4
  7484                           
  7485                           
  7486                           ; 2 bytes @ 0x4
  7487  0054                     	ds	1
  7488  0055                     ??_MTOUCH_Tick:	
  7489  0055                     MTOUCH_Sensor_Enable@sensor:	
  7490                           ; 1 bytes @ 0x5
  7491                           
  7492  0055                     MTOUCH_Sensor_isEnabled@sensor:	
  7493                           ; 1 bytes @ 0x5
  7494                           
  7495  0055                     MTOUCH_Sensor_Calibrate@sensor:	
  7496                           ; 1 bytes @ 0x5
  7497                           
  7498  0055                     MTOUCH_Sensor_wasSampled@sensor:	
  7499                           ; 1 bytes @ 0x5
  7500                           
  7501                           
  7502                           ; 1 bytes @ 0x5
  7503  0055                     	ds	1
  7504  0056                     ??_Sensor_scheduleNextScan:	
  7505  0056                     ??_abs:	
  7506                           ; 1 bytes @ 0x6
  7507                           
  7508  0056                     ??_medianFilter:	
  7509                           ; 1 bytes @ 0x6
  7510                           
  7511  0056                     ??_MTOUCH_Sensor_Initialize:	
  7512                           ; 1 bytes @ 0x6
  7513                           
  7514  0056                     ??_MTOUCH_Sensor_RawSample_Get:	
  7515                           ; 1 bytes @ 0x6
  7516                           
  7517  0056                     ??_MTOUCH_Button_Initialize:	
  7518                           ; 1 bytes @ 0x6
  7519                           
  7520  0056                     MTOUCH_Sensor_isCalibrated@sensor:	
  7521                           ; 1 bytes @ 0x6
  7522                           
  7523  0056                     Button_Baseline_Update@button:	
  7524                           ; 1 bytes @ 0x6
  7525                           
  7526                           
  7527                           ; 1 bytes @ 0x6
  7528  0056                     	ds	1
  7529  0057                     MTOUCH_Sensor_Initialize@sensor:	
  7530  0057                     MTOUCH_Sensor_RawSample_Get@name:	
  7531                           ; 1 bytes @ 0x7
  7532                           
  7533                           
  7534                           ; 1 bytes @ 0x7
  7535  0057                     	ds	1
  7536  0058                     ??_MTOUCH_Sensor_InitializeAll:	
  7537  0058                     ??_Sensor_FrequencyHopping_Autotune_Process:	
  7538                           ; 1 bytes @ 0x8
  7539                           
  7540  0058                     ??_Button_Baseline_Initialize:	
  7541                           ; 1 bytes @ 0x8
  7542                           
  7543  0058                     ??_Button_Reading_Update_Helper:	
  7544                           ; 1 bytes @ 0x8
  7545                           
  7546  0058                     Sensor_scheduleNextScan@state:	
  7547                           ; 1 bytes @ 0x8
  7548                           
  7549  0058                     MTOUCH_Button_Initialize@name:	
  7550                           ; 1 bytes @ 0x8
  7551                           
  7552                           
  7553                           ; 1 bytes @ 0x8
  7554  0058                     	ds	1
  7555  0059                     MTOUCH_Sensor_InitializeAll@sensor:	
  7556  0059                     Sensor_scheduleNextScan@skipScan:	
  7557                           ; 1 bytes @ 0x9
  7558                           
  7559  0059                     MTOUCH_Button_Initialize@button:	
  7560                           ; 1 bytes @ 0x9
  7561                           
  7562                           
  7563                           ; 1 bytes @ 0x9
  7564  0059                     	ds	1
  7565  005A                     ??_MTOUCH_Button_InitializeAll:	
  7566  005A                     Sensor_scheduleNextScan@sensor:	
  7567                           ; 1 bytes @ 0xA
  7568                           
  7569  005A                     Button_Deviation_Update@button:	
  7570                           ; 1 bytes @ 0xA
  7571                           
  7572  005A                     Button_Reading_Update_Helper@button:	
  7573                           ; 1 bytes @ 0xA
  7574                           
  7575                           
  7576                           ; 1 bytes @ 0xA
  7577  005A                     	ds	1
  7578  005B                     ??_Button_Reading_Update:	
  7579  005B                     MTOUCH_Button_InitializeAll@button:	
  7580                           ; 1 bytes @ 0xB
  7581                           
  7582  005B                     Button_Reading_Update@button:	
  7583                           ; 1 bytes @ 0xB
  7584                           
  7585  005B                     Button_Deviation_Update@deviation:	
  7586                           ; 1 bytes @ 0xB
  7587                           
  7588                           
  7589                           ; 4 bytes @ 0xB
  7590  005B                     	ds	1
  7591  005C                     ??_MTOUCH_Initialize:	
  7592  005C                     ??_SYSTEM_Initialize:	
  7593                           ; 1 bytes @ 0xC
  7594                           
  7595  005C                     medianFilter@sensor:	
  7596                           ; 1 bytes @ 0xC
  7597                           
  7598  005C                     Sensor_FrequencyHopping_Autotune_Process@newfrequencyFound:	
  7599                           ; 1 bytes @ 0xC
  7600                           
  7601  005C                     Button_Baseline_Initialize@button:	
  7602                           ; 1 bytes @ 0xC
  7603                           
  7604                           
  7605                           ; 1 bytes @ 0xC
  7606  005C                     	ds	1
  7607  005D                     ??_Sensor_RawSample_Update:	
  7608  005D                     ?_Button_State_Initializing:	
  7609                           ; 1 bytes @ 0xD
  7610                           
  7611  005D                     ?_Button_State_NotPressed:	
  7612                           ; 1 bytes @ 0xD
  7613                           
  7614  005D                     ?_Button_State_Pressed:	
  7615                           ; 1 bytes @ 0xD
  7616                           
  7617  005D                     Button_State_Initializing@button:	
  7618                           ; 1 bytes @ 0xD
  7619                           
  7620  005D                     Button_State_NotPressed@button:	
  7621                           ; 1 bytes @ 0xD
  7622                           
  7623  005D                     Button_State_Pressed@button:	
  7624                           ; 1 bytes @ 0xD
  7625                           
  7626  005D                     Sensor_RawSample_Update@result:	
  7627                           ; 1 bytes @ 0xD
  7628                           
  7629  005D                     Sensor_FrequencyHopping_Autotune_Process@variance:	
  7630                           ; 2 bytes @ 0xD
  7631                           
  7632                           
  7633                           ; 2 bytes @ 0xD
  7634  005D                     	ds	1
  7635  005E                     ??_Button_State_Initializing:	
  7636  005E                     ??_Button_State_NotPressed:	
  7637                           ; 1 bytes @ 0xE
  7638                           
  7639  005E                     ??_Button_State_Pressed:	
  7640                           ; 1 bytes @ 0xE
  7641                           
  7642                           
  7643                           ; 1 bytes @ 0xE
  7644  005E                     	ds	1
  7645  005F                     Sensor_RawSample_Update@sensor:	
  7646  005F                     Sensor_FrequencyHopping_Autotune_Process@maxVariance:	
  7647                           ; 1 bytes @ 0xF
  7648                           
  7649                           
  7650                           ; 2 bytes @ 0xF
  7651  005F                     	ds	1
  7652  0060                     ??_Sensor_postAcquisitionProcess:	
  7653                           
  7654                           ; 1 bytes @ 0x10
  7655  0060                     	ds	1
  7656  0061                     Sensor_FrequencyHopping_Autotune_Process@selectedFrequency:	
  7657                           
  7658                           ; 1 bytes @ 0x11
  7659  0061                     	ds	1
  7660  0062                     ??_Button_Service:	
  7661  0062                     Sensor_postAcquisitionProcess@name:	
  7662                           ; 1 bytes @ 0x12
  7663                           
  7664  0062                     Sensor_FrequencyHopping_Autotune_Process@sensor:	
  7665                           ; 1 bytes @ 0x12
  7666                           
  7667                           
  7668                           ; 1 bytes @ 0x12
  7669  0062                     	ds	1
  7670  0063                     Sensor_postAcquisitionProcess@sensor:	
  7671  0063                     Sensor_FrequencyHopping_Autotune_Process@frequencyIndex:	
  7672                           ; 1 bytes @ 0x13
  7673                           
  7674                           
  7675                           ; 1 bytes @ 0x13
  7676  0063                     	ds	1
  7677  0064                     ??_Sensor_FrequencyHopping:	
  7678  0064                     Button_Service@name:	
  7679                           ; 1 bytes @ 0x14
  7680                           
  7681                           
  7682                           ; 1 bytes @ 0x14
  7683  0064                     	ds	1
  7684  0065                     Sensor_FrequencyHopping@sensor:	
  7685  0065                     Button_Service@button:	
  7686                           ; 1 bytes @ 0x15
  7687                           
  7688                           
  7689                           ; 1 bytes @ 0x15
  7690  0065                     	ds	1
  7691  0066                     ??_MTOUCH_Sensor_SampleAll:	
  7692  0066                     ??_MTOUCH_Button_ServiceAll:	
  7693                           ; 1 bytes @ 0x16
  7694                           
  7695                           
  7696                           ; 1 bytes @ 0x16
  7697  0066                     	ds	1
  7698  0067                     MTOUCH_Sensor_SampleAll@sensor:	
  7699  0067                     MTOUCH_Button_ServiceAll@button:	
  7700                           ; 1 bytes @ 0x17
  7701                           
  7702                           
  7703                           ; 1 bytes @ 0x17
  7704  0067                     	ds	1
  7705  0068                     ??_MTOUCH_Service_Mainloop:	
  7706                           
  7707                           ; 1 bytes @ 0x18
  7708  0068                     	ds	1
  7709  0069                     ??_main:	
  7710                           
  7711                           ; 1 bytes @ 0x19
  7712  0069                     	ds	1
  7713  006A                     main@i:	
  7714                           
  7715                           ; 2 bytes @ 0x1A
  7716  006A                     	ds	2
  7717                           
  7718                           	psect	maintext
  7719  0063                     __pmaintext:	
  7720 ;;
  7721 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
  7722 ;;
  7723 ;; *************** function _main *****************
  7724 ;; Defined at:
  7725 ;;		line 253 in file "main.c"
  7726 ;; Parameters:    Size  Location     Type
  7727 ;;		None
  7728 ;; Auto vars:     Size  Location     Type
  7729 ;;  i               2   26[BANK0 ] int 
  7730 ;; Return value:  Size  Location     Type
  7731 ;;                  1    wreg      void 
  7732 ;; Registers used:
  7733 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7734 ;; Tracked objects:
  7735 ;;		On entry : B1F/0
  7736 ;;		On exit  : 0/0
  7737 ;;		Unchanged: 0/0
  7738 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
  7739 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  7740 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  7741 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  7742 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  7743 ;;Total ram usage:        3 bytes
  7744 ;; Hardware stack levels required when called:   13
  7745 ;; This function calls:
  7746 ;;		_DATAEE_WriteByte
  7747 ;;		_EUSART_Initialize
  7748 ;;		_Load_System_Setting
  7749 ;;		_MTOUCH_Button_isPressed
  7750 ;;		_MTOUCH_Service_Mainloop
  7751 ;;		_SYSTEM_Initialize
  7752 ;;		_Save_System_Setting
  7753 ;;		_TMR0_SetInterruptHandler
  7754 ;;		_TMR1_SetInterruptHandler
  7755 ;;		_v_uart_receive_data
  7756 ;;		_v_uart_send_data
  7757 ;; This function is called by:
  7758 ;;		Startup code after reset
  7759 ;; This function uses a non-reentrant model
  7760 ;;
  7761                           
  7762                           
  7763                           ;psect for function _main
  7764  0063                     _main:	
  7765                           
  7766                           ;main.c: 256: SYSTEM_Initialize();
  7767                           
  7768                           ;incstack = 0
  7769                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7770  0063  3197  27EE  3180   	fcall	_SYSTEM_Initialize
  7771                           
  7772                           ;main.c: 258: (INTCONbits.GIE = 1);
  7773  0066  178B               	bsf	11,7	;volatile
  7774                           
  7775                           ;main.c: 260: (INTCONbits.PEIE = 1);
  7776  0067  170B               	bsf	11,6	;volatile
  7777                           
  7778                           ;main.c: 261: TMR0_SetInterruptHandler(v_service_routine);
  7779  0068  30A9               	movlw	low _v_service_routine
  7780  0069  0020               	movlb	0	; select bank0
  7781  006A  00D0               	movwf	TMR0_SetInterruptHandler@InterruptHandler
  7782  006B  300D               	movlw	high _v_service_routine
  7783  006C  00D1               	movwf	TMR0_SetInterruptHandler@InterruptHandler+1
  7784  006D  3196  268B  3180   	fcall	_TMR0_SetInterruptHandler
  7785                           
  7786                           ;main.c: 262: TMR1_SetInterruptHandler(v_seg_display);
  7787  0070  3003               	movlw	low _v_seg_display
  7788  0071  0020               	movlb	0	; select bank0
  7789  0072  00D0               	movwf	TMR1_SetInterruptHandler@InterruptHandler
  7790  0073  300E               	movlw	high _v_seg_display
  7791  0074  00D1               	movwf	TMR1_SetInterruptHandler@InterruptHandler+1
  7792  0075  3196  2691  3180   	fcall	_TMR1_SetInterruptHandler
  7793                           
  7794                           ;main.c: 264: u8_DIS_Channel = 0;
  7795  0078  0020               	movlb	0	; select bank0
  7796  0079  01BF               	clrf	_u8_DIS_Channel
  7797                           
  7798                           ;main.c: 265: u8_DIG1 = 10;
  7799  007A  300A               	movlw	10
  7800  007B  00E9               	movwf	??_main
  7801  007C  0869               	movf	??_main,w
  7802  007D  00C3               	movwf	_u8_DIG1
  7803                           
  7804                           ;main.c: 266: u8_DIG2 = 10;
  7805  007E  300A               	movlw	10
  7806  007F  00E9               	movwf	??_main
  7807  0080  0869               	movf	??_main,w
  7808  0081  00C2               	movwf	_u8_DIG2
  7809                           
  7810                           ;main.c: 267: u8_DIG3 = 10;
  7811  0082  300A               	movlw	10
  7812  0083  00E9               	movwf	??_main
  7813  0084  0869               	movf	??_main,w
  7814  0085  00C1               	movwf	_u8_DIG3
  7815                           
  7816                           ;main.c: 268: u8_IND_LEV_KEY = 0b00000000;
  7817  0086  01C0               	clrf	_u8_IND_LEV_KEY
  7818                           
  7819                           ;main.c: 271: u8_COMP_Status = 0;
  7820  0087  01B6               	clrf	_u8_COMP_Status
  7821                           
  7822                           ;main.c: 272: u16_COMP_DelayCount = u16_COMP_StartDelay_Sec;
  7823  0088  3014               	movlw	20
  7824  0089  00A0               	movwf	_u16_COMP_DelayCount
  7825  008A  3000               	movlw	0
  7826  008B  00A1               	movwf	_u16_COMP_DelayCount+1
  7827                           
  7828                           ;main.c: 274: u8_Timer_Countdown_Min = 0;
  7829  008C  01BC               	clrf	_u8_Timer_Countdown_Min
  7830                           
  7831                           ;main.c: 275: u8_3sec_Count = 0;
  7832  008D  01BE               	clrf	_u8_3sec_Count
  7833                           
  7834                           ;main.c: 276: u8_TouchDelay = 0;
  7835  008E  01BD               	clrf	_u8_TouchDelay
  7836                           
  7837                           ;main.c: 277: i8_F_Temperature = 0;
  7838  008F  01AD               	clrf	_i8_F_Temperature
  7839                           
  7840                           ;main.c: 278: i8_R_Temperature = 0;
  7841  0090  01AC               	clrf	_i8_R_Temperature
  7842                           
  7843                           ;main.c: 280: Load_System_Setting();
  7844  0091  3186  262F  3180   	fcall	_Load_System_Setting
  7845  0094  0020               	movlb	0	; select bank0
  7846  0095  1098               	bcf	24,1	;volatile
  7847  0096  1018               	bcf	24,0	;volatile
  7848                           
  7849                           ;main.c: 284: u16_SLEEP_DelayCount = u16_SLEEP_StartDelay_Sec;
  7850  0097  3078               	movlw	120
  7851  0098  00A2               	movwf	_u16_SLEEP_DelayCount
  7852  0099  3000               	movlw	0
  7853  009A  00A3               	movwf	_u16_SLEEP_DelayCount+1
  7854                           
  7855                           ;main.c: 286: for (int i = 0; i < 2000; i++) {
  7856  009B  01EA               	clrf	main@i
  7857  009C  01EB               	clrf	main@i+1
  7858  009D                     l5150:	
  7859                           
  7860                           ;main.c: 287: _delay((unsigned long)((1)*(16000000/4000.0)));
  7861  009D  3006               	movlw	6
  7862  009E  0020               	movlb	0	; select bank0
  7863  009F  00E9               	movwf	??_main
  7864  00A0  3030               	movlw	48
  7865  00A1                     u4797:	
  7866  00A1  0B89               	decfsz	9,f
  7867  00A2  28A1               	goto	u4797
  7868  00A3  0BE9               	decfsz	??_main,f
  7869  00A4  28A1               	goto	u4797
  7870  00A5  0000               	nop
  7871  00A6  3001               	movlw	1
  7872  00A7  0020               	movlb	0	; select bank0
  7873  00A8  07EA               	addwf	main@i,f
  7874  00A9  3000               	movlw	0
  7875  00AA  3DEB               	addwfc	main@i+1,f
  7876  00AB  086B               	movf	main@i+1,w
  7877  00AC  3A80               	xorlw	128
  7878  00AD  00E9               	movwf	??_main
  7879  00AE  3087               	movlw	135
  7880  00AF  0269               	subwf	??_main,w
  7881  00B0  1D03               	skipz
  7882  00B1  28B4               	goto	u4325
  7883  00B2  30D0               	movlw	208
  7884  00B3  026A               	subwf	main@i,w
  7885  00B4                     u4325:	
  7886  00B4  1C03               	skipc
  7887  00B5  289D               	goto	l5150
  7888                           
  7889                           ;main.c: 288: };main.c: 289: EUSART_Initialize();
  7890  00B6  318B  2380  3180   	fcall	_EUSART_Initialize
  7891                           
  7892                           ;main.c: 290: u8_Tx_Status = 1;
  7893  00B9  0020               	movlb	0	; select bank0
  7894  00BA  01B2               	clrf	_u8_Tx_Status
  7895  00BB  0AB2               	incf	_u8_Tx_Status,f
  7896  00BC                     l5156:	
  7897                           
  7898                           ;main.c: 298: if (u8_Tx_Status) {
  7899  00BC  0832               	movf	_u8_Tx_Status,w
  7900  00BD  1903               	btfsc	3,2
  7901  00BE  28C5               	goto	l5162
  7902                           
  7903                           ;main.c: 299: v_uart_send_data();
  7904  00BF  318C  247D  3180   	fcall	_v_uart_send_data
  7905                           
  7906                           ;main.c: 300: u8_Tx_Status = 0;
  7907  00C2  0020               	movlb	0	; select bank0
  7908  00C3  01B2               	clrf	_u8_Tx_Status
  7909                           
  7910                           ;main.c: 301: } else {
  7911  00C4  28C8               	goto	l5164
  7912  00C5                     l5162:	
  7913                           
  7914                           ;main.c: 302: v_uart_receive_data();
  7915  00C5  318B  23DA  3180   	fcall	_v_uart_receive_data
  7916  00C8                     l5164:	
  7917                           
  7918                           ;main.c: 303: };main.c: 306: if (!u8_Timer_Countdown_Min) {
  7919  00C8  0020               	movlb	0	; select bank0
  7920  00C9  083C               	movf	_u8_Timer_Countdown_Min,w
  7921  00CA  1D03               	btfss	3,2
  7922  00CB  28F8               	goto	l5182
  7923                           
  7924                           ;main.c: 309: if (u8_SuperCool_Status) {
  7925  00CC  0838               	movf	_u8_SuperCool_Status,w
  7926  00CD  1903               	btfsc	3,2
  7927  00CE  28F4               	goto	l5180
  7928                           
  7929                           ;main.c: 310: EE_COMP_RUN_CountDown_Min--;
  7930  00CF  3001               	movlw	1
  7931  00D0  02BB               	subwf	_EE_COMP_RUN_CountDown_Min,f
  7932                           
  7933                           ;main.c: 311: DATAEE_WriteByte(0xF004, EE_COMP_RUN_CountDown_Min);
  7934  00D1  3004               	movlw	4
  7935  00D2  00D0               	movwf	DATAEE_WriteByte@bAdd
  7936  00D3  30F0               	movlw	240
  7937  00D4  00D1               	movwf	DATAEE_WriteByte@bAdd+1
  7938  00D5  083B               	movf	_EE_COMP_RUN_CountDown_Min,w
  7939  00D6  00E9               	movwf	??_main
  7940  00D7  0869               	movf	??_main,w
  7941  00D8  00D2               	movwf	DATAEE_WriteByte@bData
  7942  00D9  318A  227D  3180   	fcall	_DATAEE_WriteByte
  7943                           
  7944                           ;main.c: 314: if (!EE_COMP_RUN_CountDown_Min) {
  7945  00DC  0020               	movlb	0	; select bank0
  7946  00DD  083B               	movf	_EE_COMP_RUN_CountDown_Min,w
  7947  00DE  1D03               	btfss	3,2
  7948  00DF  28F4               	goto	l5180
  7949                           
  7950                           ;main.c: 315: EE_COMP_TOTAL_RUN_Count_Hr++;
  7951  00E0  3001               	movlw	1
  7952  00E1  00E9               	movwf	??_main
  7953  00E2  0869               	movf	??_main,w
  7954  00E3  07BA               	addwf	_EE_COMP_TOTAL_RUN_Count_Hr,f
  7955                           
  7956                           ;main.c: 316: DATAEE_WriteByte(0xF005, EE_COMP_TOTAL_RUN_Count_Hr);
  7957  00E4  3005               	movlw	5
  7958  00E5  00D0               	movwf	DATAEE_WriteByte@bAdd
  7959  00E6  30F0               	movlw	240
  7960  00E7  00D1               	movwf	DATAEE_WriteByte@bAdd+1
  7961  00E8  083A               	movf	_EE_COMP_TOTAL_RUN_Count_Hr,w
  7962  00E9  00E9               	movwf	??_main
  7963  00EA  0869               	movf	??_main,w
  7964  00EB  00D2               	movwf	DATAEE_WriteByte@bData
  7965  00EC  318A  227D  3180   	fcall	_DATAEE_WriteByte
  7966                           
  7967                           ;main.c: 319: EE_COMP_RUN_CountDown_Min = 60;
  7968  00EF  303C               	movlw	60
  7969  00F0  0020               	movlb	0	; select bank0
  7970  00F1  00E9               	movwf	??_main
  7971  00F2  0869               	movf	??_main,w
  7972  00F3  00BB               	movwf	_EE_COMP_RUN_CountDown_Min
  7973  00F4                     l5180:	
  7974                           
  7975                           ;main.c: 320: };main.c: 321: };main.c: 324: u8_Timer_Countdown_Min = 60;
  7976  00F4  303C               	movlw	60
  7977  00F5  00E9               	movwf	??_main
  7978  00F6  0869               	movf	??_main,w
  7979  00F7  00BC               	movwf	_u8_Timer_Countdown_Min
  7980  00F8                     l5182:	
  7981                           
  7982                           ;main.c: 325: };main.c: 330: if (u8_SuperCool_Status) {
  7983  00F8  0838               	movf	_u8_SuperCool_Status,w
  7984  00F9  1903               	btfsc	3,2
  7985  00FA  2921               	goto	l5204
  7986                           
  7987                           ;main.c: 332: if (!u8_COMP_Status) {
  7988  00FB  0836               	movf	_u8_COMP_Status,w
  7989  00FC  1D03               	btfss	3,2
  7990  00FD  2907               	goto	l5188
  7991  00FE                     l5186:	
  7992                           
  7993                           ;main.c: 333: u8_COMP_Status = 2;
  7994  00FE  3002               	movlw	2
  7995  00FF  00E9               	movwf	??_main
  7996  0100  0869               	movf	??_main,w
  7997  0101  00B6               	movwf	_u8_COMP_Status
  7998                           
  7999                           ;main.c: 334: u16_COMP_DelayCount = u16_COMP_StartDelay_Sec;
  8000  0102  3014               	movlw	20
  8001  0103  00A0               	movwf	_u16_COMP_DelayCount
  8002  0104  3000               	movlw	0
  8003  0105  00A1               	movwf	_u16_COMP_DelayCount+1
  8004                           
  8005                           ;main.c: 335: }
  8006  0106  2939               	goto	l5220
  8007  0107                     l5188:	
  8008                           
  8009                           ;main.c: 338: else if (u8_COMP_Status==2 && !u16_COMP_DelayCount) {
  8010  0107  3002               	movlw	2
  8011  0108  0636               	xorwf	_u8_COMP_Status,w
  8012  0109  1D03               	btfss	3,2
  8013  010A  2912               	goto	l5194
  8014  010B  0820               	movf	_u16_COMP_DelayCount,w
  8015  010C  0421               	iorwf	_u16_COMP_DelayCount+1,w
  8016  010D  1D03               	btfss	3,2
  8017  010E  2912               	goto	l5194
  8018  010F                     l5192:	
  8019                           
  8020                           ;main.c: 339: u8_COMP_Status = 1;
  8021  010F  01B6               	clrf	_u8_COMP_Status
  8022  0110  0AB6               	incf	_u8_COMP_Status,f
  8023                           
  8024                           ;main.c: 340: }
  8025  0111  2939               	goto	l5220
  8026  0112                     l5194:	
  8027                           
  8028                           ;main.c: 343: else if (EE_COMP_TOTAL_RUN_Count_Hr > u8_SuperCool_Hr) {
  8029  0112  3009               	movlw	9
  8030  0113  023A               	subwf	_EE_COMP_TOTAL_RUN_Count_Hr,w
  8031  0114  1C03               	skipc
  8032  0115  2939               	goto	l5220
  8033                           
  8034                           ;main.c: 344: u8_COMP_Status = 0;
  8035  0116  01B6               	clrf	_u8_COMP_Status
  8036                           
  8037                           ;main.c: 347: u8_SuperCool_Status = 0;
  8038  0117  01B8               	clrf	_u8_SuperCool_Status
  8039                           
  8040                           ;main.c: 348: EE_COMP_RUN_CountDown_Min = 60;
  8041  0118  303C               	movlw	60
  8042  0119  00E9               	movwf	??_main
  8043  011A  0869               	movf	??_main,w
  8044  011B  00BB               	movwf	_EE_COMP_RUN_CountDown_Min
  8045                           
  8046                           ;main.c: 349: EE_COMP_TOTAL_RUN_Count_Hr = 0;
  8047  011C  01BA               	clrf	_EE_COMP_TOTAL_RUN_Count_Hr
  8048                           
  8049                           ;main.c: 352: Save_System_Setting();
  8050  011D  318C  24BC  3180   	fcall	_Save_System_Setting
  8051                           
  8052                           ;main.c: 353: };main.c: 354: } else {
  8053  0120  2939               	goto	l5220
  8054  0121                     l5204:	
  8055                           
  8056                           ;main.c: 356: if (i8_R_Temperature >= i8_COMP_ON_Temperature && !u8_COMP_Status) {
  8057  0121  082C               	movf	_i8_R_Temperature,w
  8058  0122  3A80               	xorlw	128
  8059  0123  3E7C               	addlw	-132
  8060  0124  1C03               	skipc
  8061  0125  2929               	goto	l5210
  8062  0126  0836               	movf	_u8_COMP_Status,w
  8063  0127  1903               	btfsc	3,2
  8064  0128  28FE               	goto	l5186
  8065  0129                     l5210:	
  8066                           
  8067                           ;main.c: 362: else if (u8_COMP_Status==2 && !u16_COMP_DelayCount) {
  8068  0129  3002               	movlw	2
  8069  012A  0636               	xorwf	_u8_COMP_Status,w
  8070  012B  1D03               	btfss	3,2
  8071  012C  2931               	goto	l5216
  8072  012D  0820               	movf	_u16_COMP_DelayCount,w
  8073  012E  0421               	iorwf	_u16_COMP_DelayCount+1,w
  8074  012F  1903               	btfsc	3,2
  8075  0130  290F               	goto	l5192
  8076  0131                     l5216:	
  8077                           
  8078                           ;main.c: 367: else if (i8_R_Temperature <= i8_COMP_OFF_Temperature) {
  8079  0131  0834               	movf	_i8_COMP_OFF_Temperature,w
  8080  0132  3A80               	xorlw	128
  8081  0133  00E9               	movwf	??_main
  8082  0134  082C               	movf	_i8_R_Temperature,w
  8083  0135  3A80               	xorlw	128
  8084  0136  02E9               	subwf	??_main,f
  8085  0137  1803               	btfsc	3,0
  8086                           
  8087                           ;main.c: 368: u8_COMP_Status = 0;
  8088  0138  01B6               	clrf	_u8_COMP_Status
  8089  0139                     l5220:	
  8090                           
  8091                           ;main.c: 369: };main.c: 371: };main.c: 376: if (MTOUCH_Service_Mainloop()) {
  8092  0139  3189  21C1  3180   	fcall	_MTOUCH_Service_Mainloop
  8093  013C  3A00               	xorlw	0
  8094  013D  1903               	skipnz
  8095  013E  29CD               	goto	l5302
  8096                           
  8097                           ;main.c: 377: if (MTOUCH_Button_isPressed(K1) && !u8_TouchDelay) {
  8098  013F  3000               	movlw	0
  8099  0140  3189  21A5  3180   	fcall	_MTOUCH_Button_isPressed
  8100  0143  3A00               	xorlw	0
  8101  0144  1903               	skipnz
  8102  0145  2977               	goto	l5254
  8103  0146  0020               	movlb	0	; select bank0
  8104  0147  083D               	movf	_u8_TouchDelay,w
  8105  0148  1D03               	btfss	3,2
  8106  0149  2977               	goto	l5254
  8107                           
  8108                           ;main.c: 378: u8_TouchDelay = 3;
  8109  014A  3003               	movlw	3
  8110  014B  00E9               	movwf	??_main
  8111  014C  0869               	movf	??_main,w
  8112  014D  00BD               	movwf	_u8_TouchDelay
  8113                           
  8114                           ;main.c: 379: if (!u16_SLEEP_DelayCount) {
  8115  014E  0822               	movf	_u16_SLEEP_DelayCount,w
  8116  014F  0423               	iorwf	_u16_SLEEP_DelayCount+1,w
  8117  0150  1D03               	btfss	3,2
  8118  0151  2957               	goto	l5232
  8119                           
  8120                           ;main.c: 380: u16_SLEEP_DelayCount = u16_SLEEP_StartDelay_Sec;
  8121  0152  3078               	movlw	120
  8122  0153  00A2               	movwf	_u16_SLEEP_DelayCount
  8123  0154  3000               	movlw	0
  8124  0155  00A3               	movwf	_u16_SLEEP_DelayCount+1
  8125                           
  8126                           ;main.c: 381: } else if (!u8_SuperCool_Status && !u8_LOCK_Status) {
  8127  0156  2974               	goto	l5252
  8128  0157                     l5232:	
  8129  0157  0838               	movf	_u8_SuperCool_Status,w
  8130  0158  1D03               	btfss	3,2
  8131  0159  2968               	goto	l5242
  8132  015A  0837               	movf	_u8_LOCK_Status,w
  8133  015B  1D03               	btfss	3,2
  8134  015C  2968               	goto	l5242
  8135                           
  8136                           ;main.c: 382: u8_REF_SetLevel++;
  8137  015D  3001               	movlw	1
  8138  015E  00E9               	movwf	??_main
  8139  015F  0869               	movf	??_main,w
  8140  0160  07B9               	addwf	_u8_REF_SetLevel,f
  8141                           
  8142                           ;main.c: 383: if (u8_REF_SetLevel > 5) {
  8143  0161  3006               	movlw	6
  8144  0162  0239               	subwf	_u8_REF_SetLevel,w
  8145  0163  1C03               	skipc
  8146  0164  2974               	goto	l5252
  8147                           
  8148                           ;main.c: 384: u8_REF_SetLevel = 1;
  8149  0165  01B9               	clrf	_u8_REF_SetLevel
  8150  0166  0AB9               	incf	_u8_REF_SetLevel,f
  8151  0167  2974               	goto	l5252
  8152  0168                     l5242:	
  8153  0168  0838               	movf	_u8_SuperCool_Status,w
  8154  0169  1903               	btfsc	3,2
  8155  016A  2974               	goto	l5252
  8156  016B  0837               	movf	_u8_LOCK_Status,w
  8157  016C  1D03               	btfss	3,2
  8158  016D  2974               	goto	l5252
  8159                           
  8160                           ;main.c: 388: u8_SuperCool_Status = 0;
  8161  016E  01B8               	clrf	_u8_SuperCool_Status
  8162                           
  8163                           ;main.c: 389: EE_COMP_RUN_CountDown_Min = 60;
  8164  016F  303C               	movlw	60
  8165  0170  00E9               	movwf	??_main
  8166  0171  0869               	movf	??_main,w
  8167  0172  00BB               	movwf	_EE_COMP_RUN_CountDown_Min
  8168                           
  8169                           ;main.c: 390: EE_COMP_TOTAL_RUN_Count_Hr = 0;
  8170  0173  01BA               	clrf	_EE_COMP_TOTAL_RUN_Count_Hr
  8171  0174                     l5252:	
  8172                           
  8173                           ;main.c: 391: };main.c: 392: Save_System_Setting();
  8174  0174  318C  24BC  3180   	fcall	_Save_System_Setting
  8175  0177                     l5254:	
  8176                           
  8177                           ;main.c: 393: };main.c: 394: if (MTOUCH_Button_isPressed(K2) && !u8_TouchDelay) {
  8178  0177  3001               	movlw	1
  8179  0178  3189  21A5  3180   	fcall	_MTOUCH_Button_isPressed
  8180  017B  3A00               	xorlw	0
  8181  017C  1903               	skipnz
  8182  017D  299C               	goto	l5274
  8183  017E  0020               	movlb	0	; select bank0
  8184  017F  083D               	movf	_u8_TouchDelay,w
  8185  0180  1D03               	btfss	3,2
  8186  0181  299C               	goto	l5274
  8187                           
  8188                           ;main.c: 395: u8_TouchDelay = 3;
  8189  0182  3003               	movlw	3
  8190  0183  00E9               	movwf	??_main
  8191  0184  0869               	movf	??_main,w
  8192  0185  00BD               	movwf	_u8_TouchDelay
  8193                           
  8194                           ;main.c: 396: if (!u16_SLEEP_DelayCount) {
  8195  0186  0822               	movf	_u16_SLEEP_DelayCount,w
  8196  0187  0423               	iorwf	_u16_SLEEP_DelayCount+1,w
  8197  0188  1D03               	btfss	3,2
  8198  0189  298F               	goto	l5264
  8199                           
  8200                           ;main.c: 397: u16_SLEEP_DelayCount = u16_SLEEP_StartDelay_Sec;
  8201  018A  3078               	movlw	120
  8202  018B  00A2               	movwf	_u16_SLEEP_DelayCount
  8203  018C  3000               	movlw	0
  8204  018D  00A3               	movwf	_u16_SLEEP_DelayCount+1
  8205                           
  8206                           ;main.c: 398: } else if (!u8_LOCK_Status) {
  8207  018E  2999               	goto	l5272
  8208  018F                     l5264:	
  8209  018F  0837               	movf	_u8_LOCK_Status,w
  8210  0190  1D03               	btfss	3,2
  8211  0191  2999               	goto	l5272
  8212                           
  8213                           ;main.c: 400: u8_SuperCool_Status = 1;
  8214  0192  01B8               	clrf	_u8_SuperCool_Status
  8215  0193  0AB8               	incf	_u8_SuperCool_Status,f
  8216                           
  8217                           ;main.c: 401: EE_COMP_RUN_CountDown_Min = 60;
  8218  0194  303C               	movlw	60
  8219  0195  00E9               	movwf	??_main
  8220  0196  0869               	movf	??_main,w
  8221  0197  00BB               	movwf	_EE_COMP_RUN_CountDown_Min
  8222                           
  8223                           ;main.c: 402: EE_COMP_TOTAL_RUN_Count_Hr = 0;
  8224  0198  01BA               	clrf	_EE_COMP_TOTAL_RUN_Count_Hr
  8225  0199                     l5272:	
  8226                           
  8227                           ;main.c: 403: };main.c: 404: Save_System_Setting();
  8228  0199  318C  24BC  3180   	fcall	_Save_System_Setting
  8229  019C                     l5274:	
  8230                           
  8231                           ;main.c: 405: };main.c: 406: if (MTOUCH_Button_isPressed(K3) && !u8_TouchDelay) {
  8232  019C  3002               	movlw	2
  8233  019D  3189  21A5  3180   	fcall	_MTOUCH_Button_isPressed
  8234  01A0  3A00               	xorlw	0
  8235  01A1  1903               	skipnz
  8236  01A2  29AF               	goto	l5282
  8237  01A3  0020               	movlb	0	; select bank0
  8238  01A4  083D               	movf	_u8_TouchDelay,w
  8239  01A5  1D03               	btfss	3,2
  8240  01A6  29AF               	goto	l5282
  8241                           
  8242                           ;main.c: 407: if (!u16_SLEEP_DelayCount) {
  8243  01A7  0822               	movf	_u16_SLEEP_DelayCount,w
  8244  01A8  0423               	iorwf	_u16_SLEEP_DelayCount+1,w
  8245  01A9  1D03               	btfss	3,2
  8246  01AA  29AF               	goto	l5282
  8247                           
  8248                           ;main.c: 408: u16_SLEEP_DelayCount = u16_SLEEP_StartDelay_Sec;
  8249  01AB  3078               	movlw	120
  8250  01AC  00A2               	movwf	_u16_SLEEP_DelayCount
  8251  01AD  3000               	movlw	0
  8252  01AE  00A3               	movwf	_u16_SLEEP_DelayCount+1
  8253  01AF                     l5282:	
  8254                           
  8255                           ;main.c: 409: };main.c: 410: };main.c: 411: if (MTOUCH_Button_isPressed(K3) && u8_3sec_C
      +                          ount == 3 && !u8_TouchDelay) {
  8256  01AF  3002               	movlw	2
  8257  01B0  3189  21A5  3180   	fcall	_MTOUCH_Button_isPressed
  8258  01B3  3A00               	xorlw	0
  8259  01B4  1903               	skipnz
  8260  01B5  29CD               	goto	l5302
  8261  01B6  3003               	movlw	3
  8262  01B7  0020               	movlb	0	; select bank0
  8263  01B8  063E               	xorwf	_u8_3sec_Count,w
  8264  01B9  1D03               	btfss	3,2
  8265  01BA  29CD               	goto	l5302
  8266  01BB  083D               	movf	_u8_TouchDelay,w
  8267  01BC  1D03               	btfss	3,2
  8268  01BD  29CD               	goto	l5302
  8269                           
  8270                           ;main.c: 412: u8_3sec_Count = 0;
  8271  01BE  01BE               	clrf	_u8_3sec_Count
  8272                           
  8273                           ;main.c: 413: u8_TouchDelay = 3;
  8274  01BF  3003               	movlw	3
  8275  01C0  00E9               	movwf	??_main
  8276  01C1  0869               	movf	??_main,w
  8277  01C2  00BD               	movwf	_u8_TouchDelay
  8278                           
  8279                           ;main.c: 414: if (!u8_LOCK_Status) {
  8280  01C3  0837               	movf	_u8_LOCK_Status,w
  8281  01C4  1D03               	btfss	3,2
  8282  01C5  29C9               	goto	l5298
  8283                           
  8284                           ;main.c: 415: u8_LOCK_Status = 1;
  8285  01C6  01B7               	clrf	_u8_LOCK_Status
  8286  01C7  0AB7               	incf	_u8_LOCK_Status,f
  8287                           
  8288                           ;main.c: 417: } else {
  8289  01C8  29CA               	goto	l5296
  8290  01C9                     l5298:	
  8291                           
  8292                           ;main.c: 418: u8_LOCK_Status = 0;
  8293  01C9  01B7               	clrf	_u8_LOCK_Status
  8294  01CA                     l5296:	
  8295                           
  8296                           ;main.c: 416: Save_System_Setting();
  8297  01CA  318C  24BC  3180   	fcall	_Save_System_Setting
  8298  01CD                     l5302:	
  8299                           
  8300                           ;main.c: 420: };main.c: 421: };main.c: 422: };main.c: 426: if (u8_SuperCool_Status) {
  8301  01CD  0020               	movlb	0	; select bank0
  8302  01CE  0838               	movf	_u8_SuperCool_Status,w
  8303  01CF  1903               	btfsc	3,2
  8304  01D0  29D8               	goto	l5310
  8305                           
  8306                           ;main.c: 428: if(u8_LOCK_Status){
  8307  01D1  0837               	movf	_u8_LOCK_Status,w
  8308  01D2  1903               	btfsc	3,2
  8309  01D3  29D6               	goto	l5308
  8310                           
  8311                           ;main.c: 429: u8_IND_LEV_KEY = 0b00000110;
  8312  01D4  3006               	movlw	6
  8313  01D5  2A21               	goto	L11
  8314  01D6                     l5308:	
  8315                           ;main.c: 430: }else {
  8316                           
  8317                           
  8318                           ;main.c: 431: u8_IND_LEV_KEY = 0b00000101;
  8319  01D6  3005               	movlw	5
  8320  01D7  2A21               	goto	L11
  8321  01D8                     l5310:	
  8322                           
  8323                           ;main.c: 434: if (u8_REF_SetLevel == 1) {
  8324  01D8  0339               	decf	_u8_REF_SetLevel,w
  8325  01D9  1D03               	btfss	3,2
  8326  01DA  29E6               	goto	l5320
  8327                           
  8328                           ;main.c: 435: i8_COMP_OFF_Temperature = -16;
  8329  01DB  30F0               	movlw	240
  8330  01DC  00E9               	movwf	??_main
  8331  01DD  0869               	movf	??_main,w
  8332  01DE  00B4               	movwf	_i8_COMP_OFF_Temperature
  8333                           
  8334                           ;main.c: 436: if (u8_LOCK_Status) {
  8335  01DF  0837               	movf	_u8_LOCK_Status,w
  8336  01E0  1903               	btfsc	3,2
  8337  01E1  29E4               	goto	l5318
  8338                           
  8339                           ;main.c: 437: u8_IND_LEV_KEY = 0b11110110;
  8340  01E2  30F6               	movlw	246
  8341  01E3  2A21               	goto	L11
  8342  01E4                     l5318:	
  8343                           ;main.c: 438: } else {
  8344                           
  8345                           
  8346                           ;main.c: 439: u8_IND_LEV_KEY = 0b11110011;
  8347  01E4  30F3               	movlw	243
  8348  01E5  2A21               	goto	L11
  8349  01E6                     l5320:	
  8350  01E6  3002               	movlw	2
  8351  01E7  0639               	xorwf	_u8_REF_SetLevel,w
  8352  01E8  1D03               	btfss	3,2
  8353  01E9  29F5               	goto	l5330
  8354                           
  8355                           ;main.c: 442: i8_COMP_OFF_Temperature = -18;
  8356  01EA  30EE               	movlw	238
  8357  01EB  00E9               	movwf	??_main
  8358  01EC  0869               	movf	??_main,w
  8359  01ED  00B4               	movwf	_i8_COMP_OFF_Temperature
  8360                           
  8361                           ;main.c: 443: if (u8_LOCK_Status) {
  8362  01EE  0837               	movf	_u8_LOCK_Status,w
  8363  01EF  1903               	btfsc	3,2
  8364  01F0  29F3               	goto	l5328
  8365                           
  8366                           ;main.c: 444: u8_IND_LEV_KEY = 0b11101110;
  8367  01F1  30EE               	movlw	238
  8368  01F2  2A21               	goto	L11
  8369  01F3                     l5328:	
  8370                           ;main.c: 445: } else {
  8371                           
  8372                           
  8373                           ;main.c: 446: u8_IND_LEV_KEY = 0b11101011;
  8374  01F3  30EB               	movlw	235
  8375  01F4  2A21               	goto	L11
  8376  01F5                     l5330:	
  8377  01F5  3003               	movlw	3
  8378  01F6  0639               	xorwf	_u8_REF_SetLevel,w
  8379  01F7  1D03               	btfss	3,2
  8380  01F8  2A04               	goto	l5340
  8381                           
  8382                           ;main.c: 449: i8_COMP_OFF_Temperature = -20;
  8383  01F9  30EC               	movlw	236
  8384  01FA  00E9               	movwf	??_main
  8385  01FB  0869               	movf	??_main,w
  8386  01FC  00B4               	movwf	_i8_COMP_OFF_Temperature
  8387                           
  8388                           ;main.c: 450: if (u8_LOCK_Status) {
  8389  01FD  0837               	movf	_u8_LOCK_Status,w
  8390  01FE  1903               	btfsc	3,2
  8391  01FF  2A02               	goto	l5338
  8392                           
  8393                           ;main.c: 451: u8_IND_LEV_KEY = 0b11011110;
  8394  0200  30DE               	movlw	222
  8395  0201  2A21               	goto	L11
  8396  0202                     l5338:	
  8397                           ;main.c: 452: } else {
  8398                           
  8399                           
  8400                           ;main.c: 453: u8_IND_LEV_KEY = 0b11011011;
  8401  0202  30DB               	movlw	219
  8402  0203  2A21               	goto	L11
  8403  0204                     l5340:	
  8404  0204  3004               	movlw	4
  8405  0205  0639               	xorwf	_u8_REF_SetLevel,w
  8406  0206  1D03               	btfss	3,2
  8407  0207  2A13               	goto	l5350
  8408                           
  8409                           ;main.c: 456: i8_COMP_OFF_Temperature = -22;
  8410  0208  30EA               	movlw	234
  8411  0209  00E9               	movwf	??_main
  8412  020A  0869               	movf	??_main,w
  8413  020B  00B4               	movwf	_i8_COMP_OFF_Temperature
  8414                           
  8415                           ;main.c: 457: if (u8_LOCK_Status) {
  8416  020C  0837               	movf	_u8_LOCK_Status,w
  8417  020D  1903               	btfsc	3,2
  8418  020E  2A11               	goto	l5348
  8419                           
  8420                           ;main.c: 458: u8_IND_LEV_KEY = 0b10111110;
  8421  020F  30BE               	movlw	190
  8422  0210  2A21               	goto	L11
  8423  0211                     l5348:	
  8424                           ;main.c: 459: } else {
  8425                           
  8426                           
  8427                           ;main.c: 460: u8_IND_LEV_KEY = 0b10111011;
  8428  0211  30BB               	movlw	187
  8429  0212  2A21               	goto	L11
  8430  0213                     l5350:	
  8431  0213  3005               	movlw	5
  8432  0214  0639               	xorwf	_u8_REF_SetLevel,w
  8433  0215  1D03               	btfss	3,2
  8434  0216  28BC               	goto	l5156
  8435                           
  8436                           ;main.c: 463: i8_COMP_OFF_Temperature = -24;
  8437  0217  30E8               	movlw	232
  8438  0218  00E9               	movwf	??_main
  8439  0219  0869               	movf	??_main,w
  8440  021A  00B4               	movwf	_i8_COMP_OFF_Temperature
  8441                           
  8442                           ;main.c: 464: if (u8_LOCK_Status) {
  8443  021B  0837               	movf	_u8_LOCK_Status,w
  8444  021C  1903               	btfsc	3,2
  8445  021D  2A20               	goto	l5358
  8446                           
  8447                           ;main.c: 465: u8_IND_LEV_KEY = 0b01111110;
  8448  021E  307E               	movlw	126
  8449  021F  2A21               	goto	L11
  8450  0220                     l5358:	
  8451                           ;main.c: 466: } else {
  8452                           
  8453                           
  8454                           ;main.c: 467: u8_IND_LEV_KEY = 0b01111011;
  8455  0220  307B               	movlw	123
  8456  0221                     L11:	
  8457  0221  00E9               	movwf	??_main
  8458  0222  0869               	movf	??_main,w
  8459  0223  00C0               	movwf	_u8_IND_LEV_KEY
  8460  0224  28BC               	goto	l5156
  8461  0225                     __end_of_main:	
  8462                           
  8463                           	psect	text1
  8464  0C7D                     __ptext1:	
  8465 ;; *************** function _v_uart_send_data *****************
  8466 ;; Defined at:
  8467 ;;		line 226 in file "main.c"
  8468 ;; Parameters:    Size  Location     Type
  8469 ;;		None
  8470 ;; Auto vars:     Size  Location     Type
  8471 ;;		None
  8472 ;; Return value:  Size  Location     Type
  8473 ;;                  1    wreg      void 
  8474 ;; Registers used:
  8475 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8476 ;; Tracked objects:
  8477 ;;		On entry : 0/0
  8478 ;;		On exit  : 0/0
  8479 ;;		Unchanged: 0/0
  8480 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
  8481 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  8482 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  8483 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  8484 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  8485 ;;Total ram usage:        1 bytes
  8486 ;; Hardware stack levels used:    1
  8487 ;; Hardware stack levels required when called:    7
  8488 ;; This function calls:
  8489 ;;		_EUSART_Write
  8490 ;; This function is called by:
  8491 ;;		_main
  8492 ;; This function uses a non-reentrant model
  8493 ;;
  8494                           
  8495                           
  8496                           ;psect for function _v_uart_send_data
  8497  0C7D                     _v_uart_send_data:	
  8498                           
  8499                           ;main.c: 228: u8_ErrorCodes = u8_Rx_DataBuff[1];
  8500                           
  8501                           ;incstack = 0
  8502                           ; Regs used in _v_uart_send_data: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8503  0C7D  0022               	movlb	2	; select bank2
  8504  0C7E  0821               	movf	(_u8_Rx_DataBuff^(0+256)+1),w
  8505  0C7F  0020               	movlb	0	; select bank0
  8506  0C80  00D2               	movwf	??_v_uart_send_data
  8507  0C81  0852               	movf	??_v_uart_send_data,w
  8508  0C82  00AF               	movwf	_u8_ErrorCodes
  8509                           
  8510                           ;main.c: 229: i8_F_Temperature = (int8_t) u8_Rx_DataBuff[2];
  8511  0C83  0022               	movlb	2	; select bank2
  8512  0C84  0822               	movf	(_u8_Rx_DataBuff^(0+256)+2),w
  8513  0C85  0020               	movlb	0	; select bank0
  8514  0C86  00D2               	movwf	??_v_uart_send_data
  8515  0C87  0852               	movf	??_v_uart_send_data,w
  8516  0C88  00AD               	movwf	_i8_F_Temperature
  8517                           
  8518                           ;main.c: 230: i8_R_Temperature = (int8_t) u8_Rx_DataBuff[3];
  8519  0C89  0022               	movlb	2	; select bank2
  8520  0C8A  0823               	movf	(_u8_Rx_DataBuff^(0+256)+3),w
  8521  0C8B  0020               	movlb	0	; select bank0
  8522  0C8C  00D2               	movwf	??_v_uart_send_data
  8523  0C8D  0852               	movf	??_v_uart_send_data,w
  8524  0C8E  00AC               	movwf	_i8_R_Temperature
  8525                           
  8526                           ;main.c: 231: u8_Door_Open = u8_Rx_DataBuff[4];
  8527  0C8F  0022               	movlb	2	; select bank2
  8528  0C90  0824               	movf	(_u8_Rx_DataBuff^(0+256)+4),w
  8529  0C91  0020               	movlb	0	; select bank0
  8530  0C92  00D2               	movwf	??_v_uart_send_data
  8531  0C93  0852               	movf	??_v_uart_send_data,w
  8532  0C94  00AE               	movwf	_u8_Door_Open
  8533                           
  8534                           ;main.c: 234: u8_Tx_DataBuff[0] = 0xAA;
  8535  0C95  30AA               	movlw	170
  8536  0C96  00D2               	movwf	??_v_uart_send_data
  8537  0C97  0852               	movf	??_v_uart_send_data,w
  8538  0C98  0021               	movlb	1	; select bank1
  8539  0C99  00B2               	movwf	_u8_Tx_DataBuff^(0+128)
  8540                           
  8541                           ;main.c: 235: u8_Tx_DataBuff[1] = u8_COMP_Start;
  8542  0C9A  0020               	movlb	0	; select bank0
  8543  0C9B  0830               	movf	_u8_COMP_Start,w
  8544  0C9C  00D2               	movwf	??_v_uart_send_data
  8545  0C9D  0852               	movf	??_v_uart_send_data,w
  8546  0C9E  0021               	movlb	1	; select bank1
  8547  0C9F  00B3               	movwf	(_u8_Tx_DataBuff^(0+128)+1)
  8548                           
  8549                           ;main.c: 236: u8_Tx_DataBuff[2] = 0x00;
  8550  0CA0  01B4               	clrf	(_u8_Tx_DataBuff^(0+128)+2)
  8551                           
  8552                           ;main.c: 237: u8_Tx_DataBuff[3] = 0x00;
  8553  0CA1  01B5               	clrf	(_u8_Tx_DataBuff^(0+128)+3)
  8554                           
  8555                           ;main.c: 238: u8_Tx_DataBuff[4] = 0x00;
  8556  0CA2  01B6               	clrf	(_u8_Tx_DataBuff^(0+128)+4)
  8557                           
  8558                           ;main.c: 239: u8_Tx_DataBuff[5] = 0x00;
  8559  0CA3  01B7               	clrf	(_u8_Tx_DataBuff^(0+128)+5)
  8560                           
  8561                           ;main.c: 240: u8_Tx_DataBuff[6] = 0x00;
  8562  0CA4  01B8               	clrf	(_u8_Tx_DataBuff^(0+128)+6)
  8563                           
  8564                           ;main.c: 241: u8_Tx_DataBuff[7] = 0x00;
  8565  0CA5  01B9               	clrf	(_u8_Tx_DataBuff^(0+128)+7)
  8566                           
  8567                           ;main.c: 242: u8_Tx_DataBuff[8] = 0x00;
  8568  0CA6  01BA               	clrf	(_u8_Tx_DataBuff^(0+128)+8)
  8569                           
  8570                           ;main.c: 243: u8_Tx_DataBuff[9] = 0x00;
  8571  0CA7  01BB               	clrf	(_u8_Tx_DataBuff^(0+128)+9)
  8572                           
  8573                           ;main.c: 245: for (u8_Index = 0; u8_Index <=9 ; u8_Index++) {
  8574  0CA8  0020               	movlb	0	; select bank0
  8575  0CA9  01B3               	clrf	_u8_Index
  8576  0CAA                     l4964:	
  8577  0CAA  300A               	movlw	10
  8578  0CAB  0233               	subwf	_u8_Index,w
  8579  0CAC  1803               	btfsc	3,0
  8580  0CAD  0008               	return
  8581                           
  8582                           ;main.c: 246: EUSART_Write(u8_Tx_DataBuff[u8_Index]);
  8583  0CAE  0833               	movf	_u8_Index,w
  8584  0CAF  3EB2               	addlw	(low (_u8_Tx_DataBuff| 0))& (0+255)
  8585  0CB0  0086               	movwf	6
  8586  0CB1  0187               	clrf	7
  8587  0CB2  0801               	movf	1,w
  8588  0CB3  318A  22E5  318C   	fcall	_EUSART_Write
  8589  0CB6  3001               	movlw	1
  8590  0CB7  0020               	movlb	0	; select bank0
  8591  0CB8  00D2               	movwf	??_v_uart_send_data
  8592  0CB9  0852               	movf	??_v_uart_send_data,w
  8593  0CBA  07B3               	addwf	_u8_Index,f
  8594  0CBB  2CAA               	goto	l4964
  8595  0CBC                     __end_of_v_uart_send_data:	
  8596                           
  8597                           	psect	text2
  8598  0AE5                     __ptext2:	
  8599 ;; *************** function _EUSART_Write *****************
  8600 ;; Defined at:
  8601 ;;		line 148 in file "mcc_generated_files/eusart.c"
  8602 ;; Parameters:    Size  Location     Type
  8603 ;;  txData          1    wreg     unsigned char 
  8604 ;; Auto vars:     Size  Location     Type
  8605 ;;  txData          1    1[BANK0 ] unsigned char 
  8606 ;; Return value:  Size  Location     Type
  8607 ;;                  1    wreg      void 
  8608 ;; Registers used:
  8609 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  8610 ;; Tracked objects:
  8611 ;;		On entry : 0/0
  8612 ;;		On exit  : 0/0
  8613 ;;		Unchanged: 0/0
  8614 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
  8615 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  8616 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  8617 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  8618 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  8619 ;;Total ram usage:        2 bytes
  8620 ;; Hardware stack levels used:    1
  8621 ;; Hardware stack levels required when called:    6
  8622 ;; This function calls:
  8623 ;;		Nothing
  8624 ;; This function is called by:
  8625 ;;		_v_uart_send_data
  8626 ;;		_putch
  8627 ;; This function uses a non-reentrant model
  8628 ;;
  8629                           
  8630                           
  8631                           ;psect for function _EUSART_Write
  8632  0AE5                     _EUSART_Write:	
  8633                           
  8634                           ;incstack = 0
  8635                           ; Regs used in _EUSART_Write: [wreg+fsr1l+fsr1h+status,2+status,0]
  8636                           ;EUSART_Write@txData stored from wreg
  8637  0AE5  0020               	movlb	0	; select bank0
  8638  0AE6  00D1               	movwf	EUSART_Write@txData
  8639  0AE7                     l4642:	
  8640                           ;eusart.c: 150: while(0 == eusartTxBufferRemaining)
  8641                           
  8642  0AE7  0847               	movf	_eusartTxBufferRemaining,w	;volatile
  8643  0AE8  1903               	btfsc	3,2
  8644  0AE9  2AE7               	goto	l4642
  8645                           
  8646                           ;eusart.c: 152: };eusart.c: 154: if(0 == PIE3bits.TXIE)
  8647  0AEA  002E               	movlb	14	; select bank14
  8648  0AEB  1A19               	btfsc	25,4	;volatile
  8649  0AEC  2AF2               	goto	l973
  8650                           
  8651                           ;eusart.c: 155: {;eusart.c: 156: TX1REG = txData;
  8652  0AED  0020               	movlb	0	; select bank0
  8653  0AEE  0851               	movf	EUSART_Write@txData,w
  8654  0AEF  0022               	movlb	2	; select bank2
  8655  0AF0  009A               	movwf	26	;volatile
  8656                           
  8657                           ;eusart.c: 157: }
  8658  0AF1  2B06               	goto	l4656
  8659  0AF2                     l973:	
  8660                           
  8661                           ;eusart.c: 158: else;eusart.c: 159: {;eusart.c: 160: PIE3bits.TXIE = 0;
  8662  0AF2  1219               	bcf	25,4	;volatile
  8663                           
  8664                           ;eusart.c: 161: eusartTxBuffer[eusartTxHead++] = txData;
  8665  0AF3  0020               	movlb	0	; select bank0
  8666  0AF4  0851               	movf	EUSART_Write@txData,w
  8667  0AF5  00D0               	movwf	??_EUSART_Write
  8668  0AF6  0849               	movf	_eusartTxHead,w
  8669  0AF7  3EC4               	addlw	(low (_eusartTxBuffer| 0))& (0+255)
  8670  0AF8  0086               	movwf	6
  8671  0AF9  0187               	clrf	7
  8672  0AFA  0850               	movf	??_EUSART_Write,w
  8673  0AFB  0081               	movwf	1
  8674  0AFC  3001               	movlw	1
  8675  0AFD  00D0               	movwf	??_EUSART_Write
  8676  0AFE  0850               	movf	??_EUSART_Write,w
  8677  0AFF  07C9               	addwf	_eusartTxHead,f	;volatile
  8678                           
  8679                           ;eusart.c: 162: if(sizeof(eusartTxBuffer) <= eusartTxHead)
  8680  0B00  3008               	movlw	8
  8681  0B01  0249               	subwf	_eusartTxHead,w	;volatile
  8682  0B02  1803               	btfsc	3,0
  8683                           
  8684                           ;eusart.c: 163: {;eusart.c: 164: eusartTxHead = 0;
  8685  0B03  01C9               	clrf	_eusartTxHead	;volatile
  8686                           
  8687                           ;eusart.c: 165: };eusart.c: 166: eusartTxBufferRemaining--;
  8688  0B04  3001               	movlw	1
  8689  0B05  02C7               	subwf	_eusartTxBufferRemaining,f	;volatile
  8690  0B06                     l4656:	
  8691                           
  8692                           ;eusart.c: 167: };eusart.c: 168: PIE3bits.TXIE = 1;
  8693  0B06  002E               	movlb	14	; select bank14
  8694  0B07  1619               	bsf	25,4	;volatile
  8695  0B08  0008               	return
  8696  0B09                     __end_of_EUSART_Write:	
  8697                           
  8698                           	psect	text3
  8699  0BDA                     __ptext3:	
  8700 ;; *************** function _v_uart_receive_data *****************
  8701 ;; Defined at:
  8702 ;;		line 206 in file "main.c"
  8703 ;; Parameters:    Size  Location     Type
  8704 ;;		None
  8705 ;; Auto vars:     Size  Location     Type
  8706 ;;		None
  8707 ;; Return value:  Size  Location     Type
  8708 ;;                  1    wreg      void 
  8709 ;; Registers used:
  8710 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8711 ;; Tracked objects:
  8712 ;;		On entry : 0/0
  8713 ;;		On exit  : 0/0
  8714 ;;		Unchanged: 0/0
  8715 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
  8716 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  8717 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  8718 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  8719 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  8720 ;;Total ram usage:        1 bytes
  8721 ;; Hardware stack levels used:    1
  8722 ;; Hardware stack levels required when called:    7
  8723 ;; This function calls:
  8724 ;;		_EUSART_Read
  8725 ;; This function is called by:
  8726 ;;		_main
  8727 ;; This function uses a non-reentrant model
  8728 ;;
  8729                           
  8730                           
  8731                           ;psect for function _v_uart_receive_data
  8732  0BDA                     _v_uart_receive_data:	
  8733                           
  8734                           ;main.c: 207: if(!PIR3bits.RCIF){
  8735                           
  8736                           ;incstack = 0
  8737                           ; Regs used in _v_uart_receive_data: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8738  0BDA  002E               	movlb	14	; select bank14
  8739  0BDB  1E8F               	btfss	15,5	;volatile
  8740  0BDC  0008               	return
  8741                           
  8742                           ;main.c: 209: };main.c: 210: v_u8_RxData = EUSART_Read();
  8743  0BDD  3187  27E0  318B   	fcall	_EUSART_Read
  8744  0BE0  0020               	movlb	0	; select bank0
  8745  0BE1  00D2               	movwf	??_v_uart_receive_data
  8746  0BE2  0852               	movf	??_v_uart_receive_data,w
  8747  0BE3  00B1               	movwf	_v_u8_RxData
  8748                           
  8749                           ;main.c: 211: if (v_u8_RxData == 0xAA) {
  8750  0BE4  30AA               	movlw	170
  8751  0BE5  0631               	xorwf	_v_u8_RxData,w
  8752  0BE6  1D03               	btfss	3,2
  8753  0BE7  2BF7               	goto	l4934
  8754                           
  8755                           ;main.c: 212: u8_Index = 0;
  8756  0BE8  01B3               	clrf	_u8_Index
  8757                           
  8758                           ;main.c: 213: u8_Rx_DataBuff [u8_Index] = v_u8_RxData;
  8759  0BE9  0831               	movf	_v_u8_RxData,w
  8760  0BEA  00D2               	movwf	??_v_uart_receive_data
  8761  0BEB  0833               	movf	_u8_Index,w
  8762  0BEC  3E20               	addlw	(low (_u8_Rx_DataBuff| (0+256)))& (0+255)
  8763  0BED  0086               	movwf	6
  8764  0BEE  3001               	movlw	1	; select bank2/3
  8765  0BEF  0087               	movwf	7
  8766  0BF0  0852               	movf	??_v_uart_receive_data,w
  8767  0BF1  0081               	movwf	1
  8768                           
  8769                           ;main.c: 214: u8_Index++;
  8770  0BF2  3001               	movlw	1
  8771  0BF3  00D2               	movwf	??_v_uart_receive_data
  8772  0BF4  0852               	movf	??_v_uart_receive_data,w
  8773  0BF5  07B3               	addwf	_u8_Index,f
  8774                           
  8775                           ;main.c: 215: } else {
  8776  0BF6  0008               	return
  8777  0BF7                     l4934:	
  8778                           
  8779                           ;main.c: 216: u8_Rx_DataBuff [u8_Index] = v_u8_RxData;
  8780  0BF7  0831               	movf	_v_u8_RxData,w
  8781  0BF8  00D2               	movwf	??_v_uart_receive_data
  8782  0BF9  0833               	movf	_u8_Index,w
  8783  0BFA  3E20               	addlw	(low (_u8_Rx_DataBuff| (0+256)))& (0+255)
  8784  0BFB  0086               	movwf	6
  8785  0BFC  3001               	movlw	1	; select bank2/3
  8786  0BFD  0087               	movwf	7
  8787  0BFE  0852               	movf	??_v_uart_receive_data,w
  8788  0BFF  0081               	movwf	1
  8789                           
  8790                           ;main.c: 217: u8_Index++;
  8791  0C00  3001               	movlw	1
  8792  0C01  00D2               	movwf	??_v_uart_receive_data
  8793  0C02  0852               	movf	??_v_uart_receive_data,w
  8794  0C03  07B3               	addwf	_u8_Index,f
  8795                           
  8796                           ;main.c: 218: if (u8_Index >= 9) {
  8797  0C04  3009               	movlw	9
  8798  0C05  0233               	subwf	_u8_Index,w
  8799  0C06  1C03               	skipc
  8800  0C07  0008               	return
  8801                           
  8802                           ;main.c: 219: u8_Index = 0;
  8803  0C08  01B3               	clrf	_u8_Index
  8804                           
  8805                           ;main.c: 220: v_u8_RxData = 0;
  8806  0C09  01B1               	clrf	_v_u8_RxData
  8807                           
  8808                           ;main.c: 221: u8_Tx_Status = 1;
  8809  0C0A  01B2               	clrf	_u8_Tx_Status
  8810  0C0B  0AB2               	incf	_u8_Tx_Status,f
  8811  0C0C  0008               	return
  8812  0C0D                     __end_of_v_uart_receive_data:	
  8813                           
  8814                           	psect	text4
  8815  07E0                     __ptext4:	
  8816 ;; *************** function _EUSART_Read *****************
  8817 ;; Defined at:
  8818 ;;		line 128 in file "mcc_generated_files/eusart.c"
  8819 ;; Parameters:    Size  Location     Type
  8820 ;;		None
  8821 ;; Auto vars:     Size  Location     Type
  8822 ;;  readValue       1    1[BANK0 ] unsigned char 
  8823 ;; Return value:  Size  Location     Type
  8824 ;;                  1    wreg      unsigned char 
  8825 ;; Registers used:
  8826 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  8827 ;; Tracked objects:
  8828 ;;		On entry : 0/0
  8829 ;;		On exit  : 0/0
  8830 ;;		Unchanged: 0/0
  8831 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
  8832 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  8833 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  8834 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  8835 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  8836 ;;Total ram usage:        2 bytes
  8837 ;; Hardware stack levels used:    1
  8838 ;; Hardware stack levels required when called:    6
  8839 ;; This function calls:
  8840 ;;		Nothing
  8841 ;; This function is called by:
  8842 ;;		_v_uart_receive_data
  8843 ;;		_getch
  8844 ;; This function uses a non-reentrant model
  8845 ;;
  8846                           
  8847                           
  8848                           ;psect for function _EUSART_Read
  8849  07E0                     _EUSART_Read:	
  8850  07E0                     l4620:	
  8851                           ;eusart.c: 132: while(0 == eusartRxCount)
  8852                           
  8853                           ;incstack = 0
  8854                           ; Regs used in _EUSART_Read: [wreg+fsr1l+fsr1h+status,2+status,0]
  8855                           
  8856  07E0  0020               	movlb	0	; select bank0
  8857  07E1  0844               	movf	_eusartRxCount,w	;volatile
  8858  07E2  1903               	btfsc	3,2
  8859  07E3  2FE0               	goto	l4620
  8860                           
  8861                           ;eusart.c: 134: };eusart.c: 136: readValue = eusartRxBuffer[eusartRxTail++];
  8862  07E4  0845               	movf	_eusartRxTail,w
  8863  07E5  3EBC               	addlw	(low (_eusartRxBuffer| 0))& (0+255)
  8864  07E6  0086               	movwf	6
  8865  07E7  0187               	clrf	7
  8866  07E8  0801               	movf	1,w
  8867  07E9  00D0               	movwf	??_EUSART_Read
  8868  07EA  0850               	movf	??_EUSART_Read,w
  8869  07EB  00D1               	movwf	EUSART_Read@readValue
  8870  07EC  3001               	movlw	1
  8871  07ED  00D0               	movwf	??_EUSART_Read
  8872  07EE  0850               	movf	??_EUSART_Read,w
  8873  07EF  07C5               	addwf	_eusartRxTail,f	;volatile
  8874                           
  8875                           ;eusart.c: 137: if(sizeof(eusartRxBuffer) <= eusartRxTail)
  8876  07F0  3008               	movlw	8
  8877  07F1  0245               	subwf	_eusartRxTail,w	;volatile
  8878  07F2  1803               	btfsc	3,0
  8879                           
  8880                           ;eusart.c: 138: {;eusart.c: 139: eusartRxTail = 0;
  8881  07F3  01C5               	clrf	_eusartRxTail	;volatile
  8882                           
  8883                           ;eusart.c: 140: };eusart.c: 141: PIE3bits.RCIE = 0;
  8884  07F4  002E               	movlb	14	; select bank14
  8885  07F5  1299               	bcf	25,5	;volatile
  8886                           
  8887                           ;eusart.c: 142: eusartRxCount--;
  8888  07F6  3001               	movlw	1
  8889  07F7  0020               	movlb	0	; select bank0
  8890  07F8  02C4               	subwf	_eusartRxCount,f	;volatile
  8891                           
  8892                           ;eusart.c: 143: PIE3bits.RCIE = 1;
  8893  07F9  002E               	movlb	14	; select bank14
  8894  07FA  1699               	bsf	25,5	;volatile
  8895                           
  8896                           ;eusart.c: 145: return readValue;
  8897  07FB  0020               	movlb	0	; select bank0
  8898  07FC  0851               	movf	EUSART_Read@readValue,w
  8899  07FD  0008               	return
  8900  07FE                     __end_of_EUSART_Read:	
  8901                           
  8902                           	psect	text5
  8903  0CBC                     __ptext5:	
  8904 ;; *************** function _Save_System_Setting *****************
  8905 ;; Defined at:
  8906 ;;		line 95 in file "main.c"
  8907 ;; Parameters:    Size  Location     Type
  8908 ;;		None
  8909 ;; Auto vars:     Size  Location     Type
  8910 ;;		None
  8911 ;; Return value:  Size  Location     Type
  8912 ;;                  1    wreg      void 
  8913 ;; Registers used:
  8914 ;;		wreg, status,2, status,0, pclath, cstack
  8915 ;; Tracked objects:
  8916 ;;		On entry : 0/0
  8917 ;;		On exit  : 0/0
  8918 ;;		Unchanged: 0/0
  8919 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
  8920 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  8921 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  8922 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  8923 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  8924 ;;Total ram usage:        1 bytes
  8925 ;; Hardware stack levels used:    1
  8926 ;; Hardware stack levels required when called:    7
  8927 ;; This function calls:
  8928 ;;		_DATAEE_WriteByte
  8929 ;; This function is called by:
  8930 ;;		_main
  8931 ;; This function uses a non-reentrant model
  8932 ;;
  8933                           
  8934                           
  8935                           ;psect for function _Save_System_Setting
  8936  0CBC                     _Save_System_Setting:	
  8937                           
  8938                           ;main.c: 96: DATAEE_WriteByte(0xF000, u8_REF_SetLevel);
  8939                           
  8940                           ;incstack = 0
  8941                           ; Regs used in _Save_System_Setting: [wreg+status,2+status,0+pclath+cstack]
  8942  0CBC  3000               	movlw	0
  8943  0CBD  0020               	movlb	0	; select bank0
  8944  0CBE  00D0               	movwf	DATAEE_WriteByte@bAdd
  8945  0CBF  30F0               	movlw	240
  8946  0CC0  00D1               	movwf	DATAEE_WriteByte@bAdd+1
  8947  0CC1  0839               	movf	_u8_REF_SetLevel,w
  8948  0CC2  00D4               	movwf	??_Save_System_Setting
  8949  0CC3  0854               	movf	??_Save_System_Setting,w
  8950  0CC4  00D2               	movwf	DATAEE_WriteByte@bData
  8951  0CC5  318A  227D  318C   	fcall	_DATAEE_WriteByte
  8952                           
  8953                           ;main.c: 97: DATAEE_WriteByte(0xF001, u8_SuperCool_Status);
  8954  0CC8  3001               	movlw	1
  8955  0CC9  0020               	movlb	0	; select bank0
  8956  0CCA  00D0               	movwf	DATAEE_WriteByte@bAdd
  8957  0CCB  30F0               	movlw	240
  8958  0CCC  00D1               	movwf	DATAEE_WriteByte@bAdd+1
  8959  0CCD  0838               	movf	_u8_SuperCool_Status,w
  8960  0CCE  00D4               	movwf	??_Save_System_Setting
  8961  0CCF  0854               	movf	??_Save_System_Setting,w
  8962  0CD0  00D2               	movwf	DATAEE_WriteByte@bData
  8963  0CD1  318A  227D  318C   	fcall	_DATAEE_WriteByte
  8964                           
  8965                           ;main.c: 98: DATAEE_WriteByte(0xF002, u8_LOCK_Status);
  8966  0CD4  3002               	movlw	2
  8967  0CD5  0020               	movlb	0	; select bank0
  8968  0CD6  00D0               	movwf	DATAEE_WriteByte@bAdd
  8969  0CD7  30F0               	movlw	240
  8970  0CD8  00D1               	movwf	DATAEE_WriteByte@bAdd+1
  8971  0CD9  0837               	movf	_u8_LOCK_Status,w
  8972  0CDA  00D4               	movwf	??_Save_System_Setting
  8973  0CDB  0854               	movf	??_Save_System_Setting,w
  8974  0CDC  00D2               	movwf	DATAEE_WriteByte@bData
  8975  0CDD  318A  227D  318C   	fcall	_DATAEE_WriteByte
  8976                           
  8977                           ;main.c: 99: DATAEE_WriteByte(0xF003, EE_COMP_Flag);
  8978  0CE0  3003               	movlw	3
  8979  0CE1  0020               	movlb	0	; select bank0
  8980  0CE2  00D0               	movwf	DATAEE_WriteByte@bAdd
  8981  0CE3  30F0               	movlw	240
  8982  0CE4  00D1               	movwf	DATAEE_WriteByte@bAdd+1
  8983  0CE5  0835               	movf	_EE_COMP_Flag,w
  8984  0CE6  00D4               	movwf	??_Save_System_Setting
  8985  0CE7  0854               	movf	??_Save_System_Setting,w
  8986  0CE8  00D2               	movwf	DATAEE_WriteByte@bData
  8987  0CE9  318A  227D  318C   	fcall	_DATAEE_WriteByte
  8988                           
  8989                           ;main.c: 100: DATAEE_WriteByte(0xF004, EE_COMP_RUN_CountDown_Min);
  8990  0CEC  3004               	movlw	4
  8991  0CED  0020               	movlb	0	; select bank0
  8992  0CEE  00D0               	movwf	DATAEE_WriteByte@bAdd
  8993  0CEF  30F0               	movlw	240
  8994  0CF0  00D1               	movwf	DATAEE_WriteByte@bAdd+1
  8995  0CF1  083B               	movf	_EE_COMP_RUN_CountDown_Min,w
  8996  0CF2  00D4               	movwf	??_Save_System_Setting
  8997  0CF3  0854               	movf	??_Save_System_Setting,w
  8998  0CF4  00D2               	movwf	DATAEE_WriteByte@bData
  8999  0CF5  318A  227D  318C   	fcall	_DATAEE_WriteByte
  9000                           
  9001                           ;main.c: 101: DATAEE_WriteByte(0xF005, EE_COMP_TOTAL_RUN_Count_Hr);
  9002  0CF8  3005               	movlw	5
  9003  0CF9  0020               	movlb	0	; select bank0
  9004  0CFA  00D0               	movwf	DATAEE_WriteByte@bAdd
  9005  0CFB  30F0               	movlw	240
  9006  0CFC  00D1               	movwf	DATAEE_WriteByte@bAdd+1
  9007  0CFD  083A               	movf	_EE_COMP_TOTAL_RUN_Count_Hr,w
  9008  0CFE  00D4               	movwf	??_Save_System_Setting
  9009  0CFF  0854               	movf	??_Save_System_Setting,w
  9010  0D00  00D2               	movwf	DATAEE_WriteByte@bData
  9011  0D01  318A  227D         	fcall	_DATAEE_WriteByte
  9012  0D03  0008               	return
  9013  0D04                     __end_of_Save_System_Setting:	
  9014                           
  9015                           	psect	text6
  9016  0A7D                     __ptext6:	
  9017 ;; *************** function _DATAEE_WriteByte *****************
  9018 ;; Defined at:
  9019 ;;		line 180 in file "mcc_generated_files/memory.c"
  9020 ;; Parameters:    Size  Location     Type
  9021 ;;  bAdd            2    0[BANK0 ] unsigned int 
  9022 ;;  bData           1    2[BANK0 ] unsigned char 
  9023 ;; Auto vars:     Size  Location     Type
  9024 ;;  GIEBitValue     1    3[BANK0 ] unsigned char 
  9025 ;; Return value:  Size  Location     Type
  9026 ;;                  1    wreg      void 
  9027 ;; Registers used:
  9028 ;;		wreg, status,2, status,0
  9029 ;; Tracked objects:
  9030 ;;		On entry : 0/0
  9031 ;;		On exit  : 0/0
  9032 ;;		Unchanged: 0/0
  9033 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
  9034 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  9035 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  9036 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  9037 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  9038 ;;Total ram usage:        4 bytes
  9039 ;; Hardware stack levels used:    1
  9040 ;; Hardware stack levels required when called:    6
  9041 ;; This function calls:
  9042 ;;		Nothing
  9043 ;; This function is called by:
  9044 ;;		_Save_System_Setting
  9045 ;;		_main
  9046 ;; This function uses a non-reentrant model
  9047 ;;
  9048                           
  9049                           
  9050                           ;psect for function _DATAEE_WriteByte
  9051  0A7D                     _DATAEE_WriteByte:	
  9052                           
  9053                           ;memory.c: 182: uint8_t GIEBitValue = INTCONbits.GIE;
  9054                           
  9055                           ;incstack = 0
  9056                           ; Regs used in _DATAEE_WriteByte: [wreg+status,2+status,0]
  9057  0A7D  3000               	movlw	0
  9058  0A7E  1B8B               	btfsc	11,7	;volatile
  9059  0A7F  3001               	movlw	1
  9060  0A80  0020               	movlb	0	; select bank0
  9061  0A81  00D3               	movwf	DATAEE_WriteByte@GIEBitValue
  9062                           
  9063                           ;memory.c: 184: NVMADRH = ((bAdd >> 8) & 0xFF);
  9064  0A82  0851               	movf	DATAEE_WriteByte@bAdd+1,w
  9065  0A83  0030               	movlb	16	; select bank16
  9066  0A84  009B               	movwf	27	;volatile
  9067                           
  9068                           ;memory.c: 185: NVMADRL = (bAdd & 0xFF);
  9069  0A85  0020               	movlb	0	; select bank0
  9070  0A86  0850               	movf	DATAEE_WriteByte@bAdd,w
  9071  0A87  0030               	movlb	16	; select bank16
  9072  0A88  009A               	movwf	26	;volatile
  9073                           
  9074                           ;memory.c: 186: NVMDATL = bData;
  9075  0A89  0020               	movlb	0	; select bank0
  9076  0A8A  0852               	movf	DATAEE_WriteByte@bData,w
  9077  0A8B  0030               	movlb	16	; select bank16
  9078  0A8C  009C               	movwf	28	;volatile
  9079                           
  9080                           ;memory.c: 187: NVMCON1bits.NVMREGS = 1;
  9081  0A8D  171E               	bsf	30,6	;volsfr
  9082                           
  9083                           ;memory.c: 188: NVMCON1bits.WREN = 1;
  9084  0A8E  151E               	bsf	30,2	;volsfr
  9085                           
  9086                           ;memory.c: 189: INTCONbits.GIE = 0;
  9087  0A8F  138B               	bcf	11,7	;volatile
  9088                           
  9089                           ;memory.c: 190: NVMCON2 = 0x55;
  9090  0A90  3055               	movlw	85
  9091  0A91  009F               	movwf	31	;volsfr
  9092                           
  9093                           ;memory.c: 191: NVMCON2 = 0xAA;
  9094  0A92  30AA               	movlw	170
  9095  0A93  009F               	movwf	31	;volsfr
  9096                           
  9097                           ;memory.c: 192: NVMCON1bits.WR = 1;
  9098  0A94  149E               	bsf	30,1	;volsfr
  9099  0A95                     l894:	
  9100                           ;memory.c: 195: {
  9101                           
  9102  0A95  189E               	btfsc	30,1	;volsfr
  9103  0A96  2A95               	goto	l894
  9104                           
  9105                           ;memory.c: 196: };memory.c: 198: NVMCON1bits.WREN = 0;
  9106  0A97  111E               	bcf	30,2	;volsfr
  9107                           
  9108                           ;memory.c: 199: INTCONbits.GIE = GIEBitValue;
  9109  0A98  0020               	movlb	0	; select bank0
  9110  0A99  0C53               	rrf	DATAEE_WriteByte@GIEBitValue,w
  9111  0A9A  1C03               	skipc
  9112  0A9B  138B               	bcf	11,7	;volatile
  9113  0A9C  1803               	skipnc
  9114  0A9D  178B               	bsf	11,7	;volatile
  9115  0A9E  0008               	return
  9116  0A9F                     __end_of_DATAEE_WriteByte:	
  9117                           
  9118                           	psect	text7
  9119  17EE                     __ptext7:	
  9120 ;; *************** function _SYSTEM_Initialize *****************
  9121 ;; Defined at:
  9122 ;;		line 50 in file "mcc_generated_files/mcc.c"
  9123 ;; Parameters:    Size  Location     Type
  9124 ;;		None
  9125 ;; Auto vars:     Size  Location     Type
  9126 ;;		None
  9127 ;; Return value:  Size  Location     Type
  9128 ;;                  1    wreg      void 
  9129 ;; Registers used:
  9130 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9131 ;; Tracked objects:
  9132 ;;		On entry : 0/0
  9133 ;;		On exit  : 0/0
  9134 ;;		Unchanged: 0/0
  9135 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
  9136 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  9137 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  9138 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  9139 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  9140 ;;Total ram usage:        0 bytes
  9141 ;; Hardware stack levels used:    1
  9142 ;; Hardware stack levels required when called:   11
  9143 ;; This function calls:
  9144 ;;		_MTOUCH_Initialize
  9145 ;;		_OSCILLATOR_Initialize
  9146 ;;		_PIN_MANAGER_Initialize
  9147 ;;		_PMD_Initialize
  9148 ;;		_TMR0_Initialize
  9149 ;;		_TMR1_Initialize
  9150 ;; This function is called by:
  9151 ;;		_main
  9152 ;; This function uses a non-reentrant model
  9153 ;;
  9154                           
  9155                           
  9156                           ;psect for function _SYSTEM_Initialize
  9157  17EE                     _SYSTEM_Initialize:	
  9158                           
  9159                           ;mcc.c: 52: PMD_Initialize();
  9160                           
  9161                           ;incstack = 0
  9162                           ; Regs used in _SYSTEM_Initialize: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  9163  17EE  3196  26AB  3197   	fcall	_PMD_Initialize
  9164                           
  9165                           ;mcc.c: 53: PIN_MANAGER_Initialize();
  9166  17F1  318A  22C2  3197   	fcall	_PIN_MANAGER_Initialize
  9167                           
  9168                           ;mcc.c: 54: OSCILLATOR_Initialize();
  9169  17F4  3196  26F3  3197   	fcall	_OSCILLATOR_Initialize
  9170                           
  9171                           ;mcc.c: 55: TMR1_Initialize();
  9172  17F7  3189  21FA  3197   	fcall	_TMR1_Initialize
  9173                           
  9174                           ;mcc.c: 56: TMR0_Initialize();
  9175  17FA  3189  2108  3197   	fcall	_TMR0_Initialize
  9176                           
  9177                           ;mcc.c: 58: MTOUCH_Initialize();
  9178  17FD  3197  270A         	fcall	_MTOUCH_Initialize
  9179  17FF  0008               	return
  9180  1800                     __end_of_SYSTEM_Initialize:	
  9181                           
  9182                           	psect	text8
  9183  09FA                     __ptext8:	
  9184 ;; *************** function _TMR1_Initialize *****************
  9185 ;; Defined at:
  9186 ;;		line 64 in file "mcc_generated_files/tmr1.c"
  9187 ;; Parameters:    Size  Location     Type
  9188 ;;		None
  9189 ;; Auto vars:     Size  Location     Type
  9190 ;;		None
  9191 ;; Return value:  Size  Location     Type
  9192 ;;                  1    wreg      void 
  9193 ;; Registers used:
  9194 ;;		wreg, status,2, status,0, pclath, cstack
  9195 ;; Tracked objects:
  9196 ;;		On entry : 0/0
  9197 ;;		On exit  : 0/0
  9198 ;;		Unchanged: 0/0
  9199 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
  9200 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  9201 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  9202 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  9203 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  9204 ;;Total ram usage:        0 bytes
  9205 ;; Hardware stack levels used:    1
  9206 ;; Hardware stack levels required when called:    7
  9207 ;; This function calls:
  9208 ;;		_TMR1_SetInterruptHandler
  9209 ;; This function is called by:
  9210 ;;		_SYSTEM_Initialize
  9211 ;; This function uses a non-reentrant model
  9212 ;;
  9213                           
  9214                           
  9215                           ;psect for function _TMR1_Initialize
  9216  09FA                     _TMR1_Initialize:	
  9217                           
  9218                           ;tmr1.c: 69: T1GCON = 0x00;
  9219                           
  9220                           ;incstack = 0
  9221                           ; Regs used in _TMR1_Initialize: [wreg+status,2+status,0+pclath+cstack]
  9222  09FA  0024               	movlb	4	; select bank4
  9223  09FB  018F               	clrf	15	;volatile
  9224                           
  9225                           ;tmr1.c: 72: T1GATE = 0x00;
  9226  09FC  0190               	clrf	16	;volatile
  9227                           
  9228                           ;tmr1.c: 75: T1CLK = 0x01;
  9229  09FD  3001               	movlw	1
  9230  09FE  0091               	movwf	17	;volatile
  9231                           
  9232                           ;tmr1.c: 78: TMR1H = 0xF0;
  9233  09FF  30F0               	movlw	240
  9234  0A00  008D               	movwf	13	;volatile
  9235                           
  9236                           ;tmr1.c: 81: TMR1L = 0x60;
  9237  0A01  3060               	movlw	96
  9238  0A02  008C               	movwf	12	;volatile
  9239                           
  9240                           ;tmr1.c: 84: timer1ReloadVal=(uint16_t)((TMR1H << 8) | TMR1L);
  9241  0A03  080D               	movf	13,w	;volatile
  9242  0A04  0020               	movlb	0	; select bank0
  9243  0A05  00AB               	movwf	_timer1ReloadVal+1	;volatile
  9244  0A06  0024               	movlb	4	; select bank4
  9245  0A07  080C               	movf	12,w	;volatile
  9246  0A08  0020               	movlb	0	; select bank0
  9247  0A09  00AA               	movwf	_timer1ReloadVal	;volatile
  9248                           
  9249                           ;tmr1.c: 87: PIR4bits.TMR1IF = 0;
  9250  0A0A  002E               	movlb	14	; select bank14
  9251  0A0B  1010               	bcf	16,0	;volatile
  9252                           
  9253                           ;tmr1.c: 90: PIE4bits.TMR1IE = 1;
  9254  0A0C  141A               	bsf	26,0	;volatile
  9255                           
  9256                           ;tmr1.c: 93: TMR1_SetInterruptHandler(TMR1_DefaultInterruptHandler);
  9257  0A0D  3000               	movlw	low _TMR1_DefaultInterruptHandler
  9258  0A0E  0020               	movlb	0	; select bank0
  9259  0A0F  00D0               	movwf	TMR1_SetInterruptHandler@InterruptHandler
  9260  0A10  3008               	movlw	high _TMR1_DefaultInterruptHandler
  9261  0A11  00D1               	movwf	TMR1_SetInterruptHandler@InterruptHandler+1
  9262  0A12  3196  2691         	fcall	_TMR1_SetInterruptHandler
  9263                           
  9264                           ;tmr1.c: 96: T1CON = 0x05;
  9265  0A14  3005               	movlw	5
  9266  0A15  0024               	movlb	4	; select bank4
  9267  0A16  008E               	movwf	14	;volatile
  9268  0A17  0008               	return
  9269  0A18                     __end_of_TMR1_Initialize:	
  9270                           
  9271                           	psect	text9
  9272  1691                     __ptext9:	
  9273 ;; *************** function _TMR1_SetInterruptHandler *****************
  9274 ;; Defined at:
  9275 ;;		line 178 in file "mcc_generated_files/tmr1.c"
  9276 ;; Parameters:    Size  Location     Type
  9277 ;;  InterruptHan    2    0[BANK0 ] PTR FTN()void 
  9278 ;;		 -> v_seg_display(1), TMR1_DefaultInterruptHandler(1), 
  9279 ;; Auto vars:     Size  Location     Type
  9280 ;;		None
  9281 ;; Return value:  Size  Location     Type
  9282 ;;                  1    wreg      void 
  9283 ;; Registers used:
  9284 ;;		wreg
  9285 ;; Tracked objects:
  9286 ;;		On entry : 0/0
  9287 ;;		On exit  : 0/0
  9288 ;;		Unchanged: 0/0
  9289 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
  9290 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  9291 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  9292 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  9293 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  9294 ;;Total ram usage:        2 bytes
  9295 ;; Hardware stack levels used:    1
  9296 ;; Hardware stack levels required when called:    6
  9297 ;; This function calls:
  9298 ;;		Nothing
  9299 ;; This function is called by:
  9300 ;;		_TMR1_Initialize
  9301 ;;		_main
  9302 ;; This function uses a non-reentrant model
  9303 ;;
  9304                           
  9305                           
  9306                           ;psect for function _TMR1_SetInterruptHandler
  9307  1691                     _TMR1_SetInterruptHandler:	
  9308                           
  9309                           ;tmr1.c: 179: TMR1_InterruptHandler = InterruptHandler;
  9310                           
  9311                           ;incstack = 0
  9312                           ; Regs used in _TMR1_SetInterruptHandler: [wreg]
  9313  1691  0020               	movlb	0	; select bank0
  9314  1692  0851               	movf	TMR1_SetInterruptHandler@InterruptHandler+1,w
  9315  1693  00A9               	movwf	_TMR1_InterruptHandler+1
  9316  1694  0850               	movf	TMR1_SetInterruptHandler@InterruptHandler,w
  9317  1695  00A8               	movwf	_TMR1_InterruptHandler
  9318  1696  0008               	return
  9319  1697                     __end_of_TMR1_SetInterruptHandler:	
  9320                           
  9321                           	psect	text10
  9322  0908                     __ptext10:	
  9323 ;; *************** function _TMR0_Initialize *****************
  9324 ;; Defined at:
  9325 ;;		line 66 in file "mcc_generated_files/tmr0.c"
  9326 ;; Parameters:    Size  Location     Type
  9327 ;;		None
  9328 ;; Auto vars:     Size  Location     Type
  9329 ;;		None
  9330 ;; Return value:  Size  Location     Type
  9331 ;;                  1    wreg      void 
  9332 ;; Registers used:
  9333 ;;		wreg, status,2, status,0, pclath, cstack
  9334 ;; Tracked objects:
  9335 ;;		On entry : 0/0
  9336 ;;		On exit  : 0/0
  9337 ;;		Unchanged: 0/0
  9338 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
  9339 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  9340 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  9341 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  9342 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  9343 ;;Total ram usage:        0 bytes
  9344 ;; Hardware stack levels used:    1
  9345 ;; Hardware stack levels required when called:    7
  9346 ;; This function calls:
  9347 ;;		_TMR0_SetInterruptHandler
  9348 ;; This function is called by:
  9349 ;;		_SYSTEM_Initialize
  9350 ;; This function uses a non-reentrant model
  9351 ;;
  9352                           
  9353                           
  9354                           ;psect for function _TMR0_Initialize
  9355  0908                     _TMR0_Initialize:	
  9356                           
  9357                           ;tmr0.c: 71: T0CON1 = 0x56;
  9358                           
  9359                           ;incstack = 0
  9360                           ; Regs used in _TMR0_Initialize: [wreg+status,2+status,0+pclath+cstack]
  9361  0908  3056               	movlw	86
  9362  0909  0020               	movlb	0	; select bank0
  9363  090A  009F               	movwf	31	;volatile
  9364                           
  9365                           ;tmr0.c: 74: TMR0H = 0x0B;
  9366  090B  300B               	movlw	11
  9367  090C  009D               	movwf	29	;volatile
  9368                           
  9369                           ;tmr0.c: 77: TMR0L = 0xDC;
  9370  090D  30DC               	movlw	220
  9371  090E  009C               	movwf	28	;volatile
  9372                           
  9373                           ;tmr0.c: 80: timer0ReloadVal16bit = (TMR0H << 8) | TMR0L;
  9374  090F  081D               	movf	29,w	;volatile
  9375  0910  00A7               	movwf	_timer0ReloadVal16bit+1	;volatile
  9376  0911  081C               	movf	28,w	;volatile
  9377  0912  00A6               	movwf	_timer0ReloadVal16bit	;volatile
  9378                           
  9379                           ;tmr0.c: 83: PIR0bits.TMR0IF = 0;
  9380  0913  002E               	movlb	14	; select bank14
  9381  0914  128C               	bcf	12,5	;volatile
  9382                           
  9383                           ;tmr0.c: 86: PIE0bits.TMR0IE = 1;
  9384  0915  1696               	bsf	22,5	;volatile
  9385                           
  9386                           ;tmr0.c: 89: TMR0_SetInterruptHandler(TMR0_DefaultInterruptHandler);
  9387  0916  307F               	movlw	low _TMR0_DefaultInterruptHandler
  9388  0917  0020               	movlb	0	; select bank0
  9389  0918  00D0               	movwf	TMR0_SetInterruptHandler@InterruptHandler
  9390  0919  3016               	movlw	high _TMR0_DefaultInterruptHandler
  9391  091A  00D1               	movwf	TMR0_SetInterruptHandler@InterruptHandler+1
  9392  091B  3196  268B         	fcall	_TMR0_SetInterruptHandler
  9393                           
  9394                           ;tmr0.c: 92: T0CON0 = 0x90;
  9395  091D  3090               	movlw	144
  9396  091E  0020               	movlb	0	; select bank0
  9397  091F  009E               	movwf	30	;volatile
  9398  0920  0008               	return
  9399  0921                     __end_of_TMR0_Initialize:	
  9400                           
  9401                           	psect	text11
  9402  168B                     __ptext11:	
  9403 ;; *************** function _TMR0_SetInterruptHandler *****************
  9404 ;; Defined at:
  9405 ;;		line 151 in file "mcc_generated_files/tmr0.c"
  9406 ;; Parameters:    Size  Location     Type
  9407 ;;  InterruptHan    2    0[BANK0 ] PTR FTN()void 
  9408 ;;		 -> v_service_routine(1), TMR0_DefaultInterruptHandler(1), 
  9409 ;; Auto vars:     Size  Location     Type
  9410 ;;		None
  9411 ;; Return value:  Size  Location     Type
  9412 ;;                  1    wreg      void 
  9413 ;; Registers used:
  9414 ;;		wreg
  9415 ;; Tracked objects:
  9416 ;;		On entry : 0/0
  9417 ;;		On exit  : 0/0
  9418 ;;		Unchanged: 0/0
  9419 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
  9420 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  9421 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  9422 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  9423 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  9424 ;;Total ram usage:        2 bytes
  9425 ;; Hardware stack levels used:    1
  9426 ;; Hardware stack levels required when called:    6
  9427 ;; This function calls:
  9428 ;;		Nothing
  9429 ;; This function is called by:
  9430 ;;		_TMR0_Initialize
  9431 ;;		_main
  9432 ;; This function uses a non-reentrant model
  9433 ;;
  9434                           
  9435                           
  9436                           ;psect for function _TMR0_SetInterruptHandler
  9437  168B                     _TMR0_SetInterruptHandler:	
  9438                           
  9439                           ;tmr0.c: 152: TMR0_InterruptHandler = InterruptHandler;
  9440                           
  9441                           ;incstack = 0
  9442                           ; Regs used in _TMR0_SetInterruptHandler: [wreg]
  9443  168B  0020               	movlb	0	; select bank0
  9444  168C  0851               	movf	TMR0_SetInterruptHandler@InterruptHandler+1,w
  9445  168D  00A5               	movwf	_TMR0_InterruptHandler+1
  9446  168E  0850               	movf	TMR0_SetInterruptHandler@InterruptHandler,w
  9447  168F  00A4               	movwf	_TMR0_InterruptHandler
  9448  1690  0008               	return
  9449  1691                     __end_of_TMR0_SetInterruptHandler:	
  9450                           
  9451                           	psect	text12
  9452  16AB                     __ptext12:	
  9453 ;; *************** function _PMD_Initialize *****************
  9454 ;; Defined at:
  9455 ;;		line 79 in file "mcc_generated_files/mcc.c"
  9456 ;; Parameters:    Size  Location     Type
  9457 ;;		None
  9458 ;; Auto vars:     Size  Location     Type
  9459 ;;		None
  9460 ;; Return value:  Size  Location     Type
  9461 ;;                  1    wreg      void 
  9462 ;; Registers used:
  9463 ;;		status,2
  9464 ;; Tracked objects:
  9465 ;;		On entry : 0/0
  9466 ;;		On exit  : 0/0
  9467 ;;		Unchanged: 0/0
  9468 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
  9469 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  9470 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  9471 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  9472 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  9473 ;;Total ram usage:        0 bytes
  9474 ;; Hardware stack levels used:    1
  9475 ;; Hardware stack levels required when called:    6
  9476 ;; This function calls:
  9477 ;;		Nothing
  9478 ;; This function is called by:
  9479 ;;		_SYSTEM_Initialize
  9480 ;; This function uses a non-reentrant model
  9481 ;;
  9482                           
  9483                           
  9484                           ;psect for function _PMD_Initialize
  9485  16AB                     _PMD_Initialize:	
  9486                           
  9487                           ;mcc.c: 82: PMD0 = 0x00;
  9488                           
  9489                           ;incstack = 0
  9490                           ; Regs used in _PMD_Initialize: [status,2]
  9491  16AB  002F               	movlb	15	; select bank15
  9492  16AC  0196               	clrf	22	;volatile
  9493                           
  9494                           ;mcc.c: 84: PMD1 = 0x00;
  9495  16AD  0197               	clrf	23	;volatile
  9496                           
  9497                           ;mcc.c: 86: PMD2 = 0x00;
  9498  16AE  0198               	clrf	24	;volatile
  9499                           
  9500                           ;mcc.c: 88: PMD3 = 0x00;
  9501  16AF  0199               	clrf	25	;volatile
  9502                           
  9503                           ;mcc.c: 90: PMD4 = 0x00;
  9504  16B0  019A               	clrf	26	;volatile
  9505                           
  9506                           ;mcc.c: 92: PMD5 = 0x00;
  9507  16B1  019B               	clrf	27	;volatile
  9508  16B2  0008               	return
  9509  16B3                     __end_of_PMD_Initialize:	
  9510                           
  9511                           	psect	text13
  9512  0AC2                     __ptext13:	
  9513 ;; *************** function _PIN_MANAGER_Initialize *****************
  9514 ;; Defined at:
  9515 ;;		line 57 in file "mcc_generated_files/pin_manager.c"
  9516 ;; Parameters:    Size  Location     Type
  9517 ;;		None
  9518 ;; Auto vars:     Size  Location     Type
  9519 ;;		None
  9520 ;; Return value:  Size  Location     Type
  9521 ;;                  1    wreg      void 
  9522 ;; Registers used:
  9523 ;;		wreg, status,2
  9524 ;; Tracked objects:
  9525 ;;		On entry : 0/0
  9526 ;;		On exit  : 0/0
  9527 ;;		Unchanged: 0/0
  9528 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
  9529 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  9530 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  9531 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  9532 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  9533 ;;Total ram usage:        0 bytes
  9534 ;; Hardware stack levels used:    1
  9535 ;; Hardware stack levels required when called:    6
  9536 ;; This function calls:
  9537 ;;		Nothing
  9538 ;; This function is called by:
  9539 ;;		_SYSTEM_Initialize
  9540 ;; This function uses a non-reentrant model
  9541 ;;
  9542                           
  9543                           
  9544                           ;psect for function _PIN_MANAGER_Initialize
  9545  0AC2                     _PIN_MANAGER_Initialize:	
  9546                           
  9547                           ;pin_manager.c: 62: LATA = 0x00;
  9548                           
  9549                           ;incstack = 0
  9550                           ; Regs used in _PIN_MANAGER_Initialize: [wreg+status,2]
  9551  0AC2  0020               	movlb	0	; select bank0
  9552  0AC3  0196               	clrf	22	;volatile
  9553                           
  9554                           ;pin_manager.c: 63: LATB = 0x00;
  9555  0AC4  0197               	clrf	23	;volatile
  9556                           
  9557                           ;pin_manager.c: 64: LATC = 0x00;
  9558  0AC5  0198               	clrf	24	;volatile
  9559                           
  9560                           ;pin_manager.c: 69: TRISA = 0xF1;
  9561  0AC6  30F1               	movlw	241
  9562  0AC7  0091               	movwf	17	;volatile
  9563                           
  9564                           ;pin_manager.c: 70: TRISB = 0x00;
  9565  0AC8  0192               	clrf	18	;volatile
  9566                           
  9567                           ;pin_manager.c: 71: TRISC = 0x80;
  9568  0AC9  3080               	movlw	128
  9569  0ACA  0093               	movwf	19	;volatile
  9570                           
  9571                           ;pin_manager.c: 76: ANSELC = 0x40;
  9572  0ACB  3040               	movlw	64
  9573  0ACC  003E               	movlb	30	; select bank30
  9574  0ACD  00CE               	movwf	78	;volatile
  9575                           
  9576                           ;pin_manager.c: 77: ANSELB = 0x00;
  9577  0ACE  01C3               	clrf	67	;volatile
  9578                           
  9579                           ;pin_manager.c: 78: ANSELA = 0x11;
  9580  0ACF  3011               	movlw	17
  9581  0AD0  00B8               	movwf	56	;volatile
  9582                           
  9583                           ;pin_manager.c: 83: WPUE = 0x00;
  9584  0AD1  01E5               	clrf	101	;volatile
  9585                           
  9586                           ;pin_manager.c: 84: WPUB = 0x00;
  9587  0AD2  01C4               	clrf	68	;volatile
  9588                           
  9589                           ;pin_manager.c: 85: WPUA = 0x00;
  9590  0AD3  01B9               	clrf	57	;volatile
  9591                           
  9592                           ;pin_manager.c: 86: WPUC = 0x00;
  9593  0AD4  01CF               	clrf	79	;volatile
  9594                           
  9595                           ;pin_manager.c: 91: ODCONA = 0x00;
  9596  0AD5  01BA               	clrf	58	;volatile
  9597                           
  9598                           ;pin_manager.c: 92: ODCONB = 0x00;
  9599  0AD6  01C5               	clrf	69	;volatile
  9600                           
  9601                           ;pin_manager.c: 93: ODCONC = 0x00;
  9602  0AD7  01D0               	clrf	80	;volatile
  9603                           
  9604                           ;pin_manager.c: 98: SLRCONA = 0xFF;
  9605  0AD8  30FF               	movlw	255
  9606  0AD9  00BB               	movwf	59	;volatile
  9607                           
  9608                           ;pin_manager.c: 99: SLRCONB = 0xFF;
  9609  0ADA  30FF               	movlw	255
  9610  0ADB  00C6               	movwf	70	;volatile
  9611                           
  9612                           ;pin_manager.c: 100: SLRCONC = 0xFF;
  9613  0ADC  30FF               	movlw	255
  9614  0ADD  00D1               	movwf	81	;volatile
  9615                           
  9616                           ;pin_manager.c: 109: RXPPS = 0x17;
  9617  0ADE  3017               	movlw	23
  9618  0ADF  003D               	movlb	29	; select bank29
  9619  0AE0  00CB               	movwf	75	;volatile
  9620                           
  9621                           ;pin_manager.c: 110: RC6PPS = 0x10;
  9622  0AE1  3010               	movlw	16
  9623  0AE2  003E               	movlb	30	; select bank30
  9624  0AE3  00A6               	movwf	38	;volatile
  9625  0AE4  0008               	return
  9626  0AE5                     __end_of_PIN_MANAGER_Initialize:	
  9627                           
  9628                           	psect	text14
  9629  16F3                     __ptext14:	
  9630 ;; *************** function _OSCILLATOR_Initialize *****************
  9631 ;; Defined at:
  9632 ;;		line 61 in file "mcc_generated_files/mcc.c"
  9633 ;; Parameters:    Size  Location     Type
  9634 ;;		None
  9635 ;; Auto vars:     Size  Location     Type
  9636 ;;		None
  9637 ;; Return value:  Size  Location     Type
  9638 ;;                  1    wreg      void 
  9639 ;; Registers used:
  9640 ;;		wreg, status,2
  9641 ;; Tracked objects:
  9642 ;;		On entry : 0/0
  9643 ;;		On exit  : 0/0
  9644 ;;		Unchanged: 0/0
  9645 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
  9646 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  9647 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  9648 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  9649 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  9650 ;;Total ram usage:        0 bytes
  9651 ;; Hardware stack levels used:    1
  9652 ;; Hardware stack levels required when called:    6
  9653 ;; This function calls:
  9654 ;;		Nothing
  9655 ;; This function is called by:
  9656 ;;		_SYSTEM_Initialize
  9657 ;; This function uses a non-reentrant model
  9658 ;;
  9659                           
  9660                           
  9661                           ;psect for function _OSCILLATOR_Initialize
  9662  16F3                     _OSCILLATOR_Initialize:	
  9663                           
  9664                           ;mcc.c: 64: OSCCON1 = 0x10;
  9665                           
  9666                           ;incstack = 0
  9667                           ; Regs used in _OSCILLATOR_Initialize: [wreg+status,2]
  9668  16F3  3010               	movlw	16
  9669  16F4  0031               	movlb	17	; select bank17
  9670  16F5  008D               	movwf	13	;volatile
  9671                           
  9672                           ;mcc.c: 66: OSCCON3 = 0x00;
  9673  16F6  018F               	clrf	15	;volatile
  9674                           
  9675                           ;mcc.c: 68: OSCEN = 0x00;
  9676  16F7  0191               	clrf	17	;volatile
  9677                           
  9678                           ;mcc.c: 70: OSCFRQ = 0x03;
  9679  16F8  3003               	movlw	3
  9680  16F9  0093               	movwf	19	;volatile
  9681                           
  9682                           ;mcc.c: 72: OSCTUNE = 0x00;
  9683  16FA  0192               	clrf	18	;volatile
  9684  16FB                     l749:	
  9685                           ;mcc.c: 75: {
  9686                           
  9687  16FB  1810               	btfsc	16,0	;volatile
  9688  16FC  0008               	return
  9689  16FD  2EFB               	goto	l749
  9690  16FE                     __end_of_OSCILLATOR_Initialize:	
  9691                           
  9692                           	psect	text15
  9693  170A                     __ptext15:	
  9694 ;; *************** function _MTOUCH_Initialize *****************
  9695 ;; Defined at:
  9696 ;;		line 80 in file "mcc_generated_files/mtouch/mtouch.c"
  9697 ;; Parameters:    Size  Location     Type
  9698 ;;		None
  9699 ;; Auto vars:     Size  Location     Type
  9700 ;;		None
  9701 ;; Return value:  Size  Location     Type
  9702 ;;                  1    wreg      void 
  9703 ;; Registers used:
  9704 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9705 ;; Tracked objects:
  9706 ;;		On entry : 0/0
  9707 ;;		On exit  : 0/0
  9708 ;;		Unchanged: 0/0
  9709 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
  9710 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  9711 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  9712 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  9713 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  9714 ;;Total ram usage:        0 bytes
  9715 ;; Hardware stack levels used:    1
  9716 ;; Hardware stack levels required when called:   10
  9717 ;; This function calls:
  9718 ;;		_MTOUCH_Button_InitializeAll
  9719 ;;		_MTOUCH_Sensor_InitializeAll
  9720 ;;		_MTOUCH_Sensor_Sampled_ResetAll
  9721 ;;		_MTOUCH_Sensor_Scan_Initialize
  9722 ;; This function is called by:
  9723 ;;		_SYSTEM_Initialize
  9724 ;; This function uses a non-reentrant model
  9725 ;;
  9726                           
  9727                           
  9728                           ;psect for function _MTOUCH_Initialize
  9729  170A                     _MTOUCH_Initialize:	
  9730                           
  9731                           ;mtouch.c: 82: MTOUCH_Sensor_InitializeAll();
  9732                           
  9733                           ;incstack = 0
  9734                           ; Regs used in _MTOUCH_Initialize: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  9735  170A  318A  225B  3197   	fcall	_MTOUCH_Sensor_InitializeAll
  9736                           
  9737                           ;mtouch.c: 83: MTOUCH_Button_InitializeAll();
  9738  170D  318A  2239  3197   	fcall	_MTOUCH_Button_InitializeAll
  9739                           
  9740                           ;mtouch.c: 84: MTOUCH_Sensor_Sampled_ResetAll();
  9741  1710  3188  207E  3197   	fcall	_MTOUCH_Sensor_Sampled_ResetAll
  9742                           
  9743                           ;mtouch.c: 85: MTOUCH_Sensor_Scan_Initialize();
  9744  1713  3188  2001         	fcall	_MTOUCH_Sensor_Scan_Initialize
  9745  1715  0008               	return
  9746  1716                     __end_of_MTOUCH_Initialize:	
  9747                           
  9748                           	psect	text16
  9749  0801                     __ptext16:	
  9750 ;; *************** function _MTOUCH_Sensor_Scan_Initialize *****************
  9751 ;; Defined at:
  9752 ;;		line 295 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  9753 ;; Parameters:    Size  Location     Type
  9754 ;;		None
  9755 ;; Auto vars:     Size  Location     Type
  9756 ;;		None
  9757 ;; Return value:  Size  Location     Type
  9758 ;;                  1    wreg      void 
  9759 ;; Registers used:
  9760 ;;		wreg, status,2, status,0, pclath, cstack
  9761 ;; Tracked objects:
  9762 ;;		On entry : 0/0
  9763 ;;		On exit  : 0/0
  9764 ;;		Unchanged: 0/0
  9765 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
  9766 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  9767 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  9768 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  9769 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  9770 ;;Total ram usage:        0 bytes
  9771 ;; Hardware stack levels used:    1
  9772 ;; Hardware stack levels required when called:    7
  9773 ;; This function calls:
  9774 ;;		_MTOUCH_Sensor_ADCC_Initialize
  9775 ;; This function is called by:
  9776 ;;		_MTOUCH_Initialize
  9777 ;; This function uses a non-reentrant model
  9778 ;;
  9779                           
  9780                           
  9781                           ;psect for function _MTOUCH_Sensor_Scan_Initialize
  9782  0801                     _MTOUCH_Sensor_Scan_Initialize:	
  9783                           
  9784                           ;mtouch_sensor.c: 297: MTOUCH_Sensor_ADCC_Initialize();
  9785                           
  9786                           ;incstack = 0
  9787                           ; Regs used in _MTOUCH_Sensor_Scan_Initialize: [wreg+status,2+status,0+pclath+cstack]
  9788  0801  3188  20EF         	fcall	_MTOUCH_Sensor_ADCC_Initialize
  9789  0803  0008               	return
  9790  0804                     __end_of_MTOUCH_Sensor_Scan_Initialize:	
  9791                           
  9792                           	psect	text17
  9793  08EF                     __ptext17:	
  9794 ;; *************** function _MTOUCH_Sensor_ADCC_Initialize *****************
  9795 ;; Defined at:
  9796 ;;		line 219 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  9797 ;; Parameters:    Size  Location     Type
  9798 ;;		None
  9799 ;; Auto vars:     Size  Location     Type
  9800 ;;		None
  9801 ;; Return value:  Size  Location     Type
  9802 ;;                  1    wreg      void 
  9803 ;; Registers used:
  9804 ;;		wreg, status,2
  9805 ;; Tracked objects:
  9806 ;;		On entry : 0/0
  9807 ;;		On exit  : 0/0
  9808 ;;		Unchanged: 0/0
  9809 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
  9810 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  9811 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  9812 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  9813 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  9814 ;;Total ram usage:        0 bytes
  9815 ;; Hardware stack levels used:    1
  9816 ;; Hardware stack levels required when called:    6
  9817 ;; This function calls:
  9818 ;;		Nothing
  9819 ;; This function is called by:
  9820 ;;		_MTOUCH_Sensor_Scan_Initialize
  9821 ;; This function uses a non-reentrant model
  9822 ;;
  9823                           
  9824                           
  9825                           ;psect for function _MTOUCH_Sensor_ADCC_Initialize
  9826  08EF                     _MTOUCH_Sensor_ADCC_Initialize:	
  9827                           
  9828                           ;mtouch_sensor.c: 222: ADCLK = 0x7;
  9829                           
  9830                           ;incstack = 0
  9831                           ; Regs used in _MTOUCH_Sensor_ADCC_Initialize: [wreg+status,2]
  9832  08EF  3007               	movlw	7
  9833  08F0  0021               	movlb	1	; select bank1
  9834  08F1  0098               	movwf	24	;volatile
  9835                           
  9836                           ;mtouch_sensor.c: 224: ADREF = 0x00;
  9837  08F2  019A               	clrf	26	;volatile
  9838                           
  9839                           ;mtouch_sensor.c: 226: ADCAP = 0x00;
  9840  08F3  019B               	clrf	27	;volatile
  9841                           
  9842                           ;mtouch_sensor.c: 228: ADLTHL = 0x00;
  9843  08F4  0022               	movlb	2	; select bank2
  9844  08F5  018E               	clrf	14	;volatile
  9845                           
  9846                           ;mtouch_sensor.c: 230: ADLTHH = 0x00;
  9847  08F6  018F               	clrf	15	;volatile
  9848                           
  9849                           ;mtouch_sensor.c: 232: ADUTHL = 0x00;
  9850  08F7  0190               	clrf	16	;volatile
  9851                           
  9852                           ;mtouch_sensor.c: 234: ADUTHH = 0x00;
  9853  08F8  0191               	clrf	17	;volatile
  9854                           
  9855                           ;mtouch_sensor.c: 236: ADSTPTL = 0x00;
  9856  08F9  0192               	clrf	18	;volatile
  9857                           
  9858                           ;mtouch_sensor.c: 238: ADSTPTH = 0x00;
  9859  08FA  0193               	clrf	19	;volatile
  9860                           
  9861                           ;mtouch_sensor.c: 241: ADCON1 = 0x41;
  9862  08FB  3041               	movlw	65
  9863  08FC  0021               	movlb	1	; select bank1
  9864  08FD  0094               	movwf	20	;volatile
  9865                           
  9866                           ;mtouch_sensor.c: 243: ADCON2 = 0x8B;
  9867  08FE  308B               	movlw	139
  9868  08FF  0095               	movwf	21	;volatile
  9869                           
  9870                           ;mtouch_sensor.c: 246: ADCON3 = 0x0F;
  9871  0900  300F               	movlw	15
  9872  0901  0096               	movwf	22	;volatile
  9873                           
  9874                           ;mtouch_sensor.c: 249: ADCON0 = 0xC4;
  9875  0902  30C4               	movlw	196
  9876  0903  0093               	movwf	19	;volatile
  9877                           
  9878                           ;mtouch_sensor.c: 252: PIR1bits.ADTIF = 0;
  9879  0904  002E               	movlb	14	; select bank14
  9880  0905  108D               	bcf	13,1	;volatile
  9881                           
  9882                           ;mtouch_sensor.c: 254: PIE1bits.ADTIE = 1;
  9883  0906  1497               	bsf	23,1	;volatile
  9884  0907  0008               	return
  9885  0908                     __end_of_MTOUCH_Sensor_ADCC_Initialize:	
  9886                           
  9887                           	psect	text18
  9888  0A5B                     __ptext18:	
  9889 ;; *************** function _MTOUCH_Sensor_InitializeAll *****************
  9890 ;; Defined at:
  9891 ;;		line 258 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  9892 ;; Parameters:    Size  Location     Type
  9893 ;;		None
  9894 ;; Auto vars:     Size  Location     Type
  9895 ;;  sensor          1    9[BANK0 ] enum E11734
  9896 ;; Return value:  Size  Location     Type
  9897 ;;                  1    wreg      void 
  9898 ;; Registers used:
  9899 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9900 ;; Tracked objects:
  9901 ;;		On entry : 0/0
  9902 ;;		On exit  : 0/0
  9903 ;;		Unchanged: 0/0
  9904 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
  9905 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  9906 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  9907 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  9908 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  9909 ;;Total ram usage:        2 bytes
  9910 ;; Hardware stack levels used:    1
  9911 ;; Hardware stack levels required when called:    9
  9912 ;; This function calls:
  9913 ;;		_MTOUCH_Sensor_Initialize
  9914 ;; This function is called by:
  9915 ;;		_MTOUCH_Initialize
  9916 ;; This function uses a non-reentrant model
  9917 ;;
  9918                           
  9919                           
  9920                           ;psect for function _MTOUCH_Sensor_InitializeAll
  9921  0A5B                     _MTOUCH_Sensor_InitializeAll:	
  9922                           
  9923                           ;mtouch_sensor.c: 260: enum mtouch_sensor_names sensor;;mtouch_sensor.c: 262: __builtin_
      +                          memcpy(mtouch_sensor,mtouch_sensor_init,sizeof(mtouch_sensor_init));
  9924                           
  9925                           ;incstack = 0
  9926                           ; Regs used in _MTOUCH_Sensor_InitializeAll: [wreg-fsr1h+status,2+status,0+pclath+cstack
      +                          ]
  9927  0A5B  302A               	movlw	low (_mtouch_sensor| (0+256))
  9928  0A5C  0086               	movwf	6
  9929  0A5D  3001               	movlw	1	; select bank2/3
  9930  0A5E  0087               	movwf	7
  9931  0A5F  3030               	movlw	low (_mtouch_sensor_init| (0+32768))
  9932  0A60  0084               	movwf	4
  9933  0A61  3090               	movlw	high (_mtouch_sensor_init| (0+32768))
  9934  0A62  0085               	movwf	5
  9935  0A63  301B               	movlw	27
  9936  0A64  0020               	movlb	0	; select bank0
  9937  0A65  00D8               	movwf	??_MTOUCH_Sensor_InitializeAll
  9938  0A66  0858               	movf	??_MTOUCH_Sensor_InitializeAll,w
  9939  0A67  1903               	skipnz
  9940  0A68  2A6D               	goto	l4204
  9941  0A69                     u303m0:	
  9942  0A69  0012               	moviw fsr0++
  9943  0A6A  001E               	movwi fsr1++
  9944  0A6B  0BD8               	decfsz	??_MTOUCH_Sensor_InitializeAll,f
  9945  0A6C  2A69               	goto	u303m0
  9946  0A6D                     l4204:	
  9947                           
  9948                           ;mtouch_sensor.c: 264: for (sensor = 0; sensor < 3; sensor++)
  9949  0A6D  0020               	movlb	0	; select bank0
  9950  0A6E  01D9               	clrf	MTOUCH_Sensor_InitializeAll@sensor
  9951  0A6F                     l4210:	
  9952                           
  9953                           ;mtouch_sensor.c: 265: {;mtouch_sensor.c: 266: MTOUCH_Sensor_Initialize(sensor);
  9954  0A6F  0859               	movf	MTOUCH_Sensor_InitializeAll@sensor,w
  9955  0A70  3188  20D7  318A   	fcall	_MTOUCH_Sensor_Initialize
  9956  0A73  3001               	movlw	1
  9957  0A74  0020               	movlb	0	; select bank0
  9958  0A75  00D8               	movwf	??_MTOUCH_Sensor_InitializeAll
  9959  0A76  0858               	movf	??_MTOUCH_Sensor_InitializeAll,w
  9960  0A77  07D9               	addwf	MTOUCH_Sensor_InitializeAll@sensor,f
  9961  0A78  3003               	movlw	3
  9962  0A79  0259               	subwf	MTOUCH_Sensor_InitializeAll@sensor,w
  9963  0A7A  1803               	btfsc	3,0
  9964  0A7B  0008               	return
  9965  0A7C  2A6F               	goto	l4210
  9966  0A7D                     __end_of_MTOUCH_Sensor_InitializeAll:	
  9967                           
  9968                           	psect	text19
  9969  08D7                     __ptext19:	
  9970 ;; *************** function _MTOUCH_Sensor_Initialize *****************
  9971 ;; Defined at:
  9972 ;;		line 187 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  9973 ;; Parameters:    Size  Location     Type
  9974 ;;  sensor          1    wreg     enum E11734
  9975 ;; Auto vars:     Size  Location     Type
  9976 ;;  sensor          1    7[BANK0 ] enum E11734
  9977 ;; Return value:  Size  Location     Type
  9978 ;;                  1    wreg      enum E11738
  9979 ;; Registers used:
  9980 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9981 ;; Tracked objects:
  9982 ;;		On entry : 0/0
  9983 ;;		On exit  : 0/0
  9984 ;;		Unchanged: 0/0
  9985 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
  9986 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  9987 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  9988 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  9989 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  9990 ;;Total ram usage:        2 bytes
  9991 ;; Hardware stack levels used:    1
  9992 ;; Hardware stack levels required when called:    8
  9993 ;; This function calls:
  9994 ;;		_MTOUCH_Sensor_Calibrate
  9995 ;;		_MTOUCH_Sensor_Enable
  9996 ;;		_Sensor_Sampled_Reset
  9997 ;;		___bmul
  9998 ;; This function is called by:
  9999 ;;		_MTOUCH_Sensor_InitializeAll
 10000 ;; This function uses a non-reentrant model
 10001 ;;
 10002                           
 10003                           
 10004                           ;psect for function _MTOUCH_Sensor_Initialize
 10005  08D7                     _MTOUCH_Sensor_Initialize:	
 10006                           
 10007                           ;incstack = 0
 10008                           ; Regs used in _MTOUCH_Sensor_Initialize: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cst
      +                          ack]
 10009                           ;MTOUCH_Sensor_Initialize@sensor stored from wreg
 10010  08D7  0020               	movlb	0	; select bank0
 10011  08D8  00D7               	movwf	MTOUCH_Sensor_Initialize@sensor
 10012                           
 10013                           ;mtouch_sensor.c: 189: MTOUCH_Sensor_Enable(sensor);
 10014  08D9  0857               	movf	MTOUCH_Sensor_Initialize@sensor,w
 10015  08DA  3188  2017  3188   	fcall	_MTOUCH_Sensor_Enable
 10016                           
 10017                           ;mtouch_sensor.c: 190: MTOUCH_Sensor_Calibrate(sensor);
 10018  08DD  0020               	movlb	0	; select bank0
 10019  08DE  0857               	movf	MTOUCH_Sensor_Initialize@sensor,w
 10020  08DF  3188  2004  3188   	fcall	_MTOUCH_Sensor_Calibrate
 10021                           
 10022                           ;mtouch_sensor.c: 191: Sensor_Sampled_Reset(&mtouch_sensor[sensor]);
 10023  08E2  3009               	movlw	9
 10024  08E3  0020               	movlb	0	; select bank0
 10025  08E4  00D6               	movwf	??_MTOUCH_Sensor_Initialize
 10026  08E5  0856               	movf	??_MTOUCH_Sensor_Initialize,w
 10027  08E6  00D0               	movwf	___bmul@multiplicand
 10028  08E7  0857               	movf	MTOUCH_Sensor_Initialize@sensor,w
 10029  08E8  3197  27CA  3188   	fcall	___bmul
 10030  08EB  3E2A               	addlw	(low (_mtouch_sensor| (0+256)))& (0+255)
 10031  08EC  3196  26E0         	fcall	_Sensor_Sampled_Reset
 10032  08EE  0008               	return
 10033  08EF                     __end_of_MTOUCH_Sensor_Initialize:	
 10034                           
 10035                           	psect	text20
 10036  0817                     __ptext20:	
 10037 ;; *************** function _MTOUCH_Sensor_Enable *****************
 10038 ;; Defined at:
 10039 ;;		line 679 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
 10040 ;; Parameters:    Size  Location     Type
 10041 ;;  sensor          1    wreg     enum E11734
 10042 ;; Auto vars:     Size  Location     Type
 10043 ;;  sensor          1    5[BANK0 ] enum E11734
 10044 ;; Return value:  Size  Location     Type
 10045 ;;                  1    wreg      void 
 10046 ;; Registers used:
 10047 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10048 ;; Tracked objects:
 10049 ;;		On entry : 0/0
 10050 ;;		On exit  : 0/0
 10051 ;;		Unchanged: 0/0
 10052 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 10053 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 10054 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 10055 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 10056 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 10057 ;;Total ram usage:        2 bytes
 10058 ;; Hardware stack levels used:    1
 10059 ;; Hardware stack levels required when called:    7
 10060 ;; This function calls:
 10061 ;;		___bmul
 10062 ;; This function is called by:
 10063 ;;		_MTOUCH_Sensor_Initialize
 10064 ;; This function uses a non-reentrant model
 10065 ;;
 10066                           
 10067                           
 10068                           ;psect for function _MTOUCH_Sensor_Enable
 10069  0817                     _MTOUCH_Sensor_Enable:	
 10070                           
 10071                           ;incstack = 0
 10072                           ; Regs used in _MTOUCH_Sensor_Enable: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 10073                           ;MTOUCH_Sensor_Enable@sensor stored from wreg
 10074  0817  0020               	movlb	0	; select bank0
 10075  0818  00D5               	movwf	MTOUCH_Sensor_Enable@sensor
 10076                           
 10077                           ;mtouch_sensor.c: 681: if(sensor < 3)
 10078  0819  3003               	movlw	3
 10079  081A  0255               	subwf	MTOUCH_Sensor_Enable@sensor,w
 10080  081B  1803               	skipnc
 10081  081C  0008               	return
 10082                           
 10083                           ;mtouch_sensor.c: 682: mtouch_sensor[sensor].enabled = 1;
 10084  081D  3009               	movlw	9
 10085  081E  00D4               	movwf	??_MTOUCH_Sensor_Enable
 10086  081F  0854               	movf	??_MTOUCH_Sensor_Enable,w
 10087  0820  00D0               	movwf	___bmul@multiplicand
 10088  0821  0855               	movf	MTOUCH_Sensor_Enable@sensor,w
 10089  0822  3197  27CA         	fcall	___bmul
 10090  0824  3E32               	addlw	(low ((_mtouch_sensor| (0+256)+8)))& (0+255)
 10091  0825  0086               	movwf	6
 10092  0826  3001               	movlw	1	; select bank2/3
 10093  0827  0087               	movwf	7
 10094  0828  1401               	bsf	1,0
 10095  0829  0008               	return
 10096  082A                     __end_of_MTOUCH_Sensor_Enable:	
 10097                           
 10098                           	psect	text21
 10099  0A39                     __ptext21:	
 10100 ;; *************** function _MTOUCH_Button_InitializeAll *****************
 10101 ;; Defined at:
 10102 ;;		line 174 in file "mcc_generated_files/mtouch/mtouch_button.c"
 10103 ;; Parameters:    Size  Location     Type
 10104 ;;		None
 10105 ;; Auto vars:     Size  Location     Type
 10106 ;;  button          1   11[BANK0 ] enum E11678
 10107 ;; Return value:  Size  Location     Type
 10108 ;;                  1    wreg      void 
 10109 ;; Registers used:
 10110 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10111 ;; Tracked objects:
 10112 ;;		On entry : 0/0
 10113 ;;		On exit  : 0/0
 10114 ;;		Unchanged: 0/0
 10115 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 10116 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 10117 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 10118 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 10119 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 10120 ;;Total ram usage:        2 bytes
 10121 ;; Hardware stack levels used:    1
 10122 ;; Hardware stack levels required when called:    9
 10123 ;; This function calls:
 10124 ;;		_MTOUCH_Button_Initialize
 10125 ;; This function is called by:
 10126 ;;		_MTOUCH_Initialize
 10127 ;; This function uses a non-reentrant model
 10128 ;;
 10129                           
 10130                           
 10131                           ;psect for function _MTOUCH_Button_InitializeAll
 10132  0A39                     _MTOUCH_Button_InitializeAll:	
 10133                           
 10134                           ;mtouch_button.c: 176: enum mtouch_button_names button;;mtouch_button.c: 178: __builtin_
      +                          memcpy(mtouch_button,mtouch_button_init,sizeof(mtouch_button_init));
 10135                           
 10136                           ;incstack = 0
 10137                           ; Regs used in _MTOUCH_Button_InitializeAll: [wreg-fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 10138  0A39  30A0               	movlw	low (_mtouch_button| (0+256))
 10139  0A3A  0086               	movwf	6
 10140  0A3B  3001               	movlw	1	; select bank3/4
 10141  0A3C  0087               	movwf	7
 10142  0A3D  3000               	movlw	low (_mtouch_button_init| (0+32768))
 10143  0A3E  0084               	movwf	4
 10144  0A3F  3090               	movlw	high (_mtouch_button_init| (0+32768))
 10145  0A40  0085               	movwf	5
 10146  0A41  3030               	movlw	48
 10147  0A42  0020               	movlb	0	; select bank0
 10148  0A43  00DA               	movwf	??_MTOUCH_Button_InitializeAll
 10149  0A44  085A               	movf	??_MTOUCH_Button_InitializeAll,w
 10150  0A45  1903               	skipnz
 10151  0A46  2A4B               	goto	l4218
 10152  0A47                     u305m0:	
 10153  0A47  0012               	moviw fsr0++
 10154  0A48  001E               	movwi fsr1++
 10155  0A49  0BDA               	decfsz	??_MTOUCH_Button_InitializeAll,f
 10156  0A4A  2A47               	goto	u305m0
 10157  0A4B                     l4218:	
 10158                           
 10159                           ;mtouch_button.c: 180: for (button = 0; button < 3; button++)
 10160  0A4B  0020               	movlb	0	; select bank0
 10161  0A4C  01DB               	clrf	MTOUCH_Button_InitializeAll@button
 10162  0A4D                     l4224:	
 10163                           
 10164                           ;mtouch_button.c: 181: {;mtouch_button.c: 182: MTOUCH_Button_Initialize(button);
 10165  0A4D  085B               	movf	MTOUCH_Button_InitializeAll@button,w
 10166  0A4E  318C  240D  318A   	fcall	_MTOUCH_Button_Initialize
 10167  0A51  3001               	movlw	1
 10168  0A52  0020               	movlb	0	; select bank0
 10169  0A53  00DA               	movwf	??_MTOUCH_Button_InitializeAll
 10170  0A54  085A               	movf	??_MTOUCH_Button_InitializeAll,w
 10171  0A55  07DB               	addwf	MTOUCH_Button_InitializeAll@button,f
 10172  0A56  3003               	movlw	3
 10173  0A57  025B               	subwf	MTOUCH_Button_InitializeAll@button,w
 10174  0A58  1803               	btfsc	3,0
 10175  0A59  0008               	return
 10176  0A5A  2A4D               	goto	l4224
 10177  0A5B                     __end_of_MTOUCH_Button_InitializeAll:	
 10178                           
 10179                           	psect	text22
 10180  09C1                     __ptext22:	
 10181 ;; *************** function _MTOUCH_Service_Mainloop *****************
 10182 ;; Defined at:
 10183 ;;		line 94 in file "mcc_generated_files/mtouch/mtouch.c"
 10184 ;; Parameters:    Size  Location     Type
 10185 ;;		None
 10186 ;; Auto vars:     Size  Location     Type
 10187 ;;		None
 10188 ;; Return value:  Size  Location     Type
 10189 ;;                  1    wreg      unsigned char 
 10190 ;; Registers used:
 10191 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10192 ;; Tracked objects:
 10193 ;;		On entry : 0/0
 10194 ;;		On exit  : 0/0
 10195 ;;		Unchanged: 0/0
 10196 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 10197 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 10198 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 10199 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 10200 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 10201 ;;Total ram usage:        1 bytes
 10202 ;; Hardware stack levels used:    1
 10203 ;; Hardware stack levels required when called:   12
 10204 ;; This function calls:
 10205 ;;		_MTOUCH_Button_ServiceAll
 10206 ;;		_MTOUCH_Sensor_SampleAll
 10207 ;;		_MTOUCH_Sensor_Sampled_ResetAll
 10208 ;;		_MTOUCH_Tick
 10209 ;;		_MTOUCH_needReburst
 10210 ;; This function is called by:
 10211 ;;		_main
 10212 ;; This function uses a non-reentrant model
 10213 ;;
 10214                           
 10215                           
 10216                           ;psect for function _MTOUCH_Service_Mainloop
 10217  09C1                     _MTOUCH_Service_Mainloop:	
 10218                           
 10219                           ;mtouch.c: 98: mtouch_time_toScan = 1;
 10220                           
 10221                           ;incstack = 0
 10222                           ; Regs used in _MTOUCH_Service_Mainloop: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 10223  09C1  0020               	movlb	0	; select bank0
 10224  09C2  01CF               	clrf	_mtouch_time_toScan
 10225  09C3  0ACF               	incf	_mtouch_time_toScan,f
 10226                           
 10227                           ;mtouch.c: 101: {;mtouch.c: 102: if(MTOUCH_Sensor_SampleAll() == 0)
 10228                           
 10229                           ;mtouch.c: 100: if(mtouch_time_toScan)
 10230  09C4  318B  2330  3189   	fcall	_MTOUCH_Sensor_SampleAll
 10231  09C7  3A00               	xorlw	0
 10232  09C8  1D03               	skipz
 10233  09C9  29CC               	goto	l4756
 10234                           
 10235                           ;mtouch.c: 103: return 0;
 10236  09CA  3000               	movlw	0
 10237  09CB  0008               	return
 10238  09CC                     l4756:	
 10239                           
 10240                           ;mtouch.c: 104: MTOUCH_Button_ServiceAll();
 10241  09CC  3197  2798  3189   	fcall	_MTOUCH_Button_ServiceAll
 10242                           
 10243                           ;mtouch.c: 105: mtouch_time_toScan = MTOUCH_needReburst();
 10244  09CF  3187  27FE  3189   	fcall	_MTOUCH_needReburst
 10245  09D2  0020               	movlb	0	; select bank0
 10246  09D3  00E8               	movwf	??_MTOUCH_Service_Mainloop
 10247  09D4  0868               	movf	??_MTOUCH_Service_Mainloop,w
 10248  09D5  00CF               	movwf	_mtouch_time_toScan
 10249                           
 10250                           ;mtouch.c: 106: MTOUCH_Sensor_Sampled_ResetAll();
 10251  09D6  3188  207E  3189   	fcall	_MTOUCH_Sensor_Sampled_ResetAll
 10252                           
 10253                           ;mtouch.c: 107: MTOUCH_Tick();
 10254  09D9  3196  2683         	fcall	_MTOUCH_Tick
 10255                           
 10256                           ;mtouch.c: 108: return 1;
 10257  09DB  3001               	movlw	1
 10258  09DC  0008               	return
 10259  09DD                     __end_of_MTOUCH_Service_Mainloop:	
 10260                           
 10261                           	psect	text23
 10262  07FE                     __ptext23:	
 10263 ;; *************** function _MTOUCH_needReburst *****************
 10264 ;; Defined at:
 10265 ;;		line 131 in file "mcc_generated_files/mtouch/mtouch.c"
 10266 ;; Parameters:    Size  Location     Type
 10267 ;;		None
 10268 ;; Auto vars:     Size  Location     Type
 10269 ;;  needReburst     1    0        unsigned char 
 10270 ;; Return value:  Size  Location     Type
 10271 ;;                  1    wreg      unsigned char 
 10272 ;; Registers used:
 10273 ;;		wreg, status,2
 10274 ;; Tracked objects:
 10275 ;;		On entry : 0/0
 10276 ;;		On exit  : 0/0
 10277 ;;		Unchanged: 0/0
 10278 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 10279 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 10280 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 10281 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 10282 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 10283 ;;Total ram usage:        1 bytes
 10284 ;; Hardware stack levels used:    1
 10285 ;; Hardware stack levels required when called:    6
 10286 ;; This function calls:
 10287 ;;		Nothing
 10288 ;; This function is called by:
 10289 ;;		_MTOUCH_Service_Mainloop
 10290 ;; This function uses a non-reentrant model
 10291 ;;
 10292                           
 10293                           
 10294                           ;psect for function _MTOUCH_needReburst
 10295  07FE                     _MTOUCH_needReburst:	
 10296                           
 10297                           ;mtouch.c: 135: return needReburst;
 10298                           
 10299                           ;incstack = 0
 10300                           ; Regs used in _MTOUCH_needReburst: [wreg+status,2]
 10301  07FE  3000               	movlw	0
 10302  07FF  0008               	return
 10303  0800                     __end_of_MTOUCH_needReburst:	
 10304                           
 10305                           	psect	text24
 10306  1683                     __ptext24:	
 10307 ;; *************** function _MTOUCH_Tick *****************
 10308 ;; Defined at:
 10309 ;;		line 121 in file "mcc_generated_files/mtouch/mtouch.c"
 10310 ;; Parameters:    Size  Location     Type
 10311 ;;		None
 10312 ;; Auto vars:     Size  Location     Type
 10313 ;;		None
 10314 ;; Return value:  Size  Location     Type
 10315 ;;                  1    wreg      void 
 10316 ;; Registers used:
 10317 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10318 ;; Tracked objects:
 10319 ;;		On entry : 0/0
 10320 ;;		On exit  : 0/0
 10321 ;;		Unchanged: 0/0
 10322 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 10323 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 10324 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 10325 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 10326 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 10327 ;;Total ram usage:        0 bytes
 10328 ;; Hardware stack levels used:    1
 10329 ;; Hardware stack levels required when called:    8
 10330 ;; This function calls:
 10331 ;;		_MTOUCH_Button_Tick
 10332 ;; This function is called by:
 10333 ;;		_MTOUCH_Service_Mainloop
 10334 ;; This function uses a non-reentrant model
 10335 ;;
 10336                           
 10337                           
 10338                           ;psect for function _MTOUCH_Tick
 10339  1683                     _MTOUCH_Tick:	
 10340                           
 10341                           ;mtouch.c: 123: MTOUCH_Button_Tick();
 10342                           
 10343                           ;incstack = 0
 10344                           ; Regs used in _MTOUCH_Tick: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 10345  1683  3188  20BF         	fcall	_MTOUCH_Button_Tick
 10346  1685  0008               	return
 10347  1686                     __end_of_MTOUCH_Tick:	
 10348                           
 10349                           	psect	text25
 10350  08BF                     __ptext25:	
 10351 ;; *************** function _MTOUCH_Button_Tick *****************
 10352 ;; Defined at:
 10353 ;;		line 300 in file "mcc_generated_files/mtouch/mtouch_button.c"
 10354 ;; Parameters:    Size  Location     Type
 10355 ;;		None
 10356 ;; Auto vars:     Size  Location     Type
 10357 ;;  i               1    4[BANK0 ] unsigned char 
 10358 ;; Return value:  Size  Location     Type
 10359 ;;                  1    wreg      void 
 10360 ;; Registers used:
 10361 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10362 ;; Tracked objects:
 10363 ;;		On entry : 0/0
 10364 ;;		On exit  : 0/0
 10365 ;;		Unchanged: 0/0
 10366 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 10367 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 10368 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 10369 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 10370 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 10371 ;;Total ram usage:        2 bytes
 10372 ;; Hardware stack levels used:    1
 10373 ;; Hardware stack levels required when called:    7
 10374 ;; This function calls:
 10375 ;;		_Button_Tick_helper
 10376 ;; This function is called by:
 10377 ;;		_MTOUCH_Tick
 10378 ;; This function uses a non-reentrant model
 10379 ;;
 10380                           
 10381                           
 10382                           ;psect for function _MTOUCH_Button_Tick
 10383  08BF                     _MTOUCH_Button_Tick:	
 10384                           
 10385                           ;mtouch_button.c: 302: uint8_t i;;mtouch_button.c: 303: for (i = 0; i < 3; i++)
 10386                           
 10387                           ;incstack = 0
 10388                           ; Regs used in _MTOUCH_Button_Tick: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 10389  08BF  0020               	movlb	0	; select bank0
 10390  08C0  01D4               	clrf	MTOUCH_Button_Tick@i
 10391  08C1                     l4248:	
 10392                           
 10393                           ;mtouch_button.c: 304: {;mtouch_button.c: 305: Button_Tick_helper(&mtouch_button[i]);
 10394  08C1  0854               	movf	MTOUCH_Button_Tick@i,w
 10395  08C2  00D3               	movwf	??_MTOUCH_Button_Tick
 10396  08C3  3003               	movlw	3
 10397  08C4                     u3095:	
 10398  08C4  35D3               	lslf	??_MTOUCH_Button_Tick,f
 10399  08C5  3EFF               	addlw	-1
 10400  08C6  1D03               	skipz
 10401  08C7  28C4               	goto	u3095
 10402  08C8  3553               	lslf	??_MTOUCH_Button_Tick,w
 10403  08C9  3EA0               	addlw	(low (_mtouch_button| (0+256)))& (0+255)
 10404  08CA  318B  2358  3188   	fcall	_Button_Tick_helper
 10405  08CD  3001               	movlw	1
 10406  08CE  0020               	movlb	0	; select bank0
 10407  08CF  00D3               	movwf	??_MTOUCH_Button_Tick
 10408  08D0  0853               	movf	??_MTOUCH_Button_Tick,w
 10409  08D1  07D4               	addwf	MTOUCH_Button_Tick@i,f
 10410  08D2  3003               	movlw	3
 10411  08D3  0254               	subwf	MTOUCH_Button_Tick@i,w
 10412  08D4  1803               	btfsc	3,0
 10413  08D5  0008               	return
 10414  08D6  28C1               	goto	l4248
 10415  08D7                     __end_of_MTOUCH_Button_Tick:	
 10416                           
 10417                           	psect	text26
 10418  0B58                     __ptext26:	
 10419 ;; *************** function _Button_Tick_helper *****************
 10420 ;; Defined at:
 10421 ;;		line 308 in file "mcc_generated_files/mtouch/mtouch_button.c"
 10422 ;; Parameters:    Size  Location     Type
 10423 ;;  button          1    wreg     PTR struct .
 10424 ;;		 -> mtouch_button(48), 
 10425 ;; Auto vars:     Size  Location     Type
 10426 ;;  button          1    2[BANK0 ] PTR struct .
 10427 ;;		 -> mtouch_button(48), 
 10428 ;; Return value:  Size  Location     Type
 10429 ;;                  1    wreg      void 
 10430 ;; Registers used:
 10431 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 10432 ;; Tracked objects:
 10433 ;;		On entry : 0/0
 10434 ;;		On exit  : 0/0
 10435 ;;		Unchanged: 0/0
 10436 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 10437 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 10438 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 10439 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 10440 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 10441 ;;Total ram usage:        3 bytes
 10442 ;; Hardware stack levels used:    1
 10443 ;; Hardware stack levels required when called:    6
 10444 ;; This function calls:
 10445 ;;		Nothing
 10446 ;; This function is called by:
 10447 ;;		_MTOUCH_Button_Tick
 10448 ;; This function uses a non-reentrant model
 10449 ;;
 10450                           
 10451                           
 10452                           ;psect for function _Button_Tick_helper
 10453  0B58                     _Button_Tick_helper:	
 10454                           
 10455                           ;incstack = 0
 10456                           ; Regs used in _Button_Tick_helper: [wreg+fsr1l+fsr1h+status,2+status,0]
 10457                           ;Button_Tick_helper@button stored from wreg
 10458  0B58  0020               	movlb	0	; select bank0
 10459  0B59  00D2               	movwf	Button_Tick_helper@button
 10460                           
 10461                           ;mtouch_button.c: 311: if ((button->state) == MTOUCH_BUTTON_STATE_pressed)
 10462  0B5A  0852               	movf	Button_Tick_helper@button,w
 10463  0B5B  3E02               	addlw	2
 10464  0B5C  0086               	movwf	6
 10465  0B5D  3001               	movlw	1	; select bank2/3
 10466  0B5E  0087               	movwf	7
 10467  0B5F  3002               	movlw	2
 10468  0B60  0601               	xorwf	1,w
 10469  0B61  1D03               	btfss	3,2
 10470  0B62  0008               	return
 10471                           
 10472                           ;mtouch_button.c: 312: {;mtouch_button.c: 313: (button->counter)++;
 10473  0B63  0852               	movf	Button_Tick_helper@button,w
 10474  0B64  3E0A               	addlw	10
 10475  0B65  0086               	movwf	6
 10476  0B66  3001               	movlw	1	; select bank2/3
 10477  0B67  0087               	movwf	7
 10478  0B68  3001               	movlw	1
 10479  0B69  0781               	addwf	1,f
 10480  0B6A  3141               	addfsr 1,1
 10481  0B6B  1803               	skipnc
 10482  0B6C  0A81               	incf	1,f
 10483                           
 10484                           ;mtouch_button.c: 314: if (button->counter == (mtouch_button_statecounter_t)0)
 10485  0B6D  0852               	movf	Button_Tick_helper@button,w
 10486  0B6E  3E0A               	addlw	10
 10487  0B6F  0086               	movwf	6
 10488  0B70  3001               	movlw	1	; select bank2/3
 10489  0B71  0087               	movwf	7
 10490  0B72  0016               	moviw fsr1++
 10491  0B73  0401               	iorwf	1,w
 10492  0B74  1D03               	btfss	3,2
 10493  0B75  0008               	return
 10494                           
 10495                           ;mtouch_button.c: 315: {;mtouch_button.c: 316: button->counter = (mtouch_button_statecou
      +                          nter_t)0xFFFF;
 10496  0B76  0852               	movf	Button_Tick_helper@button,w
 10497  0B77  3E0A               	addlw	10
 10498  0B78  0086               	movwf	6
 10499  0B79  3001               	movlw	1	; select bank2/3
 10500  0B7A  0087               	movwf	7
 10501  0B7B  30FF               	movlw	255
 10502  0B7C  3FC0               	movwi [0]fsr1
 10503  0B7D  30FF               	movlw	255
 10504  0B7E  3FC1               	movwi [1]fsr1
 10505  0B7F  0008               	return
 10506  0B80                     __end_of_Button_Tick_helper:	
 10507                           
 10508                           	psect	text27
 10509  087E                     __ptext27:	
 10510 ;; *************** function _MTOUCH_Sensor_Sampled_ResetAll *****************
 10511 ;; Defined at:
 10512 ;;		line 779 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
 10513 ;; Parameters:    Size  Location     Type
 10514 ;;		None
 10515 ;; Auto vars:     Size  Location     Type
 10516 ;;  sensor          1    2[BANK0 ] PTR struct .
 10517 ;;		 -> mtouch_sensor(27), 
 10518 ;; Return value:  Size  Location     Type
 10519 ;;                  1    wreg      void 
 10520 ;; Registers used:
 10521 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10522 ;; Tracked objects:
 10523 ;;		On entry : 0/0
 10524 ;;		On exit  : 0/0
 10525 ;;		Unchanged: 0/0
 10526 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 10527 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 10528 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 10529 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 10530 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 10531 ;;Total ram usage:        2 bytes
 10532 ;; Hardware stack levels used:    1
 10533 ;; Hardware stack levels required when called:    7
 10534 ;; This function calls:
 10535 ;;		_Sensor_Sampled_Reset
 10536 ;; This function is called by:
 10537 ;;		_MTOUCH_Initialize
 10538 ;;		_MTOUCH_Service_Mainloop
 10539 ;; This function uses a non-reentrant model
 10540 ;;
 10541                           
 10542                           
 10543                           ;psect for function _MTOUCH_Sensor_Sampled_ResetAll
 10544  087E                     _MTOUCH_Sensor_Sampled_ResetAll:	
 10545                           
 10546                           ;mtouch_sensor.c: 781: mtouch_sensor_t* sensor;;mtouch_sensor.c: 782: for(sensor = &mtou
      +                          ch_sensor[0];sensor<= &mtouch_sensor[3-1];sensor++)
 10547                           
 10548                           ;incstack = 0
 10549                           ; Regs used in _MTOUCH_Sensor_Sampled_ResetAll: [wreg+fsr1l+fsr1h+status,2+status,0+pcla
      +                          th+cstack]
 10550  087E  302A               	movlw	(low (_mtouch_sensor| (0+256)))& (0+255)
 10551  087F  0020               	movlb	0	; select bank0
 10552  0880  00D1               	movwf	??_MTOUCH_Sensor_Sampled_ResetAll
 10553  0881  0851               	movf	??_MTOUCH_Sensor_Sampled_ResetAll,w
 10554  0882  00D2               	movwf	MTOUCH_Sensor_Sampled_ResetAll@sensor
 10555  0883                     L12:	
 10556  0883  303C               	movlw	(low ((_mtouch_sensor| (0+256)+18)))& (0+255)
 10557  0884  00D1               	movwf	??_MTOUCH_Sensor_Sampled_ResetAll
 10558  0885  0852               	movf	MTOUCH_Sensor_Sampled_ResetAll@sensor,w
 10559  0886  0251               	subwf	??_MTOUCH_Sensor_Sampled_ResetAll,w
 10560  0887  1C03               	btfss	3,0
 10561  0888  0008               	return
 10562                           
 10563                           ;mtouch_sensor.c: 783: {;mtouch_sensor.c: 784: Sensor_Sampled_Reset(sensor);
 10564  0889  0852               	movf	MTOUCH_Sensor_Sampled_ResetAll@sensor,w
 10565  088A  3196  26E0  3188   	fcall	_Sensor_Sampled_Reset
 10566  088D  3009               	movlw	9
 10567  088E  0020               	movlb	0	; select bank0
 10568  088F  00D1               	movwf	??_MTOUCH_Sensor_Sampled_ResetAll
 10569  0890  0851               	movf	??_MTOUCH_Sensor_Sampled_ResetAll,w
 10570  0891  07D2               	addwf	MTOUCH_Sensor_Sampled_ResetAll@sensor,f
 10571  0892  2883               	goto	L12
 10572  0893                     __end_of_MTOUCH_Sensor_Sampled_ResetAll:	
 10573                           
 10574                           	psect	text28
 10575  16E0                     __ptext28:	
 10576 ;; *************** function _Sensor_Sampled_Reset *****************
 10577 ;; Defined at:
 10578 ;;		line 796 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
 10579 ;; Parameters:    Size  Location     Type
 10580 ;;  sensor          1    wreg     PTR struct .
 10581 ;;		 -> mtouch_sensor(27), 
 10582 ;; Auto vars:     Size  Location     Type
 10583 ;;  sensor          1    0[BANK0 ] PTR struct .
 10584 ;;		 -> mtouch_sensor(27), 
 10585 ;; Return value:  Size  Location     Type
 10586 ;;                  1    wreg      void 
 10587 ;; Registers used:
 10588 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 10589 ;; Tracked objects:
 10590 ;;		On entry : 0/0
 10591 ;;		On exit  : 0/0
 10592 ;;		Unchanged: 0/0
 10593 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 10594 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 10595 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 10596 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 10597 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 10598 ;;Total ram usage:        1 bytes
 10599 ;; Hardware stack levels used:    1
 10600 ;; Hardware stack levels required when called:    6
 10601 ;; This function calls:
 10602 ;;		Nothing
 10603 ;; This function is called by:
 10604 ;;		_MTOUCH_Sensor_Initialize
 10605 ;;		_MTOUCH_Sensor_Sampled_ResetAll
 10606 ;; This function uses a non-reentrant model
 10607 ;;
 10608                           
 10609                           
 10610                           ;psect for function _Sensor_Sampled_Reset
 10611  16E0                     _Sensor_Sampled_Reset:	
 10612                           
 10613                           ;incstack = 0
 10614                           ; Regs used in _Sensor_Sampled_Reset: [wreg+fsr1l+fsr1h+status,2+status,0]
 10615                           ;Sensor_Sampled_Reset@sensor stored from wreg
 10616  16E0  0020               	movlb	0	; select bank0
 10617  16E1  00D0               	movwf	Sensor_Sampled_Reset@sensor
 10618                           
 10619                           ;mtouch_sensor.c: 798: sensor->sampled = 0;
 10620  16E2  0850               	movf	Sensor_Sampled_Reset@sensor,w
 10621  16E3  3E08               	addlw	8
 10622  16E4  0086               	movwf	6
 10623  16E5  3001               	movlw	1	; select bank2/3
 10624  16E6  0087               	movwf	7
 10625  16E7  1081               	bcf	1,1
 10626  16E8  0008               	return
 10627  16E9                     __end_of_Sensor_Sampled_Reset:	
 10628                           
 10629                           	psect	text29
 10630  0B30                     __ptext29:	
 10631 ;; *************** function _MTOUCH_Sensor_SampleAll *****************
 10632 ;; Defined at:
 10633 ;;		line 270 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
 10634 ;; Parameters:    Size  Location     Type
 10635 ;;		None
 10636 ;; Auto vars:     Size  Location     Type
 10637 ;;  sensor          1   23[BANK0 ] enum E11734
 10638 ;; Return value:  Size  Location     Type
 10639 ;;                  1    wreg      unsigned char 
 10640 ;; Registers used:
 10641 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10642 ;; Tracked objects:
 10643 ;;		On entry : 0/0
 10644 ;;		On exit  : 0/0
 10645 ;;		Unchanged: 0/0
 10646 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 10647 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 10648 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 10649 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 10650 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 10651 ;;Total ram usage:        2 bytes
 10652 ;; Hardware stack levels used:    1
 10653 ;; Hardware stack levels required when called:   11
 10654 ;; This function calls:
 10655 ;;		_MTOUCH_Sensor_isEnabled
 10656 ;;		_MTOUCH_Sensor_isSampling
 10657 ;;		_MTOUCH_Sensor_wasSampled
 10658 ;;		_Sensor_FrequencyHopping
 10659 ;;		_Sensor_scheduleNextScan
 10660 ;; This function is called by:
 10661 ;;		_MTOUCH_Service_Mainloop
 10662 ;; This function uses a non-reentrant model
 10663 ;;
 10664                           
 10665                           
 10666                           ;psect for function _MTOUCH_Sensor_SampleAll
 10667  0B30                     _MTOUCH_Sensor_SampleAll:	
 10668                           
 10669                           ;mtouch_sensor.c: 272: enum mtouch_sensor_names sensor;;mtouch_sensor.c: 274: for (senso
      +                          r = 0; sensor < 3; sensor++)
 10670                           
 10671                           ;incstack = 0
 10672                           ; Regs used in _MTOUCH_Sensor_SampleAll: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 10673  0B30  0020               	movlb	0	; select bank0
 10674  0B31  01E7               	clrf	MTOUCH_Sensor_SampleAll@sensor
 10675  0B32                     l4446:	
 10676                           
 10677                           ;mtouch_sensor.c: 275: {;mtouch_sensor.c: 276: if(MTOUCH_Sensor_wasSampled(sensor)==0 &&
      +                           MTOUCH_Sensor_isEnabled(sensor))
 10678  0B32  0867               	movf	MTOUCH_Sensor_SampleAll@sensor,w
 10679  0B33  3188  2093  318B   	fcall	_MTOUCH_Sensor_wasSampled
 10680  0B36  3A00               	xorlw	0
 10681  0B37  1D03               	skipz
 10682  0B38  2B4B               	goto	l4458
 10683  0B39  0020               	movlb	0	; select bank0
 10684  0B3A  0867               	movf	MTOUCH_Sensor_SampleAll@sensor,w
 10685  0B3B  3188  20A9  318B   	fcall	_MTOUCH_Sensor_isEnabled
 10686  0B3E  3A00               	xorlw	0
 10687  0B3F  1903               	skipnz
 10688  0B40  2B4B               	goto	l4458
 10689                           
 10690                           ;mtouch_sensor.c: 277: {;mtouch_sensor.c: 278: if(MTOUCH_Sensor_isSampling() == 0)
 10691  0B41  3196  2680  318B   	fcall	_MTOUCH_Sensor_isSampling
 10692  0B44  3A00               	xorlw	0
 10693  0B45  1D03               	skipz
 10694  0B46  2B49               	goto	l4454
 10695                           
 10696                           ;mtouch_sensor.c: 279: Sensor_scheduleNextScan();
 10697  0B47  3183  2380         	fcall	_Sensor_scheduleNextScan
 10698  0B49                     l4454:	
 10699                           
 10700                           ;mtouch_sensor.c: 280: return 0;
 10701  0B49  3000               	movlw	0
 10702  0B4A  0008               	return
 10703  0B4B                     l4458:	
 10704  0B4B  3001               	movlw	1
 10705  0B4C  0020               	movlb	0	; select bank0
 10706  0B4D  00E6               	movwf	??_MTOUCH_Sensor_SampleAll
 10707  0B4E  0866               	movf	??_MTOUCH_Sensor_SampleAll,w
 10708  0B4F  07E7               	addwf	MTOUCH_Sensor_SampleAll@sensor,f
 10709  0B50  3003               	movlw	3
 10710  0B51  0267               	subwf	MTOUCH_Sensor_SampleAll@sensor,w
 10711  0B52  1C03               	skipc
 10712  0B53  2B32               	goto	l4446
 10713                           
 10714                           ;mtouch_sensor.c: 281: };mtouch_sensor.c: 282: };mtouch_sensor.c: 284: Sensor_FrequencyH
      +                          opping();
 10715  0B54  3188  2069         	fcall	_Sensor_FrequencyHopping
 10716                           
 10717                           ;mtouch_sensor.c: 286: return 1;
 10718  0B56  3001               	movlw	1
 10719  0B57  0008               	return
 10720  0B58                     __end_of_MTOUCH_Sensor_SampleAll:	
 10721                           
 10722                           	psect	text30
 10723  0380                     __ptext30:	
 10724 ;; *************** function _Sensor_scheduleNextScan *****************
 10725 ;; Defined at:
 10726 ;;		line 307 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
 10727 ;; Parameters:    Size  Location     Type
 10728 ;;		None
 10729 ;; Auto vars:     Size  Location     Type
 10730 ;;  sensor          1   10[BANK0 ] PTR struct .
 10731 ;;		 -> mtouch_sensor(27), 
 10732 ;;  skipScan        1    9[BANK0 ] unsigned char 
 10733 ;;  state           1    8[BANK0 ] unsigned char 
 10734 ;; Return value:  Size  Location     Type
 10735 ;;                  1    wreg      void 
 10736 ;; Registers used:
 10737 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10738 ;; Tracked objects:
 10739 ;;		On entry : 0/0
 10740 ;;		On exit  : 0/0
 10741 ;;		Unchanged: 0/0
 10742 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 10743 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 10744 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 10745 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 10746 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 10747 ;;Total ram usage:        5 bytes
 10748 ;; Hardware stack levels used:    1
 10749 ;; Hardware stack levels required when called:    8
 10750 ;; This function calls:
 10751 ;;		_MTOUCH_Sensor_isEnabled
 10752 ;;		_MTOUCH_Sensor_wasSampled
 10753 ;;		_Sensor_SetTrisBit
 10754 ;;		_Sensor_isCalibrated
 10755 ;;		_Sensor_isCalibratingAcqTime
 10756 ;;		___bmul
 10757 ;; This function is called by:
 10758 ;;		_MTOUCH_Sensor_SampleAll
 10759 ;; This function uses a non-reentrant model
 10760 ;;
 10761                           
 10762                           
 10763                           ;psect for function _Sensor_scheduleNextScan
 10764  0380                     _Sensor_scheduleNextScan:	
 10765                           
 10766                           ;mtouch_sensor.c: 309: mtouch_sensor_t* sensor;;mtouch_sensor.c: 310: bool skipScan = (b
      +                          ool)0;
 10767                           
 10768                           ;incstack = 0
 10769                           ; Regs used in _Sensor_scheduleNextScan: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 10770  0380  0020               	movlb	0	; select bank0
 10771  0381  01D9               	clrf	Sensor_scheduleNextScan@skipScan
 10772                           
 10773                           ;mtouch_sensor.c: 311: bool state = (bool)GIE;
 10774  0382  3000               	movlw	0
 10775  0383  1B8B               	btfsc	11,7	;volatile
 10776  0384  3001               	movlw	1
 10777  0385  00D8               	movwf	Sensor_scheduleNextScan@state
 10778  0386                     l4268:	
 10779                           ;mtouch_sensor.c: 314: while(MTOUCH_Sensor_wasSampled(currentScanSensor) || !MTOUCH_Sens
      +                          or_isEnabled(currentScanSensor))
 10780                           
 10781  0386  084E               	movf	_currentScanSensor,w
 10782  0387  3188  2093  3183   	fcall	_MTOUCH_Sensor_wasSampled
 10783  038A  3A00               	xorlw	0
 10784  038B  1903               	btfsc	3,2
 10785  038C  2B9B               	goto	l4270
 10786  038D                     l4262:	
 10787                           
 10788                           ;mtouch_sensor.c: 315: {;mtouch_sensor.c: 316: if(++currentScanSensor == 3)
 10789  038D  3001               	movlw	1
 10790  038E  0020               	movlb	0	; select bank0
 10791  038F  00D6               	movwf	??_Sensor_scheduleNextScan
 10792  0390  0856               	movf	??_Sensor_scheduleNextScan,w
 10793  0391  07CE               	addwf	_currentScanSensor,f
 10794  0392  3003               	movlw	3
 10795  0393  064E               	xorwf	_currentScanSensor,w
 10796  0394  1D03               	btfss	3,2
 10797  0395  2B86               	goto	l4268
 10798                           
 10799                           ;mtouch_sensor.c: 317: {;mtouch_sensor.c: 318: currentScanSensor = 0;
 10800  0396  01CE               	clrf	_currentScanSensor
 10801                           
 10802                           ;mtouch_sensor.c: 319: sampling_flag = 0;
 10803  0397  01CD               	clrf	_sampling_flag
 10804                           
 10805                           ;mtouch_sensor.c: 320: skipScan = 1;
 10806  0398  01D9               	clrf	Sensor_scheduleNextScan@skipScan
 10807  0399  0AD9               	incf	Sensor_scheduleNextScan@skipScan,f
 10808                           
 10809                           ;mtouch_sensor.c: 321: break;
 10810  039A  2BA3               	goto	l4272
 10811  039B                     l4270:	
 10812  039B  0020               	movlb	0	; select bank0
 10813  039C  084E               	movf	_currentScanSensor,w
 10814  039D  3188  20A9  3183   	fcall	_MTOUCH_Sensor_isEnabled
 10815  03A0  3A00               	xorlw	0
 10816  03A1  1903               	skipnz
 10817  03A2  2B8D               	goto	l4262
 10818  03A3                     l4272:	
 10819                           
 10820                           ;mtouch_sensor.c: 322: };mtouch_sensor.c: 323: };mtouch_sensor.c: 326: if(skipScan==0)
 10821  03A3  0020               	movlb	0	; select bank0
 10822  03A4  0859               	movf	Sensor_scheduleNextScan@skipScan,w
 10823  03A5  1D03               	btfss	3,2
 10824  03A6  0008               	return
 10825                           
 10826                           ;mtouch_sensor.c: 327: {;mtouch_sensor.c: 328: sensor = &mtouch_sensor[currentScanSensor
      +                          ];
 10827  03A7  3009               	movlw	9
 10828  03A8  00D6               	movwf	??_Sensor_scheduleNextScan
 10829  03A9  0856               	movf	??_Sensor_scheduleNextScan,w
 10830  03AA  00D0               	movwf	___bmul@multiplicand
 10831  03AB  084E               	movf	_currentScanSensor,w
 10832  03AC  3197  27CA  3183   	fcall	___bmul
 10833  03AF  3E2A               	addlw	(low (_mtouch_sensor| (0+256)))& (0+255)
 10834  03B0  0020               	movlb	0	; select bank0
 10835  03B1  00D7               	movwf	??_Sensor_scheduleNextScan+1
 10836  03B2  0857               	movf	??_Sensor_scheduleNextScan+1,w
 10837  03B3  00DA               	movwf	Sensor_scheduleNextScan@sensor
 10838                           
 10839                           ;mtouch_sensor.c: 329: if(Sensor_isCalibrated(sensor))
 10840  03B4  085A               	movf	Sensor_scheduleNextScan@sensor,w
 10841  03B5  3197  2716  3183   	fcall	_Sensor_isCalibrated
 10842  03B8  3A00               	xorlw	0
 10843  03B9  1903               	skipnz
 10844  03BA  2BCE               	goto	l4280
 10845                           
 10846                           ;mtouch_sensor.c: 330: {;mtouch_sensor.c: 331: ADACQ = (uint8_t)sensor->acquisition_time
      +                          ;
 10847  03BB  0020               	movlb	0	; select bank0
 10848  03BC  085A               	movf	Sensor_scheduleNextScan@sensor,w
 10849  03BD  0086               	movwf	6
 10850  03BE  3001               	movlw	1	; select bank2/3
 10851  03BF  0087               	movwf	7
 10852  03C0  3001               	movlw	1	; select bank2/3
 10853  03C1  3F43               	moviw [3]fsr1
 10854  03C2  0021               	movlb	1	; select bank1
 10855  03C3  009D               	movwf	29	;volatile
 10856                           
 10857                           ;mtouch_sensor.c: 332: ADPRE = (uint8_t)sensor->precharge_time;
 10858  03C4  0020               	movlb	0	; select bank0
 10859  03C5  085A               	movf	Sensor_scheduleNextScan@sensor,w
 10860  03C6  0086               	movwf	6
 10861  03C7  3001               	movlw	1	; select bank2/3
 10862  03C8  0087               	movwf	7
 10863  03C9  3001               	movlw	1	; select bank2/3
 10864  03CA  3F42               	moviw [2]fsr1
 10865  03CB  0021               	movlb	1	; select bank1
 10866  03CC  009C               	movwf	28	;volatile
 10867                           
 10868                           ;mtouch_sensor.c: 333: }
 10869  03CD  2BED               	goto	l4286
 10870  03CE                     l4280:	
 10871                           
 10872                           ;mtouch_sensor.c: 334: else;mtouch_sensor.c: 335: {;mtouch_sensor.c: 336: if(Sensor_isCa
      +                          libratingAcqTime(sensor))
 10873  03CE  0020               	movlb	0	; select bank0
 10874  03CF  085A               	movf	Sensor_scheduleNextScan@sensor,w
 10875  03D0  3196  26E9  3183   	fcall	_Sensor_isCalibratingAcqTime
 10876  03D3  3A00               	xorlw	0
 10877  03D4  1903               	skipnz
 10878  03D5  2BE8               	goto	l4284
 10879                           
 10880                           ;mtouch_sensor.c: 337: {;mtouch_sensor.c: 338: ADPRE = (uint8_t)sensor->precharge_time;
 10881  03D6  0020               	movlb	0	; select bank0
 10882  03D7  085A               	movf	Sensor_scheduleNextScan@sensor,w
 10883  03D8  0086               	movwf	6
 10884  03D9  3001               	movlw	1	; select bank2/3
 10885  03DA  0087               	movwf	7
 10886  03DB  3001               	movlw	1	; select bank2/3
 10887  03DC  3F42               	moviw [2]fsr1
 10888  03DD  0021               	movlb	1	; select bank1
 10889  03DE  009C               	movwf	28	;volatile
 10890                           
 10891                           ;mtouch_sensor.c: 339: ADACQ = (uint8_t)sensor->acquisition_time;
 10892  03DF  0020               	movlb	0	; select bank0
 10893  03E0  085A               	movf	Sensor_scheduleNextScan@sensor,w
 10894  03E1  0086               	movwf	6
 10895  03E2  3001               	movlw	1	; select bank2/3
 10896  03E3  0087               	movwf	7
 10897  03E4  3001               	movlw	1	; select bank2/3
 10898  03E5  3F43               	moviw [3]fsr1
 10899  03E6  0021               	movlb	1	; select bank1
 10900  03E7  2BEC               	goto	L13
 10901  03E8                     l4284:	
 10902                           ;mtouch_sensor.c: 340: }
 10903                           
 10904                           
 10905                           ;mtouch_sensor.c: 341: else;mtouch_sensor.c: 342: {;mtouch_sensor.c: 343: ADPRE = ((mtou
      +                          ch_sensor_time_t)((mtouch_sensor_time_t)48 << (uint8_t)1));
 10906  03E8  3060               	movlw	96
 10907  03E9  0021               	movlb	1	; select bank1
 10908  03EA  009C               	movwf	28	;volatile
 10909                           
 10910                           ;mtouch_sensor.c: 344: ADACQ = ((mtouch_sensor_time_t)((mtouch_sensor_time_t)48 << (uint
      +                          8_t)1));
 10911  03EB  3060               	movlw	96
 10912  03EC                     L13:	
 10913  03EC  009D               	movwf	29	;volatile
 10914  03ED                     l4286:	
 10915                           
 10916                           ;mtouch_sensor.c: 345: };mtouch_sensor.c: 346: };mtouch_sensor.c: 348: ADPRE +=(uint8_t)
      +                          sample_delay;
 10917  03ED  0020               	movlb	0	; select bank0
 10918  03EE  084A               	movf	_sample_delay,w
 10919  03EF  00D6               	movwf	??_Sensor_scheduleNextScan
 10920  03F0  0856               	movf	??_Sensor_scheduleNextScan,w
 10921  03F1  0021               	movlb	1	; select bank1
 10922  03F2  079C               	addwf	28,f	;volatile
 10923                           
 10924                           ;mtouch_sensor.c: 349: ADPCH = (uint8_t)sensor->adpch;
 10925  03F3  0020               	movlb	0	; select bank0
 10926  03F4  085A               	movf	Sensor_scheduleNextScan@sensor,w
 10927  03F5  0086               	movwf	6
 10928  03F6  3001               	movlw	1	; select bank2/3
 10929  03F7  0087               	movwf	7
 10930  03F8  3001               	movlw	1	; select bank2/3
 10931  03F9  3F41               	moviw [1]fsr1
 10932  03FA  0021               	movlb	1	; select bank1
 10933  03FB  009E               	movwf	30	;volatile
 10934                           
 10935                           ;mtouch_sensor.c: 350: ADRPT = (uint8_t)(sensor->oversampling>>1);
 10936  03FC  0020               	movlb	0	; select bank0
 10937  03FD  085A               	movf	Sensor_scheduleNextScan@sensor,w
 10938  03FE  3E04               	addlw	4
 10939  03FF  0086               	movwf	6
 10940  0400  3001               	movlw	1	; select bank2/3
 10941  0401  0087               	movwf	7
 10942  0402  3601               	lsrf	1,w
 10943  0403  0022               	movlb	2	; select bank2
 10944  0404  008D               	movwf	13	;volatile
 10945                           
 10946                           ;mtouch_sensor.c: 351: ADCAP = (uint8_t)sensor->addcap;
 10947  0405  0020               	movlb	0	; select bank0
 10948  0406  085A               	movf	Sensor_scheduleNextScan@sensor,w
 10949  0407  0086               	movwf	6
 10950  0408  3001               	movlw	1	; select bank2/3
 10951  0409  0087               	movwf	7
 10952  040A  3001               	movlw	1	; select bank2/3
 10953  040B  3F45               	moviw [5]fsr1
 10954  040C  0021               	movlb	1	; select bank1
 10955  040D  009B               	movwf	27	;volatile
 10956                           
 10957                           ;mtouch_sensor.c: 352: ADCON0bits.ADON = 1;
 10958  040E  1793               	bsf	19,7	;volatile
 10959                           
 10960                           ;mtouch_sensor.c: 353: sampling_flag= 1;
 10961  040F  0020               	movlb	0	; select bank0
 10962  0410  01CD               	clrf	_sampling_flag
 10963  0411  0ACD               	incf	_sampling_flag,f
 10964                           
 10965                           ;mtouch_sensor.c: 354: Sensor_SetTrisBit(currentScanSensor,1);
 10966  0412  01D0               	clrf	Sensor_SetTrisBit@TrisBit
 10967  0413  0AD0               	incf	Sensor_SetTrisBit@TrisBit,f
 10968  0414  084E               	movf	_currentScanSensor,w
 10969  0415  318A  2218  3183   	fcall	_Sensor_SetTrisBit
 10970                           
 10971                           ;mtouch_sensor.c: 355: GIE = 0;
 10972  0418  138B               	bcf	11,7	;volatile
 10973                           
 10974                           ;mtouch_sensor.c: 356: ADCON0bits.GO = 1;
 10975  0419  0021               	movlb	1	; select bank1
 10976  041A  1413               	bsf	19,0	;volatile
 10977                           
 10978                           ;mtouch_sensor.c: 357: ADACC = ((mtouch_sensor_packetsample_t)(sensor->oversampling)<<9)
      +                          ;
 10979  041B  0020               	movlb	0	; select bank0
 10980  041C  085A               	movf	Sensor_scheduleNextScan@sensor,w
 10981  041D  3E04               	addlw	4
 10982  041E  0086               	movwf	6
 10983  041F  3001               	movlw	1	; select bank2/3
 10984  0420  0087               	movwf	7
 10985  0421  0801               	movf	1,w
 10986  0422  00D6               	movwf	??_Sensor_scheduleNextScan
 10987  0423  01D7               	clrf	??_Sensor_scheduleNextScan+1
 10988  0424  3009               	movlw	9
 10989  0425                     u3175:	
 10990  0425  35D6               	lslf	??_Sensor_scheduleNextScan,f
 10991  0426  0DD7               	rlf	??_Sensor_scheduleNextScan+1,f
 10992  0427  0B89               	decfsz	9,f
 10993  0428  2C25               	goto	u3175
 10994  0429  0856               	movf	??_Sensor_scheduleNextScan,w
 10995  042A  0021               	movlb	1	; select bank1
 10996  042B  0090               	movwf	16	;volatile
 10997  042C  0020               	movlb	0	; select bank0
 10998  042D  0857               	movf	??_Sensor_scheduleNextScan+1,w
 10999  042E  0021               	movlb	1	; select bank1
 11000  042F  0091               	movwf	17	;volatile
 11001                           
 11002                           ;mtouch_sensor.c: 358: GIE = state;
 11003  0430  0020               	movlb	0	; select bank0
 11004  0431  1C58               	btfss	Sensor_scheduleNextScan@state,0
 11005  0432  2C35               	goto	u3180
 11006  0433  178B               	bsf	11,7	;volatile
 11007  0434  2C36               	goto	l4306
 11008  0435                     u3180:	
 11009  0435  138B               	bcf	11,7	;volatile
 11010  0436                     l4306:	
 11011                           
 11012                           ;mtouch_sensor.c: 359: scanInterrupted = 0;
 11013  0436  0020               	movlb	0	; select bank0
 11014  0437  01CC               	clrf	_scanInterrupted	;volatile
 11015  0438  0008               	return
 11016  0439                     __end_of_Sensor_scheduleNextScan:	
 11017                           
 11018                           	psect	text31
 11019  16E9                     __ptext31:	
 11020 ;; *************** function _Sensor_isCalibratingAcqTime *****************
 11021 ;; Defined at:
 11022 ;;		line 766 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
 11023 ;; Parameters:    Size  Location     Type
 11024 ;;  sensor          1    wreg     PTR struct .
 11025 ;;		 -> mtouch_sensor(27), 
 11026 ;; Auto vars:     Size  Location     Type
 11027 ;;  sensor          1    0[BANK0 ] PTR struct .
 11028 ;;		 -> mtouch_sensor(27), 
 11029 ;; Return value:  Size  Location     Type
 11030 ;;                  1    wreg      unsigned char 
 11031 ;; Registers used:
 11032 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 11033 ;; Tracked objects:
 11034 ;;		On entry : 0/0
 11035 ;;		On exit  : 0/0
 11036 ;;		Unchanged: 0/0
 11037 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 11038 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 11039 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 11040 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 11041 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 11042 ;;Total ram usage:        1 bytes
 11043 ;; Hardware stack levels used:    1
 11044 ;; Hardware stack levels required when called:    6
 11045 ;; This function calls:
 11046 ;;		Nothing
 11047 ;; This function is called by:
 11048 ;;		_Sensor_scheduleNextScan
 11049 ;; This function uses a non-reentrant model
 11050 ;;
 11051                           
 11052                           
 11053                           ;psect for function _Sensor_isCalibratingAcqTime
 11054  16E9                     _Sensor_isCalibratingAcqTime:	
 11055                           
 11056                           ;incstack = 0
 11057                           ; Regs used in _Sensor_isCalibratingAcqTime: [wreg+fsr1l+fsr1h+status,2+status,0]
 11058                           ;Sensor_isCalibratingAcqTime@sensor stored from wreg
 11059  16E9  0020               	movlb	0	; select bank0
 11060  16EA  00D0               	movwf	Sensor_isCalibratingAcqTime@sensor
 11061                           
 11062                           ;mtouch_sensor.c: 768: return (bool)sensor->acqTime_cal;
 11063  16EB  0850               	movf	Sensor_isCalibratingAcqTime@sensor,w
 11064  16EC  3E08               	addlw	8
 11065  16ED  0086               	movwf	6
 11066  16EE  3001               	movlw	1	; select bank2/3
 11067  16EF  0087               	movwf	7
 11068  16F0  0E01               	swapf	1,w
 11069  16F1  3901               	andlw	1
 11070  16F2  0008               	return
 11071  16F3                     __end_of_Sensor_isCalibratingAcqTime:	
 11072                           
 11073                           	psect	text32
 11074  1716                     __ptext32:	
 11075 ;; *************** function _Sensor_isCalibrated *****************
 11076 ;; Defined at:
 11077 ;;		line 748 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
 11078 ;; Parameters:    Size  Location     Type
 11079 ;;  sensor          1    wreg     PTR struct .
 11080 ;;		 -> mtouch_sensor(27), 
 11081 ;; Auto vars:     Size  Location     Type
 11082 ;;  sensor          1    1[BANK0 ] PTR struct .
 11083 ;;		 -> mtouch_sensor(27), 
 11084 ;; Return value:  Size  Location     Type
 11085 ;;                  1    wreg      unsigned char 
 11086 ;; Registers used:
 11087 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 11088 ;; Tracked objects:
 11089 ;;		On entry : 0/0
 11090 ;;		On exit  : 0/0
 11091 ;;		Unchanged: 0/0
 11092 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 11093 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 11094 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 11095 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 11096 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 11097 ;;Total ram usage:        2 bytes
 11098 ;; Hardware stack levels used:    1
 11099 ;; Hardware stack levels required when called:    6
 11100 ;; This function calls:
 11101 ;;		Nothing
 11102 ;; This function is called by:
 11103 ;;		_Sensor_scheduleNextScan
 11104 ;; This function uses a non-reentrant model
 11105 ;;
 11106                           
 11107                           
 11108                           ;psect for function _Sensor_isCalibrated
 11109  1716                     _Sensor_isCalibrated:	
 11110                           
 11111                           ;incstack = 0
 11112                           ; Regs used in _Sensor_isCalibrated: [wreg+fsr1l+fsr1h+status,2+status,0]
 11113                           ;Sensor_isCalibrated@sensor stored from wreg
 11114  1716  0020               	movlb	0	; select bank0
 11115  1717  00D1               	movwf	Sensor_isCalibrated@sensor
 11116                           
 11117                           ;mtouch_sensor.c: 750: return (bool)sensor->calibrated;
 11118  1718  0851               	movf	Sensor_isCalibrated@sensor,w
 11119  1719  3E08               	addlw	8
 11120  171A  0086               	movwf	6
 11121  171B  3001               	movlw	1	; select bank2/3
 11122  171C  0087               	movwf	7
 11123  171D  0C01               	rrf	1,w
 11124  171E  00D0               	movwf	??_Sensor_isCalibrated
 11125  171F  0CD0               	rrf	??_Sensor_isCalibrated,f
 11126  1720  0C50               	rrf	??_Sensor_isCalibrated,w
 11127  1721  3901               	andlw	1
 11128  1722  0008               	return
 11129  1723                     __end_of_Sensor_isCalibrated:	
 11130                           
 11131                           	psect	text33
 11132  0A18                     __ptext33:	
 11133 ;; *************** function _Sensor_SetTrisBit *****************
 11134 ;; Defined at:
 11135 ;;		line 196 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
 11136 ;; Parameters:    Size  Location     Type
 11137 ;;  sensor          1    wreg     enum E11734
 11138 ;;  TrisBit         1    0[BANK0 ] unsigned char 
 11139 ;; Auto vars:     Size  Location     Type
 11140 ;;  sensor          1    1[BANK0 ] enum E11734
 11141 ;; Return value:  Size  Location     Type
 11142 ;;                  1    wreg      void 
 11143 ;; Registers used:
 11144 ;;		wreg, fsr0l, fsr0h, status,2, status,0
 11145 ;; Tracked objects:
 11146 ;;		On entry : 0/0
 11147 ;;		On exit  : 0/0
 11148 ;;		Unchanged: 0/0
 11149 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 11150 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 11151 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 11152 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 11153 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 11154 ;;Total ram usage:        2 bytes
 11155 ;; Hardware stack levels used:    1
 11156 ;; Hardware stack levels required when called:    6
 11157 ;; This function calls:
 11158 ;;		Nothing
 11159 ;; This function is called by:
 11160 ;;		_Sensor_scheduleNextScan
 11161 ;; This function uses a non-reentrant model
 11162 ;;
 11163                           
 11164                           
 11165                           ;psect for function _Sensor_SetTrisBit
 11166  0A18                     _Sensor_SetTrisBit:	
 11167                           
 11168                           ;incstack = 0
 11169                           ; Regs used in _Sensor_SetTrisBit: [wreg-fsr0h+status,2+status,0]
 11170                           ;Sensor_SetTrisBit@sensor stored from wreg
 11171  0A18  0020               	movlb	0	; select bank0
 11172  0A19  00D1               	movwf	Sensor_SetTrisBit@sensor
 11173                           
 11174                           ;mtouch_sensor.c: 198: switch(sensor)
 11175  0A1A  2A2D               	goto	l3916
 11176  0A1B                     l3908:	
 11177                           
 11178                           ;mtouch_sensor.c: 201: TRISAbits.TRISA1 = TrisBit;
 11179  0A1B  0C50               	rrf	Sensor_SetTrisBit@TrisBit,w
 11180  0A1C  1C03               	skipc
 11181  0A1D  1091               	bcf	17,1	;volatile
 11182  0A1E  1803               	skipnc
 11183  0A1F  1491               	bsf	17,1	;volatile
 11184                           
 11185                           ;mtouch_sensor.c: 202: break;
 11186  0A20  0008               	return
 11187  0A21                     l3910:	
 11188                           
 11189                           ;mtouch_sensor.c: 204: TRISAbits.TRISA2 = TrisBit;
 11190  0A21  0C50               	rrf	Sensor_SetTrisBit@TrisBit,w
 11191  0A22  1C03               	skipc
 11192  0A23  1111               	bcf	17,2	;volatile
 11193  0A24  1803               	skipnc
 11194  0A25  1511               	bsf	17,2	;volatile
 11195                           
 11196                           ;mtouch_sensor.c: 205: break;
 11197  0A26  0008               	return
 11198  0A27                     l3912:	
 11199                           
 11200                           ;mtouch_sensor.c: 207: TRISAbits.TRISA3 = TrisBit;
 11201  0A27  0C50               	rrf	Sensor_SetTrisBit@TrisBit,w
 11202  0A28  1C03               	skipc
 11203  0A29  1191               	bcf	17,3	;volatile
 11204  0A2A  1803               	skipnc
 11205  0A2B  1591               	bsf	17,3	;volatile
 11206                           
 11207                           ;mtouch_sensor.c: 208: break;
 11208  0A2C  0008               	return
 11209  0A2D                     l3916:	
 11210  0A2D  0851               	movf	Sensor_SetTrisBit@sensor,w
 11211                           
 11212                           ; Switch size 1, requested type "simple"
 11213                           ; Number of cases is 3, Range of values is 0 to 2
 11214                           ; switch strategies available:
 11215                           ; Name         Instructions Cycles
 11216                           ; simple_byte           10     6 (average)
 11217                           ; direct_byte           12     6 (fixed)
 11218                           ; jumptable            260     6 (fixed)
 11219                           ;	Chosen strategy is simple_byte
 11220  0A2E  3A00               	xorlw	0	; case 0
 11221  0A2F  1903               	skipnz
 11222  0A30  2A1B               	goto	l3908
 11223  0A31  3A01               	xorlw	1	; case 1
 11224  0A32  1903               	skipnz
 11225  0A33  2A21               	goto	l3910
 11226  0A34  3A03               	xorlw	3	; case 2
 11227  0A35  1903               	skipnz
 11228  0A36  2A27               	goto	l3912
 11229  0A37  2A38               	goto	l174
 11230  0A38                     l174:	
 11231  0A38  0008               	return
 11232  0A39                     __end_of_Sensor_SetTrisBit:	
 11233                           
 11234                           	psect	text34
 11235  08A9                     __ptext34:	
 11236 ;; *************** function _MTOUCH_Sensor_isEnabled *****************
 11237 ;; Defined at:
 11238 ;;		line 685 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
 11239 ;; Parameters:    Size  Location     Type
 11240 ;;  sensor          1    wreg     enum E11734
 11241 ;; Auto vars:     Size  Location     Type
 11242 ;;  sensor          1    5[BANK0 ] enum E11734
 11243 ;; Return value:  Size  Location     Type
 11244 ;;                  1    wreg      unsigned char 
 11245 ;; Registers used:
 11246 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11247 ;; Tracked objects:
 11248 ;;		On entry : 0/0
 11249 ;;		On exit  : 0/0
 11250 ;;		Unchanged: 0/0
 11251 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 11252 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 11253 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 11254 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 11255 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 11256 ;;Total ram usage:        2 bytes
 11257 ;; Hardware stack levels used:    1
 11258 ;; Hardware stack levels required when called:    7
 11259 ;; This function calls:
 11260 ;;		___bmul
 11261 ;; This function is called by:
 11262 ;;		_MTOUCH_Sensor_SampleAll
 11263 ;;		_Sensor_scheduleNextScan
 11264 ;; This function uses a non-reentrant model
 11265 ;;
 11266                           
 11267                           
 11268                           ;psect for function _MTOUCH_Sensor_isEnabled
 11269  08A9                     _MTOUCH_Sensor_isEnabled:	
 11270                           
 11271                           ;incstack = 0
 11272                           ; Regs used in _MTOUCH_Sensor_isEnabled: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+csta
      +                          ck]
 11273                           ;MTOUCH_Sensor_isEnabled@sensor stored from wreg
 11274  08A9  0020               	movlb	0	; select bank0
 11275  08AA  00D5               	movwf	MTOUCH_Sensor_isEnabled@sensor
 11276                           
 11277                           ;mtouch_sensor.c: 687: if(sensor < 3)
 11278  08AB  3003               	movlw	3
 11279  08AC  0255               	subwf	MTOUCH_Sensor_isEnabled@sensor,w
 11280  08AD  1803               	skipnc
 11281  08AE  28BD               	goto	l3960
 11282                           
 11283                           ;mtouch_sensor.c: 688: return (bool)mtouch_sensor[sensor].enabled;
 11284  08AF  3009               	movlw	9
 11285  08B0  00D4               	movwf	??_MTOUCH_Sensor_isEnabled
 11286  08B1  0854               	movf	??_MTOUCH_Sensor_isEnabled,w
 11287  08B2  00D0               	movwf	___bmul@multiplicand
 11288  08B3  0855               	movf	MTOUCH_Sensor_isEnabled@sensor,w
 11289  08B4  3197  27CA         	fcall	___bmul
 11290  08B6  3E32               	addlw	(low ((_mtouch_sensor| (0+256)+8)))& (0+255)
 11291  08B7  0086               	movwf	6
 11292  08B8  3001               	movlw	1	; select bank2/3
 11293  08B9  0087               	movwf	7
 11294  08BA  0801               	movf	1,w
 11295  08BB  3901               	andlw	1
 11296  08BC  0008               	return
 11297  08BD                     l3960:	
 11298                           
 11299                           ;mtouch_sensor.c: 689: else;mtouch_sensor.c: 690: return 0;
 11300  08BD  3000               	movlw	0
 11301  08BE  0008               	return
 11302  08BF                     __end_of_MTOUCH_Sensor_isEnabled:	
 11303                           
 11304                           	psect	text35
 11305  0869                     __ptext35:	
 11306 ;; *************** function _Sensor_FrequencyHopping *****************
 11307 ;; Defined at:
 11308 ;;		line 563 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
 11309 ;; Parameters:    Size  Location     Type
 11310 ;;		None
 11311 ;; Auto vars:     Size  Location     Type
 11312 ;;  sensor          1   21[BANK0 ] enum E11734
 11313 ;; Return value:  Size  Location     Type
 11314 ;;                  1    wreg      void 
 11315 ;; Registers used:
 11316 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11317 ;; Tracked objects:
 11318 ;;		On entry : 0/0
 11319 ;;		On exit  : 0/0
 11320 ;;		Unchanged: 0/0
 11321 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 11322 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 11323 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 11324 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 11325 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 11326 ;;Total ram usage:        2 bytes
 11327 ;; Hardware stack levels used:    1
 11328 ;; Hardware stack levels required when called:   10
 11329 ;; This function calls:
 11330 ;;		_Sensor_FrequencyHopping_Autotune_Process
 11331 ;;		_Sensor_postAcquisitionProcess
 11332 ;;		_Sensor_setSamplePeriod
 11333 ;; This function is called by:
 11334 ;;		_MTOUCH_Sensor_SampleAll
 11335 ;; This function uses a non-reentrant model
 11336 ;;
 11337                           
 11338                           
 11339                           ;psect for function _Sensor_FrequencyHopping
 11340  0869                     _Sensor_FrequencyHopping:	
 11341                           
 11342                           ;mtouch_sensor.c: 565: enum mtouch_sensor_names sensor;;mtouch_sensor.c: 567: Sensor_Fre
      +                          quencyHopping_Autotune_Process();
 11343                           
 11344                           ;incstack = 0
 11345                           ; Regs used in _Sensor_FrequencyHopping: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 11346  0869  3184  2439  3188   	fcall	_Sensor_FrequencyHopping_Autotune_Process
 11347                           
 11348                           ;mtouch_sensor.c: 569: for (sensor = 0; sensor < 3; sensor++)
 11349  086C  0020               	movlb	0	; select bank0
 11350  086D  01E5               	clrf	Sensor_FrequencyHopping@sensor
 11351  086E                     l4316:	
 11352                           
 11353                           ;mtouch_sensor.c: 570: {;mtouch_sensor.c: 571: Sensor_postAcquisitionProcess(sensor);
 11354  086E  0865               	movf	Sensor_FrequencyHopping@sensor,w
 11355  086F  318E  265D  3188   	fcall	_Sensor_postAcquisitionProcess
 11356  0872  3001               	movlw	1
 11357  0873  0020               	movlb	0	; select bank0
 11358  0874  00E4               	movwf	??_Sensor_FrequencyHopping
 11359  0875  0864               	movf	??_Sensor_FrequencyHopping,w
 11360  0876  07E5               	addwf	Sensor_FrequencyHopping@sensor,f
 11361  0877  3003               	movlw	3
 11362  0878  0265               	subwf	Sensor_FrequencyHopping@sensor,w
 11363  0879  1C03               	skipc
 11364  087A  286E               	goto	l4316
 11365                           
 11366                           ;mtouch_sensor.c: 572: };mtouch_sensor.c: 574: Sensor_setSamplePeriod();
 11367  087B  3197  27DC         	fcall	_Sensor_setSamplePeriod
 11368  087D  0008               	return
 11369  087E                     __end_of_Sensor_FrequencyHopping:	
 11370                           
 11371                           	psect	text36
 11372  17DC                     __ptext36:	
 11373 ;; *************** function _Sensor_setSamplePeriod *****************
 11374 ;; Defined at:
 11375 ;;		line 488 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
 11376 ;; Parameters:    Size  Location     Type
 11377 ;;		None
 11378 ;; Auto vars:     Size  Location     Type
 11379 ;;		None
 11380 ;; Return value:  Size  Location     Type
 11381 ;;                  1    wreg      void 
 11382 ;; Registers used:
 11383 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 11384 ;; Tracked objects:
 11385 ;;		On entry : 0/0
 11386 ;;		On exit  : 0/0
 11387 ;;		Unchanged: 0/0
 11388 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 11389 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 11390 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 11391 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 11392 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 11393 ;;Total ram usage:        1 bytes
 11394 ;; Hardware stack levels used:    1
 11395 ;; Hardware stack levels required when called:    6
 11396 ;; This function calls:
 11397 ;;		Nothing
 11398 ;; This function is called by:
 11399 ;;		_Sensor_FrequencyHopping
 11400 ;; This function uses a non-reentrant model
 11401 ;;
 11402                           
 11403                           
 11404                           ;psect for function _Sensor_setSamplePeriod
 11405  17DC                     _Sensor_setSamplePeriod:	
 11406                           
 11407                           ;mtouch_sensor.c: 490: if(++freq_index >= sizeof(freq_hop) )
 11408                           
 11409                           ;incstack = 0
 11410                           ; Regs used in _Sensor_setSamplePeriod: [wreg+fsr1l+fsr1h+status,2+status,0]
 11411  17DC  3001               	movlw	1
 11412  17DD  0020               	movlb	0	; select bank0
 11413  17DE  00D0               	movwf	??_Sensor_setSamplePeriod
 11414  17DF  0850               	movf	??_Sensor_setSamplePeriod,w
 11415  17E0  07CB               	addwf	_freq_index,f
 11416  17E1  3003               	movlw	3
 11417  17E2  024B               	subwf	_freq_index,w
 11418  17E3  1803               	btfsc	3,0
 11419                           
 11420                           ;mtouch_sensor.c: 491: freq_index = 0;
 11421  17E4  01CB               	clrf	_freq_index
 11422                           
 11423                           ;mtouch_sensor.c: 493: sample_delay = freq_hop[freq_index];
 11424  17E5  084B               	movf	_freq_index,w
 11425  17E6  3EE2               	addlw	(low (_freq_hop| 0))& (0+255)
 11426  17E7  0086               	movwf	6
 11427  17E8  0187               	clrf	7
 11428  17E9  0801               	movf	1,w
 11429  17EA  00D0               	movwf	??_Sensor_setSamplePeriod
 11430  17EB  0850               	movf	??_Sensor_setSamplePeriod,w
 11431  17EC  00CA               	movwf	_sample_delay
 11432  17ED  0008               	return
 11433  17EE                     __end_of_Sensor_setSamplePeriod:	
 11434                           
 11435                           	psect	text37
 11436  0E5D                     __ptext37:	
 11437 ;; *************** function _Sensor_postAcquisitionProcess *****************
 11438 ;; Defined at:
 11439 ;;		line 418 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
 11440 ;; Parameters:    Size  Location     Type
 11441 ;;  name            1    wreg     enum E11734
 11442 ;; Auto vars:     Size  Location     Type
 11443 ;;  name            1   18[BANK0 ] enum E11734
 11444 ;;  sensor          1   19[BANK0 ] PTR struct .
 11445 ;;		 -> mtouch_sensor(27), 
 11446 ;; Return value:  Size  Location     Type
 11447 ;;                  1    wreg      void 
 11448 ;; Registers used:
 11449 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11450 ;; Tracked objects:
 11451 ;;		On entry : 0/0
 11452 ;;		On exit  : 0/0
 11453 ;;		Unchanged: 0/0
 11454 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 11455 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 11456 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 11457 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 11458 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 11459 ;;Total ram usage:        4 bytes
 11460 ;; Hardware stack levels used:    1
 11461 ;; Hardware stack levels required when called:    9
 11462 ;; This function calls:
 11463 ;;		_Sensor_DefaultCallback
 11464 ;;		_Sensor_RawSample_Update
 11465 ;;		_Sensor_isEnabled
 11466 ;;		_Sensor_setActive
 11467 ;;		_Sensor_setInactive
 11468 ;;		___bmul
 11469 ;;		_abs
 11470 ;; This function is called by:
 11471 ;;		_Sensor_FrequencyHopping
 11472 ;; This function uses a non-reentrant model
 11473 ;;
 11474                           
 11475                           
 11476                           ;psect for function _Sensor_postAcquisitionProcess
 11477  0E5D                     _Sensor_postAcquisitionProcess:	
 11478                           
 11479                           ;incstack = 0
 11480                           ; Regs used in _Sensor_postAcquisitionProcess: [wreg-fsr1h+status,2+status,0+pclath+csta
      +                          ck]
 11481                           ;Sensor_postAcquisitionProcess@name stored from wreg
 11482  0E5D  0020               	movlb	0	; select bank0
 11483  0E5E  00E2               	movwf	Sensor_postAcquisitionProcess@name
 11484                           
 11485                           ;mtouch_sensor.c: 420: mtouch_sensor_t* sensor = &mtouch_sensor[name];
 11486  0E5F  3009               	movlw	9
 11487  0E60  00E0               	movwf	??_Sensor_postAcquisitionProcess
 11488  0E61  0860               	movf	??_Sensor_postAcquisitionProcess,w
 11489  0E62  00D0               	movwf	___bmul@multiplicand
 11490  0E63  0862               	movf	Sensor_postAcquisitionProcess@name,w
 11491  0E64  3197  27CA  318E   	fcall	___bmul
 11492  0E67  3E2A               	addlw	(low (_mtouch_sensor| (0+256)))& (0+255)
 11493  0E68  0020               	movlb	0	; select bank0
 11494  0E69  00E1               	movwf	??_Sensor_postAcquisitionProcess+1
 11495  0E6A  0861               	movf	??_Sensor_postAcquisitionProcess+1,w
 11496  0E6B  00E3               	movwf	Sensor_postAcquisitionProcess@sensor
 11497                           
 11498                           ;mtouch_sensor.c: 422: if(Sensor_isEnabled(sensor))
 11499  0E6C  0863               	movf	Sensor_postAcquisitionProcess@sensor,w
 11500  0E6D  3197  277A  318E   	fcall	_Sensor_isEnabled
 11501  0E70  3A00               	xorlw	0
 11502  0E71  1903               	skipnz
 11503  0E72  2EB2               	goto	l3990
 11504                           
 11505                           ;mtouch_sensor.c: 423: {;mtouch_sensor.c: 424: if((mtouch_sensor_packetsample_t)abs(pack
      +                          et_sample[name] - sensor->rawSample) > ((mtouch_sensor_packetsample_t)(sensor->oversampl
      +                          ing)<<2))
 11506  0E73  0020               	movlb	0	; select bank0
 11507  0E74  0863               	movf	Sensor_postAcquisitionProcess@sensor,w
 11508  0E75  3E06               	addlw	6
 11509  0E76  0086               	movwf	6
 11510  0E77  3001               	movlw	1	; select bank2/3
 11511  0E78  0087               	movwf	7
 11512  0E79  3562               	lslf	Sensor_postAcquisitionProcess@name,w
 11513  0E7A  3ECC               	addlw	(low (_packet_sample| 0))& (0+255)
 11514  0E7B  0084               	movwf	4
 11515  0E7C  0185               	clrf	5
 11516  0E7D  3F40               	moviw [0]fsr1
 11517  0E7E  0200               	subwf	0,w
 11518  0E7F  00D4               	movwf	abs@a
 11519  0E80  3101               	addfsr 0,1
 11520  0E81  3F41               	moviw [1]fsr1
 11521  0E82  3B00               	subwfb	0,w
 11522  0E83  00D5               	movwf	abs@a+1
 11523  0E84  3197  276B  318E   	fcall	_abs
 11524  0E87  0020               	movlb	0	; select bank0
 11525  0E88  0863               	movf	Sensor_postAcquisitionProcess@sensor,w
 11526  0E89  3E04               	addlw	4
 11527  0E8A  0086               	movwf	6
 11528  0E8B  3001               	movlw	1	; select bank2/3
 11529  0E8C  0087               	movwf	7
 11530  0E8D  0801               	movf	1,w
 11531  0E8E  00E0               	movwf	??_Sensor_postAcquisitionProcess
 11532  0E8F  01E1               	clrf	??_Sensor_postAcquisitionProcess+1
 11533  0E90  35E0               	lslf	??_Sensor_postAcquisitionProcess,f
 11534  0E91  0DE1               	rlf	??_Sensor_postAcquisitionProcess+1,f
 11535  0E92  35E0               	lslf	??_Sensor_postAcquisitionProcess,f
 11536  0E93  0DE1               	rlf	??_Sensor_postAcquisitionProcess+1,f
 11537  0E94  0855               	movf	?_abs+1,w
 11538  0E95  0261               	subwf	??_Sensor_postAcquisitionProcess+1,w
 11539  0E96  1D03               	skipz
 11540  0E97  2E9A               	goto	u2685
 11541  0E98  0854               	movf	?_abs,w
 11542  0E99  0260               	subwf	??_Sensor_postAcquisitionProcess,w
 11543  0E9A                     u2685:	
 11544  0E9A  1803               	skipnc
 11545  0E9B  2EA1               	goto	l3984
 11546                           
 11547                           ;mtouch_sensor.c: 425: Sensor_setActive(sensor);
 11548  0E9C  0863               	movf	Sensor_postAcquisitionProcess@sensor,w
 11549  0E9D  3196  26CE  318E   	fcall	_Sensor_setActive
 11550  0EA0  2EA5               	goto	l3986
 11551  0EA1                     l3984:	
 11552                           
 11553                           ;mtouch_sensor.c: 426: else;mtouch_sensor.c: 427: Sensor_setInactive(sensor);
 11554  0EA1  0863               	movf	Sensor_postAcquisitionProcess@sensor,w
 11555  0EA2  3196  26D7  318E   	fcall	_Sensor_setInactive
 11556  0EA5                     l3986:	
 11557                           
 11558                           ;mtouch_sensor.c: 429: Sensor_RawSample_Update(sensor);
 11559  0EA5  0020               	movlb	0	; select bank0
 11560  0EA6  0863               	movf	Sensor_postAcquisitionProcess@sensor,w
 11561  0EA7  318B  2309  318E   	fcall	_Sensor_RawSample_Update
 11562                           
 11563                           ;mtouch_sensor.c: 430: callback_sampled(name);
 11564  0EAA  0020               	movlb	0	; select bank0
 11565  0EAB  0862               	movf	Sensor_postAcquisitionProcess@name,w
 11566  0EAC  00E0               	movwf	??_Sensor_postAcquisitionProcess
 11567  0EAD  0860               	movf	??_Sensor_postAcquisitionProcess,w
 11568  0EAE  00D0               	movwf	Sensor_DefaultCallback@sensor
 11569  0EAF  3180  2003         	fcall	_Sensor_DefaultCallback
 11570                           
 11571                           ;mtouch_sensor.c: 431: }
 11572  0EB1  0008               	return
 11573  0EB2                     l3990:	
 11574                           
 11575                           ;mtouch_sensor.c: 432: else;mtouch_sensor.c: 433: {;mtouch_sensor.c: 434: Sensor_setInac
      +                          tive(sensor);
 11576  0EB2  0020               	movlb	0	; select bank0
 11577  0EB3  0863               	movf	Sensor_postAcquisitionProcess@sensor,w
 11578  0EB4  3196  26D7         	fcall	_Sensor_setInactive
 11579  0EB6  0008               	return
 11580  0EB7                     __end_of_Sensor_postAcquisitionProcess:	
 11581                           
 11582                           	psect	text38
 11583  16D7                     __ptext38:	
 11584 ;; *************** function _Sensor_setInactive *****************
 11585 ;; Defined at:
 11586 ;;		line 713 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
 11587 ;; Parameters:    Size  Location     Type
 11588 ;;  sensor          1    wreg     PTR struct .
 11589 ;;		 -> mtouch_sensor(27), 
 11590 ;; Auto vars:     Size  Location     Type
 11591 ;;  sensor          1    0[BANK0 ] PTR struct .
 11592 ;;		 -> mtouch_sensor(27), 
 11593 ;; Return value:  Size  Location     Type
 11594 ;;                  1    wreg      void 
 11595 ;; Registers used:
 11596 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 11597 ;; Tracked objects:
 11598 ;;		On entry : 0/0
 11599 ;;		On exit  : 0/0
 11600 ;;		Unchanged: 0/0
 11601 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 11602 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 11603 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 11604 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 11605 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 11606 ;;Total ram usage:        1 bytes
 11607 ;; Hardware stack levels used:    1
 11608 ;; Hardware stack levels required when called:    6
 11609 ;; This function calls:
 11610 ;;		Nothing
 11611 ;; This function is called by:
 11612 ;;		_Sensor_postAcquisitionProcess
 11613 ;; This function uses a non-reentrant model
 11614 ;;
 11615                           
 11616                           
 11617                           ;psect for function _Sensor_setInactive
 11618  16D7                     _Sensor_setInactive:	
 11619                           
 11620                           ;incstack = 0
 11621                           ; Regs used in _Sensor_setInactive: [wreg+fsr1l+fsr1h+status,2+status,0]
 11622                           ;Sensor_setInactive@sensor stored from wreg
 11623  16D7  0020               	movlb	0	; select bank0
 11624  16D8  00D0               	movwf	Sensor_setInactive@sensor
 11625                           
 11626                           ;mtouch_sensor.c: 715: sensor->acitve = 0;
 11627  16D9  0850               	movf	Sensor_setInactive@sensor,w
 11628  16DA  3E08               	addlw	8
 11629  16DB  0086               	movwf	6
 11630  16DC  3001               	movlw	1	; select bank2/3
 11631  16DD  0087               	movwf	7
 11632  16DE  1101               	bcf	1,2
 11633  16DF  0008               	return
 11634  16E0                     __end_of_Sensor_setInactive:	
 11635                           
 11636                           	psect	text39
 11637  16CE                     __ptext39:	
 11638 ;; *************** function _Sensor_setActive *****************
 11639 ;; Defined at:
 11640 ;;		line 708 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
 11641 ;; Parameters:    Size  Location     Type
 11642 ;;  sensor          1    wreg     PTR struct .
 11643 ;;		 -> mtouch_sensor(27), 
 11644 ;; Auto vars:     Size  Location     Type
 11645 ;;  sensor          1    0[BANK0 ] PTR struct .
 11646 ;;		 -> mtouch_sensor(27), 
 11647 ;; Return value:  Size  Location     Type
 11648 ;;                  1    wreg      void 
 11649 ;; Registers used:
 11650 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 11651 ;; Tracked objects:
 11652 ;;		On entry : 0/0
 11653 ;;		On exit  : 0/0
 11654 ;;		Unchanged: 0/0
 11655 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 11656 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 11657 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 11658 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 11659 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 11660 ;;Total ram usage:        1 bytes
 11661 ;; Hardware stack levels used:    1
 11662 ;; Hardware stack levels required when called:    6
 11663 ;; This function calls:
 11664 ;;		Nothing
 11665 ;; This function is called by:
 11666 ;;		_Sensor_postAcquisitionProcess
 11667 ;; This function uses a non-reentrant model
 11668 ;;
 11669                           
 11670                           
 11671                           ;psect for function _Sensor_setActive
 11672  16CE                     _Sensor_setActive:	
 11673                           
 11674                           ;incstack = 0
 11675                           ; Regs used in _Sensor_setActive: [wreg+fsr1l+fsr1h+status,2+status,0]
 11676                           ;Sensor_setActive@sensor stored from wreg
 11677  16CE  0020               	movlb	0	; select bank0
 11678  16CF  00D0               	movwf	Sensor_setActive@sensor
 11679                           
 11680                           ;mtouch_sensor.c: 710: sensor->acitve = 1;
 11681  16D0  0850               	movf	Sensor_setActive@sensor,w
 11682  16D1  3E08               	addlw	8
 11683  16D2  0086               	movwf	6
 11684  16D3  3001               	movlw	1	; select bank2/3
 11685  16D4  0087               	movwf	7
 11686  16D5  1501               	bsf	1,2
 11687  16D6  0008               	return
 11688  16D7                     __end_of_Sensor_setActive:	
 11689                           
 11690                           	psect	text40
 11691  177A                     __ptext40:	
 11692 ;; *************** function _Sensor_isEnabled *****************
 11693 ;; Defined at:
 11694 ;;		line 693 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
 11695 ;; Parameters:    Size  Location     Type
 11696 ;;  sensor          1    wreg     PTR struct .
 11697 ;;		 -> mtouch_sensor(27), 
 11698 ;; Auto vars:     Size  Location     Type
 11699 ;;  sensor          1    0[BANK0 ] PTR struct .
 11700 ;;		 -> mtouch_sensor(27), 
 11701 ;; Return value:  Size  Location     Type
 11702 ;;                  1    wreg      unsigned char 
 11703 ;; Registers used:
 11704 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 11705 ;; Tracked objects:
 11706 ;;		On entry : 0/0
 11707 ;;		On exit  : 0/0
 11708 ;;		Unchanged: 0/0
 11709 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 11710 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 11711 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 11712 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 11713 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 11714 ;;Total ram usage:        1 bytes
 11715 ;; Hardware stack levels used:    1
 11716 ;; Hardware stack levels required when called:    6
 11717 ;; This function calls:
 11718 ;;		Nothing
 11719 ;; This function is called by:
 11720 ;;		_Sensor_postAcquisitionProcess
 11721 ;; This function uses a non-reentrant model
 11722 ;;
 11723                           
 11724                           
 11725                           ;psect for function _Sensor_isEnabled
 11726  177A                     _Sensor_isEnabled:	
 11727                           
 11728                           ;incstack = 0
 11729                           ; Regs used in _Sensor_isEnabled: [wreg+fsr1l+fsr1h+status,2+status,0]
 11730                           ;Sensor_isEnabled@sensor stored from wreg
 11731  177A  0020               	movlb	0	; select bank0
 11732  177B  00D0               	movwf	Sensor_isEnabled@sensor
 11733                           
 11734                           ;mtouch_sensor.c: 695: if(sensor!=(0))
 11735  177C  0850               	movf	Sensor_isEnabled@sensor,w
 11736  177D  1903               	btfsc	3,2
 11737  177E  2F87               	goto	l3834
 11738                           
 11739                           ;mtouch_sensor.c: 696: return (bool)sensor->enabled;
 11740  177F  0850               	movf	Sensor_isEnabled@sensor,w
 11741  1780  3E08               	addlw	8
 11742  1781  0086               	movwf	6
 11743  1782  3001               	movlw	1	; select bank2/3
 11744  1783  0087               	movwf	7
 11745  1784  0801               	movf	1,w
 11746  1785  3901               	andlw	1
 11747  1786  0008               	return
 11748  1787                     l3834:	
 11749                           
 11750                           ;mtouch_sensor.c: 697: else;mtouch_sensor.c: 698: return 0;
 11751  1787  3000               	movlw	0
 11752  1788  0008               	return
 11753  1789                     __end_of_Sensor_isEnabled:	
 11754                           
 11755                           	psect	text41
 11756  0B09                     __ptext41:	
 11757 ;; *************** function _Sensor_RawSample_Update *****************
 11758 ;; Defined at:
 11759 ;;		line 510 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
 11760 ;; Parameters:    Size  Location     Type
 11761 ;;  sensor          1    wreg     PTR struct .
 11762 ;;		 -> mtouch_sensor(27), 
 11763 ;; Auto vars:     Size  Location     Type
 11764 ;;  sensor          1   15[BANK0 ] PTR struct .
 11765 ;;		 -> mtouch_sensor(27), 
 11766 ;;  result          2   13[BANK0 ] unsigned int 
 11767 ;; Return value:  Size  Location     Type
 11768 ;;                  1    wreg      void 
 11769 ;; Registers used:
 11770 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11771 ;; Tracked objects:
 11772 ;;		On entry : 0/0
 11773 ;;		On exit  : 0/0
 11774 ;;		Unchanged: 0/0
 11775 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 11776 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 11777 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 11778 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 11779 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 11780 ;;Total ram usage:        3 bytes
 11781 ;; Hardware stack levels used:    1
 11782 ;; Hardware stack levels required when called:    8
 11783 ;; This function calls:
 11784 ;;		_medianFilter
 11785 ;; This function is called by:
 11786 ;;		_Sensor_postAcquisitionProcess
 11787 ;; This function uses a non-reentrant model
 11788 ;;
 11789                           
 11790                           
 11791                           ;psect for function _Sensor_RawSample_Update
 11792  0B09                     _Sensor_RawSample_Update:	
 11793                           
 11794                           ;incstack = 0
 11795                           ; Regs used in _Sensor_RawSample_Update: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 11796                           ;Sensor_RawSample_Update@sensor stored from wreg
 11797  0B09  0020               	movlb	0	; select bank0
 11798  0B0A  00DF               	movwf	Sensor_RawSample_Update@sensor
 11799                           
 11800                           ;mtouch_sensor.c: 512: mtouch_sensor_sample_t result = medianFilter(sensor->sensor_name)
      +                          ;
 11801  0B0B  085F               	movf	Sensor_RawSample_Update@sensor,w
 11802  0B0C  0086               	movwf	6
 11803  0B0D  3001               	movlw	1	; select bank2/3
 11804  0B0E  0087               	movwf	7
 11805  0B0F  0801               	movf	1,w
 11806  0B10  3182  2225  318B   	fcall	_medianFilter
 11807  0B13  0020               	movlb	0	; select bank0
 11808  0B14  0855               	movf	?_medianFilter+1,w
 11809  0B15  00DE               	movwf	Sensor_RawSample_Update@result+1
 11810  0B16  0854               	movf	?_medianFilter,w
 11811  0B17  00DD               	movwf	Sensor_RawSample_Update@result
 11812                           
 11813                           ;mtouch_sensor.c: 514: if (GIE == (uint8_t)1)
 11814  0B18  1F8B               	btfss	11,7	;volatile
 11815  0B19  2B26               	goto	l3852
 11816                           
 11817                           ;mtouch_sensor.c: 515: {;mtouch_sensor.c: 516: GIE = (uint8_t)0;
 11818  0B1A  138B               	bcf	11,7	;volatile
 11819                           
 11820                           ;mtouch_sensor.c: 517: sensor->rawSample = result;
 11821  0B1B  085F               	movf	Sensor_RawSample_Update@sensor,w
 11822  0B1C  3E06               	addlw	6
 11823  0B1D  0086               	movwf	6
 11824  0B1E  3001               	movlw	1	; select bank2/3
 11825  0B1F  0087               	movwf	7
 11826  0B20  085D               	movf	Sensor_RawSample_Update@result,w
 11827  0B21  3FC0               	movwi [0]fsr1
 11828  0B22  085E               	movf	Sensor_RawSample_Update@result+1,w
 11829  0B23  3FC1               	movwi [1]fsr1
 11830                           
 11831                           ;mtouch_sensor.c: 518: GIE = (uint8_t)1;
 11832  0B24  178B               	bsf	11,7	;volatile
 11833                           
 11834                           ;mtouch_sensor.c: 519: }
 11835  0B25  0008               	return
 11836  0B26                     l3852:	
 11837                           
 11838                           ;mtouch_sensor.c: 520: else;mtouch_sensor.c: 521: {;mtouch_sensor.c: 522: sensor->rawSam
      +                          ple = result;
 11839  0B26  085F               	movf	Sensor_RawSample_Update@sensor,w
 11840  0B27  3E06               	addlw	6
 11841  0B28  0086               	movwf	6
 11842  0B29  3001               	movlw	1	; select bank2/3
 11843  0B2A  0087               	movwf	7
 11844  0B2B  085D               	movf	Sensor_RawSample_Update@result,w
 11845  0B2C  3FC0               	movwi [0]fsr1
 11846  0B2D  085E               	movf	Sensor_RawSample_Update@result+1,w
 11847  0B2E  3FC1               	movwi [1]fsr1
 11848  0B2F  0008               	return
 11849  0B30                     __end_of_Sensor_RawSample_Update:	
 11850                           
 11851                           	psect	text42
 11852  0225                     __ptext42:	
 11853 ;; *************** function _medianFilter *****************
 11854 ;; Defined at:
 11855 ;;		line 527 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
 11856 ;; Parameters:    Size  Location     Type
 11857 ;;  sensor          1    wreg     enum E11734
 11858 ;; Auto vars:     Size  Location     Type
 11859 ;;  sensor          1   12[BANK0 ] enum E11734
 11860 ;; Return value:  Size  Location     Type
 11861 ;;                  2    4[BANK0 ] unsigned int 
 11862 ;; Registers used:
 11863 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11864 ;; Tracked objects:
 11865 ;;		On entry : 0/0
 11866 ;;		On exit  : 0/0
 11867 ;;		Unchanged: 0/0
 11868 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 11869 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 11870 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 11871 ;;      Temps:          0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 11872 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 11873 ;;Total ram usage:        9 bytes
 11874 ;; Hardware stack levels used:    1
 11875 ;; Hardware stack levels required when called:    7
 11876 ;; This function calls:
 11877 ;;		___bmul
 11878 ;; This function is called by:
 11879 ;;		_Sensor_RawSample_Update
 11880 ;; This function uses a non-reentrant model
 11881 ;;
 11882                           
 11883                           
 11884                           ;psect for function _medianFilter
 11885  0225                     _medianFilter:	
 11886                           
 11887                           ;incstack = 0
 11888                           ; Regs used in _medianFilter: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 11889                           ;medianFilter@sensor stored from wreg
 11890  0225  0020               	movlb	0	; select bank0
 11891  0226  00DC               	movwf	medianFilter@sensor
 11892                           
 11893                           ;mtouch_sensor.c: 529: static uint8_t bufferIndex[3];;mtouch_sensor.c: 531: sensor_media
      +                          nBuffer[sensor][bufferIndex[sensor]++] = packet_sample[sensor];
 11894  0227  355C               	lslf	medianFilter@sensor,w
 11895  0228  3ECC               	addlw	(low (_packet_sample| 0))& (0+255)
 11896  0229  0086               	movwf	6
 11897  022A  0187               	clrf	7
 11898  022B  085C               	movf	medianFilter@sensor,w
 11899  022C  3ED5               	addlw	(low (medianFilter@bufferIndex| 0))& (0+255)
 11900  022D  0084               	movwf	4
 11901  022E  0185               	clrf	5
 11902  022F  0800               	movf	0,w
 11903  0230  0A80               	incf	0,f
 11904  0231  00D6               	movwf	??_medianFilter
 11905  0232  3001               	movlw	1
 11906  0233                     u2465:	
 11907  0233  35D6               	lslf	??_medianFilter,f
 11908  0234  0B89               	decfsz	9,f
 11909  0235  2A33               	goto	u2465
 11910  0236  30A0               	movlw	(low (_sensor_medianBuffer| 0))& (0+255)
 11911  0237  0756               	addwf	??_medianFilter,w
 11912  0238  00D7               	movwf	??_medianFilter+1
 11913  0239  3006               	movlw	6
 11914  023A  00D8               	movwf	??_medianFilter+2
 11915  023B  0858               	movf	??_medianFilter+2,w
 11916  023C  00D0               	movwf	___bmul@multiplicand
 11917  023D  085C               	movf	medianFilter@sensor,w
 11918  023E  3197  27CA  3182   	fcall	___bmul
 11919  0241  0020               	movlb	0	; select bank0
 11920  0242  0757               	addwf	??_medianFilter+1,w
 11921  0243  00D9               	movwf	??_medianFilter+3
 11922  0244  0859               	movf	??_medianFilter+3,w
 11923  0245  0084               	movwf	4
 11924  0246  0185               	clrf	5
 11925  0247  3F40               	moviw [0]fsr1
 11926  0248  3F80               	movwi [0]fsr0
 11927  0249  3F41               	moviw [1]fsr1
 11928  024A  3F81               	movwi [1]fsr0
 11929                           
 11930                           ;mtouch_sensor.c: 533: if(bufferIndex[sensor]>=3)
 11931  024B  085C               	movf	medianFilter@sensor,w
 11932  024C  3ED5               	addlw	(low (medianFilter@bufferIndex| 0))& (0+255)
 11933  024D  0086               	movwf	6
 11934  024E  0187               	clrf	7
 11935  024F  3003               	movlw	3
 11936  0250  0201               	subwf	1,w
 11937  0251  1C03               	skipc
 11938  0252  2A58               	goto	l3772
 11939                           
 11940                           ;mtouch_sensor.c: 534: bufferIndex[sensor] = 0;
 11941  0253  085C               	movf	medianFilter@sensor,w
 11942  0254  3ED5               	addlw	(low (medianFilter@bufferIndex| 0))& (0+255)
 11943  0255  0086               	movwf	6
 11944  0256  0187               	clrf	7
 11945  0257  0181               	clrf	1
 11946  0258                     l3772:	
 11947                           
 11948                           ;mtouch_sensor.c: 536: if(sensor_medianBuffer[sensor][0]>=sensor_medianBuffer[sensor][1]
      +                          )
 11949  0258  3006               	movlw	6
 11950  0259  00D6               	movwf	??_medianFilter
 11951  025A  0856               	movf	??_medianFilter,w
 11952  025B  00D0               	movwf	___bmul@multiplicand
 11953  025C  085C               	movf	medianFilter@sensor,w
 11954  025D  3197  27CA  3182   	fcall	___bmul
 11955  0260  3EA2               	addlw	(low ((_sensor_medianBuffer| 0+2)))& (0+255)
 11956  0261  0086               	movwf	6
 11957  0262  0187               	clrf	7
 11958  0263  3F40               	moviw [0]fsr1
 11959  0264  0020               	movlb	0	; select bank0
 11960  0265  00D7               	movwf	??_medianFilter+1
 11961  0266  3F41               	moviw [1]fsr1
 11962  0267  00D8               	movwf	??_medianFilter+2
 11963  0268  3006               	movlw	6
 11964  0269  00D9               	movwf	??_medianFilter+3
 11965  026A  0859               	movf	??_medianFilter+3,w
 11966  026B  00D0               	movwf	___bmul@multiplicand
 11967  026C  085C               	movf	medianFilter@sensor,w
 11968  026D  3197  27CA  3182   	fcall	___bmul
 11969  0270  3EA0               	addlw	(low (_sensor_medianBuffer| 0))& (0+255)
 11970  0271  0086               	movwf	6
 11971  0272  0187               	clrf	7
 11972  0273  3F40               	moviw [0]fsr1
 11973  0274  0020               	movlb	0	; select bank0
 11974  0275  00DA               	movwf	??_medianFilter+4
 11975  0276  3F41               	moviw [1]fsr1
 11976  0277  00DB               	movwf	??_medianFilter+5
 11977  0278  0858               	movf	??_medianFilter+2,w
 11978  0279  025B               	subwf	??_medianFilter+5,w
 11979  027A  1D03               	skipz
 11980  027B  2A7E               	goto	u2485
 11981  027C  0857               	movf	??_medianFilter+1,w
 11982  027D  025A               	subwf	??_medianFilter+4,w
 11983  027E                     u2485:	
 11984  027E  1C03               	skipc
 11985  027F  2B00               	goto	l3794
 11986                           
 11987                           ;mtouch_sensor.c: 537: {;mtouch_sensor.c: 538: if(sensor_medianBuffer[sensor][1]>=sensor
      +                          _medianBuffer[sensor][2])
 11988  0280  3006               	movlw	6
 11989  0281  00D6               	movwf	??_medianFilter
 11990  0282  0856               	movf	??_medianFilter,w
 11991  0283  00D0               	movwf	___bmul@multiplicand
 11992  0284  085C               	movf	medianFilter@sensor,w
 11993  0285  3197  27CA  3182   	fcall	___bmul
 11994  0288  3EA4               	addlw	(low ((_sensor_medianBuffer| 0+4)))& (0+255)
 11995  0289  0086               	movwf	6
 11996  028A  0187               	clrf	7
 11997  028B  3F40               	moviw [0]fsr1
 11998  028C  0020               	movlb	0	; select bank0
 11999  028D  00D7               	movwf	??_medianFilter+1
 12000  028E  3F41               	moviw [1]fsr1
 12001  028F  00D8               	movwf	??_medianFilter+2
 12002  0290  3006               	movlw	6
 12003  0291  00D9               	movwf	??_medianFilter+3
 12004  0292  0859               	movf	??_medianFilter+3,w
 12005  0293  00D0               	movwf	___bmul@multiplicand
 12006  0294  085C               	movf	medianFilter@sensor,w
 12007  0295  3197  27CA  3182   	fcall	___bmul
 12008  0298  3EA2               	addlw	(low ((_sensor_medianBuffer| 0+2)))& (0+255)
 12009  0299  0086               	movwf	6
 12010  029A  0187               	clrf	7
 12011  029B  3F40               	moviw [0]fsr1
 12012  029C  0020               	movlb	0	; select bank0
 12013  029D  00DA               	movwf	??_medianFilter+4
 12014  029E  3F41               	moviw [1]fsr1
 12015  029F  00DB               	movwf	??_medianFilter+5
 12016  02A0  0858               	movf	??_medianFilter+2,w
 12017  02A1  025B               	subwf	??_medianFilter+5,w
 12018  02A2  1D03               	skipz
 12019  02A3  2AA6               	goto	u2495
 12020  02A4  0857               	movf	??_medianFilter+1,w
 12021  02A5  025A               	subwf	??_medianFilter+4,w
 12022  02A6                     u2495:	
 12023  02A6  1C03               	skipc
 12024  02A7  2AB8               	goto	l3782
 12025                           
 12026                           ;mtouch_sensor.c: 539: return sensor_medianBuffer[sensor][1];
 12027  02A8  3006               	movlw	6
 12028  02A9  00D6               	movwf	??_medianFilter
 12029  02AA  0856               	movf	??_medianFilter,w
 12030  02AB  00D0               	movwf	___bmul@multiplicand
 12031  02AC  085C               	movf	medianFilter@sensor,w
 12032  02AD  3197  27CA         	fcall	___bmul
 12033  02AF  3EA2               	addlw	(low ((_sensor_medianBuffer| 0+2)))& (0+255)
 12034  02B0  0086               	movwf	6
 12035  02B1  0187               	clrf	7
 12036  02B2  3F40               	moviw [0]fsr1
 12037  02B3  0020               	movlb	0	; select bank0
 12038  02B4  00D4               	movwf	?_medianFilter
 12039  02B5  3F41               	moviw [1]fsr1
 12040  02B6  00D5               	movwf	?_medianFilter+1
 12041  02B7  0008               	return
 12042  02B8                     l3782:	
 12043                           
 12044                           ;mtouch_sensor.c: 540: else;mtouch_sensor.c: 541: {;mtouch_sensor.c: 542: if(sensor_medi
      +                          anBuffer[sensor][0]>=sensor_medianBuffer[sensor][2])
 12045  02B8  3006               	movlw	6
 12046  02B9  00D6               	movwf	??_medianFilter
 12047  02BA  0856               	movf	??_medianFilter,w
 12048  02BB  00D0               	movwf	___bmul@multiplicand
 12049  02BC  085C               	movf	medianFilter@sensor,w
 12050  02BD  3197  27CA  3182   	fcall	___bmul
 12051  02C0  3EA4               	addlw	(low ((_sensor_medianBuffer| 0+4)))& (0+255)
 12052  02C1  0086               	movwf	6
 12053  02C2  0187               	clrf	7
 12054  02C3  3F40               	moviw [0]fsr1
 12055  02C4  0020               	movlb	0	; select bank0
 12056  02C5  00D7               	movwf	??_medianFilter+1
 12057  02C6  3F41               	moviw [1]fsr1
 12058  02C7  00D8               	movwf	??_medianFilter+2
 12059  02C8  3006               	movlw	6
 12060  02C9  00D9               	movwf	??_medianFilter+3
 12061  02CA  0859               	movf	??_medianFilter+3,w
 12062  02CB  00D0               	movwf	___bmul@multiplicand
 12063  02CC  085C               	movf	medianFilter@sensor,w
 12064  02CD  3197  27CA  3182   	fcall	___bmul
 12065  02D0  3EA0               	addlw	(low (_sensor_medianBuffer| 0))& (0+255)
 12066  02D1  0086               	movwf	6
 12067  02D2  0187               	clrf	7
 12068  02D3  3F40               	moviw [0]fsr1
 12069  02D4  0020               	movlb	0	; select bank0
 12070  02D5  00DA               	movwf	??_medianFilter+4
 12071  02D6  3F41               	moviw [1]fsr1
 12072  02D7  00DB               	movwf	??_medianFilter+5
 12073  02D8  0858               	movf	??_medianFilter+2,w
 12074  02D9  025B               	subwf	??_medianFilter+5,w
 12075  02DA  1D03               	skipz
 12076  02DB  2ADE               	goto	u2505
 12077  02DC  0857               	movf	??_medianFilter+1,w
 12078  02DD  025A               	subwf	??_medianFilter+4,w
 12079  02DE                     u2505:	
 12080  02DE  1C03               	skipc
 12081  02DF  2AF0               	goto	l3790
 12082                           
 12083                           ;mtouch_sensor.c: 543: return sensor_medianBuffer[sensor][2];
 12084  02E0  3006               	movlw	6
 12085  02E1  00D6               	movwf	??_medianFilter
 12086  02E2  0856               	movf	??_medianFilter,w
 12087  02E3  00D0               	movwf	___bmul@multiplicand
 12088  02E4  085C               	movf	medianFilter@sensor,w
 12089  02E5  3197  27CA         	fcall	___bmul
 12090  02E7  3EA4               	addlw	(low ((_sensor_medianBuffer| 0+4)))& (0+255)
 12091  02E8  0086               	movwf	6
 12092  02E9  0187               	clrf	7
 12093  02EA  3F40               	moviw [0]fsr1
 12094  02EB  0020               	movlb	0	; select bank0
 12095  02EC  00D4               	movwf	?_medianFilter
 12096  02ED  3F41               	moviw [1]fsr1
 12097  02EE  00D5               	movwf	?_medianFilter+1
 12098  02EF  0008               	return
 12099  02F0                     l3790:	
 12100                           
 12101                           ;mtouch_sensor.c: 544: else;mtouch_sensor.c: 545: return sensor_medianBuffer[sensor][0];
 12102  02F0  3006               	movlw	6
 12103  02F1  00D6               	movwf	??_medianFilter
 12104  02F2  0856               	movf	??_medianFilter,w
 12105  02F3  00D0               	movwf	___bmul@multiplicand
 12106  02F4  085C               	movf	medianFilter@sensor,w
 12107  02F5  3197  27CA         	fcall	___bmul
 12108  02F7  3EA0               	addlw	(low (_sensor_medianBuffer| 0))& (0+255)
 12109  02F8  0086               	movwf	6
 12110  02F9  0187               	clrf	7
 12111  02FA  3F40               	moviw [0]fsr1
 12112  02FB  0020               	movlb	0	; select bank0
 12113  02FC  00D4               	movwf	?_medianFilter
 12114  02FD  3F41               	moviw [1]fsr1
 12115  02FE  00D5               	movwf	?_medianFilter+1
 12116  02FF  0008               	return
 12117  0300                     l3794:	
 12118                           
 12119                           ;mtouch_sensor.c: 549: else;mtouch_sensor.c: 550: {;mtouch_sensor.c: 551: if(sensor_medi
      +                          anBuffer[sensor][0]>=sensor_medianBuffer[sensor][2])
 12120  0300  3006               	movlw	6
 12121  0301  00D6               	movwf	??_medianFilter
 12122  0302  0856               	movf	??_medianFilter,w
 12123  0303  00D0               	movwf	___bmul@multiplicand
 12124  0304  085C               	movf	medianFilter@sensor,w
 12125  0305  3197  27CA  3182   	fcall	___bmul
 12126  0308  3EA4               	addlw	(low ((_sensor_medianBuffer| 0+4)))& (0+255)
 12127  0309  0086               	movwf	6
 12128  030A  0187               	clrf	7
 12129  030B  3F40               	moviw [0]fsr1
 12130  030C  0020               	movlb	0	; select bank0
 12131  030D  00D7               	movwf	??_medianFilter+1
 12132  030E  3F41               	moviw [1]fsr1
 12133  030F  00D8               	movwf	??_medianFilter+2
 12134  0310  3006               	movlw	6
 12135  0311  00D9               	movwf	??_medianFilter+3
 12136  0312  0859               	movf	??_medianFilter+3,w
 12137  0313  00D0               	movwf	___bmul@multiplicand
 12138  0314  085C               	movf	medianFilter@sensor,w
 12139  0315  3197  27CA  3182   	fcall	___bmul
 12140  0318  3EA0               	addlw	(low (_sensor_medianBuffer| 0))& (0+255)
 12141  0319  0086               	movwf	6
 12142  031A  0187               	clrf	7
 12143  031B  3F40               	moviw [0]fsr1
 12144  031C  0020               	movlb	0	; select bank0
 12145  031D  00DA               	movwf	??_medianFilter+4
 12146  031E  3F41               	moviw [1]fsr1
 12147  031F  00DB               	movwf	??_medianFilter+5
 12148  0320  0858               	movf	??_medianFilter+2,w
 12149  0321  025B               	subwf	??_medianFilter+5,w
 12150  0322  1D03               	skipz
 12151  0323  2B26               	goto	u2515
 12152  0324  0857               	movf	??_medianFilter+1,w
 12153  0325  025A               	subwf	??_medianFilter+4,w
 12154  0326                     u2515:	
 12155  0326  1C03               	skipc
 12156  0327  2B38               	goto	l3802
 12157                           
 12158                           ;mtouch_sensor.c: 552: return sensor_medianBuffer[sensor][0];
 12159  0328  3006               	movlw	6
 12160  0329  00D6               	movwf	??_medianFilter
 12161  032A  0856               	movf	??_medianFilter,w
 12162  032B  00D0               	movwf	___bmul@multiplicand
 12163  032C  085C               	movf	medianFilter@sensor,w
 12164  032D  3197  27CA         	fcall	___bmul
 12165  032F  3EA0               	addlw	(low (_sensor_medianBuffer| 0))& (0+255)
 12166  0330  0086               	movwf	6
 12167  0331  0187               	clrf	7
 12168  0332  3F40               	moviw [0]fsr1
 12169  0333  0020               	movlb	0	; select bank0
 12170  0334  00D4               	movwf	?_medianFilter
 12171  0335  3F41               	moviw [1]fsr1
 12172  0336  00D5               	movwf	?_medianFilter+1
 12173  0337  0008               	return
 12174  0338                     l3802:	
 12175                           
 12176                           ;mtouch_sensor.c: 553: else;mtouch_sensor.c: 554: {;mtouch_sensor.c: 555: if(sensor_medi
      +                          anBuffer[sensor][1]>=sensor_medianBuffer[sensor][2])
 12177  0338  3006               	movlw	6
 12178  0339  00D6               	movwf	??_medianFilter
 12179  033A  0856               	movf	??_medianFilter,w
 12180  033B  00D0               	movwf	___bmul@multiplicand
 12181  033C  085C               	movf	medianFilter@sensor,w
 12182  033D  3197  27CA  3182   	fcall	___bmul
 12183  0340  3EA4               	addlw	(low ((_sensor_medianBuffer| 0+4)))& (0+255)
 12184  0341  0086               	movwf	6
 12185  0342  0187               	clrf	7
 12186  0343  3F40               	moviw [0]fsr1
 12187  0344  0020               	movlb	0	; select bank0
 12188  0345  00D7               	movwf	??_medianFilter+1
 12189  0346  3F41               	moviw [1]fsr1
 12190  0347  00D8               	movwf	??_medianFilter+2
 12191  0348  3006               	movlw	6
 12192  0349  00D9               	movwf	??_medianFilter+3
 12193  034A  0859               	movf	??_medianFilter+3,w
 12194  034B  00D0               	movwf	___bmul@multiplicand
 12195  034C  085C               	movf	medianFilter@sensor,w
 12196  034D  3197  27CA  3182   	fcall	___bmul
 12197  0350  3EA2               	addlw	(low ((_sensor_medianBuffer| 0+2)))& (0+255)
 12198  0351  0086               	movwf	6
 12199  0352  0187               	clrf	7
 12200  0353  3F40               	moviw [0]fsr1
 12201  0354  0020               	movlb	0	; select bank0
 12202  0355  00DA               	movwf	??_medianFilter+4
 12203  0356  3F41               	moviw [1]fsr1
 12204  0357  00DB               	movwf	??_medianFilter+5
 12205  0358  0858               	movf	??_medianFilter+2,w
 12206  0359  025B               	subwf	??_medianFilter+5,w
 12207  035A  1D03               	skipz
 12208  035B  2B5E               	goto	u2525
 12209  035C  0857               	movf	??_medianFilter+1,w
 12210  035D  025A               	subwf	??_medianFilter+4,w
 12211  035E                     u2525:	
 12212  035E  1C03               	skipc
 12213  035F  2B70               	goto	l3810
 12214                           
 12215                           ;mtouch_sensor.c: 556: return sensor_medianBuffer[sensor][2];
 12216  0360  3006               	movlw	6
 12217  0361  00D6               	movwf	??_medianFilter
 12218  0362  0856               	movf	??_medianFilter,w
 12219  0363  00D0               	movwf	___bmul@multiplicand
 12220  0364  085C               	movf	medianFilter@sensor,w
 12221  0365  3197  27CA         	fcall	___bmul
 12222  0367  3EA4               	addlw	(low ((_sensor_medianBuffer| 0+4)))& (0+255)
 12223  0368  0086               	movwf	6
 12224  0369  0187               	clrf	7
 12225  036A  3F40               	moviw [0]fsr1
 12226  036B  0020               	movlb	0	; select bank0
 12227  036C  00D4               	movwf	?_medianFilter
 12228  036D  3F41               	moviw [1]fsr1
 12229  036E  00D5               	movwf	?_medianFilter+1
 12230  036F  0008               	return
 12231  0370                     l3810:	
 12232                           
 12233                           ;mtouch_sensor.c: 557: else;mtouch_sensor.c: 558: return sensor_medianBuffer[sensor][1];
 12234  0370  3006               	movlw	6
 12235  0371  00D6               	movwf	??_medianFilter
 12236  0372  0856               	movf	??_medianFilter,w
 12237  0373  00D0               	movwf	___bmul@multiplicand
 12238  0374  085C               	movf	medianFilter@sensor,w
 12239  0375  3197  27CA         	fcall	___bmul
 12240  0377  3EA2               	addlw	(low ((_sensor_medianBuffer| 0+2)))& (0+255)
 12241  0378  0086               	movwf	6
 12242  0379  0187               	clrf	7
 12243  037A  3F40               	moviw [0]fsr1
 12244  037B  0020               	movlb	0	; select bank0
 12245  037C  00D4               	movwf	?_medianFilter
 12246  037D  3F41               	moviw [1]fsr1
 12247  037E  00D5               	movwf	?_medianFilter+1
 12248  037F  0008               	return
 12249  0380                     __end_of_medianFilter:	
 12250                           
 12251                           	psect	text43
 12252  0003                     __ptext43:	
 12253 ;; *************** function _Sensor_DefaultCallback *****************
 12254 ;; Defined at:
 12255 ;;		line 659 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
 12256 ;; Parameters:    Size  Location     Type
 12257 ;;  sensor          1    0[BANK0 ] enum E11734
 12258 ;; Auto vars:     Size  Location     Type
 12259 ;;		None
 12260 ;; Return value:  Size  Location     Type
 12261 ;;                  1    wreg      void 
 12262 ;; Registers used:
 12263 ;;		None
 12264 ;; Tracked objects:
 12265 ;;		On entry : 0/0
 12266 ;;		On exit  : 0/0
 12267 ;;		Unchanged: 0/0
 12268 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 12269 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 12270 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 12271 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 12272 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 12273 ;;Total ram usage:        1 bytes
 12274 ;; Hardware stack levels used:    1
 12275 ;; Hardware stack levels required when called:    6
 12276 ;; This function calls:
 12277 ;;		Nothing
 12278 ;; This function is called by:
 12279 ;;		_Sensor_postAcquisitionProcess
 12280 ;; This function uses a non-reentrant model
 12281 ;;
 12282                           
 12283                           
 12284                           ;psect for function _Sensor_DefaultCallback
 12285  0003                     _Sensor_DefaultCallback:	
 12286                           
 12287                           ;incstack = 0
 12288                           ; Regs used in _Sensor_DefaultCallback: []
 12289  0003  0008               	return
 12290  0004                     __end_of_Sensor_DefaultCallback:	
 12291                           
 12292                           	psect	text44
 12293  0439                     __ptext44:	
 12294 ;; *************** function _Sensor_FrequencyHopping_Autotune_Process *****************
 12295 ;; Defined at:
 12296 ;;		line 583 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
 12297 ;; Parameters:    Size  Location     Type
 12298 ;;		None
 12299 ;; Auto vars:     Size  Location     Type
 12300 ;;  maxVariance     2   15[BANK0 ] unsigned int 
 12301 ;;  variance        2   13[BANK0 ] unsigned int 
 12302 ;;  frequencyInd    1   19[BANK0 ] unsigned char 
 12303 ;;  sensor          1   18[BANK0 ] enum E11734
 12304 ;;  selectedFreq    1   17[BANK0 ] unsigned char 
 12305 ;;  newfrequency    1   12[BANK0 ] unsigned char 
 12306 ;; Return value:  Size  Location     Type
 12307 ;;                  1    wreg      void 
 12308 ;; Registers used:
 12309 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12310 ;; Tracked objects:
 12311 ;;		On entry : 0/0
 12312 ;;		On exit  : 0/0
 12313 ;;		Unchanged: 0/0
 12314 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 12315 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 12316 ;;      Locals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 12317 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 12318 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 12319 ;;Total ram usage:       12 bytes
 12320 ;; Hardware stack levels used:    1
 12321 ;; Hardware stack levels required when called:    7
 12322 ;; This function calls:
 12323 ;;		___bmul
 12324 ;;		_abs
 12325 ;; This function is called by:
 12326 ;;		_Sensor_FrequencyHopping
 12327 ;; This function uses a non-reentrant model
 12328 ;;
 12329                           
 12330                           
 12331                           ;psect for function _Sensor_FrequencyHopping_Autotune_Process
 12332  0439                     _Sensor_FrequencyHopping_Autotune_Process:	
 12333                           
 12334                           ;mtouch_sensor.c: 585: enum mtouch_sensor_names sensor;;mtouch_sensor.c: 586: uint8_t fr
      +                          equencyIndex;;mtouch_sensor.c: 587: uint8_t newfrequencyFound,selectedFrequency;;mtouch_
      +                          sensor.c: 588: uint16_t variance,maxVariance;;mtouch_sensor.c: 591: static uint8_t varia
      +                          nceOverLimitCounter[3] = {0,0,0};;mtouch_sensor.c: 593: maxVariance = 0;
 12335                           
 12336                           ;incstack = 0
 12337                           ; Regs used in _Sensor_FrequencyHopping_Autotune_Process: [wreg-fsr1h+status,2+status,0+
      +                          pclath+cstack]
 12338  0439  0020               	movlb	0	; select bank0
 12339  043A  01DF               	clrf	Sensor_FrequencyHopping_Autotune_Process@maxVariance
 12340  043B  01E0               	clrf	Sensor_FrequencyHopping_Autotune_Process@maxVariance+1
 12341                           
 12342                           ;mtouch_sensor.c: 595: for(sensor = 0; sensor < 3; sensor++)
 12343  043C  01E2               	clrf	Sensor_FrequencyHopping_Autotune_Process@sensor
 12344  043D                     l4004:	
 12345                           
 12346                           ;mtouch_sensor.c: 596: {;mtouch_sensor.c: 597: variance = (mtouch_sensor_packetsample_t)
      +                          abs(packet_sample[sensor] - sensor_medianBuffer[sensor][freq_index]);
 12347  043D  084B               	movf	_freq_index,w
 12348  043E  00D8               	movwf	??_Sensor_FrequencyHopping_Autotune_Process
 12349  043F  3001               	movlw	1
 12350  0440                     u2705:	
 12351  0440  35D8               	lslf	??_Sensor_FrequencyHopping_Autotune_Process,f
 12352  0441  0B89               	decfsz	9,f
 12353  0442  2C40               	goto	u2705
 12354  0443  30A0               	movlw	(low (_sensor_medianBuffer| 0))& (0+255)
 12355  0444  0758               	addwf	??_Sensor_FrequencyHopping_Autotune_Process,w
 12356  0445  00D9               	movwf	??_Sensor_FrequencyHopping_Autotune_Process+1
 12357  0446  3006               	movlw	6
 12358  0447  00DA               	movwf	??_Sensor_FrequencyHopping_Autotune_Process+2
 12359  0448  085A               	movf	??_Sensor_FrequencyHopping_Autotune_Process+2,w
 12360  0449  00D0               	movwf	___bmul@multiplicand
 12361  044A  0862               	movf	Sensor_FrequencyHopping_Autotune_Process@sensor,w
 12362  044B  3197  27CA  3184   	fcall	___bmul
 12363  044E  0020               	movlb	0	; select bank0
 12364  044F  0759               	addwf	??_Sensor_FrequencyHopping_Autotune_Process+1,w
 12365  0450  00DB               	movwf	??_Sensor_FrequencyHopping_Autotune_Process+3
 12366  0451  085B               	movf	??_Sensor_FrequencyHopping_Autotune_Process+3,w
 12367  0452  0086               	movwf	6
 12368  0453  0187               	clrf	7
 12369  0454  3562               	lslf	Sensor_FrequencyHopping_Autotune_Process@sensor,w
 12370  0455  3ECC               	addlw	(low (_packet_sample| 0))& (0+255)
 12371  0456  0084               	movwf	4
 12372  0457  0185               	clrf	5
 12373  0458  3F40               	moviw [0]fsr1
 12374  0459  0200               	subwf	0,w
 12375  045A  00D4               	movwf	abs@a
 12376  045B  3101               	addfsr 0,1
 12377  045C  3F41               	moviw [1]fsr1
 12378  045D  3B00               	subwfb	0,w
 12379  045E  00D5               	movwf	abs@a+1
 12380  045F  3197  276B  3184   	fcall	_abs
 12381  0462  0020               	movlb	0	; select bank0
 12382  0463  0855               	movf	?_abs+1,w
 12383  0464  00DE               	movwf	Sensor_FrequencyHopping_Autotune_Process@variance+1
 12384  0465  0854               	movf	?_abs,w
 12385  0466  00DD               	movwf	Sensor_FrequencyHopping_Autotune_Process@variance
 12386                           
 12387                           ;mtouch_sensor.c: 598: if(variance > maxVariance)
 12388  0467  085E               	movf	Sensor_FrequencyHopping_Autotune_Process@variance+1,w
 12389  0468  0260               	subwf	Sensor_FrequencyHopping_Autotune_Process@maxVariance+1,w
 12390  0469  1D03               	skipz
 12391  046A  2C6D               	goto	u2715
 12392  046B  085D               	movf	Sensor_FrequencyHopping_Autotune_Process@variance,w
 12393  046C  025F               	subwf	Sensor_FrequencyHopping_Autotune_Process@maxVariance,w
 12394  046D                     u2715:	
 12395  046D  1803               	skipnc
 12396  046E  2C73               	goto	l4010
 12397                           
 12398                           ;mtouch_sensor.c: 599: maxVariance = variance;
 12399  046F  085E               	movf	Sensor_FrequencyHopping_Autotune_Process@variance+1,w
 12400  0470  00E0               	movwf	Sensor_FrequencyHopping_Autotune_Process@maxVariance+1
 12401  0471  085D               	movf	Sensor_FrequencyHopping_Autotune_Process@variance,w
 12402  0472  00DF               	movwf	Sensor_FrequencyHopping_Autotune_Process@maxVariance
 12403  0473                     l4010:	
 12404  0473  3001               	movlw	1
 12405  0474  00D8               	movwf	??_Sensor_FrequencyHopping_Autotune_Process
 12406  0475  0858               	movf	??_Sensor_FrequencyHopping_Autotune_Process,w
 12407  0476  07E2               	addwf	Sensor_FrequencyHopping_Autotune_Process@sensor,f
 12408  0477  3003               	movlw	3
 12409  0478  0262               	subwf	Sensor_FrequencyHopping_Autotune_Process@sensor,w
 12410  0479  1C03               	skipc
 12411  047A  2C3D               	goto	l4004
 12412                           
 12413                           ;mtouch_sensor.c: 600: };mtouch_sensor.c: 602: if(maxVariance > (mtouch_sensor_packetsam
      +                          ple_t)100)
 12414  047B  3000               	movlw	0
 12415  047C  0260               	subwf	Sensor_FrequencyHopping_Autotune_Process@maxVariance+1,w
 12416  047D  3065               	movlw	101
 12417  047E  1903               	skipnz
 12418  047F  025F               	subwf	Sensor_FrequencyHopping_Autotune_Process@maxVariance,w
 12419  0480  1C03               	skipc
 12420  0481  2CD1               	goto	l4064
 12421                           
 12422                           ;mtouch_sensor.c: 603: {;mtouch_sensor.c: 604: if(++varianceOverLimitCounter[freq_index]
      +                           >= (uint8_t)6)
 12423  0482  3001               	movlw	1
 12424  0483  00D8               	movwf	??_Sensor_FrequencyHopping_Autotune_Process
 12425  0484  084B               	movf	_freq_index,w
 12426  0485  3ED2               	addlw	(low (Sensor_FrequencyHopping_Autotune_Process@varianceOverLimitCounter| 0))& (0+
      +                          255)
 12427  0486  0086               	movwf	6
 12428  0487  0187               	clrf	7
 12429  0488  0858               	movf	??_Sensor_FrequencyHopping_Autotune_Process,w
 12430  0489  0781               	addwf	1,f
 12431  048A  3006               	movlw	6
 12432  048B  0201               	subwf	1,w
 12433  048C  1C03               	skipc
 12434  048D  0008               	return
 12435                           
 12436                           ;mtouch_sensor.c: 607: selectedFrequency = freq_hop[freq_index];
 12437  048E  084B               	movf	_freq_index,w
 12438  048F  3EE2               	addlw	(low (_freq_hop| 0))& (0+255)
 12439  0490  0086               	movwf	6
 12440  0491  0187               	clrf	7
 12441  0492  0801               	movf	1,w
 12442  0493  00D8               	movwf	??_Sensor_FrequencyHopping_Autotune_Process
 12443  0494  0858               	movf	??_Sensor_FrequencyHopping_Autotune_Process,w
 12444  0495  00E1               	movwf	Sensor_FrequencyHopping_Autotune_Process@selectedFrequency
 12445  0496                     l4022:	
 12446                           
 12447                           ;mtouch_sensor.c: 609: {;mtouch_sensor.c: 610: if(selectedFrequency>(uint8_t)((mtouch_se
      +                          nsor_time_t)0 << (uint8_t)1))
 12448  0496  0861               	movf	Sensor_FrequencyHopping_Autotune_Process@selectedFrequency,w
 12449  0497  1903               	btfsc	3,2
 12450  0498  2C9C               	goto	l4026
 12451                           
 12452                           ;mtouch_sensor.c: 611: selectedFrequency--;
 12453  0499  3001               	movlw	1
 12454  049A  02E1               	subwf	Sensor_FrequencyHopping_Autotune_Process@selectedFrequency,f
 12455  049B  2CA0               	goto	l4028
 12456  049C                     l4026:	
 12457                           
 12458                           ;mtouch_sensor.c: 612: else;mtouch_sensor.c: 613: selectedFrequency = (uint8_t)((mtouch_
      +                          sensor_time_t)15 << (uint8_t)1);
 12459  049C  301E               	movlw	30
 12460  049D  00D8               	movwf	??_Sensor_FrequencyHopping_Autotune_Process
 12461  049E  0858               	movf	??_Sensor_FrequencyHopping_Autotune_Process,w
 12462  049F  00E1               	movwf	Sensor_FrequencyHopping_Autotune_Process@selectedFrequency
 12463  04A0                     l4028:	
 12464                           
 12465                           ;mtouch_sensor.c: 614: newfrequencyFound = 1;
 12466  04A0  01DC               	clrf	Sensor_FrequencyHopping_Autotune_Process@newfrequencyFound
 12467  04A1  0ADC               	incf	Sensor_FrequencyHopping_Autotune_Process@newfrequencyFound,f
 12468                           
 12469                           ;mtouch_sensor.c: 616: for(frequencyIndex = 0;frequencyIndex < sizeof(freq_hop);frequenc
      +                          yIndex++)
 12470  04A2  01E3               	clrf	Sensor_FrequencyHopping_Autotune_Process@frequencyIndex
 12471  04A3                     l4036:	
 12472                           
 12473                           ;mtouch_sensor.c: 617: {;mtouch_sensor.c: 618: if(frequencyIndex == freq_index)
 12474  04A3  0863               	movf	Sensor_FrequencyHopping_Autotune_Process@frequencyIndex,w
 12475  04A4  064B               	xorwf	_freq_index,w
 12476  04A5  1903               	btfsc	3,2
 12477  04A6  2CAF               	goto	l4044
 12478                           
 12479                           ;mtouch_sensor.c: 622: else if(selectedFrequency==freq_hop[frequencyIndex])
 12480  04A7  0863               	movf	Sensor_FrequencyHopping_Autotune_Process@frequencyIndex,w
 12481  04A8  3EE2               	addlw	(low (_freq_hop| 0))& (0+255)
 12482  04A9  0086               	movwf	6
 12483  04AA  0187               	clrf	7
 12484  04AB  0801               	movf	1,w
 12485  04AC  0661               	xorwf	Sensor_FrequencyHopping_Autotune_Process@selectedFrequency,w
 12486  04AD  1903               	btfsc	3,2
 12487                           
 12488                           ;mtouch_sensor.c: 623: {;mtouch_sensor.c: 624: newfrequencyFound = 0;
 12489  04AE  01DC               	clrf	Sensor_FrequencyHopping_Autotune_Process@newfrequencyFound
 12490  04AF                     l4044:	
 12491                           ;mtouch_sensor.c: 625: }
 12492                           
 12493  04AF  3001               	movlw	1
 12494  04B0  00D8               	movwf	??_Sensor_FrequencyHopping_Autotune_Process
 12495  04B1  0858               	movf	??_Sensor_FrequencyHopping_Autotune_Process,w
 12496  04B2  07E3               	addwf	Sensor_FrequencyHopping_Autotune_Process@frequencyIndex,f
 12497  04B3  3003               	movlw	3
 12498  04B4  0263               	subwf	Sensor_FrequencyHopping_Autotune_Process@frequencyIndex,w
 12499  04B5  1C03               	skipc
 12500  04B6  2CA3               	goto	l4036
 12501                           
 12502                           ;mtouch_sensor.c: 629: };mtouch_sensor.c: 630: };mtouch_sensor.c: 632: }while(!newfreque
      +                          ncyFound);
 12503  04B7  085C               	movf	Sensor_FrequencyHopping_Autotune_Process@newfrequencyFound,w
 12504  04B8  1903               	btfsc	3,2
 12505  04B9  2C96               	goto	l4022
 12506                           
 12507                           ;mtouch_sensor.c: 634: freq_hop[freq_index] = selectedFrequency;
 12508  04BA  0861               	movf	Sensor_FrequencyHopping_Autotune_Process@selectedFrequency,w
 12509  04BB  00D8               	movwf	??_Sensor_FrequencyHopping_Autotune_Process
 12510  04BC  084B               	movf	_freq_index,w
 12511  04BD  3EE2               	addlw	(low (_freq_hop| 0))& (0+255)
 12512  04BE  0086               	movwf	6
 12513  04BF  0187               	clrf	7
 12514  04C0  0858               	movf	??_Sensor_FrequencyHopping_Autotune_Process,w
 12515  04C1  0081               	movwf	1
 12516                           
 12517                           ;mtouch_sensor.c: 636: for(frequencyIndex = 0;frequencyIndex < sizeof(freq_hop);frequenc
      +                          yIndex++)
 12518  04C2  01E3               	clrf	Sensor_FrequencyHopping_Autotune_Process@frequencyIndex
 12519  04C3                     l4058:	
 12520                           
 12521                           ;mtouch_sensor.c: 637: {;mtouch_sensor.c: 638: varianceOverLimitCounter[frequencyIndex] 
      +                          = 0;
 12522  04C3  0863               	movf	Sensor_FrequencyHopping_Autotune_Process@frequencyIndex,w
 12523  04C4  3ED2               	addlw	(low (Sensor_FrequencyHopping_Autotune_Process@varianceOverLimitCounter| 0))& (0+
      +                          255)
 12524  04C5  0086               	movwf	6
 12525  04C6  0187               	clrf	7
 12526  04C7  0181               	clrf	1
 12527  04C8  3001               	movlw	1
 12528  04C9  00D8               	movwf	??_Sensor_FrequencyHopping_Autotune_Process
 12529  04CA  0858               	movf	??_Sensor_FrequencyHopping_Autotune_Process,w
 12530  04CB  07E3               	addwf	Sensor_FrequencyHopping_Autotune_Process@frequencyIndex,f
 12531  04CC  3003               	movlw	3
 12532  04CD  0263               	subwf	Sensor_FrequencyHopping_Autotune_Process@frequencyIndex,w
 12533  04CE  1803               	btfsc	3,0
 12534  04CF  0008               	return
 12535  04D0  2CC3               	goto	l4058
 12536  04D1                     l4064:	
 12537                           
 12538                           ;mtouch_sensor.c: 642: else if(maxVariance < ((mtouch_sensor_packetsample_t)100 >>1))
 12539  04D1  3000               	movlw	0
 12540  04D2  0260               	subwf	Sensor_FrequencyHopping_Autotune_Process@maxVariance+1,w
 12541  04D3  3032               	movlw	50
 12542  04D4  1903               	skipnz
 12543  04D5  025F               	subwf	Sensor_FrequencyHopping_Autotune_Process@maxVariance,w
 12544  04D6  1803               	skipnc
 12545  04D7  0008               	return
 12546                           
 12547                           ;mtouch_sensor.c: 643: {;mtouch_sensor.c: 645: if(varianceOverLimitCounter[freq_index] >
      +                           0)
 12548  04D8  084B               	movf	_freq_index,w
 12549  04D9  3ED2               	addlw	(low (Sensor_FrequencyHopping_Autotune_Process@varianceOverLimitCounter| 0))& (0+
      +                          255)
 12550  04DA  0086               	movwf	6
 12551  04DB  0187               	clrf	7
 12552  04DC  0801               	movf	1,w
 12553  04DD  1903               	btfsc	3,2
 12554  04DE  0008               	return
 12555                           
 12556                           ;mtouch_sensor.c: 646: varianceOverLimitCounter[freq_index]--;
 12557  04DF  084B               	movf	_freq_index,w
 12558  04E0  3ED2               	addlw	(low (Sensor_FrequencyHopping_Autotune_Process@varianceOverLimitCounter| 0))& (0+
      +                          255)
 12559  04E1  0086               	movwf	6
 12560  04E2  0187               	clrf	7
 12561  04E3  3001               	movlw	1
 12562  04E4  0281               	subwf	1,f
 12563  04E5  0008               	return
 12564  04E6                     __end_of_Sensor_FrequencyHopping_Autotune_Process:	
 12565                           
 12566                           	psect	text45
 12567  176B                     __ptext45:	
 12568 ;; *************** function _abs *****************
 12569 ;; Defined at:
 12570 ;;		line 4 in file "C:\Program Files2\Microchip\xc8\v2.05\pic\sources\c90\common\abs.c"
 12571 ;; Parameters:    Size  Location     Type
 12572 ;;  a               2    4[BANK0 ] int 
 12573 ;; Auto vars:     Size  Location     Type
 12574 ;;		None
 12575 ;; Return value:  Size  Location     Type
 12576 ;;                  2    4[BANK0 ] int 
 12577 ;; Registers used:
 12578 ;;		wreg, status,2, status,0
 12579 ;; Tracked objects:
 12580 ;;		On entry : 0/0
 12581 ;;		On exit  : 0/0
 12582 ;;		Unchanged: 0/0
 12583 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 12584 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 12585 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 12586 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 12587 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 12588 ;;Total ram usage:        4 bytes
 12589 ;; Hardware stack levels used:    1
 12590 ;; Hardware stack levels required when called:    6
 12591 ;; This function calls:
 12592 ;;		Nothing
 12593 ;; This function is called by:
 12594 ;;		_Sensor_postAcquisitionProcess
 12595 ;;		_Sensor_FrequencyHopping_Autotune_Process
 12596 ;; This function uses a non-reentrant model
 12597 ;;
 12598                           
 12599                           
 12600                           ;psect for function _abs
 12601  176B                     _abs:	
 12602                           
 12603                           ;incstack = 0
 12604                           ; Regs used in _abs: [wreg+status,2+status,0]
 12605  176B  0020               	movlb	0	; select bank0
 12606  176C  1FD5               	btfss	abs@a+1,7
 12607  176D  0008               	return
 12608  176E  0954               	comf	abs@a,w
 12609  176F  00D6               	movwf	??_abs
 12610  1770  0955               	comf	abs@a+1,w
 12611  1771  00D7               	movwf	??_abs+1
 12612  1772  0AD6               	incf	??_abs,f
 12613  1773  1903               	skipnz
 12614  1774  0AD7               	incf	??_abs+1,f
 12615  1775  0856               	movf	??_abs,w
 12616  1776  00D4               	movwf	?_abs
 12617  1777  0857               	movf	??_abs+1,w
 12618  1778  00D5               	movwf	?_abs+1
 12619  1779  0008               	return
 12620  177A                     __end_of_abs:	
 12621                           
 12622                           	psect	text46
 12623  1680                     __ptext46:	
 12624 ;; *************** function _MTOUCH_Sensor_isSampling *****************
 12625 ;; Defined at:
 12626 ;;		line 806 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
 12627 ;; Parameters:    Size  Location     Type
 12628 ;;		None
 12629 ;; Auto vars:     Size  Location     Type
 12630 ;;		None
 12631 ;; Return value:  Size  Location     Type
 12632 ;;                  1    wreg      unsigned char 
 12633 ;; Registers used:
 12634 ;;		wreg
 12635 ;; Tracked objects:
 12636 ;;		On entry : 0/0
 12637 ;;		On exit  : 0/0
 12638 ;;		Unchanged: 0/0
 12639 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 12640 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 12641 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 12642 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 12643 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 12644 ;;Total ram usage:        0 bytes
 12645 ;; Hardware stack levels used:    1
 12646 ;; Hardware stack levels required when called:    6
 12647 ;; This function calls:
 12648 ;;		Nothing
 12649 ;; This function is called by:
 12650 ;;		_MTOUCH_Sensor_SampleAll
 12651 ;; This function uses a non-reentrant model
 12652 ;;
 12653                           
 12654                           
 12655                           ;psect for function _MTOUCH_Sensor_isSampling
 12656  1680                     _MTOUCH_Sensor_isSampling:	
 12657                           
 12658                           ;mtouch_sensor.c: 808: return sampling_flag;
 12659                           
 12660                           ;incstack = 0
 12661                           ; Regs used in _MTOUCH_Sensor_isSampling: [wreg]
 12662  1680  0020               	movlb	0	; select bank0
 12663  1681  084D               	movf	_sampling_flag,w
 12664  1682  0008               	return
 12665  1683                     __end_of_MTOUCH_Sensor_isSampling:	
 12666                           
 12667                           	psect	text47
 12668  1798                     __ptext47:	
 12669 ;; *************** function _MTOUCH_Button_ServiceAll *****************
 12670 ;; Defined at:
 12671 ;;		line 192 in file "mcc_generated_files/mtouch/mtouch_button.c"
 12672 ;; Parameters:    Size  Location     Type
 12673 ;;		None
 12674 ;; Auto vars:     Size  Location     Type
 12675 ;;  button          1   23[BANK0 ] enum E11678
 12676 ;; Return value:  Size  Location     Type
 12677 ;;                  1    wreg      void 
 12678 ;; Registers used:
 12679 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12680 ;; Tracked objects:
 12681 ;;		On entry : 0/0
 12682 ;;		On exit  : 0/0
 12683 ;;		Unchanged: 0/0
 12684 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 12685 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 12686 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 12687 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 12688 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 12689 ;;Total ram usage:        2 bytes
 12690 ;; Hardware stack levels used:    1
 12691 ;; Hardware stack levels required when called:   11
 12692 ;; This function calls:
 12693 ;;		_Button_Service
 12694 ;; This function is called by:
 12695 ;;		_MTOUCH_Service_Mainloop
 12696 ;; This function uses a non-reentrant model
 12697 ;;
 12698                           
 12699                           
 12700                           ;psect for function _MTOUCH_Button_ServiceAll
 12701  1798                     _MTOUCH_Button_ServiceAll:	
 12702                           
 12703                           ;mtouch_button.c: 194: enum mtouch_button_names button;;mtouch_button.c: 197: for (butto
      +                          n = 0; button < 3; button++)
 12704                           
 12705                           ;incstack = 0
 12706                           ; Regs used in _MTOUCH_Button_ServiceAll: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 12707  1798  0020               	movlb	0	; select bank0
 12708  1799  01E7               	clrf	MTOUCH_Button_ServiceAll@button
 12709  179A                     l4474:	
 12710                           
 12711                           ;mtouch_button.c: 198: {;mtouch_button.c: 199: Button_Service(button);
 12712  179A  0867               	movf	MTOUCH_Button_ServiceAll@button,w
 12713  179B  318D  2554  3197   	fcall	_Button_Service
 12714  179E  3001               	movlw	1
 12715  179F  0020               	movlb	0	; select bank0
 12716  17A0  00E6               	movwf	??_MTOUCH_Button_ServiceAll
 12717  17A1  0866               	movf	??_MTOUCH_Button_ServiceAll,w
 12718  17A2  07E7               	addwf	MTOUCH_Button_ServiceAll@button,f
 12719  17A3  3003               	movlw	3
 12720  17A4  0267               	subwf	MTOUCH_Button_ServiceAll@button,w
 12721  17A5  1803               	btfsc	3,0
 12722  17A6  0008               	return
 12723  17A7  2F9A               	goto	l4474
 12724  17A8                     __end_of_MTOUCH_Button_ServiceAll:	
 12725                           
 12726                           	psect	text48
 12727  0D54                     __ptext48:	
 12728 ;; *************** function _Button_Service *****************
 12729 ;; Defined at:
 12730 ;;		line 203 in file "mcc_generated_files/mtouch/mtouch_button.c"
 12731 ;; Parameters:    Size  Location     Type
 12732 ;;  name            1    wreg     enum E11678
 12733 ;; Auto vars:     Size  Location     Type
 12734 ;;  name            1   20[BANK0 ] enum E11678
 12735 ;;  button          1   21[BANK0 ] PTR struct .
 12736 ;;		 -> mtouch_button(48), 
 12737 ;; Return value:  Size  Location     Type
 12738 ;;                  1    wreg      void 
 12739 ;; Registers used:
 12740 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12741 ;; Tracked objects:
 12742 ;;		On entry : 0/0
 12743 ;;		On exit  : 0/0
 12744 ;;		Unchanged: 0/0
 12745 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 12746 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 12747 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 12748 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 12749 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 12750 ;;Total ram usage:        4 bytes
 12751 ;; Hardware stack levels used:    1
 12752 ;; Hardware stack levels required when called:   10
 12753 ;; This function calls:
 12754 ;;		_Button_Deviation_Update
 12755 ;;		_Button_Reading_Update
 12756 ;;		_Button_State_Initializing
 12757 ;;		_Button_State_NotPressed
 12758 ;;		_Button_State_Pressed
 12759 ;;		_MTOUCH_Button_Initialize
 12760 ;;		_MTOUCH_Sensor_isCalibrated
 12761 ;;		_MTOUCH_Sensor_wasSampled
 12762 ;; This function is called by:
 12763 ;;		_MTOUCH_Button_ServiceAll
 12764 ;; This function uses a non-reentrant model
 12765 ;;
 12766                           
 12767                           
 12768                           ;psect for function _Button_Service
 12769  0D54                     _Button_Service:	
 12770                           
 12771                           ;incstack = 0
 12772                           ; Regs used in _Button_Service: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 12773                           ;Button_Service@name stored from wreg
 12774  0D54  0020               	movlb	0	; select bank0
 12775  0D55  00E4               	movwf	Button_Service@name
 12776                           
 12777                           ;mtouch_button.c: 205: mtouch_button_t* button = &mtouch_button[name];
 12778  0D56  0864               	movf	Button_Service@name,w
 12779  0D57  00E2               	movwf	??_Button_Service
 12780  0D58  3003               	movlw	3
 12781  0D59                     u3275:	
 12782  0D59  35E2               	lslf	??_Button_Service,f
 12783  0D5A  3EFF               	addlw	-1
 12784  0D5B  1D03               	skipz
 12785  0D5C  2D59               	goto	u3275
 12786  0D5D  3562               	lslf	??_Button_Service,w
 12787  0D5E  3EA0               	addlw	(low (_mtouch_button| (0+256)))& (0+255)
 12788  0D5F  00E3               	movwf	??_Button_Service+1
 12789  0D60  0863               	movf	??_Button_Service+1,w
 12790  0D61  00E5               	movwf	Button_Service@button
 12791                           
 12792                           ;mtouch_button.c: 207: if (MTOUCH_Sensor_wasSampled(button->sensor) && MTOUCH_Sensor_isC
      +                          alibrated(button->sensor))
 12793  0D62  0A65               	incf	Button_Service@button,w
 12794  0D63  0086               	movwf	6
 12795  0D64  3001               	movlw	1	; select bank2/3
 12796  0D65  0087               	movwf	7
 12797  0D66  0801               	movf	1,w
 12798  0D67  3188  2093  318D   	fcall	_MTOUCH_Sensor_wasSampled
 12799  0D6A  3A00               	xorlw	0
 12800  0D6B  1903               	skipnz
 12801  0D6C  0008               	return
 12802  0D6D  0020               	movlb	0	; select bank0
 12803  0D6E  0A65               	incf	Button_Service@button,w
 12804  0D6F  0086               	movwf	6
 12805  0D70  3001               	movlw	1	; select bank2/3
 12806  0D71  0087               	movwf	7
 12807  0D72  0801               	movf	1,w
 12808  0D73  3189  2155  318D   	fcall	_MTOUCH_Sensor_isCalibrated
 12809  0D76  3A00               	xorlw	0
 12810  0D77  1903               	skipnz
 12811  0D78  0008               	return
 12812                           
 12813                           ;mtouch_button.c: 208: {;mtouch_button.c: 209: Button_Reading_Update(button);
 12814  0D79  0020               	movlb	0	; select bank0
 12815  0D7A  0865               	movf	Button_Service@button,w
 12816  0D7B  3197  273F  318D   	fcall	_Button_Reading_Update
 12817                           
 12818                           ;mtouch_button.c: 210: Button_Deviation_Update(button);
 12819  0D7E  0020               	movlb	0	; select bank0
 12820  0D7F  0865               	movf	Button_Service@button,w
 12821  0D80  318F  2779  318D   	fcall	_Button_Deviation_Update
 12822                           
 12823                           ;mtouch_button.c: 212: if (button->state >= (uint8_t)(sizeof(Button_StateMachine)/sizeof
      +                          (button_statemachine_state_t)))
 12824  0D83  0020               	movlb	0	; select bank0
 12825  0D84  0865               	movf	Button_Service@button,w
 12826  0D85  3E02               	addlw	2
 12827  0D86  0086               	movwf	6
 12828  0D87  3001               	movlw	1	; select bank2/3
 12829  0D88  0087               	movwf	7
 12830  0D89  3003               	movlw	3
 12831  0D8A  0201               	subwf	1,w
 12832  0D8B  1C03               	skipc
 12833  0D8C  2D95               	goto	l4366
 12834                           
 12835                           ;mtouch_button.c: 213: {;mtouch_button.c: 214: MTOUCH_Button_Initialize(button->name);
 12836  0D8D  0865               	movf	Button_Service@button,w
 12837  0D8E  0086               	movwf	6
 12838  0D8F  3001               	movlw	1	; select bank2/3
 12839  0D90  0087               	movwf	7
 12840  0D91  0801               	movf	1,w
 12841  0D92  318C  240D  318D   	fcall	_MTOUCH_Button_Initialize
 12842  0D95                     l4366:	
 12843                           
 12844                           ;mtouch_button.c: 215: };mtouch_button.c: 216: Button_StateMachine[(uint8_t)button->stat
      +                          e](button);
 12845  0D95  0020               	movlb	0	; select bank0
 12846  0D96  0865               	movf	Button_Service@button,w
 12847  0D97  00E2               	movwf	??_Button_Service
 12848  0D98  0862               	movf	??_Button_Service,w
 12849  0D99  00DD               	movwf	Button_State_Pressed@button
 12850  0D9A  0865               	movf	Button_Service@button,w
 12851  0D9B  3E02               	addlw	2
 12852  0D9C  0086               	movwf	6
 12853  0D9D  3001               	movlw	1	; select bank2/3
 12854  0D9E  0087               	movwf	7
 12855  0D9F  3501               	lslf	1,w
 12856  0DA0  3EDC               	addlw	(low (_Button_StateMachine| 0))& (0+255)
 12857  0DA1  0086               	movwf	6
 12858  0DA2  0187               	clrf	7
 12859  0DA3  3F41               	moviw [1]fsr1
 12860  0DA4  008A               	movwf	10
 12861  0DA5  3F40               	moviw [0]fsr1
 12862  0DA6  000A               	callw
 12863  0DA7  318D               	pagesel	$
 12864  0DA8  0008               	return
 12865  0DA9                     __end_of_Button_Service:	
 12866                           
 12867                           	psect	text49
 12868  0893                     __ptext49:	
 12869 ;; *************** function _MTOUCH_Sensor_wasSampled *****************
 12870 ;; Defined at:
 12871 ;;		line 788 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
 12872 ;; Parameters:    Size  Location     Type
 12873 ;;  sensor          1    wreg     enum E11734
 12874 ;; Auto vars:     Size  Location     Type
 12875 ;;  sensor          1    5[BANK0 ] enum E11734
 12876 ;; Return value:  Size  Location     Type
 12877 ;;                  1    wreg      unsigned char 
 12878 ;; Registers used:
 12879 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12880 ;; Tracked objects:
 12881 ;;		On entry : 0/0
 12882 ;;		On exit  : 0/0
 12883 ;;		Unchanged: 0/0
 12884 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 12885 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 12886 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 12887 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 12888 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 12889 ;;Total ram usage:        2 bytes
 12890 ;; Hardware stack levels used:    1
 12891 ;; Hardware stack levels required when called:    7
 12892 ;; This function calls:
 12893 ;;		___bmul
 12894 ;; This function is called by:
 12895 ;;		_MTOUCH_Sensor_SampleAll
 12896 ;;		_Sensor_scheduleNextScan
 12897 ;;		_Button_Service
 12898 ;; This function uses a non-reentrant model
 12899 ;;
 12900                           
 12901                           
 12902                           ;psect for function _MTOUCH_Sensor_wasSampled
 12903  0893                     _MTOUCH_Sensor_wasSampled:	
 12904                           
 12905                           ;incstack = 0
 12906                           ; Regs used in _MTOUCH_Sensor_wasSampled: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cst
      +                          ack]
 12907                           ;MTOUCH_Sensor_wasSampled@sensor stored from wreg
 12908  0893  0020               	movlb	0	; select bank0
 12909  0894  00D5               	movwf	MTOUCH_Sensor_wasSampled@sensor
 12910                           
 12911                           ;mtouch_sensor.c: 790: if(sensor < 3)
 12912  0895  3003               	movlw	3
 12913  0896  0255               	subwf	MTOUCH_Sensor_wasSampled@sensor,w
 12914  0897  1803               	skipnc
 12915  0898  28A7               	goto	l3948
 12916                           
 12917                           ;mtouch_sensor.c: 791: return (bool)mtouch_sensor[sensor].sampled;
 12918  0899  3009               	movlw	9
 12919  089A  00D4               	movwf	??_MTOUCH_Sensor_wasSampled
 12920  089B  0854               	movf	??_MTOUCH_Sensor_wasSampled,w
 12921  089C  00D0               	movwf	___bmul@multiplicand
 12922  089D  0855               	movf	MTOUCH_Sensor_wasSampled@sensor,w
 12923  089E  3197  27CA         	fcall	___bmul
 12924  08A0  3E32               	addlw	(low ((_mtouch_sensor| (0+256)+8)))& (0+255)
 12925  08A1  0086               	movwf	6
 12926  08A2  3001               	movlw	1	; select bank2/3
 12927  08A3  0087               	movwf	7
 12928  08A4  0C01               	rrf	1,w
 12929  08A5  3901               	andlw	1
 12930  08A6  0008               	return
 12931  08A7                     l3948:	
 12932                           
 12933                           ;mtouch_sensor.c: 792: else;mtouch_sensor.c: 793: return 0;
 12934  08A7  3000               	movlw	0
 12935  08A8  0008               	return
 12936  08A9                     __end_of_MTOUCH_Sensor_wasSampled:	
 12937                           
 12938                           	psect	text50
 12939  0955                     __ptext50:	
 12940 ;; *************** function _MTOUCH_Sensor_isCalibrated *****************
 12941 ;; Defined at:
 12942 ;;		line 740 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
 12943 ;; Parameters:    Size  Location     Type
 12944 ;;  sensor          1    wreg     enum E11734
 12945 ;; Auto vars:     Size  Location     Type
 12946 ;;  sensor          1    6[BANK0 ] enum E11734
 12947 ;; Return value:  Size  Location     Type
 12948 ;;                  1    wreg      unsigned char 
 12949 ;; Registers used:
 12950 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12951 ;; Tracked objects:
 12952 ;;		On entry : 0/0
 12953 ;;		On exit  : 0/0
 12954 ;;		Unchanged: 0/0
 12955 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 12956 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 12957 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 12958 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 12959 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 12960 ;;Total ram usage:        3 bytes
 12961 ;; Hardware stack levels used:    1
 12962 ;; Hardware stack levels required when called:    7
 12963 ;; This function calls:
 12964 ;;		___bmul
 12965 ;; This function is called by:
 12966 ;;		_Button_Service
 12967 ;; This function uses a non-reentrant model
 12968 ;;
 12969                           
 12970                           
 12971                           ;psect for function _MTOUCH_Sensor_isCalibrated
 12972  0955                     _MTOUCH_Sensor_isCalibrated:	
 12973                           
 12974                           ;incstack = 0
 12975                           ; Regs used in _MTOUCH_Sensor_isCalibrated: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
 12976                           ;MTOUCH_Sensor_isCalibrated@sensor stored from wreg
 12977  0955  0020               	movlb	0	; select bank0
 12978  0956  00D6               	movwf	MTOUCH_Sensor_isCalibrated@sensor
 12979                           
 12980                           ;mtouch_sensor.c: 742: if(sensor < 3)
 12981  0957  3003               	movlw	3
 12982  0958  0256               	subwf	MTOUCH_Sensor_isCalibrated@sensor,w
 12983  0959  1803               	skipnc
 12984  095A  296D               	goto	l4078
 12985                           
 12986                           ;mtouch_sensor.c: 743: return (bool)mtouch_sensor[sensor].calibrated;
 12987  095B  3009               	movlw	9
 12988  095C  00D4               	movwf	??_MTOUCH_Sensor_isCalibrated
 12989  095D  0854               	movf	??_MTOUCH_Sensor_isCalibrated,w
 12990  095E  00D0               	movwf	___bmul@multiplicand
 12991  095F  0856               	movf	MTOUCH_Sensor_isCalibrated@sensor,w
 12992  0960  3197  27CA         	fcall	___bmul
 12993  0962  3E32               	addlw	(low ((_mtouch_sensor| (0+256)+8)))& (0+255)
 12994  0963  0086               	movwf	6
 12995  0964  3001               	movlw	1	; select bank2/3
 12996  0965  0087               	movwf	7
 12997  0966  0C01               	rrf	1,w
 12998  0967  0020               	movlb	0	; select bank0
 12999  0968  00D5               	movwf	??_MTOUCH_Sensor_isCalibrated+1
 13000  0969  0CD5               	rrf	??_MTOUCH_Sensor_isCalibrated+1,f
 13001  096A  0C55               	rrf	??_MTOUCH_Sensor_isCalibrated+1,w
 13002  096B  3901               	andlw	1
 13003  096C  0008               	return
 13004  096D                     l4078:	
 13005                           
 13006                           ;mtouch_sensor.c: 744: else;mtouch_sensor.c: 745: return 0;
 13007  096D  3000               	movlw	0
 13008  096E  0008               	return
 13009  096F                     __end_of_MTOUCH_Sensor_isCalibrated:	
 13010                           
 13011                           	psect	text51
 13012  058E                     __ptext51:	
 13013 ;; *************** function _Button_State_NotPressed *****************
 13014 ;; Defined at:
 13015 ;;		line 240 in file "mcc_generated_files/mtouch/mtouch_button.c"
 13016 ;; Parameters:    Size  Location     Type
 13017 ;;  button          1   13[BANK0 ] PTR struct .
 13018 ;;		 -> mtouch_button(48), 
 13019 ;; Auto vars:     Size  Location     Type
 13020 ;;		None
 13021 ;; Return value:  Size  Location     Type
 13022 ;;                  1    wreg      void 
 13023 ;; Registers used:
 13024 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13025 ;; Tracked objects:
 13026 ;;		On entry : 0/0
 13027 ;;		On exit  : 0/0
 13028 ;;		Unchanged: 0/0
 13029 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 13030 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13031 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13032 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13033 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13034 ;;Total ram usage:        3 bytes
 13035 ;; Hardware stack levels used:    1
 13036 ;; Hardware stack levels required when called:    9
 13037 ;; This function calls:
 13038 ;;		_Button_Baseline_Update
 13039 ;;		_Button_DefaultCallback
 13040 ;;		_MTOUCH_Button_Initialize
 13041 ;; This function is called by:
 13042 ;;		_Button_Service
 13043 ;; This function uses a non-reentrant model
 13044 ;;
 13045                           
 13046                           
 13047                           ;psect for function _Button_State_NotPressed
 13048  058E                     _Button_State_NotPressed:	
 13049                           
 13050                           ;mtouch_button.c: 243: if ((button->deviation) < (mtouch_button_deviation_t)(-button->th
      +                          reshold))
 13051                           
 13052                           ;incstack = 0
 13053                           ; Regs used in _Button_State_NotPressed: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+csta
      +                          ck]
 13054  058E  0020               	movlb	0	; select bank0
 13055  058F  085D               	movf	Button_State_NotPressed@button,w
 13056  0590  3E09               	addlw	9
 13057  0591  0086               	movwf	6
 13058  0592  3001               	movlw	1	; select bank2/3
 13059  0593  0087               	movwf	7
 13060  0594  0801               	movf	1,w
 13061  0595  3A80               	xorlw	128
 13062  0596  00DE               	movwf	??_Button_State_NotPressed
 13063  0597  085D               	movf	Button_State_NotPressed@button,w
 13064  0598  3E0E               	addlw	14
 13065  0599  0086               	movwf	6
 13066  059A  3001               	movlw	1	; select bank2/3
 13067  059B  0087               	movwf	7
 13068  059C  0301               	decf	1,w
 13069  059D  3AFF               	xorlw	255
 13070  059E  3A80               	xorlw	128
 13071  059F  02DE               	subwf	??_Button_State_NotPressed,f
 13072  05A0  1803               	skipnc
 13073  05A1  2DCD               	goto	l4124
 13074                           
 13075                           ;mtouch_button.c: 244: {;mtouch_button.c: 245: (button->counter)++;
 13076  05A2  085D               	movf	Button_State_NotPressed@button,w
 13077  05A3  3E0A               	addlw	10
 13078  05A4  0086               	movwf	6
 13079  05A5  3001               	movlw	1	; select bank2/3
 13080  05A6  0087               	movwf	7
 13081  05A7  3001               	movlw	1
 13082  05A8  0781               	addwf	1,f
 13083  05A9  3141               	addfsr 1,1
 13084  05AA  1803               	skipnc
 13085  05AB  0A81               	incf	1,f
 13086                           
 13087                           ;mtouch_button.c: 246: if ((button->counter) > (mtouch_button_statecounter_t)((mtouch_bu
      +                          tton_statecounter_t)64))
 13088  05AC  085D               	movf	Button_State_NotPressed@button,w
 13089  05AD  3E0A               	addlw	10
 13090  05AE  0086               	movwf	6
 13091  05AF  3001               	movlw	1	; select bank2/3
 13092  05B0  0087               	movwf	7
 13093  05B1  3F40               	moviw [0]fsr1
 13094  05B2  00DE               	movwf	??_Button_State_NotPressed
 13095  05B3  3F41               	moviw [1]fsr1
 13096  05B4  00DF               	movwf	??_Button_State_NotPressed+1
 13097  05B5  3000               	movlw	0
 13098  05B6  025F               	subwf	??_Button_State_NotPressed+1,w
 13099  05B7  3041               	movlw	65
 13100  05B8  1903               	skipnz
 13101  05B9  025E               	subwf	??_Button_State_NotPressed,w
 13102  05BA  1C03               	skipc
 13103  05BB  2E0C               	goto	l474
 13104                           
 13105                           ;mtouch_button.c: 247: {;mtouch_button.c: 248: button->counter = (mtouch_button_statecou
      +                          nter_t)0;
 13106  05BC  085D               	movf	Button_State_NotPressed@button,w
 13107  05BD  3E0A               	addlw	10
 13108  05BE  0086               	movwf	6
 13109  05BF  3001               	movlw	1	; select bank2/3
 13110  05C0  0087               	movwf	7
 13111  05C1  3000               	movlw	0
 13112  05C2  3FC0               	movwi [0]fsr1
 13113  05C3  3FC1               	movwi [1]fsr1
 13114                           
 13115                           ;mtouch_button.c: 249: MTOUCH_Button_Initialize(button->name);
 13116  05C4  085D               	movf	Button_State_NotPressed@button,w
 13117  05C5  0086               	movwf	6
 13118  05C6  3001               	movlw	1	; select bank2/3
 13119  05C7  0087               	movwf	7
 13120  05C8  0801               	movf	1,w
 13121  05C9  318C  240D  3185   	fcall	_MTOUCH_Button_Initialize
 13122  05CC  2E0C               	goto	l474
 13123  05CD                     l4124:	
 13124                           
 13125                           ;mtouch_button.c: 253: else if ((button->deviation) > (button->threshold))
 13126  05CD  085D               	movf	Button_State_NotPressed@button,w
 13127  05CE  3E09               	addlw	9
 13128  05CF  0086               	movwf	6
 13129  05D0  3001               	movlw	1	; select bank2/3
 13130  05D1  0087               	movwf	7
 13131  05D2  0801               	movf	1,w
 13132  05D3  00DE               	movwf	??_Button_State_NotPressed
 13133  05D4  01DF               	clrf	??_Button_State_NotPressed+1
 13134  05D5  1BDE               	btfsc	??_Button_State_NotPressed,7
 13135  05D6  03DF               	decf	??_Button_State_NotPressed+1,f
 13136  05D7  085D               	movf	Button_State_NotPressed@button,w
 13137  05D8  3E0E               	addlw	14
 13138  05D9  0086               	movwf	6
 13139  05DA  3001               	movlw	1	; select bank2/3
 13140  05DB  0087               	movwf	7
 13141  05DC  085F               	movf	??_Button_State_NotPressed+1,w
 13142  05DD  3A80               	xorlw	128
 13143  05DE  3C80               	sublw	128
 13144  05DF  1D03               	skipz
 13145  05E0  2DE3               	goto	u2945
 13146  05E1  085E               	movf	??_Button_State_NotPressed,w
 13147  05E2  0201               	subwf	1,w
 13148  05E3                     u2945:	
 13149  05E3  1803               	skipnc
 13150  05E4  2E03               	goto	l4130
 13151                           
 13152                           ;mtouch_button.c: 254: {;mtouch_button.c: 256: button->state = MTOUCH_BUTTON_STATE_press
      +                          ed;
 13153  05E5  3002               	movlw	2
 13154  05E6  0020               	movlb	0	; select bank0
 13155  05E7  00DE               	movwf	??_Button_State_NotPressed
 13156  05E8  085D               	movf	Button_State_NotPressed@button,w
 13157  05E9  3E02               	addlw	2
 13158  05EA  0086               	movwf	6
 13159  05EB  3001               	movlw	1	; select bank2/3
 13160  05EC  0087               	movwf	7
 13161  05ED  085E               	movf	??_Button_State_NotPressed,w
 13162  05EE  0081               	movwf	1
 13163                           
 13164                           ;mtouch_button.c: 257: button->counter = (mtouch_button_statecounter_t)0;
 13165  05EF  085D               	movf	Button_State_NotPressed@button,w
 13166  05F0  3E0A               	addlw	10
 13167  05F1  0086               	movwf	6
 13168  05F2  3001               	movlw	1	; select bank2/3
 13169  05F3  0087               	movwf	7
 13170  05F4  3000               	movlw	0
 13171  05F5  3FC0               	movwi [0]fsr1
 13172  05F6  3FC1               	movwi [1]fsr1
 13173                           
 13174                           ;mtouch_button.c: 258: callback_pressed(button->name);
 13175  05F7  085D               	movf	Button_State_NotPressed@button,w
 13176  05F8  0086               	movwf	6
 13177  05F9  3001               	movlw	1	; select bank2/3
 13178  05FA  0087               	movwf	7
 13179  05FB  0801               	movf	1,w
 13180  05FC  00DE               	movwf	??_Button_State_NotPressed
 13181  05FD  085E               	movf	??_Button_State_NotPressed,w
 13182  05FE  00D0               	movwf	Button_DefaultCallback@button
 13183  05FF  3180  2002  3185   	fcall	_Button_DefaultCallback
 13184                           
 13185                           ;mtouch_button.c: 259: }
 13186  0602  2E0C               	goto	l474
 13187  0603                     l4130:	
 13188                           
 13189                           ;mtouch_button.c: 260: else;mtouch_button.c: 261: {;mtouch_button.c: 263: button->counte
      +                          r = (mtouch_button_statecounter_t)0;
 13190  0603  0020               	movlb	0	; select bank0
 13191  0604  085D               	movf	Button_State_NotPressed@button,w
 13192  0605  3E0A               	addlw	10
 13193  0606  0086               	movwf	6
 13194  0607  3001               	movlw	1	; select bank2/3
 13195  0608  0087               	movwf	7
 13196  0609  3000               	movlw	0
 13197  060A  3FC0               	movwi [0]fsr1
 13198  060B  3FC1               	movwi [1]fsr1
 13199  060C                     l474:	
 13200                           
 13201                           ;mtouch_button.c: 264: };mtouch_button.c: 268: (button->baseline_count)++;
 13202  060C  0020               	movlb	0	; select bank0
 13203  060D  085D               	movf	Button_State_NotPressed@button,w
 13204  060E  3E0C               	addlw	12
 13205  060F  0086               	movwf	6
 13206  0610  3001               	movlw	1	; select bank2/3
 13207  0611  0087               	movwf	7
 13208  0612  3001               	movlw	1
 13209  0613  0781               	addwf	1,f
 13210  0614  3141               	addfsr 1,1
 13211  0615  1803               	skipnc
 13212  0616  0A81               	incf	1,f
 13213                           
 13214                           ;mtouch_button.c: 269: if ((button->baseline_count) == ((mtouch_button_baselinecounter_t
      +                          )64))
 13215  0617  085D               	movf	Button_State_NotPressed@button,w
 13216  0618  3E0C               	addlw	12
 13217  0619  0086               	movwf	6
 13218  061A  3001               	movlw	1	; select bank2/3
 13219  061B  0087               	movwf	7
 13220  061C  0016               	moviw fsr1++
 13221  061D  3A40               	xorlw	64
 13222  061E  00DE               	movwf	??_Button_State_NotPressed
 13223  061F  0016               	moviw fsr1++
 13224  0620  04DE               	iorwf	??_Button_State_NotPressed,f
 13225  0621  1D03               	btfss	3,2
 13226  0622  0008               	return
 13227                           
 13228                           ;mtouch_button.c: 270: {;mtouch_button.c: 271: button->baseline_count = (mtouch_button_b
      +                          aselinecounter_t)0;
 13229  0623  085D               	movf	Button_State_NotPressed@button,w
 13230  0624  3E0C               	addlw	12
 13231  0625  0086               	movwf	6
 13232  0626  3001               	movlw	1	; select bank2/3
 13233  0627  0087               	movwf	7
 13234  0628  3000               	movlw	0
 13235  0629  3FC0               	movwi [0]fsr1
 13236  062A  3FC1               	movwi [1]fsr1
 13237                           
 13238                           ;mtouch_button.c: 272: Button_Baseline_Update(button);
 13239  062B  085D               	movf	Button_State_NotPressed@button,w
 13240  062C  3186  26C4         	fcall	_Button_Baseline_Update
 13241  062E  0008               	return
 13242  062F                     __end_of_Button_State_NotPressed:	
 13243                           
 13244                           	psect	text52
 13245  0F17                     __ptext52:	
 13246 ;; *************** function _Button_State_Initializing *****************
 13247 ;; Defined at:
 13248 ;;		line 220 in file "mcc_generated_files/mtouch/mtouch_button.c"
 13249 ;; Parameters:    Size  Location     Type
 13250 ;;  button          1   13[BANK0 ] PTR struct .
 13251 ;;		 -> mtouch_button(48), 
 13252 ;; Auto vars:     Size  Location     Type
 13253 ;;		None
 13254 ;; Return value:  Size  Location     Type
 13255 ;;                  1    wreg      void 
 13256 ;; Registers used:
 13257 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13258 ;; Tracked objects:
 13259 ;;		On entry : 0/0
 13260 ;;		On exit  : 0/0
 13261 ;;		Unchanged: 0/0
 13262 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 13263 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13264 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13265 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13266 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13267 ;;Total ram usage:        5 bytes
 13268 ;; Hardware stack levels used:    1
 13269 ;; Hardware stack levels required when called:    9
 13270 ;; This function calls:
 13271 ;;		_Button_Baseline_Initialize
 13272 ;;		_Button_Baseline_Update
 13273 ;; This function is called by:
 13274 ;;		_Button_Service
 13275 ;; This function uses a non-reentrant model
 13276 ;;
 13277                           
 13278                           
 13279                           ;psect for function _Button_State_Initializing
 13280  0F17                     _Button_State_Initializing:	
 13281                           
 13282                           ;mtouch_button.c: 223: if ((button->counter) <= (mtouch_button_statecounter_t)((mtouch_b
      +                          utton_baselinecounter_t)16)/2)
 13283                           
 13284                           ;incstack = 0
 13285                           ; Regs used in _Button_State_Initializing: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cs
      +                          tack]
 13286  0F17  0020               	movlb	0	; select bank0
 13287  0F18  085D               	movf	Button_State_Initializing@button,w
 13288  0F19  3E0A               	addlw	10
 13289  0F1A  0086               	movwf	6
 13290  0F1B  3001               	movlw	1	; select bank2/3
 13291  0F1C  0087               	movwf	7
 13292  0F1D  3F40               	moviw [0]fsr1
 13293  0F1E  00DE               	movwf	??_Button_State_Initializing
 13294  0F1F  3F41               	moviw [1]fsr1
 13295  0F20  00DF               	movwf	??_Button_State_Initializing+1
 13296  0F21  3000               	movlw	0
 13297  0F22  025F               	subwf	??_Button_State_Initializing+1,w
 13298  0F23  3009               	movlw	9
 13299  0F24  1903               	skipnz
 13300  0F25  025E               	subwf	??_Button_State_Initializing,w
 13301  0F26  1803               	skipnc
 13302  0F27  2F2D               	goto	l4108
 13303                           
 13304                           ;mtouch_button.c: 224: {;mtouch_button.c: 225: Button_Baseline_Initialize(button);
 13305  0F28  085D               	movf	Button_State_Initializing@button,w
 13306  0F29  318B  23AB  318F   	fcall	_Button_Baseline_Initialize
 13307                           
 13308                           ;mtouch_button.c: 226: } else {
 13309  0F2C  2F31               	goto	l4110
 13310  0F2D                     l4108:	
 13311                           
 13312                           ;mtouch_button.c: 227: Button_Baseline_Update(button);
 13313  0F2D  085D               	movf	Button_State_Initializing@button,w
 13314  0F2E  3186  26C4  318F   	fcall	_Button_Baseline_Update
 13315  0F31                     l4110:	
 13316                           
 13317                           ;mtouch_button.c: 228: };mtouch_button.c: 231: (button->counter)++;
 13318  0F31  0020               	movlb	0	; select bank0
 13319  0F32  085D               	movf	Button_State_Initializing@button,w
 13320  0F33  3E0A               	addlw	10
 13321  0F34  0086               	movwf	6
 13322  0F35  3001               	movlw	1	; select bank2/3
 13323  0F36  0087               	movwf	7
 13324  0F37  3001               	movlw	1
 13325  0F38  0781               	addwf	1,f
 13326  0F39  3141               	addfsr 1,1
 13327  0F3A  1803               	skipnc
 13328  0F3B  0A81               	incf	1,f
 13329                           
 13330                           ;mtouch_button.c: 232: if ((button->counter) >= (mtouch_button_statecounter_t)((mtouch_b
      +                          utton_baselinecounter_t)16))
 13331  0F3C  085D               	movf	Button_State_Initializing@button,w
 13332  0F3D  3E0A               	addlw	10
 13333  0F3E  0086               	movwf	6
 13334  0F3F  3001               	movlw	1	; select bank2/3
 13335  0F40  0087               	movwf	7
 13336  0F41  3F40               	moviw [0]fsr1
 13337  0F42  00DE               	movwf	??_Button_State_Initializing
 13338  0F43  3F41               	moviw [1]fsr1
 13339  0F44  00DF               	movwf	??_Button_State_Initializing+1
 13340  0F45  3000               	movlw	0
 13341  0F46  025F               	subwf	??_Button_State_Initializing+1,w
 13342  0F47  3010               	movlw	16
 13343  0F48  1903               	skipnz
 13344  0F49  025E               	subwf	??_Button_State_Initializing,w
 13345  0F4A  1C03               	skipc
 13346  0F4B  0008               	return
 13347                           
 13348                           ;mtouch_button.c: 233: {;mtouch_button.c: 234: button->reading = (mtouch_button_reading_
      +                          t)((button->baseline)>>((uint8_t)4));
 13349  0F4C  085D               	movf	Button_State_Initializing@button,w
 13350  0F4D  3E05               	addlw	5
 13351  0F4E  0086               	movwf	6
 13352  0F4F  3001               	movlw	1	; select bank2/3
 13353  0F50  0087               	movwf	7
 13354  0F51  3F40               	moviw [0]fsr1
 13355  0F52  00DE               	movwf	??_Button_State_Initializing
 13356  0F53  3F41               	moviw [1]fsr1
 13357  0F54  00DF               	movwf	??_Button_State_Initializing+1
 13358  0F55  3F42               	moviw [2]fsr1
 13359  0F56  00E0               	movwf	??_Button_State_Initializing+2
 13360  0F57  3F43               	moviw [3]fsr1
 13361  0F58  00E1               	movwf	??_Button_State_Initializing+3
 13362  0F59  3004               	movlw	4
 13363  0F5A                     u2915:	
 13364  0F5A  36E1               	lsrf	??_Button_State_Initializing+3,f
 13365  0F5B  0CE0               	rrf	??_Button_State_Initializing+2,f
 13366  0F5C  0CDF               	rrf	??_Button_State_Initializing+1,f
 13367  0F5D  0CDE               	rrf	??_Button_State_Initializing,f
 13368  0F5E  0B89               	decfsz	9,f
 13369  0F5F  2F5A               	goto	u2915
 13370  0F60  085D               	movf	Button_State_Initializing@button,w
 13371  0F61  3E03               	addlw	3
 13372  0F62  0086               	movwf	6
 13373  0F63  3001               	movlw	1	; select bank2/3
 13374  0F64  0087               	movwf	7
 13375  0F65  085E               	movf	??_Button_State_Initializing,w
 13376  0F66  3FC0               	movwi [0]fsr1
 13377  0F67  085F               	movf	??_Button_State_Initializing+1,w
 13378  0F68  3FC1               	movwi [1]fsr1
 13379                           
 13380                           ;mtouch_button.c: 235: button->state = MTOUCH_BUTTON_STATE_notPressed;
 13381  0F69  085D               	movf	Button_State_Initializing@button,w
 13382  0F6A  3E02               	addlw	2
 13383  0F6B  0086               	movwf	6
 13384  0F6C  3001               	movlw	1	; select bank2/3
 13385  0F6D  0087               	movwf	7
 13386  0F6E  0181               	clrf	1
 13387  0F6F  0A81               	incf	1,f
 13388                           
 13389                           ;mtouch_button.c: 236: button->counter = (mtouch_button_statecounter_t)0;
 13390  0F70  085D               	movf	Button_State_Initializing@button,w
 13391  0F71  3E0A               	addlw	10
 13392  0F72  0086               	movwf	6
 13393  0F73  3001               	movlw	1	; select bank2/3
 13394  0F74  0087               	movwf	7
 13395  0F75  3000               	movlw	0
 13396  0F76  3FC0               	movwi [0]fsr1
 13397  0F77  3FC1               	movwi [1]fsr1
 13398  0F78  0008               	return
 13399  0F79                     __end_of_Button_State_Initializing:	
 13400                           
 13401                           	psect	text53
 13402  0EB7                     __ptext53:	
 13403 ;; *************** function _Button_State_Pressed *****************
 13404 ;; Defined at:
 13405 ;;		line 276 in file "mcc_generated_files/mtouch/mtouch_button.c"
 13406 ;; Parameters:    Size  Location     Type
 13407 ;;  button          1   13[BANK0 ] PTR struct .
 13408 ;;		 -> mtouch_button(48), 
 13409 ;; Auto vars:     Size  Location     Type
 13410 ;;		None
 13411 ;; Return value:  Size  Location     Type
 13412 ;;                  1    wreg      void 
 13413 ;; Registers used:
 13414 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13415 ;; Tracked objects:
 13416 ;;		On entry : 0/0
 13417 ;;		On exit  : 0/0
 13418 ;;		Unchanged: 0/0
 13419 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 13420 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13421 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13422 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13423 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13424 ;;Total ram usage:        3 bytes
 13425 ;; Hardware stack levels used:    1
 13426 ;; Hardware stack levels required when called:    9
 13427 ;; This function calls:
 13428 ;;		_Button_DefaultCallback
 13429 ;;		_MTOUCH_Button_Initialize
 13430 ;; This function is called by:
 13431 ;;		_Button_Service
 13432 ;; This function uses a non-reentrant model
 13433 ;;
 13434                           
 13435                           
 13436                           ;psect for function _Button_State_Pressed
 13437  0EB7                     _Button_State_Pressed:	
 13438                           
 13439                           ;mtouch_button.c: 279: if ((button->counter) >= ((mtouch_button_statecounter_t)1000))
 13440                           
 13441                           ;incstack = 0
 13442                           ; Regs used in _Button_State_Pressed: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 13443  0EB7  0020               	movlb	0	; select bank0
 13444  0EB8  085D               	movf	Button_State_Pressed@button,w
 13445  0EB9  3E0A               	addlw	10
 13446  0EBA  0086               	movwf	6
 13447  0EBB  3001               	movlw	1	; select bank2/3
 13448  0EBC  0087               	movwf	7
 13449  0EBD  3F40               	moviw [0]fsr1
 13450  0EBE  00DE               	movwf	??_Button_State_Pressed
 13451  0EBF  3F41               	moviw [1]fsr1
 13452  0EC0  00DF               	movwf	??_Button_State_Pressed+1
 13453  0EC1  3003               	movlw	3
 13454  0EC2  025F               	subwf	??_Button_State_Pressed+1,w
 13455  0EC3  30E8               	movlw	232
 13456  0EC4  1903               	skipnz
 13457  0EC5  025E               	subwf	??_Button_State_Pressed,w
 13458  0EC6  1C03               	skipc
 13459  0EC7  2EDC               	goto	l4140
 13460                           
 13461                           ;mtouch_button.c: 280: {;mtouch_button.c: 281: MTOUCH_Button_Initialize(button->name);
 13462  0EC8  085D               	movf	Button_State_Pressed@button,w
 13463  0EC9  0086               	movwf	6
 13464  0ECA  3001               	movlw	1	; select bank2/3
 13465  0ECB  0087               	movwf	7
 13466  0ECC  0801               	movf	1,w
 13467  0ECD  318C  240D  318E   	fcall	_MTOUCH_Button_Initialize
 13468                           
 13469                           ;mtouch_button.c: 282: callback_notPressed(button->name);
 13470  0ED0  0020               	movlb	0	; select bank0
 13471  0ED1  085D               	movf	Button_State_Pressed@button,w
 13472  0ED2  0086               	movwf	6
 13473  0ED3  3001               	movlw	1	; select bank2/3
 13474  0ED4  0087               	movwf	7
 13475  0ED5  0801               	movf	1,w
 13476  0ED6  00DE               	movwf	??_Button_State_Pressed
 13477  0ED7  085E               	movf	??_Button_State_Pressed,w
 13478  0ED8  00D0               	movwf	Button_DefaultCallback@button
 13479  0ED9  3180  2002         	fcall	_Button_DefaultCallback
 13480                           
 13481                           ;mtouch_button.c: 283: }
 13482  0EDB  0008               	return
 13483  0EDC                     l4140:	
 13484                           
 13485                           ;mtouch_button.c: 286: else if ((button->deviation) < (mtouch_button_deviation_t)((butto
      +                          n->threshold)- ((button->threshold) >> HYST_50_PERCENT)))
 13486  0EDC  085D               	movf	Button_State_Pressed@button,w
 13487  0EDD  3E09               	addlw	9
 13488  0EDE  0086               	movwf	6
 13489  0EDF  3001               	movlw	1	; select bank2/3
 13490  0EE0  0087               	movwf	7
 13491  0EE1  0801               	movf	1,w
 13492  0EE2  3A80               	xorlw	128
 13493  0EE3  00DE               	movwf	??_Button_State_Pressed
 13494  0EE4  085D               	movf	Button_State_Pressed@button,w
 13495  0EE5  3E0E               	addlw	14
 13496  0EE6  0086               	movwf	6
 13497  0EE7  3001               	movlw	1	; select bank2/3
 13498  0EE8  0087               	movwf	7
 13499  0EE9  085D               	movf	Button_State_Pressed@button,w
 13500  0EEA  3E0E               	addlw	14
 13501  0EEB  0084               	movwf	4
 13502  0EEC  3001               	movlw	1	; select bank2/3
 13503  0EED  0085               	movwf	5
 13504  0EEE  3600               	lsrf	0,w
 13505  0EEF  0201               	subwf	1,w
 13506  0EF0  3A80               	xorlw	128
 13507  0EF1  02DE               	subwf	??_Button_State_Pressed,f
 13508  0EF2  1803               	skipnc
 13509  0EF3  0008               	return
 13510                           
 13511                           ;mtouch_button.c: 287: {;mtouch_button.c: 288: button->state = MTOUCH_BUTTON_STATE_notPr
      +                          essed;
 13512  0EF4  085D               	movf	Button_State_Pressed@button,w
 13513  0EF5  3E02               	addlw	2
 13514  0EF6  0086               	movwf	6
 13515  0EF7  3001               	movlw	1	; select bank2/3
 13516  0EF8  0087               	movwf	7
 13517  0EF9  0181               	clrf	1
 13518  0EFA  0A81               	incf	1,f
 13519                           
 13520                           ;mtouch_button.c: 289: button->counter = (mtouch_button_statecounter_t)0;
 13521  0EFB  085D               	movf	Button_State_Pressed@button,w
 13522  0EFC  3E0A               	addlw	10
 13523  0EFD  0086               	movwf	6
 13524  0EFE  3001               	movlw	1	; select bank2/3
 13525  0EFF  0087               	movwf	7
 13526  0F00  3000               	movlw	0
 13527  0F01  3FC0               	movwi [0]fsr1
 13528  0F02  3FC1               	movwi [1]fsr1
 13529                           
 13530                           ;mtouch_button.c: 290: button->baseline_count = (mtouch_button_baselinecounter_t)((65535
      +                          U))-((mtouch_button_baselinecounter_t)1024);
 13531  0F03  085D               	movf	Button_State_Pressed@button,w
 13532  0F04  3E0C               	addlw	12
 13533  0F05  0086               	movwf	6
 13534  0F06  3001               	movlw	1	; select bank2/3
 13535  0F07  0087               	movwf	7
 13536  0F08  30FF               	movlw	255
 13537  0F09  3FC0               	movwi [0]fsr1
 13538  0F0A  30FB               	movlw	251
 13539  0F0B  3FC1               	movwi [1]fsr1
 13540                           
 13541                           ;mtouch_button.c: 291: callback_notPressed(button->name);
 13542  0F0C  085D               	movf	Button_State_Pressed@button,w
 13543  0F0D  0086               	movwf	6
 13544  0F0E  3001               	movlw	1	; select bank2/3
 13545  0F0F  0087               	movwf	7
 13546  0F10  0801               	movf	1,w
 13547  0F11  00DE               	movwf	??_Button_State_Pressed
 13548  0F12  085E               	movf	??_Button_State_Pressed,w
 13549  0F13  00D0               	movwf	Button_DefaultCallback@button
 13550  0F14  3180  2002         	fcall	_Button_DefaultCallback
 13551  0F16  0008               	return
 13552  0F17                     __end_of_Button_State_Pressed:	
 13553                           
 13554                           	psect	text54
 13555  0C0D                     __ptext54:	
 13556 ;; *************** function _MTOUCH_Button_Initialize *****************
 13557 ;; Defined at:
 13558 ;;		line 162 in file "mcc_generated_files/mtouch/mtouch_button.c"
 13559 ;; Parameters:    Size  Location     Type
 13560 ;;  name            1    wreg     enum E11678
 13561 ;; Auto vars:     Size  Location     Type
 13562 ;;  name            1    8[BANK0 ] enum E11678
 13563 ;;  button          1    9[BANK0 ] PTR struct .
 13564 ;;		 -> mtouch_button(48), 
 13565 ;; Return value:  Size  Location     Type
 13566 ;;                  1    wreg      void 
 13567 ;; Registers used:
 13568 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13569 ;; Tracked objects:
 13570 ;;		On entry : 0/0
 13571 ;;		On exit  : 0/0
 13572 ;;		Unchanged: 0/0
 13573 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 13574 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13575 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13576 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13577 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13578 ;;Total ram usage:        4 bytes
 13579 ;; Hardware stack levels used:    1
 13580 ;; Hardware stack levels required when called:    8
 13581 ;; This function calls:
 13582 ;;		_MTOUCH_Sensor_Calibrate
 13583 ;; This function is called by:
 13584 ;;		_MTOUCH_Button_InitializeAll
 13585 ;;		_Button_Service
 13586 ;;		_Button_State_NotPressed
 13587 ;;		_Button_State_Pressed
 13588 ;; This function uses a non-reentrant model
 13589 ;;
 13590                           
 13591                           
 13592                           ;psect for function _MTOUCH_Button_Initialize
 13593  0C0D                     _MTOUCH_Button_Initialize:	
 13594                           
 13595                           ;incstack = 0
 13596                           ; Regs used in _MTOUCH_Button_Initialize: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cst
      +                          ack]
 13597                           ;MTOUCH_Button_Initialize@name stored from wreg
 13598  0C0D  0020               	movlb	0	; select bank0
 13599  0C0E  00D8               	movwf	MTOUCH_Button_Initialize@name
 13600                           
 13601                           ;mtouch_button.c: 164: mtouch_button_t* button = &mtouch_button[name];
 13602  0C0F  0858               	movf	MTOUCH_Button_Initialize@name,w
 13603  0C10  00D6               	movwf	??_MTOUCH_Button_Initialize
 13604  0C11  3003               	movlw	3
 13605  0C12                     u2575:	
 13606  0C12  35D6               	lslf	??_MTOUCH_Button_Initialize,f
 13607  0C13  3EFF               	addlw	-1
 13608  0C14  1D03               	skipz
 13609  0C15  2C12               	goto	u2575
 13610  0C16  3556               	lslf	??_MTOUCH_Button_Initialize,w
 13611  0C17  3EA0               	addlw	(low (_mtouch_button| (0+256)))& (0+255)
 13612  0C18  00D7               	movwf	??_MTOUCH_Button_Initialize+1
 13613  0C19  0857               	movf	??_MTOUCH_Button_Initialize+1,w
 13614  0C1A  00D9               	movwf	MTOUCH_Button_Initialize@button
 13615                           
 13616                           ;mtouch_button.c: 166: button->state = MTOUCH_BUTTON_STATE_initializing;
 13617  0C1B  0859               	movf	MTOUCH_Button_Initialize@button,w
 13618  0C1C  3E02               	addlw	2
 13619  0C1D  0086               	movwf	6
 13620  0C1E  3001               	movlw	1	; select bank2/3
 13621  0C1F  0087               	movwf	7
 13622  0C20  0181               	clrf	1
 13623                           
 13624                           ;mtouch_button.c: 167: button->baseline = (mtouch_button_baseline_t)0;
 13625  0C21  0859               	movf	MTOUCH_Button_Initialize@button,w
 13626  0C22  3E05               	addlw	5
 13627  0C23  0086               	movwf	6
 13628  0C24  3001               	movlw	1	; select bank2/3
 13629  0C25  0087               	movwf	7
 13630  0C26  3000               	movlw	0
 13631  0C27  3FC0               	movwi [0]fsr1
 13632  0C28  3000               	movlw	0
 13633  0C29  3FC1               	movwi [1]fsr1
 13634  0C2A  3FC2               	movwi [2]fsr1
 13635  0C2B  3FC3               	movwi [3]fsr1
 13636                           
 13637                           ;mtouch_button.c: 168: button->counter = (mtouch_button_statecounter_t)0;
 13638  0C2C  0859               	movf	MTOUCH_Button_Initialize@button,w
 13639  0C2D  3E0A               	addlw	10
 13640  0C2E  0086               	movwf	6
 13641  0C2F  3001               	movlw	1	; select bank2/3
 13642  0C30  0087               	movwf	7
 13643  0C31  3000               	movlw	0
 13644  0C32  3FC0               	movwi [0]fsr1
 13645  0C33  3FC1               	movwi [1]fsr1
 13646                           
 13647                           ;mtouch_button.c: 169: button->baseline_count = (mtouch_button_baselinecounter_t)0;
 13648  0C34  0859               	movf	MTOUCH_Button_Initialize@button,w
 13649  0C35  3E0C               	addlw	12
 13650  0C36  0086               	movwf	6
 13651  0C37  3001               	movlw	1	; select bank2/3
 13652  0C38  0087               	movwf	7
 13653  0C39  3000               	movlw	0
 13654  0C3A  3FC0               	movwi [0]fsr1
 13655  0C3B  3FC1               	movwi [1]fsr1
 13656                           
 13657                           ;mtouch_button.c: 171: MTOUCH_Sensor_Calibrate(button->sensor);
 13658  0C3C  0A59               	incf	MTOUCH_Button_Initialize@button,w
 13659  0C3D  0086               	movwf	6
 13660  0C3E  3001               	movlw	1	; select bank2/3
 13661  0C3F  0087               	movwf	7
 13662  0C40  0801               	movf	1,w
 13663  0C41  3188  2004         	fcall	_MTOUCH_Sensor_Calibrate
 13664  0C43  0008               	return
 13665  0C44                     __end_of_MTOUCH_Button_Initialize:	
 13666                           
 13667                           	psect	text55
 13668  0804                     __ptext55:	
 13669 ;; *************** function _MTOUCH_Sensor_Calibrate *****************
 13670 ;; Defined at:
 13671 ;;		line 732 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
 13672 ;; Parameters:    Size  Location     Type
 13673 ;;  sensor          1    wreg     enum E11734
 13674 ;; Auto vars:     Size  Location     Type
 13675 ;;  sensor          1    5[BANK0 ] enum E11734
 13676 ;; Return value:  Size  Location     Type
 13677 ;;                  1    wreg      void 
 13678 ;; Registers used:
 13679 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13680 ;; Tracked objects:
 13681 ;;		On entry : 0/0
 13682 ;;		On exit  : 0/0
 13683 ;;		Unchanged: 0/0
 13684 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 13685 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13686 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13687 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13688 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13689 ;;Total ram usage:        2 bytes
 13690 ;; Hardware stack levels used:    1
 13691 ;; Hardware stack levels required when called:    7
 13692 ;; This function calls:
 13693 ;;		___bmul
 13694 ;; This function is called by:
 13695 ;;		_MTOUCH_Sensor_Initialize
 13696 ;;		_MTOUCH_Button_Initialize
 13697 ;; This function uses a non-reentrant model
 13698 ;;
 13699                           
 13700                           
 13701                           ;psect for function _MTOUCH_Sensor_Calibrate
 13702  0804                     _MTOUCH_Sensor_Calibrate:	
 13703                           
 13704                           ;incstack = 0
 13705                           ; Regs used in _MTOUCH_Sensor_Calibrate: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+csta
      +                          ck]
 13706                           ;MTOUCH_Sensor_Calibrate@sensor stored from wreg
 13707  0804  0020               	movlb	0	; select bank0
 13708  0805  00D5               	movwf	MTOUCH_Sensor_Calibrate@sensor
 13709                           
 13710                           ;mtouch_sensor.c: 734: if(sensor < 3)
 13711  0806  3003               	movlw	3
 13712  0807  0255               	subwf	MTOUCH_Sensor_Calibrate@sensor,w
 13713  0808  1803               	skipnc
 13714  0809  0008               	return
 13715                           
 13716                           ;mtouch_sensor.c: 735: {;mtouch_sensor.c: 736: mtouch_sensor[sensor].calibrated = 0;
 13717  080A  3009               	movlw	9
 13718  080B  00D4               	movwf	??_MTOUCH_Sensor_Calibrate
 13719  080C  0854               	movf	??_MTOUCH_Sensor_Calibrate,w
 13720  080D  00D0               	movwf	___bmul@multiplicand
 13721  080E  0855               	movf	MTOUCH_Sensor_Calibrate@sensor,w
 13722  080F  3197  27CA         	fcall	___bmul
 13723  0811  3E32               	addlw	(low ((_mtouch_sensor| (0+256)+8)))& (0+255)
 13724  0812  0086               	movwf	6
 13725  0813  3001               	movlw	1	; select bank2/3
 13726  0814  0087               	movwf	7
 13727  0815  1181               	bcf	1,3
 13728  0816  0008               	return
 13729  0817                     __end_of_MTOUCH_Sensor_Calibrate:	
 13730                           
 13731                           	psect	text56
 13732  0002                     __ptext56:	
 13733 ;; *************** function _Button_DefaultCallback *****************
 13734 ;; Defined at:
 13735 ;;		line 528 in file "mcc_generated_files/mtouch/mtouch_button.c"
 13736 ;; Parameters:    Size  Location     Type
 13737 ;;  button          1    0[BANK0 ] enum E11678
 13738 ;; Auto vars:     Size  Location     Type
 13739 ;;		None
 13740 ;; Return value:  Size  Location     Type
 13741 ;;                  1    wreg      void 
 13742 ;; Registers used:
 13743 ;;		None
 13744 ;; Tracked objects:
 13745 ;;		On entry : 0/0
 13746 ;;		On exit  : 0/0
 13747 ;;		Unchanged: 0/0
 13748 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 13749 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13750 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13751 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13752 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13753 ;;Total ram usage:        1 bytes
 13754 ;; Hardware stack levels used:    1
 13755 ;; Hardware stack levels required when called:    6
 13756 ;; This function calls:
 13757 ;;		Nothing
 13758 ;; This function is called by:
 13759 ;;		_Button_State_NotPressed
 13760 ;;		_Button_State_Pressed
 13761 ;; This function uses a non-reentrant model
 13762 ;;
 13763                           
 13764                           
 13765                           ;psect for function _Button_DefaultCallback
 13766  0002                     _Button_DefaultCallback:	
 13767                           
 13768                           ;incstack = 0
 13769                           ; Regs used in _Button_DefaultCallback: []
 13770  0002  0008               	return
 13771  0003                     __end_of_Button_DefaultCallback:	
 13772                           
 13773                           	psect	text57
 13774  06C4                     __ptext57:	
 13775 ;; *************** function _Button_Baseline_Update *****************
 13776 ;; Defined at:
 13777 ;;		line 484 in file "mcc_generated_files/mtouch/mtouch_button.c"
 13778 ;; Parameters:    Size  Location     Type
 13779 ;;  button          1    wreg     PTR struct .
 13780 ;;		 -> mtouch_button(48), 
 13781 ;; Auto vars:     Size  Location     Type
 13782 ;;  button          1    6[BANK0 ] PTR struct .
 13783 ;;		 -> mtouch_button(48), 
 13784 ;; Return value:  Size  Location     Type
 13785 ;;                  1    wreg      void 
 13786 ;; Registers used:
 13787 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 13788 ;; Tracked objects:
 13789 ;;		On entry : 0/0
 13790 ;;		On exit  : 0/0
 13791 ;;		Unchanged: 0/0
 13792 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 13793 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13794 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13795 ;;      Temps:          0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13796 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13797 ;;Total ram usage:        7 bytes
 13798 ;; Hardware stack levels used:    1
 13799 ;; Hardware stack levels required when called:    6
 13800 ;; This function calls:
 13801 ;;		Nothing
 13802 ;; This function is called by:
 13803 ;;		_Button_State_Initializing
 13804 ;;		_Button_State_NotPressed
 13805 ;; This function uses a non-reentrant model
 13806 ;;
 13807                           
 13808                           
 13809                           ;psect for function _Button_Baseline_Update
 13810  06C4                     _Button_Baseline_Update:	
 13811                           
 13812                           ;incstack = 0
 13813                           ; Regs used in _Button_Baseline_Update: [wreg+fsr1l+fsr1h+status,2+status,0]
 13814                           ;Button_Baseline_Update@button stored from wreg
 13815  06C4  0020               	movlb	0	; select bank0
 13816  06C5  00D6               	movwf	Button_Baseline_Update@button
 13817                           
 13818                           ;mtouch_button.c: 486: if (GIE == (uint8_t)1)
 13819  06C6  1F8B               	btfss	11,7	;volatile
 13820  06C7  2F0F               	goto	l3878
 13821                           
 13822                           ;mtouch_button.c: 487: {;mtouch_button.c: 488: GIE = (uint8_t)0;
 13823  06C8  138B               	bcf	11,7	;volatile
 13824                           
 13825                           ;mtouch_button.c: 489: button->baseline -= (button->baseline) >> ((uint8_t)4);
 13826  06C9  0856               	movf	Button_Baseline_Update@button,w
 13827  06CA  3E05               	addlw	5
 13828  06CB  0086               	movwf	6
 13829  06CC  3001               	movlw	1	; select bank2/3
 13830  06CD  0087               	movwf	7
 13831  06CE  3F40               	moviw [0]fsr1
 13832  06CF  00D0               	movwf	??_Button_Baseline_Update
 13833  06D0  3F41               	moviw [1]fsr1
 13834  06D1  00D1               	movwf	??_Button_Baseline_Update+1
 13835  06D2  3F42               	moviw [2]fsr1
 13836  06D3  00D2               	movwf	??_Button_Baseline_Update+2
 13837  06D4  3F43               	moviw [3]fsr1
 13838  06D5  00D3               	movwf	??_Button_Baseline_Update+3
 13839  06D6  3004               	movlw	4
 13840  06D7                     u2605:	
 13841  06D7  36D3               	lsrf	??_Button_Baseline_Update+3,f
 13842  06D8  0CD2               	rrf	??_Button_Baseline_Update+2,f
 13843  06D9  0CD1               	rrf	??_Button_Baseline_Update+1,f
 13844  06DA  0CD0               	rrf	??_Button_Baseline_Update,f
 13845  06DB  0B89               	decfsz	9,f
 13846  06DC  2ED7               	goto	u2605
 13847  06DD  0856               	movf	Button_Baseline_Update@button,w
 13848  06DE  3E05               	addlw	5
 13849  06DF  0086               	movwf	6
 13850  06E0  3001               	movlw	1	; select bank2/3
 13851  06E1  0087               	movwf	7
 13852  06E2  0850               	movf	??_Button_Baseline_Update,w
 13853  06E3  0281               	subwf	1,f
 13854  06E4  3141               	addfsr 1,1
 13855  06E5  0851               	movf	??_Button_Baseline_Update+1,w
 13856  06E6  3B81               	subwfb	1,f
 13857  06E7  3141               	addfsr 1,1
 13858  06E8  0852               	movf	??_Button_Baseline_Update+2,w
 13859  06E9  3B81               	subwfb	1,f
 13860  06EA  3141               	addfsr 1,1
 13861  06EB  0853               	movf	??_Button_Baseline_Update+3,w
 13862  06EC  3B81               	subwfb	1,f
 13863  06ED  317D               	addfsr 1,-3
 13864                           
 13865                           ;mtouch_button.c: 490: button->baseline += button->reading;
 13866  06EE  0856               	movf	Button_Baseline_Update@button,w
 13867  06EF  3E03               	addlw	3
 13868  06F0  0086               	movwf	6
 13869  06F1  3001               	movlw	1	; select bank2/3
 13870  06F2  0087               	movwf	7
 13871  06F3  3F40               	moviw [0]fsr1
 13872  06F4  00D0               	movwf	??_Button_Baseline_Update
 13873  06F5  3F41               	moviw [1]fsr1
 13874  06F6  00D1               	movwf	??_Button_Baseline_Update+1
 13875  06F7  0850               	movf	??_Button_Baseline_Update,w
 13876  06F8  00D2               	movwf	??_Button_Baseline_Update+2
 13877  06F9  0851               	movf	??_Button_Baseline_Update+1,w
 13878  06FA  00D3               	movwf	??_Button_Baseline_Update+3
 13879  06FB  01D4               	clrf	??_Button_Baseline_Update+4
 13880  06FC  01D5               	clrf	??_Button_Baseline_Update+5
 13881  06FD  0856               	movf	Button_Baseline_Update@button,w
 13882  06FE  3E05               	addlw	5
 13883  06FF  0086               	movwf	6
 13884  0700  3001               	movlw	1	; select bank2/3
 13885  0701  0087               	movwf	7
 13886  0702  0852               	movf	??_Button_Baseline_Update+2,w
 13887  0703  0781               	addwf	1,f
 13888  0704  3141               	addfsr 1,1
 13889  0705  0853               	movf	??_Button_Baseline_Update+3,w
 13890  0706  3D81               	addwfc	1,f
 13891  0707  3141               	addfsr 1,1
 13892  0708  0854               	movf	??_Button_Baseline_Update+4,w
 13893  0709  3D81               	addwfc	1,f
 13894  070A  3141               	addfsr 1,1
 13895  070B  0855               	movf	??_Button_Baseline_Update+5,w
 13896  070C  3D81               	addwfc	1,f
 13897                           
 13898                           ;mtouch_button.c: 491: GIE = (uint8_t)1;
 13899  070D  178B               	bsf	11,7	;volatile
 13900                           
 13901                           ;mtouch_button.c: 492: }
 13902  070E  0008               	return
 13903  070F                     l3878:	
 13904                           
 13905                           ;mtouch_button.c: 493: else;mtouch_button.c: 494: {;mtouch_button.c: 495: button->baseli
      +                          ne -= (button->baseline) >> ((uint8_t)4);
 13906  070F  0856               	movf	Button_Baseline_Update@button,w
 13907  0710  3E05               	addlw	5
 13908  0711  0086               	movwf	6
 13909  0712  3001               	movlw	1	; select bank2/3
 13910  0713  0087               	movwf	7
 13911  0714  3F40               	moviw [0]fsr1
 13912  0715  00D0               	movwf	??_Button_Baseline_Update
 13913  0716  3F41               	moviw [1]fsr1
 13914  0717  00D1               	movwf	??_Button_Baseline_Update+1
 13915  0718  3F42               	moviw [2]fsr1
 13916  0719  00D2               	movwf	??_Button_Baseline_Update+2
 13917  071A  3F43               	moviw [3]fsr1
 13918  071B  00D3               	movwf	??_Button_Baseline_Update+3
 13919  071C  3004               	movlw	4
 13920  071D                     u2615:	
 13921  071D  36D3               	lsrf	??_Button_Baseline_Update+3,f
 13922  071E  0CD2               	rrf	??_Button_Baseline_Update+2,f
 13923  071F  0CD1               	rrf	??_Button_Baseline_Update+1,f
 13924  0720  0CD0               	rrf	??_Button_Baseline_Update,f
 13925  0721  0B89               	decfsz	9,f
 13926  0722  2F1D               	goto	u2615
 13927  0723  0856               	movf	Button_Baseline_Update@button,w
 13928  0724  3E05               	addlw	5
 13929  0725  0086               	movwf	6
 13930  0726  3001               	movlw	1	; select bank2/3
 13931  0727  0087               	movwf	7
 13932  0728  0850               	movf	??_Button_Baseline_Update,w
 13933  0729  0281               	subwf	1,f
 13934  072A  3141               	addfsr 1,1
 13935  072B  0851               	movf	??_Button_Baseline_Update+1,w
 13936  072C  3B81               	subwfb	1,f
 13937  072D  3141               	addfsr 1,1
 13938  072E  0852               	movf	??_Button_Baseline_Update+2,w
 13939  072F  3B81               	subwfb	1,f
 13940  0730  3141               	addfsr 1,1
 13941  0731  0853               	movf	??_Button_Baseline_Update+3,w
 13942  0732  3B81               	subwfb	1,f
 13943  0733  317D               	addfsr 1,-3
 13944                           
 13945                           ;mtouch_button.c: 496: button->baseline += button->reading;
 13946  0734  0856               	movf	Button_Baseline_Update@button,w
 13947  0735  3E03               	addlw	3
 13948  0736  0086               	movwf	6
 13949  0737  3001               	movlw	1	; select bank2/3
 13950  0738  0087               	movwf	7
 13951  0739  3F40               	moviw [0]fsr1
 13952  073A  00D0               	movwf	??_Button_Baseline_Update
 13953  073B  3F41               	moviw [1]fsr1
 13954  073C  00D1               	movwf	??_Button_Baseline_Update+1
 13955  073D  0850               	movf	??_Button_Baseline_Update,w
 13956  073E  00D2               	movwf	??_Button_Baseline_Update+2
 13957  073F  0851               	movf	??_Button_Baseline_Update+1,w
 13958  0740  00D3               	movwf	??_Button_Baseline_Update+3
 13959  0741  01D4               	clrf	??_Button_Baseline_Update+4
 13960  0742  01D5               	clrf	??_Button_Baseline_Update+5
 13961  0743  0856               	movf	Button_Baseline_Update@button,w
 13962  0744  3E05               	addlw	5
 13963  0745  0086               	movwf	6
 13964  0746  3001               	movlw	1	; select bank2/3
 13965  0747  0087               	movwf	7
 13966  0748  0852               	movf	??_Button_Baseline_Update+2,w
 13967  0749  0781               	addwf	1,f
 13968  074A  3141               	addfsr 1,1
 13969  074B  0853               	movf	??_Button_Baseline_Update+3,w
 13970  074C  3D81               	addwfc	1,f
 13971  074D  3141               	addfsr 1,1
 13972  074E  0854               	movf	??_Button_Baseline_Update+4,w
 13973  074F  3D81               	addwfc	1,f
 13974  0750  3141               	addfsr 1,1
 13975  0751  0855               	movf	??_Button_Baseline_Update+5,w
 13976  0752  3D81               	addwfc	1,f
 13977  0753  0008               	return
 13978  0754                     __end_of_Button_Baseline_Update:	
 13979                           
 13980                           	psect	text58
 13981  0BAB                     __ptext58:	
 13982 ;; *************** function _Button_Baseline_Initialize *****************
 13983 ;; Defined at:
 13984 ;;		line 478 in file "mcc_generated_files/mtouch/mtouch_button.c"
 13985 ;; Parameters:    Size  Location     Type
 13986 ;;  button          1    wreg     PTR struct .
 13987 ;;		 -> mtouch_button(48), 
 13988 ;; Auto vars:     Size  Location     Type
 13989 ;;  button          1   12[BANK0 ] PTR struct .
 13990 ;;		 -> mtouch_button(48), 
 13991 ;; Return value:  Size  Location     Type
 13992 ;;                  1    wreg      void 
 13993 ;; Registers used:
 13994 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13995 ;; Tracked objects:
 13996 ;;		On entry : 0/0
 13997 ;;		On exit  : 0/0
 13998 ;;		Unchanged: 0/0
 13999 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 14000 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14001 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14002 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14003 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14004 ;;Total ram usage:        5 bytes
 14005 ;; Hardware stack levels used:    1
 14006 ;; Hardware stack levels required when called:    8
 14007 ;; This function calls:
 14008 ;;		_MTOUCH_Sensor_RawSample_Get
 14009 ;; This function is called by:
 14010 ;;		_Button_State_Initializing
 14011 ;; This function uses a non-reentrant model
 14012 ;;
 14013                           
 14014                           
 14015                           ;psect for function _Button_Baseline_Initialize
 14016  0BAB                     _Button_Baseline_Initialize:	
 14017                           
 14018                           ;incstack = 0
 14019                           ; Regs used in _Button_Baseline_Initialize: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
 14020                           ;Button_Baseline_Initialize@button stored from wreg
 14021  0BAB  0020               	movlb	0	; select bank0
 14022  0BAC  00DC               	movwf	Button_Baseline_Initialize@button
 14023                           
 14024                           ;mtouch_button.c: 480: button->baseline = MTOUCH_Sensor_RawSample_Get(button->sensor);
 14025  0BAD  0A5C               	incf	Button_Baseline_Initialize@button,w
 14026  0BAE  0086               	movwf	6
 14027  0BAF  3001               	movlw	1	; select bank2/3
 14028  0BB0  0087               	movwf	7
 14029  0BB1  0801               	movf	1,w
 14030  0BB2  3189  213B  318B   	fcall	_MTOUCH_Sensor_RawSample_Get
 14031  0BB5  0020               	movlb	0	; select bank0
 14032  0BB6  0854               	movf	?_MTOUCH_Sensor_RawSample_Get,w
 14033  0BB7  00D8               	movwf	??_Button_Baseline_Initialize
 14034  0BB8  0855               	movf	?_MTOUCH_Sensor_RawSample_Get+1,w
 14035  0BB9  00D9               	movwf	??_Button_Baseline_Initialize+1
 14036  0BBA  01DA               	clrf	??_Button_Baseline_Initialize+2
 14037  0BBB  01DB               	clrf	??_Button_Baseline_Initialize+3
 14038  0BBC  085C               	movf	Button_Baseline_Initialize@button,w
 14039  0BBD  3E05               	addlw	5
 14040  0BBE  0086               	movwf	6
 14041  0BBF  3001               	movlw	1	; select bank2/3
 14042  0BC0  0087               	movwf	7
 14043  0BC1  0858               	movf	??_Button_Baseline_Initialize,w
 14044  0BC2  3FC0               	movwi [0]fsr1
 14045  0BC3  0859               	movf	??_Button_Baseline_Initialize+1,w
 14046  0BC4  3FC1               	movwi [1]fsr1
 14047  0BC5  085A               	movf	??_Button_Baseline_Initialize+2,w
 14048  0BC6  3FC2               	movwi [2]fsr1
 14049  0BC7  085B               	movf	??_Button_Baseline_Initialize+3,w
 14050  0BC8  3FC3               	movwi [3]fsr1
 14051                           
 14052                           ;mtouch_button.c: 481: button->baseline <<= ((uint8_t)4);
 14053  0BC9  085C               	movf	Button_Baseline_Initialize@button,w
 14054  0BCA  3E05               	addlw	5
 14055  0BCB  0086               	movwf	6
 14056  0BCC  3001               	movlw	1	; select bank2/3
 14057  0BCD  0087               	movwf	7
 14058  0BCE  3004               	movlw	4
 14059  0BCF                     u2585:	
 14060  0BCF  3581               	lslf	1,f
 14061  0BD0  3141               	addfsr 1,1
 14062  0BD1  0D81               	rlf	1,f
 14063  0BD2  3141               	addfsr 1,1
 14064  0BD3  0D81               	rlf	1,f
 14065  0BD4  3141               	addfsr 1,1
 14066  0BD5  0D81               	rlf	1,f
 14067  0BD6  317D               	addfsr 1,-3
 14068  0BD7  0B89               	decfsz	9,f
 14069  0BD8  2BCF               	goto	u2585
 14070  0BD9  0008               	return
 14071  0BDA                     __end_of_Button_Baseline_Initialize:	
 14072                           
 14073                           	psect	text59
 14074  173F                     __ptext59:	
 14075 ;; *************** function _Button_Reading_Update *****************
 14076 ;; Defined at:
 14077 ;;		line 451 in file "mcc_generated_files/mtouch/mtouch_button.c"
 14078 ;; Parameters:    Size  Location     Type
 14079 ;;  button          1    wreg     PTR struct .
 14080 ;;		 -> mtouch_button(48), 
 14081 ;; Auto vars:     Size  Location     Type
 14082 ;;  button          1   11[BANK0 ] PTR struct .
 14083 ;;		 -> mtouch_button(48), 
 14084 ;; Return value:  Size  Location     Type
 14085 ;;                  1    wreg      void 
 14086 ;; Registers used:
 14087 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14088 ;; Tracked objects:
 14089 ;;		On entry : 0/0
 14090 ;;		On exit  : 0/0
 14091 ;;		Unchanged: 0/0
 14092 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 14093 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14094 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14095 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14096 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14097 ;;Total ram usage:        1 bytes
 14098 ;; Hardware stack levels used:    1
 14099 ;; Hardware stack levels required when called:    9
 14100 ;; This function calls:
 14101 ;;		_Button_Reading_Update_Helper
 14102 ;; This function is called by:
 14103 ;;		_Button_Service
 14104 ;; This function uses a non-reentrant model
 14105 ;;
 14106                           
 14107                           
 14108                           ;psect for function _Button_Reading_Update
 14109  173F                     _Button_Reading_Update:	
 14110                           
 14111                           ;incstack = 0
 14112                           ; Regs used in _Button_Reading_Update: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 14113                           ;Button_Reading_Update@button stored from wreg
 14114  173F  0020               	movlb	0	; select bank0
 14115  1740  00DB               	movwf	Button_Reading_Update@button
 14116                           
 14117                           ;mtouch_button.c: 453: if (GIE == (uint8_t) 1)
 14118  1741  1F8B               	btfss	11,7	;volatile
 14119  1742  2F49               	goto	l4090
 14120                           
 14121                           ;mtouch_button.c: 454: {;mtouch_button.c: 455: GIE = (uint8_t) 0;
 14122  1743  138B               	bcf	11,7	;volatile
 14123                           
 14124                           ;mtouch_button.c: 456: Button_Reading_Update_Helper(button);
 14125  1744  085B               	movf	Button_Reading_Update@button,w
 14126  1745  318D  2504         	fcall	_Button_Reading_Update_Helper
 14127                           
 14128                           ;mtouch_button.c: 457: GIE = (uint8_t) 1;
 14129  1747  178B               	bsf	11,7	;volatile
 14130                           
 14131                           ;mtouch_button.c: 458: }
 14132  1748  0008               	return
 14133  1749                     l4090:	
 14134                           
 14135                           ;mtouch_button.c: 459: else;mtouch_button.c: 460: {;mtouch_button.c: 461: Button_Reading
      +                          _Update_Helper(button);
 14136  1749  085B               	movf	Button_Reading_Update@button,w
 14137  174A  318D  2504         	fcall	_Button_Reading_Update_Helper
 14138  174C  0008               	return
 14139  174D                     __end_of_Button_Reading_Update:	
 14140                           
 14141                           	psect	text60
 14142  0D04                     __ptext60:	
 14143 ;; *************** function _Button_Reading_Update_Helper *****************
 14144 ;; Defined at:
 14145 ;;		line 465 in file "mcc_generated_files/mtouch/mtouch_button.c"
 14146 ;; Parameters:    Size  Location     Type
 14147 ;;  button          1    wreg     PTR struct .
 14148 ;;		 -> mtouch_button(48), 
 14149 ;; Auto vars:     Size  Location     Type
 14150 ;;  button          1   10[BANK0 ] PTR struct .
 14151 ;;		 -> mtouch_button(48), 
 14152 ;; Return value:  Size  Location     Type
 14153 ;;                  1    wreg      void 
 14154 ;; Registers used:
 14155 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14156 ;; Tracked objects:
 14157 ;;		On entry : 0/0
 14158 ;;		On exit  : 0/0
 14159 ;;		Unchanged: 0/0
 14160 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 14161 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14162 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14163 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14164 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14165 ;;Total ram usage:        3 bytes
 14166 ;; Hardware stack levels used:    1
 14167 ;; Hardware stack levels required when called:    8
 14168 ;; This function calls:
 14169 ;;		_MTOUCH_Sensor_RawSample_Get
 14170 ;; This function is called by:
 14171 ;;		_Button_Reading_Update
 14172 ;; This function uses a non-reentrant model
 14173 ;;
 14174                           
 14175                           
 14176                           ;psect for function _Button_Reading_Update_Helper
 14177  0D04                     _Button_Reading_Update_Helper:	
 14178                           
 14179                           ;incstack = 0
 14180                           ; Regs used in _Button_Reading_Update_Helper: [wreg+fsr1l+fsr1h+status,2+status,0+pclath
      +                          +cstack]
 14181                           ;Button_Reading_Update_Helper@button stored from wreg
 14182  0D04  0020               	movlb	0	; select bank0
 14183  0D05  00DA               	movwf	Button_Reading_Update_Helper@button
 14184                           
 14185                           ;mtouch_button.c: 467: if (button->state != MTOUCH_BUTTON_STATE_initializing)
 14186  0D06  085A               	movf	Button_Reading_Update_Helper@button,w
 14187  0D07  3E02               	addlw	2
 14188  0D08  0086               	movwf	6
 14189  0D09  3001               	movlw	1	; select bank2/3
 14190  0D0A  0087               	movwf	7
 14191  0D0B  0801               	movf	1,w
 14192  0D0C  1903               	btfsc	3,2
 14193  0D0D  2D42               	goto	l3886
 14194                           
 14195                           ;mtouch_button.c: 468: {;mtouch_button.c: 469: button->reading -= button->reading>>(uint
      +                          8_t)2;
 14196  0D0E  085A               	movf	Button_Reading_Update_Helper@button,w
 14197  0D0F  3E03               	addlw	3
 14198  0D10  0086               	movwf	6
 14199  0D11  3001               	movlw	1	; select bank2/3
 14200  0D12  0087               	movwf	7
 14201  0D13  3F40               	moviw [0]fsr1
 14202  0D14  00D8               	movwf	??_Button_Reading_Update_Helper
 14203  0D15  3F41               	moviw [1]fsr1
 14204  0D16  00D9               	movwf	??_Button_Reading_Update_Helper+1
 14205  0D17  36D9               	lsrf	??_Button_Reading_Update_Helper+1,f
 14206  0D18  0CD8               	rrf	??_Button_Reading_Update_Helper,f
 14207  0D19  36D9               	lsrf	??_Button_Reading_Update_Helper+1,f
 14208  0D1A  0CD8               	rrf	??_Button_Reading_Update_Helper,f
 14209  0D1B  085A               	movf	Button_Reading_Update_Helper@button,w
 14210  0D1C  3E03               	addlw	3
 14211  0D1D  0086               	movwf	6
 14212  0D1E  3001               	movlw	1	; select bank2/3
 14213  0D1F  0087               	movwf	7
 14214  0D20  0858               	movf	??_Button_Reading_Update_Helper,w
 14215  0D21  0281               	subwf	1,f
 14216  0D22  3141               	addfsr 1,1
 14217  0D23  0859               	movf	??_Button_Reading_Update_Helper+1,w
 14218  0D24  3B81               	subwfb	1,f
 14219  0D25  317F               	addfsr 1,-1
 14220                           
 14221                           ;mtouch_button.c: 470: button->reading += MTOUCH_Sensor_RawSample_Get(button->sensor) >>
      +                           (uint8_t)2;
 14222  0D26  0A5A               	incf	Button_Reading_Update_Helper@button,w
 14223  0D27  0086               	movwf	6
 14224  0D28  3001               	movlw	1	; select bank2/3
 14225  0D29  0087               	movwf	7
 14226  0D2A  0801               	movf	1,w
 14227  0D2B  3189  213B         	fcall	_MTOUCH_Sensor_RawSample_Get
 14228  0D2D  0020               	movlb	0	; select bank0
 14229  0D2E  0854               	movf	?_MTOUCH_Sensor_RawSample_Get,w
 14230  0D2F  00D8               	movwf	??_Button_Reading_Update_Helper
 14231  0D30  0855               	movf	?_MTOUCH_Sensor_RawSample_Get+1,w
 14232  0D31  00D9               	movwf	??_Button_Reading_Update_Helper+1
 14233  0D32  36D9               	lsrf	??_Button_Reading_Update_Helper+1,f
 14234  0D33  0CD8               	rrf	??_Button_Reading_Update_Helper,f
 14235  0D34  36D9               	lsrf	??_Button_Reading_Update_Helper+1,f
 14236  0D35  0CD8               	rrf	??_Button_Reading_Update_Helper,f
 14237  0D36  085A               	movf	Button_Reading_Update_Helper@button,w
 14238  0D37  3E03               	addlw	3
 14239  0D38  0086               	movwf	6
 14240  0D39  3001               	movlw	1	; select bank2/3
 14241  0D3A  0087               	movwf	7
 14242  0D3B  0858               	movf	??_Button_Reading_Update_Helper,w
 14243  0D3C  0781               	addwf	1,f
 14244  0D3D  3141               	addfsr 1,1
 14245  0D3E  0859               	movf	??_Button_Reading_Update_Helper+1,w
 14246  0D3F  3D81               	addwfc	1,f
 14247  0D40  317F               	addfsr 1,-1
 14248                           
 14249                           ;mtouch_button.c: 471: }
 14250  0D41  0008               	return
 14251  0D42                     l3886:	
 14252                           
 14253                           ;mtouch_button.c: 472: else;mtouch_button.c: 473: {;mtouch_button.c: 474: button->readin
      +                          g = MTOUCH_Sensor_RawSample_Get(button->sensor);
 14254  0D42  0A5A               	incf	Button_Reading_Update_Helper@button,w
 14255  0D43  0086               	movwf	6
 14256  0D44  3001               	movlw	1	; select bank2/3
 14257  0D45  0087               	movwf	7
 14258  0D46  0801               	movf	1,w
 14259  0D47  3189  213B         	fcall	_MTOUCH_Sensor_RawSample_Get
 14260  0D49  0020               	movlb	0	; select bank0
 14261  0D4A  085A               	movf	Button_Reading_Update_Helper@button,w
 14262  0D4B  3E03               	addlw	3
 14263  0D4C  0086               	movwf	6
 14264  0D4D  3001               	movlw	1	; select bank2/3
 14265  0D4E  0087               	movwf	7
 14266  0D4F  0854               	movf	?_MTOUCH_Sensor_RawSample_Get,w
 14267  0D50  3FC0               	movwi [0]fsr1
 14268  0D51  0855               	movf	?_MTOUCH_Sensor_RawSample_Get+1,w
 14269  0D52  3FC1               	movwi [1]fsr1
 14270  0D53  0008               	return
 14271  0D54                     __end_of_Button_Reading_Update_Helper:	
 14272                           
 14273                           	psect	text61
 14274  093B                     __ptext61:	
 14275 ;; *************** function _MTOUCH_Sensor_RawSample_Get *****************
 14276 ;; Defined at:
 14277 ;;		line 500 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
 14278 ;; Parameters:    Size  Location     Type
 14279 ;;  name            1    wreg     enum E11734
 14280 ;; Auto vars:     Size  Location     Type
 14281 ;;  name            1    7[BANK0 ] enum E11734
 14282 ;; Return value:  Size  Location     Type
 14283 ;;                  2    4[BANK0 ] unsigned int 
 14284 ;; Registers used:
 14285 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14286 ;; Tracked objects:
 14287 ;;		On entry : 0/0
 14288 ;;		On exit  : 0/0
 14289 ;;		Unchanged: 0/0
 14290 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 14291 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14292 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14293 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14294 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14295 ;;Total ram usage:        4 bytes
 14296 ;; Hardware stack levels used:    1
 14297 ;; Hardware stack levels required when called:    7
 14298 ;; This function calls:
 14299 ;;		___bmul
 14300 ;; This function is called by:
 14301 ;;		_Button_Reading_Update_Helper
 14302 ;;		_Button_Baseline_Initialize
 14303 ;; This function uses a non-reentrant model
 14304 ;;
 14305                           
 14306                           
 14307                           ;psect for function _MTOUCH_Sensor_RawSample_Get
 14308  093B                     _MTOUCH_Sensor_RawSample_Get:	
 14309                           
 14310                           ;incstack = 0
 14311                           ; Regs used in _MTOUCH_Sensor_RawSample_Get: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+
      +                          cstack]
 14312                           ;MTOUCH_Sensor_RawSample_Get@name stored from wreg
 14313  093B  0020               	movlb	0	; select bank0
 14314  093C  00D7               	movwf	MTOUCH_Sensor_RawSample_Get@name
 14315                           
 14316                           ;mtouch_sensor.c: 502: if (name < 3)
 14317  093D  3003               	movlw	3
 14318  093E  0257               	subwf	MTOUCH_Sensor_RawSample_Get@name,w
 14319  093F  1803               	skipnc
 14320  0940  2952               	goto	l3762
 14321                           
 14322                           ;mtouch_sensor.c: 503: {;mtouch_sensor.c: 504: return mtouch_sensor[name].rawSample;
 14323  0941  3009               	movlw	9
 14324  0942  00D6               	movwf	??_MTOUCH_Sensor_RawSample_Get
 14325  0943  0856               	movf	??_MTOUCH_Sensor_RawSample_Get,w
 14326  0944  00D0               	movwf	___bmul@multiplicand
 14327  0945  0857               	movf	MTOUCH_Sensor_RawSample_Get@name,w
 14328  0946  3197  27CA         	fcall	___bmul
 14329  0948  3E30               	addlw	(low ((_mtouch_sensor| (0+256)+6)))& (0+255)
 14330  0949  0086               	movwf	6
 14331  094A  3001               	movlw	1	; select bank2/3
 14332  094B  0087               	movwf	7
 14333  094C  3F40               	moviw [0]fsr1
 14334  094D  0020               	movlb	0	; select bank0
 14335  094E  00D4               	movwf	?_MTOUCH_Sensor_RawSample_Get
 14336  094F  3F41               	moviw [1]fsr1
 14337  0950  00D5               	movwf	?_MTOUCH_Sensor_RawSample_Get+1
 14338  0951  0008               	return
 14339  0952                     l3762:	
 14340                           
 14341                           ;mtouch_sensor.c: 506: else;mtouch_sensor.c: 507: return (mtouch_sensor_sample_t)0;
 14342  0952  01D4               	clrf	?_MTOUCH_Sensor_RawSample_Get
 14343  0953  01D5               	clrf	?_MTOUCH_Sensor_RawSample_Get+1
 14344  0954  0008               	return
 14345  0955                     __end_of_MTOUCH_Sensor_RawSample_Get:	
 14346                           
 14347                           	psect	text62
 14348  17CA                     __ptext62:	
 14349 ;; *************** function ___bmul *****************
 14350 ;; Defined at:
 14351 ;;		line 4 in file "C:\Program Files2\Microchip\xc8\v2.05\pic\sources\c90\common\Umul8.c"
 14352 ;; Parameters:    Size  Location     Type
 14353 ;;  multiplier      1    wreg     unsigned char 
 14354 ;;  multiplicand    1    0[BANK0 ] unsigned char 
 14355 ;; Auto vars:     Size  Location     Type
 14356 ;;  multiplier      1    3[BANK0 ] unsigned char 
 14357 ;;  product         1    2[BANK0 ] unsigned char 
 14358 ;; Return value:  Size  Location     Type
 14359 ;;                  1    wreg      unsigned char 
 14360 ;; Registers used:
 14361 ;;		wreg, status,2, status,0
 14362 ;; Tracked objects:
 14363 ;;		On entry : 0/0
 14364 ;;		On exit  : 0/0
 14365 ;;		Unchanged: 0/0
 14366 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 14367 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14368 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14369 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14370 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14371 ;;Total ram usage:        4 bytes
 14372 ;; Hardware stack levels used:    1
 14373 ;; Hardware stack levels required when called:    6
 14374 ;; This function calls:
 14375 ;;		Nothing
 14376 ;; This function is called by:
 14377 ;;		_MTOUCH_Sensor_Initialize
 14378 ;;		_Sensor_scheduleNextScan
 14379 ;;		_Sensor_postAcquisitionProcess
 14380 ;;		_MTOUCH_Sensor_Service
 14381 ;;		_MTOUCH_Sensor_RawSample_Get
 14382 ;;		_medianFilter
 14383 ;;		_Sensor_FrequencyHopping_Autotune_Process
 14384 ;;		_MTOUCH_Sensor_Enable
 14385 ;;		_MTOUCH_Sensor_isEnabled
 14386 ;;		_MTOUCH_Sensor_Calibrate
 14387 ;;		_MTOUCH_Sensor_isCalibrated
 14388 ;;		_MTOUCH_Sensor_wasSampled
 14389 ;;		i1_Sensor_scheduleNextScan
 14390 ;;		i1_MTOUCH_Sensor_isEnabled
 14391 ;;		i1_MTOUCH_Sensor_wasSampled
 14392 ;;		_MTOUCH_Sensor_Disable
 14393 ;;		_MTOUCH_Sensor_isActive
 14394 ;;		_MTOUCH_Sensor_AdditionalCap_Get
 14395 ;;		_MTOUCH_Sensor_AcquisitionTime_Get
 14396 ;;		_MTOUCH_Sensor_PreChargeTime_Get
 14397 ;;		_MTOUCH_Sensor_Oversampling_Get
 14398 ;;		_MTOUCH_Sensor_Oversampling_Set
 14399 ;; This function uses a non-reentrant model
 14400 ;;
 14401                           
 14402                           
 14403                           ;psect for function ___bmul
 14404  17CA                     ___bmul:	
 14405                           
 14406                           ;incstack = 0
 14407                           ; Regs used in ___bmul: [wreg+status,2+status,0]
 14408                           ;___bmul@multiplier stored from wreg
 14409  17CA  0020               	movlb	0	; select bank0
 14410  17CB  00D3               	movwf	___bmul@multiplier
 14411  17CC  01D2               	clrf	___bmul@product
 14412  17CD                     l3738:	
 14413  17CD  1C53               	btfss	___bmul@multiplier,0
 14414  17CE  2FD3               	goto	l3742
 14415  17CF  0850               	movf	___bmul@multiplicand,w
 14416  17D0  00D1               	movwf	??___bmul
 14417  17D1  0851               	movf	??___bmul,w
 14418  17D2  07D2               	addwf	___bmul@product,f
 14419  17D3                     l3742:	
 14420  17D3  1003               	clrc
 14421  17D4  0DD0               	rlf	___bmul@multiplicand,f
 14422  17D5  1003               	clrc
 14423  17D6  0CD3               	rrf	___bmul@multiplier,f
 14424  17D7  0853               	movf	___bmul@multiplier,w
 14425  17D8  1D03               	btfss	3,2
 14426  17D9  2FCD               	goto	l3738
 14427  17DA  0852               	movf	___bmul@product,w
 14428  17DB  0008               	return
 14429  17DC                     __end_of___bmul:	
 14430                           
 14431                           	psect	text63
 14432  0F79                     __ptext63:	
 14433 ;; *************** function _Button_Deviation_Update *****************
 14434 ;; Defined at:
 14435 ;;		line 402 in file "mcc_generated_files/mtouch/mtouch_button.c"
 14436 ;; Parameters:    Size  Location     Type
 14437 ;;  button          1    wreg     PTR struct .
 14438 ;;		 -> mtouch_button(48), 
 14439 ;; Auto vars:     Size  Location     Type
 14440 ;;  button          1   10[BANK0 ] PTR struct .
 14441 ;;		 -> mtouch_button(48), 
 14442 ;;  deviation       4   11[BANK0 ] long 
 14443 ;; Return value:  Size  Location     Type
 14444 ;;                  1    wreg      void 
 14445 ;; Registers used:
 14446 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 14447 ;; Tracked objects:
 14448 ;;		On entry : 0/0
 14449 ;;		On exit  : 0/0
 14450 ;;		Unchanged: 0/0
 14451 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 14452 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14453 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14454 ;;      Temps:          0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14455 ;;      Totals:         0      15       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14456 ;;Total ram usage:       15 bytes
 14457 ;; Hardware stack levels used:    1
 14458 ;; Hardware stack levels required when called:    6
 14459 ;; This function calls:
 14460 ;;		Nothing
 14461 ;; This function is called by:
 14462 ;;		_Button_Service
 14463 ;; This function uses a non-reentrant model
 14464 ;;
 14465                           
 14466                           
 14467                           ;psect for function _Button_Deviation_Update
 14468  0F79                     _Button_Deviation_Update:	
 14469                           
 14470                           ;incstack = 0
 14471                           ; Regs used in _Button_Deviation_Update: [wreg+fsr1l+fsr1h+status,2+status,0]
 14472                           ;Button_Deviation_Update@button stored from wreg
 14473  0F79  0020               	movlb	0	; select bank0
 14474  0F7A  00DA               	movwf	Button_Deviation_Update@button
 14475                           
 14476                           ;mtouch_button.c: 404: int32_t deviation;;mtouch_button.c: 406: deviation = (int32_t)((i
      +                          nt32_t)(button->reading) - (int32_t)((button->baseline)>>((uint8_t)4)));
 14477  0F7B  085A               	movf	Button_Deviation_Update@button,w
 14478  0F7C  3E05               	addlw	5
 14479  0F7D  0086               	movwf	6
 14480  0F7E  3001               	movlw	1	; select bank2/3
 14481  0F7F  0087               	movwf	7
 14482  0F80  3F40               	moviw [0]fsr1
 14483  0F81  00D0               	movwf	??_Button_Deviation_Update
 14484  0F82  3F41               	moviw [1]fsr1
 14485  0F83  00D1               	movwf	??_Button_Deviation_Update+1
 14486  0F84  3F42               	moviw [2]fsr1
 14487  0F85  00D2               	movwf	??_Button_Deviation_Update+2
 14488  0F86  3F43               	moviw [3]fsr1
 14489  0F87  00D3               	movwf	??_Button_Deviation_Update+3
 14490  0F88  3004               	movlw	4
 14491  0F89                     u2855:	
 14492  0F89  36D3               	lsrf	??_Button_Deviation_Update+3,f
 14493  0F8A  0CD2               	rrf	??_Button_Deviation_Update+2,f
 14494  0F8B  0CD1               	rrf	??_Button_Deviation_Update+1,f
 14495  0F8C  0CD0               	rrf	??_Button_Deviation_Update,f
 14496  0F8D  0B89               	decfsz	9,f
 14497  0F8E  2F89               	goto	u2855
 14498  0F8F  085A               	movf	Button_Deviation_Update@button,w
 14499  0F90  3E03               	addlw	3
 14500  0F91  0086               	movwf	6
 14501  0F92  3001               	movlw	1	; select bank2/3
 14502  0F93  0087               	movwf	7
 14503  0F94  3F40               	moviw [0]fsr1
 14504  0F95  00D4               	movwf	??_Button_Deviation_Update+4
 14505  0F96  3F41               	moviw [1]fsr1
 14506  0F97  00D5               	movwf	??_Button_Deviation_Update+5
 14507  0F98  0854               	movf	??_Button_Deviation_Update+4,w
 14508  0F99  00D6               	movwf	??_Button_Deviation_Update+6
 14509  0F9A  0855               	movf	??_Button_Deviation_Update+5,w
 14510  0F9B  00D7               	movwf	??_Button_Deviation_Update+7
 14511  0F9C  01D8               	clrf	??_Button_Deviation_Update+8
 14512  0F9D  01D9               	clrf	??_Button_Deviation_Update+9
 14513  0F9E  0850               	movf	??_Button_Deviation_Update,w
 14514  0F9F  02D6               	subwf	??_Button_Deviation_Update+6,f
 14515  0FA0  0851               	movf	??_Button_Deviation_Update+1,w
 14516  0FA1  3BD7               	subwfb	??_Button_Deviation_Update+7,f
 14517  0FA2  0852               	movf	??_Button_Deviation_Update+2,w
 14518  0FA3  3BD8               	subwfb	??_Button_Deviation_Update+8,f
 14519  0FA4  0853               	movf	??_Button_Deviation_Update+3,w
 14520  0FA5  3BD9               	subwfb	??_Button_Deviation_Update+9,f
 14521  0FA6  0859               	movf	??_Button_Deviation_Update+9,w
 14522  0FA7  00DE               	movwf	Button_Deviation_Update@deviation+3
 14523  0FA8  0858               	movf	??_Button_Deviation_Update+8,w
 14524  0FA9  00DD               	movwf	Button_Deviation_Update@deviation+2
 14525  0FAA  0857               	movf	??_Button_Deviation_Update+7,w
 14526  0FAB  00DC               	movwf	Button_Deviation_Update@deviation+1
 14527  0FAC  0856               	movf	??_Button_Deviation_Update+6,w
 14528  0FAD  00DB               	movwf	Button_Deviation_Update@deviation
 14529                           
 14530                           ;mtouch_button.c: 409: deviation = deviation >> (button->scaling);
 14531  0FAE  085B               	movf	Button_Deviation_Update@deviation,w
 14532  0FAF  00D0               	movwf	??_Button_Deviation_Update
 14533  0FB0  085C               	movf	Button_Deviation_Update@deviation+1,w
 14534  0FB1  00D1               	movwf	??_Button_Deviation_Update+1
 14535  0FB2  085D               	movf	Button_Deviation_Update@deviation+2,w
 14536  0FB3  00D2               	movwf	??_Button_Deviation_Update+2
 14537  0FB4  085E               	movf	Button_Deviation_Update@deviation+3,w
 14538  0FB5  00D3               	movwf	??_Button_Deviation_Update+3
 14539  0FB6  085A               	movf	Button_Deviation_Update@button,w
 14540  0FB7  3E0F               	addlw	15
 14541  0FB8  0086               	movwf	6
 14542  0FB9  3001               	movlw	1	; select bank2/3
 14543  0FBA  0087               	movwf	7
 14544  0FBB  0A01               	incf	1,w
 14545  0FBC  2FC1               	goto	u2860
 14546  0FBD                     u2865:	
 14547  0FBD  37D3               	asrf	??_Button_Deviation_Update+3,f
 14548  0FBE  0CD2               	rrf	??_Button_Deviation_Update+2,f
 14549  0FBF  0CD1               	rrf	??_Button_Deviation_Update+1,f
 14550  0FC0  0CD0               	rrf	??_Button_Deviation_Update,f
 14551  0FC1                     u2860:	
 14552  0FC1  0B89               	decfsz	9,f
 14553  0FC2  2FBD               	goto	u2865
 14554  0FC3  0853               	movf	??_Button_Deviation_Update+3,w
 14555  0FC4  00DE               	movwf	Button_Deviation_Update@deviation+3
 14556  0FC5  0852               	movf	??_Button_Deviation_Update+2,w
 14557  0FC6  00DD               	movwf	Button_Deviation_Update@deviation+2
 14558  0FC7  0851               	movf	??_Button_Deviation_Update+1,w
 14559  0FC8  00DC               	movwf	Button_Deviation_Update@deviation+1
 14560  0FC9  0850               	movf	??_Button_Deviation_Update,w
 14561  0FCA  00DB               	movwf	Button_Deviation_Update@deviation
 14562                           
 14563                           ;mtouch_button.c: 412: if (deviation > ((127)))
 14564  0FCB  1BDE               	btfsc	Button_Deviation_Update@deviation+3,7
 14565  0FCC  2FE2               	goto	l4098
 14566  0FCD  085E               	movf	Button_Deviation_Update@deviation+3,w
 14567  0FCE  1D03               	btfss	3,2
 14568  0FCF  2FDA               	goto	l4096
 14569  0FD0  085D               	movf	Button_Deviation_Update@deviation+2,w
 14570  0FD1  1D03               	btfss	3,2
 14571  0FD2  2FDA               	goto	l4096
 14572  0FD3  085C               	movf	Button_Deviation_Update@deviation+1,w
 14573  0FD4  1D03               	btfss	3,2
 14574  0FD5  2FDA               	goto	l4096
 14575  0FD6  3080               	movlw	128
 14576  0FD7  025B               	subwf	Button_Deviation_Update@deviation,w
 14577  0FD8  1C03               	btfss	3,0
 14578  0FD9  2FE2               	goto	l4098
 14579  0FDA                     l4096:	
 14580                           
 14581                           ;mtouch_button.c: 413: {;mtouch_button.c: 414: deviation = ((127));
 14582  0FDA  3000               	movlw	0
 14583  0FDB  00DE               	movwf	Button_Deviation_Update@deviation+3
 14584  0FDC  3000               	movlw	0
 14585  0FDD  00DD               	movwf	Button_Deviation_Update@deviation+2
 14586  0FDE  3000               	movlw	0
 14587  0FDF  00DC               	movwf	Button_Deviation_Update@deviation+1
 14588  0FE0  307F               	movlw	127
 14589  0FE1  00DB               	movwf	Button_Deviation_Update@deviation
 14590  0FE2                     l4098:	
 14591                           
 14592                           ;mtouch_button.c: 415: };mtouch_button.c: 416: if (deviation < ((-128)))
 14593  0FE2  1FDE               	btfss	Button_Deviation_Update@deviation+3,7
 14594  0FE3  2FF6               	goto	l4102
 14595  0FE4  3080               	movlw	128
 14596  0FE5  025B               	subwf	Button_Deviation_Update@deviation,w
 14597  0FE6  30FF               	movlw	255
 14598  0FE7  3B5C               	subwfb	Button_Deviation_Update@deviation+1,w
 14599  0FE8  30FF               	movlw	255
 14600  0FE9  3B5D               	subwfb	Button_Deviation_Update@deviation+2,w
 14601  0FEA  30FF               	movlw	255
 14602  0FEB  3B5E               	subwfb	Button_Deviation_Update@deviation+3,w
 14603  0FEC  1803               	btfsc	3,0
 14604  0FED  2FF6               	goto	l4102
 14605                           
 14606                           ;mtouch_button.c: 417: {;mtouch_button.c: 418: deviation = ((-128));
 14607  0FEE  30FF               	movlw	255
 14608  0FEF  00DE               	movwf	Button_Deviation_Update@deviation+3
 14609  0FF0  30FF               	movlw	255
 14610  0FF1  00DD               	movwf	Button_Deviation_Update@deviation+2
 14611  0FF2  30FF               	movlw	255
 14612  0FF3  00DC               	movwf	Button_Deviation_Update@deviation+1
 14613  0FF4  3080               	movlw	128
 14614  0FF5  00DB               	movwf	Button_Deviation_Update@deviation
 14615  0FF6                     l4102:	
 14616                           
 14617                           ;mtouch_button.c: 419: };mtouch_button.c: 421: button->deviation = (mtouch_button_deviat
      +                          ion_t)deviation;
 14618  0FF6  085B               	movf	Button_Deviation_Update@deviation,w
 14619  0FF7  00D0               	movwf	??_Button_Deviation_Update
 14620  0FF8  085A               	movf	Button_Deviation_Update@button,w
 14621  0FF9  3E09               	addlw	9
 14622  0FFA  0086               	movwf	6
 14623  0FFB  3001               	movlw	1	; select bank2/3
 14624  0FFC  0087               	movwf	7
 14625  0FFD  0850               	movf	??_Button_Deviation_Update,w
 14626  0FFE  0081               	movwf	1
 14627  0FFF  0008               	return
 14628  1000                     __end_of_Button_Deviation_Update:	
 14629                           
 14630                           	psect	text64
 14631  09A5                     __ptext64:	
 14632 ;; *************** function _MTOUCH_Button_isPressed *****************
 14633 ;; Defined at:
 14634 ;;		line 377 in file "mcc_generated_files/mtouch/mtouch_button.c"
 14635 ;; Parameters:    Size  Location     Type
 14636 ;;  name            1    wreg     enum E11678
 14637 ;; Auto vars:     Size  Location     Type
 14638 ;;  name            1    1[BANK0 ] enum E11678
 14639 ;; Return value:  Size  Location     Type
 14640 ;;                  1    wreg      unsigned char 
 14641 ;; Registers used:
 14642 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 14643 ;; Tracked objects:
 14644 ;;		On entry : 0/0
 14645 ;;		On exit  : 0/0
 14646 ;;		Unchanged: 0/0
 14647 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 14648 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14649 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14650 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14651 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14652 ;;Total ram usage:        2 bytes
 14653 ;; Hardware stack levels used:    1
 14654 ;; Hardware stack levels required when called:    6
 14655 ;; This function calls:
 14656 ;;		Nothing
 14657 ;; This function is called by:
 14658 ;;		_main
 14659 ;;		_MTOUCH_Button_Buttonmask_Get
 14660 ;; This function uses a non-reentrant model
 14661 ;;
 14662                           
 14663                           
 14664                           ;psect for function _MTOUCH_Button_isPressed
 14665  09A5                     _MTOUCH_Button_isPressed:	
 14666                           
 14667                           ;incstack = 0
 14668                           ; Regs used in _MTOUCH_Button_isPressed: [wreg+fsr1l+fsr1h+status,2+status,0]
 14669                           ;MTOUCH_Button_isPressed@name stored from wreg
 14670  09A5  0020               	movlb	0	; select bank0
 14671  09A6  00D1               	movwf	MTOUCH_Button_isPressed@name
 14672                           
 14673                           ;mtouch_button.c: 379: if(name < 3)
 14674  09A7  3003               	movlw	3
 14675  09A8  0251               	subwf	MTOUCH_Button_isPressed@name,w
 14676  09A9  1803               	skipnc
 14677  09AA  29BF               	goto	l4802
 14678                           
 14679                           ;mtouch_button.c: 380: return (bool)((mtouch_button[name].state == MTOUCH_BUTTON_STATE_p
      +                          ressed) ? 1 : 0);
 14680  09AB  0851               	movf	MTOUCH_Button_isPressed@name,w
 14681  09AC  00D0               	movwf	??_MTOUCH_Button_isPressed
 14682  09AD  3003               	movlw	3
 14683  09AE                     u3805:	
 14684  09AE  35D0               	lslf	??_MTOUCH_Button_isPressed,f
 14685  09AF  3EFF               	addlw	-1
 14686  09B0  1D03               	skipz
 14687  09B1  29AE               	goto	u3805
 14688  09B2  3550               	lslf	??_MTOUCH_Button_isPressed,w
 14689  09B3  3EA2               	addlw	(low ((_mtouch_button| (0+256)+2)))& (0+255)
 14690  09B4  0086               	movwf	6
 14691  09B5  3001               	movlw	1	; select bank3/4
 14692  09B6  0087               	movwf	7
 14693  09B7  3002               	movlw	2
 14694  09B8  0601               	xorwf	1,w
 14695  09B9  1D03               	btfss	3,2
 14696  09BA  29BD               	goto	u3810
 14697  09BB  3001               	movlw	1
 14698  09BC  0008               	return
 14699  09BD                     u3810:	
 14700  09BD  3000               	movlw	0
 14701  09BE  0008               	return
 14702  09BF                     l4802:	
 14703                           
 14704                           ;mtouch_button.c: 381: else;mtouch_button.c: 382: return 0;
 14705  09BF  3000               	movlw	0
 14706  09C0  0008               	return
 14707  09C1                     __end_of_MTOUCH_Button_isPressed:	
 14708                           
 14709                           	psect	text65
 14710  062F                     __ptext65:	
 14711 ;; *************** function _Load_System_Setting *****************
 14712 ;; Defined at:
 14713 ;;		line 55 in file "main.c"
 14714 ;; Parameters:    Size  Location     Type
 14715 ;;		None
 14716 ;; Auto vars:     Size  Location     Type
 14717 ;;		None
 14718 ;; Return value:  Size  Location     Type
 14719 ;;                  1    wreg      void 
 14720 ;; Registers used:
 14721 ;;		wreg, status,2, pclath, cstack
 14722 ;; Tracked objects:
 14723 ;;		On entry : 0/0
 14724 ;;		On exit  : 0/0
 14725 ;;		Unchanged: 0/0
 14726 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 14727 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14728 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14729 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14730 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14731 ;;Total ram usage:        1 bytes
 14732 ;; Hardware stack levels used:    1
 14733 ;; Hardware stack levels required when called:    7
 14734 ;; This function calls:
 14735 ;;		_DATAEE_ReadByte
 14736 ;; This function is called by:
 14737 ;;		_main
 14738 ;; This function uses a non-reentrant model
 14739 ;;
 14740                           
 14741                           
 14742                           ;psect for function _Load_System_Setting
 14743  062F                     _Load_System_Setting:	
 14744                           
 14745                           ;main.c: 57: if (DATAEE_ReadByte(0xF000) == 255) {
 14746                           
 14747                           ;incstack = 0
 14748                           ; Regs used in _Load_System_Setting: [wreg+status,2+pclath+cstack]
 14749  062F  3000               	movlw	0
 14750  0630  0020               	movlb	0	; select bank0
 14751  0631  00D0               	movwf	DATAEE_ReadByte@bAdd
 14752  0632  30F0               	movlw	240
 14753  0633  00D1               	movwf	DATAEE_ReadByte@bAdd+1
 14754  0634  3197  275C  3186   	fcall	_DATAEE_ReadByte
 14755  0637  3AFF               	xorlw	255
 14756  0638  1D03               	skipz
 14757  0639  2E3C               	goto	l4896
 14758                           
 14759                           ;main.c: 58: u8_REF_SetLevel = 3;
 14760  063A  3003               	movlw	3
 14761  063B  2E44               	goto	L14
 14762  063C                     l4896:	
 14763                           ;main.c: 59: }else{
 14764                           
 14765                           
 14766                           ;main.c: 60: u8_REF_SetLevel = DATAEE_ReadByte(0xF000);
 14767  063C  3000               	movlw	0
 14768  063D  0020               	movlb	0	; select bank0
 14769  063E  00D0               	movwf	DATAEE_ReadByte@bAdd
 14770  063F  30F0               	movlw	240
 14771  0640  00D1               	movwf	DATAEE_ReadByte@bAdd+1
 14772  0641  3197  275C  3186   	fcall	_DATAEE_ReadByte
 14773  0644                     L14:	
 14774  0644  0020               	movlb	0	; select bank0
 14775  0645  00D2               	movwf	??_Load_System_Setting
 14776  0646  0852               	movf	??_Load_System_Setting,w
 14777  0647  00B9               	movwf	_u8_REF_SetLevel
 14778                           
 14779                           ;main.c: 61: };main.c: 63: if (DATAEE_ReadByte(0xF001) == 255) {
 14780  0648  3001               	movlw	1
 14781  0649  00D0               	movwf	DATAEE_ReadByte@bAdd
 14782  064A  30F0               	movlw	240
 14783  064B  00D1               	movwf	DATAEE_ReadByte@bAdd+1
 14784  064C  3197  275C  3186   	fcall	_DATAEE_ReadByte
 14785  064F  3AFF               	xorlw	255
 14786  0650  1D03               	skipz
 14787  0651  2E55               	goto	l4900
 14788                           
 14789                           ;main.c: 64: u8_SuperCool_Status = 0;
 14790  0652  0020               	movlb	0	; select bank0
 14791  0653  01B8               	clrf	_u8_SuperCool_Status
 14792                           
 14793                           ;main.c: 65: }else{
 14794  0654  2E61               	goto	l1109
 14795  0655                     l4900:	
 14796                           
 14797                           ;main.c: 66: u8_SuperCool_Status = DATAEE_ReadByte(0xF001);
 14798  0655  3001               	movlw	1
 14799  0656  0020               	movlb	0	; select bank0
 14800  0657  00D0               	movwf	DATAEE_ReadByte@bAdd
 14801  0658  30F0               	movlw	240
 14802  0659  00D1               	movwf	DATAEE_ReadByte@bAdd+1
 14803  065A  3197  275C  3186   	fcall	_DATAEE_ReadByte
 14804  065D  0020               	movlb	0	; select bank0
 14805  065E  00D2               	movwf	??_Load_System_Setting
 14806  065F  0852               	movf	??_Load_System_Setting,w
 14807  0660  00B8               	movwf	_u8_SuperCool_Status
 14808  0661                     l1109:	
 14809                           
 14810                           ;main.c: 67: };main.c: 69: if (DATAEE_ReadByte(0xF002) == 255) {
 14811  0661  3002               	movlw	2
 14812  0662  00D0               	movwf	DATAEE_ReadByte@bAdd
 14813  0663  30F0               	movlw	240
 14814  0664  00D1               	movwf	DATAEE_ReadByte@bAdd+1
 14815  0665  3197  275C  3186   	fcall	_DATAEE_ReadByte
 14816  0668  3AFF               	xorlw	255
 14817  0669  1D03               	skipz
 14818  066A  2E6E               	goto	l4904
 14819                           
 14820                           ;main.c: 70: u8_LOCK_Status = 0;
 14821  066B  0020               	movlb	0	; select bank0
 14822  066C  01B7               	clrf	_u8_LOCK_Status
 14823                           
 14824                           ;main.c: 71: }else{
 14825  066D  2E7A               	goto	l1111
 14826  066E                     l4904:	
 14827                           
 14828                           ;main.c: 72: u8_LOCK_Status = DATAEE_ReadByte(0xF002);
 14829  066E  3002               	movlw	2
 14830  066F  0020               	movlb	0	; select bank0
 14831  0670  00D0               	movwf	DATAEE_ReadByte@bAdd
 14832  0671  30F0               	movlw	240
 14833  0672  00D1               	movwf	DATAEE_ReadByte@bAdd+1
 14834  0673  3197  275C  3186   	fcall	_DATAEE_ReadByte
 14835  0676  0020               	movlb	0	; select bank0
 14836  0677  00D2               	movwf	??_Load_System_Setting
 14837  0678  0852               	movf	??_Load_System_Setting,w
 14838  0679  00B7               	movwf	_u8_LOCK_Status
 14839  067A                     l1111:	
 14840                           
 14841                           ;main.c: 73: };main.c: 75: if (DATAEE_ReadByte(0xF003) == 255) {
 14842  067A  3003               	movlw	3
 14843  067B  00D0               	movwf	DATAEE_ReadByte@bAdd
 14844  067C  30F0               	movlw	240
 14845  067D  00D1               	movwf	DATAEE_ReadByte@bAdd+1
 14846  067E  3197  275C  3186   	fcall	_DATAEE_ReadByte
 14847  0681  3AFF               	xorlw	255
 14848  0682  1D03               	skipz
 14849  0683  2E87               	goto	l4908
 14850                           
 14851                           ;main.c: 76: EE_COMP_Flag = 0;
 14852  0684  0020               	movlb	0	; select bank0
 14853  0685  01B5               	clrf	_EE_COMP_Flag
 14854                           
 14855                           ;main.c: 77: }else{
 14856  0686  2E93               	goto	l1113
 14857  0687                     l4908:	
 14858                           
 14859                           ;main.c: 78: EE_COMP_Flag = DATAEE_ReadByte(0xF003);
 14860  0687  3003               	movlw	3
 14861  0688  0020               	movlb	0	; select bank0
 14862  0689  00D0               	movwf	DATAEE_ReadByte@bAdd
 14863  068A  30F0               	movlw	240
 14864  068B  00D1               	movwf	DATAEE_ReadByte@bAdd+1
 14865  068C  3197  275C  3186   	fcall	_DATAEE_ReadByte
 14866  068F  0020               	movlb	0	; select bank0
 14867  0690  00D2               	movwf	??_Load_System_Setting
 14868  0691  0852               	movf	??_Load_System_Setting,w
 14869  0692  00B5               	movwf	_EE_COMP_Flag
 14870  0693                     l1113:	
 14871                           
 14872                           ;main.c: 79: };main.c: 81: if (DATAEE_ReadByte(0xF004) == 255) {
 14873  0693  3004               	movlw	4
 14874  0694  00D0               	movwf	DATAEE_ReadByte@bAdd
 14875  0695  30F0               	movlw	240
 14876  0696  00D1               	movwf	DATAEE_ReadByte@bAdd+1
 14877  0697  3197  275C  3186   	fcall	_DATAEE_ReadByte
 14878  069A  3AFF               	xorlw	255
 14879  069B  1D03               	skipz
 14880  069C  2E9F               	goto	l4912
 14881                           
 14882                           ;main.c: 82: EE_COMP_RUN_CountDown_Min = 60;
 14883  069D  303C               	movlw	60
 14884  069E  2EA7               	goto	L15
 14885  069F                     l4912:	
 14886                           ;main.c: 83: }else{
 14887                           
 14888                           
 14889                           ;main.c: 84: EE_COMP_RUN_CountDown_Min = DATAEE_ReadByte(0xF004);
 14890  069F  3004               	movlw	4
 14891  06A0  0020               	movlb	0	; select bank0
 14892  06A1  00D0               	movwf	DATAEE_ReadByte@bAdd
 14893  06A2  30F0               	movlw	240
 14894  06A3  00D1               	movwf	DATAEE_ReadByte@bAdd+1
 14895  06A4  3197  275C  3186   	fcall	_DATAEE_ReadByte
 14896  06A7                     L15:	
 14897  06A7  0020               	movlb	0	; select bank0
 14898  06A8  00D2               	movwf	??_Load_System_Setting
 14899  06A9  0852               	movf	??_Load_System_Setting,w
 14900  06AA  00BB               	movwf	_EE_COMP_RUN_CountDown_Min
 14901                           
 14902                           ;main.c: 85: };main.c: 87: if (DATAEE_ReadByte(0xF005) == 255) {
 14903  06AB  3005               	movlw	5
 14904  06AC  00D0               	movwf	DATAEE_ReadByte@bAdd
 14905  06AD  30F0               	movlw	240
 14906  06AE  00D1               	movwf	DATAEE_ReadByte@bAdd+1
 14907  06AF  3197  275C  3186   	fcall	_DATAEE_ReadByte
 14908  06B2  3AFF               	xorlw	255
 14909  06B3  1D03               	skipz
 14910  06B4  2EB8               	goto	l4916
 14911                           
 14912                           ;main.c: 88: EE_COMP_TOTAL_RUN_Count_Hr = 0;
 14913  06B5  0020               	movlb	0	; select bank0
 14914  06B6  01BA               	clrf	_EE_COMP_TOTAL_RUN_Count_Hr
 14915                           
 14916                           ;main.c: 89: }else{
 14917  06B7  0008               	return
 14918  06B8                     l4916:	
 14919                           
 14920                           ;main.c: 90: EE_COMP_TOTAL_RUN_Count_Hr = DATAEE_ReadByte(0xF005);
 14921  06B8  3005               	movlw	5
 14922  06B9  0020               	movlb	0	; select bank0
 14923  06BA  00D0               	movwf	DATAEE_ReadByte@bAdd
 14924  06BB  30F0               	movlw	240
 14925  06BC  00D1               	movwf	DATAEE_ReadByte@bAdd+1
 14926  06BD  3197  275C         	fcall	_DATAEE_ReadByte
 14927  06BF  0020               	movlb	0	; select bank0
 14928  06C0  00D2               	movwf	??_Load_System_Setting
 14929  06C1  0852               	movf	??_Load_System_Setting,w
 14930  06C2  00BA               	movwf	_EE_COMP_TOTAL_RUN_Count_Hr
 14931  06C3  0008               	return
 14932  06C4                     __end_of_Load_System_Setting:	
 14933                           
 14934                           	psect	text66
 14935  175C                     __ptext66:	
 14936 ;; *************** function _DATAEE_ReadByte *****************
 14937 ;; Defined at:
 14938 ;;		line 202 in file "mcc_generated_files/memory.c"
 14939 ;; Parameters:    Size  Location     Type
 14940 ;;  bAdd            2    0[BANK0 ] unsigned int 
 14941 ;; Auto vars:     Size  Location     Type
 14942 ;;		None
 14943 ;; Return value:  Size  Location     Type
 14944 ;;                  1    wreg      unsigned char 
 14945 ;; Registers used:
 14946 ;;		wreg, status,2
 14947 ;; Tracked objects:
 14948 ;;		On entry : 0/0
 14949 ;;		On exit  : 0/0
 14950 ;;		Unchanged: 0/0
 14951 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 14952 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14953 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14954 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14955 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14956 ;;Total ram usage:        2 bytes
 14957 ;; Hardware stack levels used:    1
 14958 ;; Hardware stack levels required when called:    6
 14959 ;; This function calls:
 14960 ;;		Nothing
 14961 ;; This function is called by:
 14962 ;;		_Load_System_Setting
 14963 ;; This function uses a non-reentrant model
 14964 ;;
 14965                           
 14966                           
 14967                           ;psect for function _DATAEE_ReadByte
 14968  175C                     _DATAEE_ReadByte:	
 14969                           
 14970                           ;memory.c: 204: NVMADRH = ((bAdd >> 8) & 0xFF);
 14971                           
 14972                           ;incstack = 0
 14973                           ; Regs used in _DATAEE_ReadByte: [wreg+status,2]
 14974  175C  0020               	movlb	0	; select bank0
 14975  175D  0851               	movf	DATAEE_ReadByte@bAdd+1,w
 14976  175E  0030               	movlb	16	; select bank16
 14977  175F  009B               	movwf	27	;volatile
 14978                           
 14979                           ;memory.c: 205: NVMADRL = (bAdd & 0xFF);
 14980  1760  0020               	movlb	0	; select bank0
 14981  1761  0850               	movf	DATAEE_ReadByte@bAdd,w
 14982  1762  0030               	movlb	16	; select bank16
 14983  1763  009A               	movwf	26	;volatile
 14984                           
 14985                           ;memory.c: 206: NVMCON1bits.NVMREGS = 1;
 14986  1764  171E               	bsf	30,6	;volsfr
 14987                           
 14988                           ;memory.c: 207: NVMCON1bits.RD = 1;
 14989  1765  141E               	bsf	30,0	;volsfr
 14990                           
 14991                           ;memory.c: 208: __nop();
 14992  1766  0000               	nop
 14993                           
 14994                           ;memory.c: 209: __nop();
 14995  1767  0000               	nop
 14996                           
 14997                           ;memory.c: 211: return (NVMDATL);
 14998  1768  0030               	movlb	16	; select bank16
 14999  1769  081C               	movf	28,w	;volatile
 15000  176A  0008               	return
 15001  176B                     __end_of_DATAEE_ReadByte:	
 15002                           
 15003                           	psect	text67
 15004  0B80                     __ptext67:	
 15005 ;; *************** function _EUSART_Initialize *****************
 15006 ;; Defined at:
 15007 ;;		line 75 in file "mcc_generated_files/eusart.c"
 15008 ;; Parameters:    Size  Location     Type
 15009 ;;		None
 15010 ;; Auto vars:     Size  Location     Type
 15011 ;;		None
 15012 ;; Return value:  Size  Location     Type
 15013 ;;                  1    wreg      void 
 15014 ;; Registers used:
 15015 ;;		wreg, status,2, status,0, pclath, cstack
 15016 ;; Tracked objects:
 15017 ;;		On entry : 0/0
 15018 ;;		On exit  : 0/0
 15019 ;;		Unchanged: 0/0
 15020 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 15021 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 15022 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 15023 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 15024 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 15025 ;;Total ram usage:        1 bytes
 15026 ;; Hardware stack levels used:    1
 15027 ;; Hardware stack levels required when called:    7
 15028 ;; This function calls:
 15029 ;;		_EUSART_SetRxInterruptHandler
 15030 ;;		_EUSART_SetTxInterruptHandler
 15031 ;; This function is called by:
 15032 ;;		_main
 15033 ;; This function uses a non-reentrant model
 15034 ;;
 15035                           
 15036                           
 15037                           ;psect for function _EUSART_Initialize
 15038  0B80                     _EUSART_Initialize:	
 15039                           
 15040                           ;eusart.c: 78: PIE3bits.RCIE = 0;
 15041                           
 15042                           ;incstack = 0
 15043                           ; Regs used in _EUSART_Initialize: [wreg+status,2+status,0+pclath+cstack]
 15044  0B80  002E               	movlb	14	; select bank14
 15045  0B81  1299               	bcf	25,5	;volatile
 15046                           
 15047                           ;eusart.c: 79: EUSART_SetRxInterruptHandler(EUSART_Receive_ISR);
 15048  0B82  306F               	movlw	low _EUSART_Receive_ISR
 15049  0B83  0020               	movlb	0	; select bank0
 15050  0B84  00D0               	movwf	EUSART_SetRxInterruptHandler@interruptHandler
 15051  0B85  3009               	movlw	high _EUSART_Receive_ISR
 15052  0B86  00D1               	movwf	EUSART_SetRxInterruptHandler@interruptHandler+1
 15053  0B87  3196  26BC  318B   	fcall	_EUSART_SetRxInterruptHandler
 15054                           
 15055                           ;eusart.c: 80: PIE3bits.TXIE = 0;
 15056  0B8A  002E               	movlb	14	; select bank14
 15057  0B8B  1219               	bcf	25,4	;volatile
 15058                           
 15059                           ;eusart.c: 81: EUSART_SetTxInterruptHandler(EUSART_Transmit_ISR);
 15060  0B8C  30DD               	movlw	low _EUSART_Transmit_ISR
 15061  0B8D  0020               	movlb	0	; select bank0
 15062  0B8E  00D0               	movwf	EUSART_SetTxInterruptHandler@interruptHandler
 15063  0B8F  3009               	movlw	high _EUSART_Transmit_ISR
 15064  0B90  00D1               	movwf	EUSART_SetTxInterruptHandler@interruptHandler+1
 15065  0B91  3196  26C5         	fcall	_EUSART_SetTxInterruptHandler
 15066                           
 15067                           ;eusart.c: 85: BAUD1CON = 0x08;
 15068  0B93  3008               	movlw	8
 15069  0B94  0022               	movlb	2	; select bank2
 15070  0B95  009F               	movwf	31	;volatile
 15071                           
 15072                           ;eusart.c: 88: RC1STA = 0x90;
 15073  0B96  3090               	movlw	144
 15074  0B97  009D               	movwf	29	;volatile
 15075                           
 15076                           ;eusart.c: 91: TX1STA = 0x24;
 15077  0B98  3024               	movlw	36
 15078  0B99  009E               	movwf	30	;volatile
 15079                           
 15080                           ;eusart.c: 94: SP1BRGL = 0xA0;
 15081  0B9A  30A0               	movlw	160
 15082  0B9B  009B               	movwf	27	;volatile
 15083                           
 15084                           ;eusart.c: 97: SP1BRGH = 0x01;
 15085  0B9C  3001               	movlw	1
 15086  0B9D  009C               	movwf	28	;volatile
 15087                           
 15088                           ;eusart.c: 101: eusartTxHead = 0;
 15089  0B9E  0020               	movlb	0	; select bank0
 15090  0B9F  01C9               	clrf	_eusartTxHead	;volatile
 15091                           
 15092                           ;eusart.c: 102: eusartTxTail = 0;
 15093  0BA0  01C8               	clrf	_eusartTxTail	;volatile
 15094                           
 15095                           ;eusart.c: 103: eusartTxBufferRemaining = sizeof(eusartTxBuffer);
 15096  0BA1  3008               	movlw	8
 15097  0BA2  00D2               	movwf	??_EUSART_Initialize
 15098  0BA3  0852               	movf	??_EUSART_Initialize,w
 15099  0BA4  00C7               	movwf	_eusartTxBufferRemaining	;volatile
 15100                           
 15101                           ;eusart.c: 105: eusartRxHead = 0;
 15102  0BA5  01C6               	clrf	_eusartRxHead	;volatile
 15103                           
 15104                           ;eusart.c: 106: eusartRxTail = 0;
 15105  0BA6  01C5               	clrf	_eusartRxTail	;volatile
 15106                           
 15107                           ;eusart.c: 107: eusartRxCount = 0;
 15108  0BA7  01C4               	clrf	_eusartRxCount	;volatile
 15109                           
 15110                           ;eusart.c: 110: PIE3bits.RCIE = 1;
 15111  0BA8  002E               	movlb	14	; select bank14
 15112  0BA9  1699               	bsf	25,5	;volatile
 15113  0BAA  0008               	return
 15114  0BAB                     __end_of_EUSART_Initialize:	
 15115                           
 15116                           	psect	text68
 15117  16C5                     __ptext68:	
 15118 ;; *************** function _EUSART_SetTxInterruptHandler *****************
 15119 ;; Defined at:
 15120 ;;		line 220 in file "mcc_generated_files/eusart.c"
 15121 ;; Parameters:    Size  Location     Type
 15122 ;;  interruptHan    2    0[BANK0 ] PTR FTN()void 
 15123 ;;		 -> EUSART_Transmit_ISR(1), 
 15124 ;; Auto vars:     Size  Location     Type
 15125 ;;		None
 15126 ;; Return value:  Size  Location     Type
 15127 ;;                  1    wreg      void 
 15128 ;; Registers used:
 15129 ;;		wreg
 15130 ;; Tracked objects:
 15131 ;;		On entry : 0/0
 15132 ;;		On exit  : 0/0
 15133 ;;		Unchanged: 0/0
 15134 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 15135 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 15136 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 15137 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 15138 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 15139 ;;Total ram usage:        2 bytes
 15140 ;; Hardware stack levels used:    1
 15141 ;; Hardware stack levels required when called:    6
 15142 ;; This function calls:
 15143 ;;		Nothing
 15144 ;; This function is called by:
 15145 ;;		_EUSART_Initialize
 15146 ;; This function uses a non-reentrant model
 15147 ;;
 15148                           
 15149                           
 15150                           ;psect for function _EUSART_SetTxInterruptHandler
 15151  16C5                     _EUSART_SetTxInterruptHandler:	
 15152                           
 15153                           ;eusart.c: 221: EUSART_TxDefaultInterruptHandler = interruptHandler;
 15154                           
 15155                           ;incstack = 0
 15156                           ; Regs used in _EUSART_SetTxInterruptHandler: [wreg]
 15157  16C5  0020               	movlb	0	; select bank0
 15158  16C6  0851               	movf	EUSART_SetTxInterruptHandler@interruptHandler+1,w
 15159  16C7  0021               	movlb	1	; select bank1
 15160  16C8  00DB               	movwf	(_EUSART_TxDefaultInterruptHandler+1)^(0+128)
 15161  16C9  0020               	movlb	0	; select bank0
 15162  16CA  0850               	movf	EUSART_SetTxInterruptHandler@interruptHandler,w
 15163  16CB  0021               	movlb	1	; select bank1
 15164  16CC  00DA               	movwf	_EUSART_TxDefaultInterruptHandler^(0+128)
 15165  16CD  0008               	return
 15166  16CE                     __end_of_EUSART_SetTxInterruptHandler:	
 15167                           
 15168                           	psect	text69
 15169  16BC                     __ptext69:	
 15170 ;; *************** function _EUSART_SetRxInterruptHandler *****************
 15171 ;; Defined at:
 15172 ;;		line 224 in file "mcc_generated_files/eusart.c"
 15173 ;; Parameters:    Size  Location     Type
 15174 ;;  interruptHan    2    0[BANK0 ] PTR FTN()void 
 15175 ;;		 -> EUSART_Receive_ISR(1), 
 15176 ;; Auto vars:     Size  Location     Type
 15177 ;;		None
 15178 ;; Return value:  Size  Location     Type
 15179 ;;                  1    wreg      void 
 15180 ;; Registers used:
 15181 ;;		wreg
 15182 ;; Tracked objects:
 15183 ;;		On entry : 0/0
 15184 ;;		On exit  : 0/0
 15185 ;;		Unchanged: 0/0
 15186 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 15187 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 15188 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 15189 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 15190 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 15191 ;;Total ram usage:        2 bytes
 15192 ;; Hardware stack levels used:    1
 15193 ;; Hardware stack levels required when called:    6
 15194 ;; This function calls:
 15195 ;;		Nothing
 15196 ;; This function is called by:
 15197 ;;		_EUSART_Initialize
 15198 ;; This function uses a non-reentrant model
 15199 ;;
 15200                           
 15201                           
 15202                           ;psect for function _EUSART_SetRxInterruptHandler
 15203  16BC                     _EUSART_SetRxInterruptHandler:	
 15204                           
 15205                           ;eusart.c: 225: EUSART_RxDefaultInterruptHandler = interruptHandler;
 15206                           
 15207                           ;incstack = 0
 15208                           ; Regs used in _EUSART_SetRxInterruptHandler: [wreg]
 15209  16BC  0020               	movlb	0	; select bank0
 15210  16BD  0851               	movf	EUSART_SetRxInterruptHandler@interruptHandler+1,w
 15211  16BE  0021               	movlb	1	; select bank1
 15212  16BF  00D9               	movwf	(_EUSART_RxDefaultInterruptHandler+1)^(0+128)
 15213  16C0  0020               	movlb	0	; select bank0
 15214  16C1  0850               	movf	EUSART_SetRxInterruptHandler@interruptHandler,w
 15215  16C2  0021               	movlb	1	; select bank1
 15216  16C3  00D8               	movwf	_EUSART_RxDefaultInterruptHandler^(0+128)
 15217  16C4  0008               	return
 15218  16C5                     __end_of_EUSART_SetRxInterruptHandler:	
 15219                           
 15220                           	psect	intentry
 15221  0004                     __pintentry:	
 15222 ;; *************** function _INTERRUPT_InterruptManager *****************
 15223 ;; Defined at:
 15224 ;;		line 52 in file "mcc_generated_files/interrupt_manager.c"
 15225 ;; Parameters:    Size  Location     Type
 15226 ;;		None
 15227 ;; Auto vars:     Size  Location     Type
 15228 ;;		None
 15229 ;; Return value:  Size  Location     Type
 15230 ;;                  1    wreg      void 
 15231 ;; Registers used:
 15232 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15233 ;; Tracked objects:
 15234 ;;		On entry : 0/0
 15235 ;;		On exit  : 0/0
 15236 ;;		Unchanged: 0/0
 15237 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 15238 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 15239 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 15240 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 15241 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 15242 ;;Total ram usage:        0 bytes
 15243 ;; Hardware stack levels used:    1
 15244 ;; Hardware stack levels required when called:    5
 15245 ;; This function calls:
 15246 ;;		Absolute function
 15247 ;;		_ADCC_ThresholdISR_mTouch
 15248 ;;		_EUSART_Receive_ISR
 15249 ;;		_EUSART_Transmit_ISR
 15250 ;;		_TMR0_ISR
 15251 ;;		_TMR1_ISR
 15252 ;; This function is called by:
 15253 ;;		Interrupt level 1
 15254 ;; This function uses a non-reentrant model
 15255 ;;
 15256                           
 15257  0004                     _INTERRUPT_InterruptManager:	
 15258                           
 15259                           ;incstack = 0
 15260  0004  147E               	bsf	126,0	;set compiler interrupt flag (level 1)
 15261                           
 15262                           ; Regs used in _INTERRUPT_InterruptManager: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 15263  0005  3180               	pagesel	$
 15264                           
 15265                           ;interrupt_manager.c: 55: if(PIE0bits.TMR0IE == 1 && PIR0bits.TMR0IF == 1)
 15266  0006  002E               	movlb	14	; select bank14
 15267  0007  1A96               	btfsc	22,5	;volatile
 15268  0008  1E8C               	btfss	12,5	;volatile
 15269  0009  280E               	goto	i1l691
 15270                           
 15271                           ;interrupt_manager.c: 56: {;interrupt_manager.c: 57: TMR0_ISR();
 15272  000A  3197  27B9  3180   	fcall	_TMR0_ISR
 15273                           
 15274                           ;interrupt_manager.c: 58: }
 15275  000D  2830               	goto	i1l703
 15276  000E                     i1l691:	
 15277                           
 15278                           ;interrupt_manager.c: 59: else if(INTCONbits.PEIE == 1)
 15279  000E  1F0B               	btfss	11,6	;volatile
 15280  000F  2830               	goto	i1l703
 15281                           
 15282                           ;interrupt_manager.c: 60: {;interrupt_manager.c: 61: if(PIE3bits.TXIE == 1 && PIR3bits.T
      +                          XIF == 1)
 15283  0010  1A19               	btfsc	25,4	;volatile
 15284  0011  1E0F               	btfss	15,4	;volatile
 15285  0012  281A               	goto	i1l694
 15286                           
 15287                           ;interrupt_manager.c: 62: {;interrupt_manager.c: 63: EUSART_TxDefaultInterruptHandler();
 15288  0013  0021               	movlb	1	; select bank1
 15289  0014  085B               	movf	(_EUSART_TxDefaultInterruptHandler+1)^(0+128),w
 15290  0015  008A               	movwf	10
 15291  0016  085A               	movf	_EUSART_TxDefaultInterruptHandler^(0+128),w
 15292  0017  000A               	callw
 15293  0018  3180               	pagesel	$
 15294                           
 15295                           ;interrupt_manager.c: 64: }
 15296  0019  2830               	goto	i1l703
 15297  001A                     i1l694:	
 15298                           
 15299                           ;interrupt_manager.c: 65: else if(PIE3bits.RCIE == 1 && PIR3bits.RCIF == 1)
 15300  001A  1A99               	btfsc	25,5	;volatile
 15301  001B  1E8F               	btfss	15,5	;volatile
 15302  001C  2824               	goto	i1l696
 15303                           
 15304                           ;interrupt_manager.c: 66: {;interrupt_manager.c: 67: EUSART_RxDefaultInterruptHandler();
 15305  001D  0021               	movlb	1	; select bank1
 15306  001E  0859               	movf	(_EUSART_RxDefaultInterruptHandler+1)^(0+128),w
 15307  001F  008A               	movwf	10
 15308  0020  0858               	movf	_EUSART_RxDefaultInterruptHandler^(0+128),w
 15309  0021  000A               	callw
 15310  0022  3180               	pagesel	$
 15311                           
 15312                           ;interrupt_manager.c: 68: }
 15313  0023  2830               	goto	i1l703
 15314  0024                     i1l696:	
 15315                           
 15316                           ;interrupt_manager.c: 69: else if(PIE1bits.ADTIE == 1 && PIR1bits.ADTIF == 1)
 15317  0024  1897               	btfsc	23,1	;volatile
 15318  0025  1C8D               	btfss	13,1	;volatile
 15319  0026  282B               	goto	i1l698
 15320                           
 15321                           ;interrupt_manager.c: 70: {;interrupt_manager.c: 71: ADCC_ThresholdISR_mTouch();
 15322  0027  3196  2686  3180   	fcall	_ADCC_ThresholdISR_mTouch
 15323                           
 15324                           ;interrupt_manager.c: 72: }
 15325  002A  2830               	goto	i1l703
 15326  002B                     i1l698:	
 15327                           
 15328                           ;interrupt_manager.c: 73: else if(PIE4bits.TMR1IE == 1 && PIR4bits.TMR1IF == 1)
 15329  002B  181A               	btfsc	26,0	;volatile
 15330  002C  1C10               	btfss	16,0	;volatile
 15331  002D  2830               	goto	i1l703
 15332                           
 15333                           ;interrupt_manager.c: 74: {;interrupt_manager.c: 75: TMR1_ISR();
 15334  002E  3188  2054         	fcall	_TMR1_ISR
 15335  0030                     i1l703:	
 15336                           ;interrupt_manager.c: 76: }
 15337                           
 15338  0030  107E               	bcf	126,0	;clear compiler interrupt flag (level 1)
 15339  0031  0009               	retfie
 15340  0032                     __end_of_INTERRUPT_InterruptManager:	
 15341                           
 15342                           	psect	text71
 15343  0854                     __ptext71:	
 15344 ;; *************** function _TMR1_ISR *****************
 15345 ;; Defined at:
 15346 ;;		line 164 in file "mcc_generated_files/tmr1.c"
 15347 ;; Parameters:    Size  Location     Type
 15348 ;;		None
 15349 ;; Auto vars:     Size  Location     Type
 15350 ;;		None
 15351 ;; Return value:  Size  Location     Type
 15352 ;;                  1    wreg      void 
 15353 ;; Registers used:
 15354 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15355 ;; Tracked objects:
 15356 ;;		On entry : 0/0
 15357 ;;		On exit  : 0/0
 15358 ;;		Unchanged: 0/0
 15359 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 15360 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 15361 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 15362 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 15363 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 15364 ;;Total ram usage:        0 bytes
 15365 ;; Hardware stack levels used:    1
 15366 ;; Hardware stack levels required when called:    2
 15367 ;; This function calls:
 15368 ;;		Absolute function
 15369 ;;		_TMR1_DefaultInterruptHandler
 15370 ;;		_TMR1_WriteTimer
 15371 ;;		_v_seg_display
 15372 ;; This function is called by:
 15373 ;;		_INTERRUPT_InterruptManager
 15374 ;; This function uses a non-reentrant model
 15375 ;;
 15376                           
 15377                           
 15378                           ;psect for function _TMR1_ISR
 15379  0854                     _TMR1_ISR:	
 15380                           
 15381                           ;tmr1.c: 168: PIR4bits.TMR1IF = 0;
 15382                           
 15383                           ;incstack = 0
 15384                           ; Regs used in _TMR1_ISR: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 15385  0854  002E               	movlb	14	; select bank14
 15386  0855  1010               	bcf	16,0	;volatile
 15387                           
 15388                           ;tmr1.c: 169: TMR1_WriteTimer(timer1ReloadVal);
 15389  0856  0020               	movlb	0	; select bank0
 15390  0857  082B               	movf	_timer1ReloadVal+1,w	;volatile
 15391  0858  00F1               	movwf	TMR1_WriteTimer@timerVal+1
 15392  0859  082A               	movf	_timer1ReloadVal,w	;volatile
 15393  085A  00F0               	movwf	TMR1_WriteTimer@timerVal
 15394  085B  3197  274D  3188   	fcall	_TMR1_WriteTimer
 15395                           
 15396                           ;tmr1.c: 171: if(TMR1_InterruptHandler)
 15397  085E  0020               	movlb	0	; select bank0
 15398  085F  0828               	movf	_TMR1_InterruptHandler,w
 15399  0860  0429               	iorwf	_TMR1_InterruptHandler+1,w
 15400  0861  1903               	btfsc	3,2
 15401  0862  0008               	return
 15402                           
 15403                           ;tmr1.c: 172: {;tmr1.c: 173: TMR1_InterruptHandler();
 15404  0863  0829               	movf	_TMR1_InterruptHandler+1,w
 15405  0864  008A               	movwf	10
 15406  0865  0828               	movf	_TMR1_InterruptHandler,w
 15407  0866  000A               	callw
 15408  0867  3188               	pagesel	$
 15409  0868  0008               	return
 15410  0869                     __end_of_TMR1_ISR:	
 15411                           
 15412                           	psect	text72
 15413  0800                     __ptext72:	
 15414 ;; *************** function _TMR1_DefaultInterruptHandler *****************
 15415 ;; Defined at:
 15416 ;;		line 182 in file "mcc_generated_files/tmr1.c"
 15417 ;; Parameters:    Size  Location     Type
 15418 ;;		None
 15419 ;; Auto vars:     Size  Location     Type
 15420 ;;		None
 15421 ;; Return value:  Size  Location     Type
 15422 ;;                  1    wreg      void 
 15423 ;; Registers used:
 15424 ;;		None
 15425 ;; Tracked objects:
 15426 ;;		On entry : 0/0
 15427 ;;		On exit  : 0/0
 15428 ;;		Unchanged: 0/0
 15429 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 15430 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 15431 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 15432 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 15433 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 15434 ;;Total ram usage:        0 bytes
 15435 ;; Hardware stack levels used:    1
 15436 ;; This function calls:
 15437 ;;		Nothing
 15438 ;; This function is called by:
 15439 ;;		_TMR1_Initialize
 15440 ;;		_TMR1_ISR
 15441 ;; This function uses a non-reentrant model
 15442 ;;
 15443                           
 15444                           
 15445                           ;psect for function _TMR1_DefaultInterruptHandler
 15446  0800                     _TMR1_DefaultInterruptHandler:	
 15447                           
 15448                           ;incstack = 0
 15449                           ; Regs used in _TMR1_DefaultInterruptHandler: []
 15450  0800  0008               	return
 15451  0801                     __end_of_TMR1_DefaultInterruptHandler:	
 15452                           
 15453                           	psect	text73
 15454  0E03                     __ptext73:	
 15455 ;; *************** function _v_seg_display *****************
 15456 ;; Defined at:
 15457 ;;		line 153 in file "main.c"
 15458 ;; Parameters:    Size  Location     Type
 15459 ;;		None
 15460 ;; Auto vars:     Size  Location     Type
 15461 ;;		None
 15462 ;; Return value:  Size  Location     Type
 15463 ;;                  1    wreg      void 
 15464 ;; Registers used:
 15465 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15466 ;; Tracked objects:
 15467 ;;		On entry : 0/0
 15468 ;;		On exit  : 0/0
 15469 ;;		Unchanged: 0/0
 15470 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 15471 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 15472 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 15473 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 15474 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 15475 ;;Total ram usage:        1 bytes
 15476 ;; Hardware stack levels used:    1
 15477 ;; Hardware stack levels required when called:    1
 15478 ;; This function calls:
 15479 ;;		i1_MTOUCH_Button_isPressed
 15480 ;; This function is called by:
 15481 ;;		_main
 15482 ;;		_TMR1_ISR
 15483 ;; This function uses a non-reentrant model
 15484 ;;
 15485                           
 15486                           
 15487                           ;psect for function _v_seg_display
 15488  0E03                     _v_seg_display:	
 15489                           
 15490                           ;main.c: 155: if (u8_TouchDelay && !MTOUCH_Button_isPressed(K1) && !MTOUCH_Button_isPres
      +                          sed(K2) && !MTOUCH_Button_isPressed(K3)) {
 15491                           
 15492                           ;incstack = 0
 15493                           ; Regs used in _v_seg_display: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 15494  0E03  0020               	movlb	0	; select bank0
 15495  0E04  083D               	movf	_u8_TouchDelay,w
 15496  0E05  1903               	btfsc	3,2
 15497  0E06  2E1F               	goto	i1l1145
 15498  0E07  3000               	movlw	0
 15499  0E08  3189  218A  318E   	fcall	i1_MTOUCH_Button_isPressed
 15500  0E0B  3A00               	xorlw	0
 15501  0E0C  1D03               	skipz
 15502  0E0D  2E1F               	goto	i1l1145
 15503  0E0E  3001               	movlw	1
 15504  0E0F  3189  218A  318E   	fcall	i1_MTOUCH_Button_isPressed
 15505  0E12  3A00               	xorlw	0
 15506  0E13  1D03               	skipz
 15507  0E14  2E1F               	goto	i1l1145
 15508  0E15  3002               	movlw	2
 15509  0E16  3189  218A  318E   	fcall	i1_MTOUCH_Button_isPressed
 15510  0E19  3A00               	xorlw	0
 15511  0E1A  1D03               	skipz
 15512  0E1B  2E1F               	goto	i1l1145
 15513                           
 15514                           ;main.c: 156: u8_TouchDelay--;
 15515  0E1C  3001               	movlw	1
 15516  0E1D  0020               	movlb	0	; select bank0
 15517  0E1E  02BD               	subwf	_u8_TouchDelay,f
 15518  0E1F                     i1l1145:	
 15519                           
 15520                           ;main.c: 157: };main.c: 160: if (u16_SLEEP_DelayCount) {
 15521  0E1F  0020               	movlb	0	; select bank0
 15522  0E20  0822               	movf	_u16_SLEEP_DelayCount,w
 15523  0E21  0423               	iorwf	_u16_SLEEP_DelayCount+1,w
 15524  0E22  1903               	btfsc	3,2
 15525  0E23  2E57               	goto	i1l4736
 15526                           
 15527                           ;main.c: 162: LATB = 0xff;
 15528  0E24  30FF               	movlw	255
 15529  0E25  0097               	movwf	23	;volatile
 15530  0E26  1298               	bcf	24,5	;volatile
 15531  0E27  1218               	bcf	24,4	;volatile
 15532  0E28  1198               	bcf	24,3	;volatile
 15533  0E29  1118               	bcf	24,2	;volatile
 15534  0E2A  2E3F               	goto	i1l4728
 15535  0E2B                     i1l1157:	
 15536                           ;main.c: 171: do { LATCbits.LATC5 = 1; } while(0);
 15537                           
 15538  0E2B  1698               	bsf	24,5	;volatile
 15539                           
 15540                           ;main.c: 172: LATB = u8_seg[u8_DIG1];
 15541  0E2C  0843               	movf	_u8_DIG1,w
 15542  0E2D  2E33               	goto	L17
 15543  0E2E                     i1l1161:	
 15544                           ;main.c: 175: do { LATCbits.LATC4 = 1; } while(0);
 15545                           
 15546                           ;main.c: 173: break;
 15547                           
 15548  0E2E  1618               	bsf	24,4	;volatile
 15549                           
 15550                           ;main.c: 176: LATB = u8_seg[u8_DIG2];
 15551  0E2F  0842               	movf	_u8_DIG2,w
 15552  0E30  2E33               	goto	L17
 15553  0E31                     i1l1164:	
 15554                           ;main.c: 179: do { LATCbits.LATC3 = 1; } while(0);
 15555                           
 15556                           ;main.c: 177: break;
 15557                           
 15558  0E31  1598               	bsf	24,3	;volatile
 15559                           
 15560                           ;main.c: 180: LATB = u8_seg[u8_DIG3];
 15561  0E32  0841               	movf	_u8_DIG3,w
 15562  0E33                     L17:	
 15563  0E33  3E00               	addlw	low (_u8_seg| (0+32768))
 15564  0E34  0084               	movwf	4
 15565  0E35  3098               	movlw	high (_u8_seg| (0+32768))
 15566  0E36  1803               	skipnc
 15567  0E37  3E01               	addlw	1
 15568  0E38  0085               	movwf	5
 15569  0E39  0800               	movf	0,w	;code access
 15570  0E3A  2E3D               	goto	L18
 15571  0E3B                     i1l1167:	
 15572                           ;main.c: 183: do { LATCbits.LATC2 = 1; } while(0);
 15573                           
 15574                           ;main.c: 181: break;
 15575                           
 15576  0E3B  1518               	bsf	24,2	;volatile
 15577                           
 15578                           ;main.c: 184: LATB = u8_IND_LEV_KEY;
 15579  0E3C  0840               	movf	_u8_IND_LEV_KEY,w
 15580  0E3D                     L18:	
 15581  0E3D  0097               	movwf	23	;volatile
 15582                           
 15583                           ;main.c: 185: break;
 15584  0E3E  2E4D               	goto	i1l4730
 15585  0E3F                     i1l4728:	
 15586  0E3F  083F               	movf	_u8_DIS_Channel,w
 15587                           
 15588                           ; Switch size 1, requested type "simple"
 15589                           ; Number of cases is 4, Range of values is 0 to 9
 15590                           ; switch strategies available:
 15591                           ; Name         Instructions Cycles
 15592                           ; simple_byte           13     7 (average)
 15593                           ; direct_byte           26     6 (fixed)
 15594                           ; jumptable            260     6 (fixed)
 15595                           ;	Chosen strategy is simple_byte
 15596  0E40  3A00               	xorlw	0	; case 0
 15597  0E41  1903               	skipnz
 15598  0E42  2E2B               	goto	i1l1157
 15599  0E43  3A03               	xorlw	3	; case 3
 15600  0E44  1903               	skipnz
 15601  0E45  2E2E               	goto	i1l1161
 15602  0E46  3A05               	xorlw	5	; case 6
 15603  0E47  1903               	skipnz
 15604  0E48  2E31               	goto	i1l1164
 15605  0E49  3A0F               	xorlw	15	; case 9
 15606  0E4A  1903               	skipnz
 15607  0E4B  2E3B               	goto	i1l1167
 15608  0E4C  2E4D               	goto	i1l4730
 15609  0E4D                     i1l4730:	
 15610                           
 15611                           ;main.c: 188: u8_DIS_Channel++;
 15612  0E4D  3001               	movlw	1
 15613  0E4E  00F2               	movwf	??_v_seg_display
 15614  0E4F  0872               	movf	??_v_seg_display,w
 15615  0E50  07BF               	addwf	_u8_DIS_Channel,f
 15616                           
 15617                           ;main.c: 190: if (u8_DIS_Channel >= 12) {
 15618  0E51  300C               	movlw	12
 15619  0E52  023F               	subwf	_u8_DIS_Channel,w
 15620  0E53  1C03               	skipc
 15621  0E54  0008               	return
 15622                           
 15623                           ;main.c: 191: u8_DIS_Channel = 0;
 15624  0E55  01BF               	clrf	_u8_DIS_Channel
 15625  0E56  0008               	return
 15626  0E57                     i1l4736:	
 15627                           
 15628                           ;main.c: 195: LATB = 0x00;
 15629  0E57  0197               	clrf	23	;volatile
 15630  0E58  1298               	bcf	24,5	;volatile
 15631  0E59  1218               	bcf	24,4	;volatile
 15632  0E5A  1198               	bcf	24,3	;volatile
 15633  0E5B  1118               	bcf	24,2	;volatile
 15634  0E5C  0008               	return
 15635  0E5D                     __end_of_v_seg_display:	
 15636                           
 15637                           	psect	text74
 15638  174D                     __ptext74:	
 15639 ;; *************** function _TMR1_WriteTimer *****************
 15640 ;; Defined at:
 15641 ;;		line 127 in file "mcc_generated_files/tmr1.c"
 15642 ;; Parameters:    Size  Location     Type
 15643 ;;  timerVal        2    0[COMMON] unsigned int 
 15644 ;; Auto vars:     Size  Location     Type
 15645 ;;		None
 15646 ;; Return value:  Size  Location     Type
 15647 ;;                  1    wreg      void 
 15648 ;; Registers used:
 15649 ;;		wreg, status,2
 15650 ;; Tracked objects:
 15651 ;;		On entry : 0/0
 15652 ;;		On exit  : 0/0
 15653 ;;		Unchanged: 0/0
 15654 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 15655 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 15656 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 15657 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 15658 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 15659 ;;Total ram usage:        2 bytes
 15660 ;; Hardware stack levels used:    1
 15661 ;; This function calls:
 15662 ;;		Nothing
 15663 ;; This function is called by:
 15664 ;;		_TMR1_ISR
 15665 ;;		_TMR1_Reload
 15666 ;; This function uses a non-reentrant model
 15667 ;;
 15668                           
 15669                           
 15670                           ;psect for function _TMR1_WriteTimer
 15671  174D                     _TMR1_WriteTimer:	
 15672                           
 15673                           ;tmr1.c: 129: if (T1CONbits.nT1SYNC == 1)
 15674                           
 15675                           ;incstack = 0
 15676                           ; Regs used in _TMR1_WriteTimer: [wreg+status,2]
 15677  174D  0024               	movlb	4	; select bank4
 15678  174E  1D0E               	btfss	14,2	;volatile
 15679  174F  2F57               	goto	i1l4534
 15680                           
 15681                           ;tmr1.c: 130: {;tmr1.c: 132: T1CONbits.TMR1ON = 0;
 15682  1750  100E               	bcf	14,0	;volatile
 15683                           
 15684                           ;tmr1.c: 135: TMR1H = (timerVal >> 8);
 15685  1751  0871               	movf	TMR1_WriteTimer@timerVal+1,w
 15686  1752  008D               	movwf	13	;volatile
 15687                           
 15688                           ;tmr1.c: 136: TMR1L = timerVal;
 15689  1753  0870               	movf	TMR1_WriteTimer@timerVal,w
 15690  1754  008C               	movwf	12	;volatile
 15691                           
 15692                           ;tmr1.c: 139: T1CONbits.TMR1ON =1;
 15693  1755  140E               	bsf	14,0	;volatile
 15694                           
 15695                           ;tmr1.c: 140: }
 15696  1756  0008               	return
 15697  1757                     i1l4534:	
 15698                           
 15699                           ;tmr1.c: 141: else;tmr1.c: 142: {;tmr1.c: 144: TMR1H = (timerVal >> 8);
 15700  1757  0871               	movf	TMR1_WriteTimer@timerVal+1,w
 15701  1758  008D               	movwf	13	;volatile
 15702                           
 15703                           ;tmr1.c: 145: TMR1L = timerVal;
 15704  1759  0870               	movf	TMR1_WriteTimer@timerVal,w
 15705  175A  008C               	movwf	12	;volatile
 15706  175B  0008               	return
 15707  175C                     __end_of_TMR1_WriteTimer:	
 15708                           
 15709                           	psect	text75
 15710  17B9                     __ptext75:	
 15711 ;; *************** function _TMR0_ISR *****************
 15712 ;; Defined at:
 15713 ;;		line 134 in file "mcc_generated_files/tmr0.c"
 15714 ;; Parameters:    Size  Location     Type
 15715 ;;		None
 15716 ;; Auto vars:     Size  Location     Type
 15717 ;;		None
 15718 ;; Return value:  Size  Location     Type
 15719 ;;                  1    wreg      void 
 15720 ;; Registers used:
 15721 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15722 ;; Tracked objects:
 15723 ;;		On entry : 0/0
 15724 ;;		On exit  : 0/0
 15725 ;;		Unchanged: 0/0
 15726 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 15727 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 15728 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 15729 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 15730 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 15731 ;;Total ram usage:        0 bytes
 15732 ;; Hardware stack levels used:    1
 15733 ;; Hardware stack levels required when called:    2
 15734 ;; This function calls:
 15735 ;;		Absolute function
 15736 ;;		_TMR0_DefaultInterruptHandler
 15737 ;;		_v_service_routine
 15738 ;; This function is called by:
 15739 ;;		_INTERRUPT_InterruptManager
 15740 ;; This function uses a non-reentrant model
 15741 ;;
 15742                           
 15743                           
 15744                           ;psect for function _TMR0_ISR
 15745  17B9                     _TMR0_ISR:	
 15746                           
 15747                           ;tmr0.c: 137: PIR0bits.TMR0IF = 0;
 15748                           
 15749                           ;incstack = 0
 15750                           ; Regs used in _TMR0_ISR: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 15751  17B9  002E               	movlb	14	; select bank14
 15752  17BA  128C               	bcf	12,5	;volatile
 15753                           
 15754                           ;tmr0.c: 139: TMR0H = timer0ReloadVal16bit >> 8;
 15755  17BB  0020               	movlb	0	; select bank0
 15756  17BC  0827               	movf	_timer0ReloadVal16bit+1,w	;volatile
 15757  17BD  009D               	movwf	29	;volatile
 15758                           
 15759                           ;tmr0.c: 140: TMR0L = (uint8_t) timer0ReloadVal16bit;
 15760  17BE  0826               	movf	_timer0ReloadVal16bit,w	;volatile
 15761  17BF  009C               	movwf	28	;volatile
 15762                           
 15763                           ;tmr0.c: 142: if(TMR0_InterruptHandler)
 15764  17C0  0824               	movf	_TMR0_InterruptHandler,w
 15765  17C1  0425               	iorwf	_TMR0_InterruptHandler+1,w
 15766  17C2  1903               	btfsc	3,2
 15767  17C3  0008               	return
 15768                           
 15769                           ;tmr0.c: 143: {;tmr0.c: 144: TMR0_InterruptHandler();
 15770  17C4  0825               	movf	_TMR0_InterruptHandler+1,w
 15771  17C5  008A               	movwf	10
 15772  17C6  0824               	movf	_TMR0_InterruptHandler,w
 15773  17C7  000A               	callw
 15774  17C8  3197               	pagesel	$
 15775  17C9  0008               	return
 15776  17CA                     __end_of_TMR0_ISR:	
 15777                           
 15778                           	psect	text76
 15779  167F                     __ptext76:	
 15780 ;; *************** function _TMR0_DefaultInterruptHandler *****************
 15781 ;; Defined at:
 15782 ;;		line 155 in file "mcc_generated_files/tmr0.c"
 15783 ;; Parameters:    Size  Location     Type
 15784 ;;		None
 15785 ;; Auto vars:     Size  Location     Type
 15786 ;;		None
 15787 ;; Return value:  Size  Location     Type
 15788 ;;                  1    wreg      void 
 15789 ;; Registers used:
 15790 ;;		None
 15791 ;; Tracked objects:
 15792 ;;		On entry : 0/0
 15793 ;;		On exit  : 0/0
 15794 ;;		Unchanged: 0/0
 15795 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 15796 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 15797 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 15798 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 15799 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 15800 ;;Total ram usage:        0 bytes
 15801 ;; Hardware stack levels used:    1
 15802 ;; This function calls:
 15803 ;;		Nothing
 15804 ;; This function is called by:
 15805 ;;		_TMR0_Initialize
 15806 ;;		_TMR0_ISR
 15807 ;; This function uses a non-reentrant model
 15808 ;;
 15809                           
 15810                           
 15811                           ;psect for function _TMR0_DefaultInterruptHandler
 15812  167F                     _TMR0_DefaultInterruptHandler:	
 15813                           
 15814                           ;incstack = 0
 15815                           ; Regs used in _TMR0_DefaultInterruptHandler: []
 15816  167F  0008               	return
 15817  1680                     __end_of_TMR0_DefaultInterruptHandler:	
 15818                           
 15819                           	psect	text77
 15820  0DA9                     __ptext77:	
 15821 ;; *************** function _v_service_routine *****************
 15822 ;; Defined at:
 15823 ;;		line 105 in file "main.c"
 15824 ;; Parameters:    Size  Location     Type
 15825 ;;		None
 15826 ;; Auto vars:     Size  Location     Type
 15827 ;;		None
 15828 ;; Return value:  Size  Location     Type
 15829 ;;                  1    wreg      void 
 15830 ;; Registers used:
 15831 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15832 ;; Tracked objects:
 15833 ;;		On entry : 0/0
 15834 ;;		On exit  : 0/0
 15835 ;;		Unchanged: 0/0
 15836 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 15837 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 15838 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 15839 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 15840 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 15841 ;;Total ram usage:        1 bytes
 15842 ;; Hardware stack levels used:    1
 15843 ;; Hardware stack levels required when called:    1
 15844 ;; This function calls:
 15845 ;;		i1_MTOUCH_Button_isPressed
 15846 ;; This function is called by:
 15847 ;;		_main
 15848 ;;		_TMR0_ISR
 15849 ;; This function uses a non-reentrant model
 15850 ;;
 15851                           
 15852                           
 15853                           ;psect for function _v_service_routine
 15854  0DA9                     _v_service_routine:	
 15855                           
 15856                           ;main.c: 107: if (!u8_Tx_Status && u8_SuperCool_Status) {
 15857                           
 15858                           ;incstack = 0
 15859                           ; Regs used in _v_service_routine: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 15860  0DA9  0020               	movlb	0	; select bank0
 15861  0DAA  0832               	movf	_u8_Tx_Status,w
 15862  0DAB  1D03               	btfss	3,2
 15863  0DAC  2DB2               	goto	i1l4664
 15864  0DAD  0838               	movf	_u8_SuperCool_Status,w
 15865  0DAE  1903               	btfsc	3,2
 15866  0DAF  2DB2               	goto	i1l4664
 15867                           
 15868                           ;main.c: 108: u8_Tx_Status = 1;
 15869  0DB0  01B2               	clrf	_u8_Tx_Status
 15870  0DB1  0AB2               	incf	_u8_Tx_Status,f
 15871  0DB2                     i1l4664:	
 15872                           
 15873                           ;main.c: 109: };main.c: 112: if (u8_3sec_Count < 3 && MTOUCH_Button_isPressed(K3)) {
 15874  0DB2  3003               	movlw	3
 15875  0DB3  023E               	subwf	_u8_3sec_Count,w
 15876  0DB4  1803               	skipnc
 15877  0DB5  2DC3               	goto	i1l4670
 15878  0DB6  3002               	movlw	2
 15879  0DB7  3189  218A  318D   	fcall	i1_MTOUCH_Button_isPressed
 15880  0DBA  3A00               	xorlw	0
 15881  0DBB  1903               	skipnz
 15882  0DBC  2DC3               	goto	i1l4670
 15883                           
 15884                           ;main.c: 113: u8_3sec_Count++;
 15885  0DBD  3001               	movlw	1
 15886  0DBE  00F2               	movwf	??_v_service_routine
 15887  0DBF  0872               	movf	??_v_service_routine,w
 15888  0DC0  0020               	movlb	0	; select bank0
 15889  0DC1  07BE               	addwf	_u8_3sec_Count,f
 15890                           
 15891                           ;main.c: 114: } else if (!MTOUCH_Button_isPressed(K3)) {
 15892  0DC2  2DCC               	goto	i1l4674
 15893  0DC3                     i1l4670:	
 15894  0DC3  3002               	movlw	2
 15895  0DC4  3189  218A  318D   	fcall	i1_MTOUCH_Button_isPressed
 15896  0DC7  3A00               	xorlw	0
 15897  0DC8  1D03               	skipz
 15898  0DC9  2DCC               	goto	i1l4674
 15899                           
 15900                           ;main.c: 115: u8_3sec_Count = 0;
 15901  0DCA  0020               	movlb	0	; select bank0
 15902  0DCB  01BE               	clrf	_u8_3sec_Count
 15903  0DCC                     i1l4674:	
 15904                           
 15905                           ;main.c: 116: };main.c: 119: if (u16_SLEEP_DelayCount) {
 15906  0DCC  0020               	movlb	0	; select bank0
 15907  0DCD  0822               	movf	_u16_SLEEP_DelayCount,w
 15908  0DCE  0423               	iorwf	_u16_SLEEP_DelayCount+1,w
 15909  0DCF  1903               	btfsc	3,2
 15910  0DD0  2DD5               	goto	i1l4678
 15911                           
 15912                           ;main.c: 120: u16_SLEEP_DelayCount--;
 15913  0DD1  3001               	movlw	1
 15914  0DD2  02A2               	subwf	_u16_SLEEP_DelayCount,f
 15915  0DD3  3000               	movlw	0
 15916  0DD4  3BA3               	subwfb	_u16_SLEEP_DelayCount+1,f
 15917  0DD5                     i1l4678:	
 15918                           
 15919                           ;main.c: 121: };main.c: 124: if (u16_COMP_DelayCount) {
 15920  0DD5  0820               	movf	_u16_COMP_DelayCount,w
 15921  0DD6  0421               	iorwf	_u16_COMP_DelayCount+1,w
 15922  0DD7  1903               	btfsc	3,2
 15923  0DD8  2DDD               	goto	i1l4682
 15924                           
 15925                           ;main.c: 125: u16_COMP_DelayCount--;
 15926  0DD9  3001               	movlw	1
 15927  0DDA  02A0               	subwf	_u16_COMP_DelayCount,f
 15928  0DDB  3000               	movlw	0
 15929  0DDC  3BA1               	subwfb	_u16_COMP_DelayCount+1,f
 15930  0DDD                     i1l4682:	
 15931                           
 15932                           ;main.c: 126: };main.c: 129: if (u8_Timer_Countdown_Min && u8_COMP_Status) {
 15933  0DDD  083C               	movf	_u8_Timer_Countdown_Min,w
 15934  0DDE  1903               	btfsc	3,2
 15935  0DDF  2DF7               	goto	i1l4696
 15936  0DE0  0836               	movf	_u8_COMP_Status,w
 15937  0DE1  1903               	btfsc	3,2
 15938  0DE2  2DF7               	goto	i1l4696
 15939                           
 15940                           ;main.c: 130: u8_Timer_Countdown_Min--;
 15941  0DE3  3001               	movlw	1
 15942  0DE4  02BC               	subwf	_u8_Timer_Countdown_Min,f
 15943  0DE5  2DF7               	goto	i1l4696
 15944  0DE6                     i1l1133:	
 15945                           ;main.c: 136: do { LATCbits.LATC1 = 0; } while(0);
 15946                           
 15947  0DE6  1098               	bcf	24,1	;volatile
 15948  0DE7                     i1l4688:	
 15949                           
 15950                           ;main.c: 137: u8_COMP_Start = 0;
 15951  0DE7  01B0               	clrf	_u8_COMP_Start
 15952                           
 15953                           ;main.c: 138: break;
 15954  0DE8  0008               	return
 15955  0DE9                     i1l1137:	
 15956                           ;main.c: 140: do { LATCbits.LATC1 = 1; } while(0);
 15957                           
 15958  0DE9  1498               	bsf	24,1	;volatile
 15959                           
 15960                           ;main.c: 141: u8_COMP_Start = 1;
 15961  0DEA  01B0               	clrf	_u8_COMP_Start
 15962  0DEB  0AB0               	incf	_u8_COMP_Start,f
 15963                           
 15964                           ;main.c: 142: break;
 15965  0DEC  0008               	return
 15966  0DED                     i1l4690:	
 15967  0DED  1003               	clrc
 15968  0DEE  1C98               	btfss	24,1	;volatile
 15969  0DEF  1403               	setc
 15970  0DF0  1C03               	btfss	3,0
 15971  0DF1  2DF5               	goto	u368_20
 15972  0DF2  0020               	movlb	0	; select bank0
 15973  0DF3  1498               	bsf	24,1	;volatile
 15974  0DF4  2DE7               	goto	i1l4688
 15975  0DF5                     u368_20:	
 15976  0DF5  0020               	movlb	0	; select bank0
 15977  0DF6  2DE6               	goto	i1l1133
 15978  0DF7                     i1l4696:	
 15979  0DF7  0836               	movf	_u8_COMP_Status,w
 15980                           
 15981                           ; Switch size 1, requested type "simple"
 15982                           ; Number of cases is 3, Range of values is 0 to 2
 15983                           ; switch strategies available:
 15984                           ; Name         Instructions Cycles
 15985                           ; simple_byte           10     6 (average)
 15986                           ; direct_byte           12     6 (fixed)
 15987                           ; jumptable            260     6 (fixed)
 15988                           ;	Chosen strategy is simple_byte
 15989  0DF8  3A00               	xorlw	0	; case 0
 15990  0DF9  1903               	skipnz
 15991  0DFA  2DE6               	goto	i1l1133
 15992  0DFB  3A01               	xorlw	1	; case 1
 15993  0DFC  1903               	skipnz
 15994  0DFD  2DE9               	goto	i1l1137
 15995  0DFE  3A03               	xorlw	3	; case 2
 15996  0DFF  1903               	skipnz
 15997  0E00  2DED               	goto	i1l4690
 15998  0E01  2E02               	goto	i1l1142
 15999  0E02                     i1l1142:	
 16000  0E02  0008               	return
 16001  0E03                     __end_of_v_service_routine:	
 16002                           
 16003                           	psect	text78
 16004  098A                     __ptext78:	
 16005 ;; *************** function i1_MTOUCH_Button_isPressed *****************
 16006 ;; Defined at:
 16007 ;;		line 377 in file "mcc_generated_files/mtouch/mtouch_button.c"
 16008 ;; Parameters:    Size  Location     Type
 16009 ;;  name            1    wreg     enum E11678
 16010 ;; Auto vars:     Size  Location     Type
 16011 ;;  name            1    1[COMMON] enum E11678
 16012 ;; Return value:  Size  Location     Type
 16013 ;;                  1    wreg      unsigned char 
 16014 ;; Registers used:
 16015 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 16016 ;; Tracked objects:
 16017 ;;		On entry : 0/0
 16018 ;;		On exit  : 0/0
 16019 ;;		Unchanged: 0/0
 16020 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 16021 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 16022 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 16023 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 16024 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 16025 ;;Total ram usage:        2 bytes
 16026 ;; Hardware stack levels used:    1
 16027 ;; This function calls:
 16028 ;;		Nothing
 16029 ;; This function is called by:
 16030 ;;		_v_service_routine
 16031 ;;		_v_seg_display
 16032 ;; This function uses a non-reentrant model
 16033 ;;
 16034                           
 16035                           
 16036                           ;psect for function i1_MTOUCH_Button_isPressed
 16037  098A                     i1_MTOUCH_Button_isPressed:	
 16038                           
 16039                           ;incstack = 0
 16040                           ; Regs used in i1_MTOUCH_Button_isPressed: [wreg+fsr1l+fsr1h+status,2+status,0]
 16041                           ;i1MTOUCH_Button_isPressed@name stored from wreg
 16042  098A  00F1               	movwf	i1MTOUCH_Button_isPressed@name
 16043                           
 16044                           ;mtouch_button.c: 379: if(name < 3)
 16045  098B  3003               	movlw	3
 16046  098C  0271               	subwf	i1MTOUCH_Button_isPressed@name,w
 16047  098D  1803               	skipnc
 16048  098E  29A3               	goto	i1l4430
 16049                           
 16050                           ;mtouch_button.c: 380: return (bool)((mtouch_button[name].state == MTOUCH_BUTTON_STATE_p
      +                          ressed) ? 1 : 0);
 16051  098F  0871               	movf	i1MTOUCH_Button_isPressed@name,w
 16052  0990  00F0               	movwf	??i1_MTOUCH_Button_isPressed
 16053  0991  3003               	movlw	3
 16054  0992                     u341_25:	
 16055  0992  35F0               	lslf	??i1_MTOUCH_Button_isPressed,f
 16056  0993  3EFF               	addlw	-1
 16057  0994  1D03               	skipz
 16058  0995  2992               	goto	u341_25
 16059  0996  3570               	lslf	??i1_MTOUCH_Button_isPressed,w
 16060  0997  3EA2               	addlw	(low ((_mtouch_button| (0+256)+2)))& (0+255)
 16061  0998  0086               	movwf	6
 16062  0999  3001               	movlw	1	; select bank3/4
 16063  099A  0087               	movwf	7
 16064  099B  3002               	movlw	2
 16065  099C  0601               	xorwf	1,w
 16066  099D  1D03               	btfss	3,2
 16067  099E  29A1               	goto	u342_20
 16068  099F  3001               	movlw	1
 16069  09A0  0008               	return
 16070  09A1                     u342_20:	
 16071  09A1  3000               	movlw	0
 16072  09A2  0008               	return
 16073  09A3                     i1l4430:	
 16074                           
 16075                           ;mtouch_button.c: 381: else;mtouch_button.c: 382: return 0;
 16076  09A3  3000               	movlw	0
 16077  09A4  0008               	return
 16078  09A5                     __end_ofi1_MTOUCH_Button_isPressed:	
 16079                           
 16080                           	psect	text79
 16081  09DD                     __ptext79:	
 16082 ;; *************** function _EUSART_Transmit_ISR *****************
 16083 ;; Defined at:
 16084 ;;		line 181 in file "mcc_generated_files/eusart.c"
 16085 ;; Parameters:    Size  Location     Type
 16086 ;;		None
 16087 ;; Auto vars:     Size  Location     Type
 16088 ;;		None
 16089 ;; Return value:  Size  Location     Type
 16090 ;;                  1    wreg      void 
 16091 ;; Registers used:
 16092 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 16093 ;; Tracked objects:
 16094 ;;		On entry : 0/0
 16095 ;;		On exit  : 0/0
 16096 ;;		Unchanged: 0/0
 16097 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 16098 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 16099 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 16100 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 16101 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 16102 ;;Total ram usage:        1 bytes
 16103 ;; Hardware stack levels used:    1
 16104 ;; This function calls:
 16105 ;;		Nothing
 16106 ;; This function is called by:
 16107 ;;		_EUSART_Initialize
 16108 ;;		_INTERRUPT_InterruptManager
 16109 ;; This function uses a non-reentrant model
 16110 ;;
 16111                           
 16112                           
 16113                           ;psect for function _EUSART_Transmit_ISR
 16114  09DD                     _EUSART_Transmit_ISR:	
 16115                           
 16116                           ;eusart.c: 185: if(sizeof(eusartTxBuffer) > eusartTxBufferRemaining)
 16117                           
 16118                           ;incstack = 0
 16119                           ; Regs used in _EUSART_Transmit_ISR: [wreg+fsr1l+fsr1h+status,2+status,0]
 16120  09DD  3008               	movlw	8
 16121  09DE  0020               	movlb	0	; select bank0
 16122  09DF  0247               	subwf	_eusartTxBufferRemaining,w	;volatile
 16123  09E0  1803               	skipnc
 16124  09E1  29F7               	goto	i1l985
 16125                           
 16126                           ;eusart.c: 186: {;eusart.c: 187: TX1REG = eusartTxBuffer[eusartTxTail++];
 16127  09E2  0848               	movf	_eusartTxTail,w
 16128  09E3  3EC4               	addlw	(low (_eusartTxBuffer| 0))& (0+255)
 16129  09E4  0086               	movwf	6
 16130  09E5  0187               	clrf	7
 16131  09E6  0801               	movf	1,w
 16132  09E7  0022               	movlb	2	; select bank2
 16133  09E8  009A               	movwf	26	;volatile
 16134  09E9  3001               	movlw	1
 16135  09EA  00F0               	movwf	??_EUSART_Transmit_ISR
 16136  09EB  0870               	movf	??_EUSART_Transmit_ISR,w
 16137  09EC  0020               	movlb	0	; select bank0
 16138  09ED  07C8               	addwf	_eusartTxTail,f	;volatile
 16139                           
 16140                           ;eusart.c: 188: if(sizeof(eusartTxBuffer) <= eusartTxTail)
 16141  09EE  3008               	movlw	8
 16142  09EF  0248               	subwf	_eusartTxTail,w	;volatile
 16143  09F0  1803               	btfsc	3,0
 16144                           
 16145                           ;eusart.c: 189: {;eusart.c: 190: eusartTxTail = 0;
 16146  09F1  01C8               	clrf	_eusartTxTail	;volatile
 16147                           
 16148                           ;eusart.c: 191: };eusart.c: 192: eusartTxBufferRemaining++;
 16149  09F2  3001               	movlw	1
 16150  09F3  00F0               	movwf	??_EUSART_Transmit_ISR
 16151  09F4  0870               	movf	??_EUSART_Transmit_ISR,w
 16152  09F5  07C7               	addwf	_eusartTxBufferRemaining,f	;volatile
 16153                           
 16154                           ;eusart.c: 193: }
 16155  09F6  0008               	return
 16156  09F7                     i1l985:	
 16157                           
 16158                           ;eusart.c: 194: else;eusart.c: 195: {;eusart.c: 196: PIE3bits.TXIE = 0;
 16159  09F7  002E               	movlb	14	; select bank14
 16160  09F8  1219               	bcf	25,4	;volatile
 16161  09F9  0008               	return
 16162  09FA                     __end_of_EUSART_Transmit_ISR:	
 16163                           
 16164                           	psect	text80
 16165  096F                     __ptext80:	
 16166 ;; *************** function _EUSART_Receive_ISR *****************
 16167 ;; Defined at:
 16168 ;;		line 200 in file "mcc_generated_files/eusart.c"
 16169 ;; Parameters:    Size  Location     Type
 16170 ;;		None
 16171 ;; Auto vars:     Size  Location     Type
 16172 ;;		None
 16173 ;; Return value:  Size  Location     Type
 16174 ;;                  1    wreg      void 
 16175 ;; Registers used:
 16176 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 16177 ;; Tracked objects:
 16178 ;;		On entry : 0/0
 16179 ;;		On exit  : 0/0
 16180 ;;		Unchanged: 0/0
 16181 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 16182 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 16183 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 16184 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 16185 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 16186 ;;Total ram usage:        1 bytes
 16187 ;; Hardware stack levels used:    1
 16188 ;; This function calls:
 16189 ;;		Nothing
 16190 ;; This function is called by:
 16191 ;;		_EUSART_Initialize
 16192 ;;		_INTERRUPT_InterruptManager
 16193 ;; This function uses a non-reentrant model
 16194 ;;
 16195                           
 16196                           
 16197                           ;psect for function _EUSART_Receive_ISR
 16198  096F                     _EUSART_Receive_ISR:	
 16199                           
 16200                           ;eusart.c: 203: if(1 == RC1STAbits.OERR)
 16201                           
 16202                           ;incstack = 0
 16203                           ; Regs used in _EUSART_Receive_ISR: [wreg+fsr1l+fsr1h+status,2+status,0]
 16204  096F  0022               	movlb	2	; select bank2
 16205  0970  1C9D               	btfss	29,1	;volatile
 16206  0971  2974               	goto	i1l4882
 16207                           
 16208                           ;eusart.c: 204: {;eusart.c: 207: RC1STAbits.CREN = 0;
 16209  0972  121D               	bcf	29,4	;volatile
 16210                           
 16211                           ;eusart.c: 208: RC1STAbits.CREN = 1;
 16212  0973  161D               	bsf	29,4	;volatile
 16213  0974                     i1l4882:	
 16214                           
 16215                           ;eusart.c: 209: };eusart.c: 212: eusartRxBuffer[eusartRxHead++] = RC1REG;
 16216  0974  0819               	movf	25,w	;volatile
 16217  0975  00F0               	movwf	??_EUSART_Receive_ISR
 16218  0976  0020               	movlb	0	; select bank0
 16219  0977  0846               	movf	_eusartRxHead,w
 16220  0978  3EBC               	addlw	(low (_eusartRxBuffer| 0))& (0+255)
 16221  0979  0086               	movwf	6
 16222  097A  0187               	clrf	7
 16223  097B  0870               	movf	??_EUSART_Receive_ISR,w
 16224  097C  0081               	movwf	1
 16225  097D  3001               	movlw	1
 16226  097E  00F0               	movwf	??_EUSART_Receive_ISR
 16227  097F  0870               	movf	??_EUSART_Receive_ISR,w
 16228  0980  07C6               	addwf	_eusartRxHead,f	;volatile
 16229                           
 16230                           ;eusart.c: 213: if(sizeof(eusartRxBuffer) <= eusartRxHead)
 16231  0981  3008               	movlw	8
 16232  0982  0246               	subwf	_eusartRxHead,w	;volatile
 16233  0983  1803               	btfsc	3,0
 16234                           
 16235                           ;eusart.c: 214: {;eusart.c: 215: eusartRxHead = 0;
 16236  0984  01C6               	clrf	_eusartRxHead	;volatile
 16237                           
 16238                           ;eusart.c: 216: };eusart.c: 217: eusartRxCount++;
 16239  0985  3001               	movlw	1
 16240  0986  00F0               	movwf	??_EUSART_Receive_ISR
 16241  0987  0870               	movf	??_EUSART_Receive_ISR,w
 16242  0988  07C4               	addwf	_eusartRxCount,f	;volatile
 16243  0989  0008               	return
 16244  098A                     __end_of_EUSART_Receive_ISR:	
 16245                           
 16246                           	psect	text81
 16247  1686                     __ptext81:	
 16248 ;; *************** function _ADCC_ThresholdISR_mTouch *****************
 16249 ;; Defined at:
 16250 ;;		line 444 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
 16251 ;; Parameters:    Size  Location     Type
 16252 ;;		None
 16253 ;; Auto vars:     Size  Location     Type
 16254 ;;		None
 16255 ;; Return value:  Size  Location     Type
 16256 ;;                  1    wreg      void 
 16257 ;; Registers used:
 16258 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16259 ;; Tracked objects:
 16260 ;;		On entry : 0/0
 16261 ;;		On exit  : 0/0
 16262 ;;		Unchanged: 0/0
 16263 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 16264 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 16265 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 16266 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 16267 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 16268 ;;Total ram usage:        0 bytes
 16269 ;; Hardware stack levels used:    1
 16270 ;; Hardware stack levels required when called:    4
 16271 ;; This function calls:
 16272 ;;		_MTOUCH_Sensor_Service
 16273 ;; This function is called by:
 16274 ;;		_INTERRUPT_InterruptManager
 16275 ;; This function uses a non-reentrant model
 16276 ;;
 16277                           
 16278                           
 16279                           ;psect for function _ADCC_ThresholdISR_mTouch
 16280  1686                     _ADCC_ThresholdISR_mTouch:	
 16281                           
 16282                           ;mtouch_sensor.c: 446: PIR1bits.ADTIF = 0;
 16283                           
 16284                           ;incstack = 0
 16285                           ; Regs used in _ADCC_ThresholdISR_mTouch: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 16286  1686  002E               	movlb	14	; select bank14
 16287  1687  108D               	bcf	13,1	;volatile
 16288                           
 16289                           ;mtouch_sensor.c: 447: MTOUCH_Sensor_Service();
 16290  1688  318C  2444         	fcall	_MTOUCH_Sensor_Service
 16291  168A  0008               	return
 16292  168B                     __end_of_ADCC_ThresholdISR_mTouch:	
 16293                           
 16294                           	psect	text82
 16295  0C44                     __ptext82:	
 16296 ;; *************** function _MTOUCH_Sensor_Service *****************
 16297 ;; Defined at:
 16298 ;;		line 456 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
 16299 ;; Parameters:    Size  Location     Type
 16300 ;;		None
 16301 ;; Auto vars:     Size  Location     Type
 16302 ;;  sensor          1   13[COMMON] PTR struct .
 16303 ;;		 -> mtouch_sensor(27), 
 16304 ;; Return value:  Size  Location     Type
 16305 ;;                  1    wreg      void 
 16306 ;; Registers used:
 16307 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16308 ;; Tracked objects:
 16309 ;;		On entry : 0/0
 16310 ;;		On exit  : 0/0
 16311 ;;		Unchanged: 0/0
 16312 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 16313 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 16314 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 16315 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 16316 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 16317 ;;Total ram usage:        3 bytes
 16318 ;; Hardware stack levels used:    1
 16319 ;; Hardware stack levels required when called:    3
 16320 ;; This function calls:
 16321 ;;		_Sensor_autoCalibration
 16322 ;;		_Sensor_setSampled
 16323 ;;		i1_Sensor_SetTrisBit
 16324 ;;		i1_Sensor_isCalibrated
 16325 ;;		i1_Sensor_scheduleNextScan
 16326 ;;		i1___bmul
 16327 ;; This function is called by:
 16328 ;;		_ADCC_ThresholdISR_mTouch
 16329 ;; This function uses a non-reentrant model
 16330 ;;
 16331                           
 16332                           
 16333                           ;psect for function _MTOUCH_Sensor_Service
 16334  0C44                     _MTOUCH_Sensor_Service:	
 16335                           
 16336                           ;mtouch_sensor.c: 458: mtouch_sensor_t* sensor;;mtouch_sensor.c: 460: Sensor_SetTrisBit(
      +                          currentScanSensor,0);
 16337                           
 16338                           ;incstack = 0
 16339                           ; Regs used in _MTOUCH_Sensor_Service: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 16340  0C44  01F0               	clrf	i1Sensor_SetTrisBit@TrisBit
 16341  0C45  0020               	movlb	0	; select bank0
 16342  0C46  084E               	movf	_currentScanSensor,w
 16343  0C47  318A  229F  318C   	fcall	i1_Sensor_SetTrisBit
 16344                           
 16345                           ;mtouch_sensor.c: 462: if(scanInterrupted)
 16346  0C4A  0020               	movlb	0	; select bank0
 16347  0C4B  084C               	movf	_scanInterrupted,w	;volatile
 16348  0C4C  1903               	btfsc	3,2
 16349  0C4D  2C51               	goto	i1l232
 16350                           
 16351                           ;mtouch_sensor.c: 463: {;mtouch_sensor.c: 464: ADCON0bits.ADON = 0;
 16352  0C4E  0021               	movlb	1	; select bank1
 16353  0C4F  1393               	bcf	19,7	;volatile
 16354                           
 16355                           ;mtouch_sensor.c: 465: }
 16356  0C50  2C7A               	goto	i1l4504
 16357  0C51                     i1l232:	
 16358                           
 16359                           ;mtouch_sensor.c: 466: else;mtouch_sensor.c: 467: {;mtouch_sensor.c: 468: ADCON0bits.ADO
      +                          N = 0;
 16360  0C51  0021               	movlb	1	; select bank1
 16361  0C52  1393               	bcf	19,7	;volatile
 16362                           
 16363                           ;mtouch_sensor.c: 469: sensor = &mtouch_sensor[currentScanSensor];
 16364  0C53  3009               	movlw	9
 16365  0C54  00FB               	movwf	??_MTOUCH_Sensor_Service
 16366  0C55  087B               	movf	??_MTOUCH_Sensor_Service,w
 16367  0C56  00F0               	movwf	i1___bmul@multiplicand
 16368  0C57  0020               	movlb	0	; select bank0
 16369  0C58  084E               	movf	_currentScanSensor,w
 16370  0C59  3197  27A8  318C   	fcall	i1___bmul
 16371  0C5C  3E2A               	addlw	(low (_mtouch_sensor| (0+256)))& (0+255)
 16372  0C5D  00FC               	movwf	??_MTOUCH_Sensor_Service+1
 16373  0C5E  087C               	movf	??_MTOUCH_Sensor_Service+1,w
 16374  0C5F  00FD               	movwf	MTOUCH_Sensor_Service@sensor
 16375                           
 16376                           ;mtouch_sensor.c: 470: if(!Sensor_isCalibrated(sensor))
 16377  0C60  087D               	movf	MTOUCH_Sensor_Service@sensor,w
 16378  0C61  3196  26FE  318C   	fcall	i1_Sensor_isCalibrated
 16379  0C64  3A00               	xorlw	0
 16380  0C65  1D03               	skipz
 16381  0C66  2C6C               	goto	i1l4500
 16382                           
 16383                           ;mtouch_sensor.c: 471: {;mtouch_sensor.c: 472: Sensor_autoCalibration(sensor);
 16384  0C67  087D               	movf	MTOUCH_Sensor_Service@sensor,w
 16385  0C68  3187  2754  318C   	fcall	_Sensor_autoCalibration
 16386                           
 16387                           ;mtouch_sensor.c: 473: }
 16388  0C6B  2C70               	goto	i1l4502
 16389  0C6C                     i1l4500:	
 16390                           
 16391                           ;mtouch_sensor.c: 474: else;mtouch_sensor.c: 475: {;mtouch_sensor.c: 476: Sensor_setSamp
      +                          led(sensor);
 16392  0C6C  087D               	movf	MTOUCH_Sensor_Service@sensor,w
 16393  0C6D  3196  26A3  318C   	fcall	_Sensor_setSampled
 16394  0C70                     i1l4502:	
 16395                           
 16396                           ;mtouch_sensor.c: 477: };mtouch_sensor.c: 478: packet_sample[currentScanSensor] = ADFLTR
      +                          ;
 16397  0C70  0020               	movlb	0	; select bank0
 16398  0C71  354E               	lslf	_currentScanSensor,w
 16399  0C72  3ECC               	addlw	(low (_packet_sample| 0))& (0+255)
 16400  0C73  0086               	movwf	6
 16401  0C74  0187               	clrf	7
 16402  0C75  0022               	movlb	2	; select bank2
 16403  0C76  0814               	movf	20,w	;volatile
 16404  0C77  3FC0               	movwi [0]fsr1
 16405  0C78  0815               	movf	21,w	;volatile
 16406  0C79  3FC1               	movwi [1]fsr1
 16407  0C7A                     i1l4504:	
 16408                           
 16409                           ;mtouch_sensor.c: 479: };mtouch_sensor.c: 480: Sensor_scheduleNextScan();
 16410  0C7A  3184  24E6         	fcall	i1_Sensor_scheduleNextScan
 16411  0C7C  0008               	return
 16412  0C7D                     __end_of_MTOUCH_Sensor_Service:	
 16413                           
 16414                           	psect	text83
 16415  04E6                     __ptext83:	
 16416 ;; *************** function i1_Sensor_scheduleNextScan *****************
 16417 ;; Defined at:
 16418 ;;		line 307 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
 16419 ;; Parameters:    Size  Location     Type
 16420 ;;		None
 16421 ;; Auto vars:     Size  Location     Type
 16422 ;;  Sensor_sched    1   10[COMMON] PTR struct .
 16423 ;;		 -> mtouch_sensor(27), 
 16424 ;;  Sensor_sched    1    9[COMMON] unsigned char 
 16425 ;;  Sensor_sched    1    8[COMMON] unsigned char 
 16426 ;; Return value:  Size  Location     Type
 16427 ;;                  1    wreg      void 
 16428 ;; Registers used:
 16429 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16430 ;; Tracked objects:
 16431 ;;		On entry : 0/0
 16432 ;;		On exit  : 0/0
 16433 ;;		Unchanged: 0/0
 16434 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 16435 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 16436 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 16437 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 16438 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 16439 ;;Total ram usage:        5 bytes
 16440 ;; Hardware stack levels used:    1
 16441 ;; Hardware stack levels required when called:    2
 16442 ;; This function calls:
 16443 ;;		i1_MTOUCH_Sensor_isEnabled
 16444 ;;		i1_MTOUCH_Sensor_wasSampled
 16445 ;;		i1_Sensor_SetTrisBit
 16446 ;;		i1_Sensor_isCalibrated
 16447 ;;		i1_Sensor_isCalibratingAcqTime
 16448 ;;		i1___bmul
 16449 ;; This function is called by:
 16450 ;;		_MTOUCH_Sensor_Service
 16451 ;; This function uses a non-reentrant model
 16452 ;;
 16453                           
 16454                           
 16455                           ;psect for function i1_Sensor_scheduleNextScan
 16456  04E6                     i1_Sensor_scheduleNextScan:	
 16457                           
 16458                           ;mtouch_sensor.c: 309: mtouch_sensor_t* sensor;;mtouch_sensor.c: 310: bool skipScan = (b
      +                          ool)0;
 16459                           
 16460                           ;incstack = 0
 16461                           ; Regs used in i1_Sensor_scheduleNextScan: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 16462  04E6  01F9               	clrf	i1Sensor_scheduleNextScan@skipScan
 16463                           
 16464                           ;mtouch_sensor.c: 311: bool state = (bool)GIE;
 16465  04E7  3000               	movlw	0
 16466  04E8  1B8B               	btfsc	11,7	;volatile
 16467  04E9  3001               	movlw	1
 16468  04EA  00F8               	movwf	i1Sensor_scheduleNextScan@state
 16469  04EB                     i1l4382:	
 16470                           ;mtouch_sensor.c: 314: while(MTOUCH_Sensor_wasSampled(currentScanSensor) || !MTOUCH_Sens
      +                          or_isEnabled(currentScanSensor))
 16471                           
 16472  04EB  0020               	movlb	0	; select bank0
 16473  04EC  084E               	movf	_currentScanSensor,w
 16474  04ED  3188  203F  3184   	fcall	i1_MTOUCH_Sensor_wasSampled
 16475  04F0  3A00               	xorlw	0
 16476  04F1  1903               	btfsc	3,2
 16477  04F2  2D01               	goto	i1l4384
 16478  04F3                     i1l4376:	
 16479                           
 16480                           ;mtouch_sensor.c: 315: {;mtouch_sensor.c: 316: if(++currentScanSensor == 3)
 16481  04F3  3001               	movlw	1
 16482  04F4  00F6               	movwf	??i1_Sensor_scheduleNextScan
 16483  04F5  0876               	movf	??i1_Sensor_scheduleNextScan,w
 16484  04F6  0020               	movlb	0	; select bank0
 16485  04F7  07CE               	addwf	_currentScanSensor,f
 16486  04F8  3003               	movlw	3
 16487  04F9  064E               	xorwf	_currentScanSensor,w
 16488  04FA  1D03               	btfss	3,2
 16489  04FB  2CEB               	goto	i1l4382
 16490                           
 16491                           ;mtouch_sensor.c: 317: {;mtouch_sensor.c: 318: currentScanSensor = 0;
 16492  04FC  01CE               	clrf	_currentScanSensor
 16493                           
 16494                           ;mtouch_sensor.c: 319: sampling_flag = 0;
 16495  04FD  01CD               	clrf	_sampling_flag
 16496                           
 16497                           ;mtouch_sensor.c: 320: skipScan = 1;
 16498  04FE  01F9               	clrf	i1Sensor_scheduleNextScan@skipScan
 16499  04FF  0AF9               	incf	i1Sensor_scheduleNextScan@skipScan,f
 16500                           
 16501                           ;mtouch_sensor.c: 321: break;
 16502  0500  2D09               	goto	i1l4386
 16503  0501                     i1l4384:	
 16504  0501  0020               	movlb	0	; select bank0
 16505  0502  084E               	movf	_currentScanSensor,w
 16506  0503  3188  202A  3184   	fcall	i1_MTOUCH_Sensor_isEnabled
 16507  0506  3A00               	xorlw	0
 16508  0507  1903               	skipnz
 16509  0508  2CF3               	goto	i1l4376
 16510  0509                     i1l4386:	
 16511                           
 16512                           ;mtouch_sensor.c: 322: };mtouch_sensor.c: 323: };mtouch_sensor.c: 326: if(skipScan==0)
 16513  0509  0879               	movf	i1Sensor_scheduleNextScan@skipScan,w
 16514  050A  1D03               	btfss	3,2
 16515  050B  0008               	return
 16516                           
 16517                           ;mtouch_sensor.c: 327: {;mtouch_sensor.c: 328: sensor = &mtouch_sensor[currentScanSensor
      +                          ];
 16518  050C  3009               	movlw	9
 16519  050D  00F6               	movwf	??i1_Sensor_scheduleNextScan
 16520  050E  0876               	movf	??i1_Sensor_scheduleNextScan,w
 16521  050F  00F0               	movwf	i1___bmul@multiplicand
 16522  0510  0020               	movlb	0	; select bank0
 16523  0511  084E               	movf	_currentScanSensor,w
 16524  0512  3197  27A8  3184   	fcall	i1___bmul
 16525  0515  3E2A               	addlw	(low (_mtouch_sensor| (0+256)))& (0+255)
 16526  0516  00F7               	movwf	??i1_Sensor_scheduleNextScan+1
 16527  0517  0877               	movf	??i1_Sensor_scheduleNextScan+1,w
 16528  0518  00FA               	movwf	i1Sensor_scheduleNextScan@sensor
 16529                           
 16530                           ;mtouch_sensor.c: 329: if(Sensor_isCalibrated(sensor))
 16531  0519  087A               	movf	i1Sensor_scheduleNextScan@sensor,w
 16532  051A  3196  26FE  3184   	fcall	i1_Sensor_isCalibrated
 16533  051D  3A00               	xorlw	0
 16534  051E  1903               	skipnz
 16535  051F  2D30               	goto	i1l4394
 16536                           
 16537                           ;mtouch_sensor.c: 330: {;mtouch_sensor.c: 331: ADACQ = (uint8_t)sensor->acquisition_time
      +                          ;
 16538  0520  087A               	movf	i1Sensor_scheduleNextScan@sensor,w
 16539  0521  0086               	movwf	6
 16540  0522  3001               	movlw	1	; select bank2/3
 16541  0523  0087               	movwf	7
 16542  0524  3001               	movlw	1	; select bank2/3
 16543  0525  3F43               	moviw [3]fsr1
 16544  0526  0021               	movlb	1	; select bank1
 16545  0527  009D               	movwf	29	;volatile
 16546                           
 16547                           ;mtouch_sensor.c: 332: ADPRE = (uint8_t)sensor->precharge_time;
 16548  0528  087A               	movf	i1Sensor_scheduleNextScan@sensor,w
 16549  0529  0086               	movwf	6
 16550  052A  3001               	movlw	1	; select bank2/3
 16551  052B  0087               	movwf	7
 16552  052C  3001               	movlw	1	; select bank2/3
 16553  052D  3F42               	moviw [2]fsr1
 16554  052E  009C               	movwf	28	;volatile
 16555                           
 16556                           ;mtouch_sensor.c: 333: }
 16557  052F  2D4B               	goto	i1l4400
 16558  0530                     i1l4394:	
 16559                           
 16560                           ;mtouch_sensor.c: 334: else;mtouch_sensor.c: 335: {;mtouch_sensor.c: 336: if(Sensor_isCa
      +                          libratingAcqTime(sensor))
 16561  0530  087A               	movf	i1Sensor_scheduleNextScan@sensor,w
 16562  0531  3196  26B3  3184   	fcall	i1_Sensor_isCalibratingAcqTime
 16563  0534  3A00               	xorlw	0
 16564  0535  1903               	skipnz
 16565  0536  2D46               	goto	i1l4398
 16566                           
 16567                           ;mtouch_sensor.c: 337: {;mtouch_sensor.c: 338: ADPRE = (uint8_t)sensor->precharge_time;
 16568  0537  087A               	movf	i1Sensor_scheduleNextScan@sensor,w
 16569  0538  0086               	movwf	6
 16570  0539  3001               	movlw	1	; select bank2/3
 16571  053A  0087               	movwf	7
 16572  053B  3001               	movlw	1	; select bank2/3
 16573  053C  3F42               	moviw [2]fsr1
 16574  053D  0021               	movlb	1	; select bank1
 16575  053E  009C               	movwf	28	;volatile
 16576                           
 16577                           ;mtouch_sensor.c: 339: ADACQ = (uint8_t)sensor->acquisition_time;
 16578  053F  087A               	movf	i1Sensor_scheduleNextScan@sensor,w
 16579  0540  0086               	movwf	6
 16580  0541  3001               	movlw	1	; select bank2/3
 16581  0542  0087               	movwf	7
 16582  0543  3001               	movlw	1	; select bank2/3
 16583  0544  3F43               	moviw [3]fsr1
 16584  0545  2D4A               	goto	L19
 16585  0546                     i1l4398:	
 16586                           ;mtouch_sensor.c: 340: }
 16587                           
 16588                           
 16589                           ;mtouch_sensor.c: 341: else;mtouch_sensor.c: 342: {;mtouch_sensor.c: 343: ADPRE = ((mtou
      +                          ch_sensor_time_t)((mtouch_sensor_time_t)48 << (uint8_t)1));
 16590  0546  3060               	movlw	96
 16591  0547  0021               	movlb	1	; select bank1
 16592  0548  009C               	movwf	28	;volatile
 16593                           
 16594                           ;mtouch_sensor.c: 344: ADACQ = ((mtouch_sensor_time_t)((mtouch_sensor_time_t)48 << (uint
      +                          8_t)1));
 16595  0549  3060               	movlw	96
 16596  054A                     L19:	
 16597  054A  009D               	movwf	29	;volatile
 16598  054B                     i1l4400:	
 16599                           
 16600                           ;mtouch_sensor.c: 345: };mtouch_sensor.c: 346: };mtouch_sensor.c: 348: ADPRE +=(uint8_t)
      +                          sample_delay;
 16601  054B  0020               	movlb	0	; select bank0
 16602  054C  084A               	movf	_sample_delay,w
 16603  054D  00F6               	movwf	??i1_Sensor_scheduleNextScan
 16604  054E  0876               	movf	??i1_Sensor_scheduleNextScan,w
 16605  054F  0021               	movlb	1	; select bank1
 16606  0550  079C               	addwf	28,f	;volatile
 16607                           
 16608                           ;mtouch_sensor.c: 349: ADPCH = (uint8_t)sensor->adpch;
 16609  0551  087A               	movf	i1Sensor_scheduleNextScan@sensor,w
 16610  0552  0086               	movwf	6
 16611  0553  3001               	movlw	1	; select bank2/3
 16612  0554  0087               	movwf	7
 16613  0555  3001               	movlw	1	; select bank2/3
 16614  0556  3F41               	moviw [1]fsr1
 16615  0557  009E               	movwf	30	;volatile
 16616                           
 16617                           ;mtouch_sensor.c: 350: ADRPT = (uint8_t)(sensor->oversampling>>1);
 16618  0558  087A               	movf	i1Sensor_scheduleNextScan@sensor,w
 16619  0559  3E04               	addlw	4
 16620  055A  0086               	movwf	6
 16621  055B  3001               	movlw	1	; select bank2/3
 16622  055C  0087               	movwf	7
 16623  055D  3601               	lsrf	1,w
 16624  055E  0022               	movlb	2	; select bank2
 16625  055F  008D               	movwf	13	;volatile
 16626                           
 16627                           ;mtouch_sensor.c: 351: ADCAP = (uint8_t)sensor->addcap;
 16628  0560  087A               	movf	i1Sensor_scheduleNextScan@sensor,w
 16629  0561  0086               	movwf	6
 16630  0562  3001               	movlw	1	; select bank2/3
 16631  0563  0087               	movwf	7
 16632  0564  3001               	movlw	1	; select bank2/3
 16633  0565  3F45               	moviw [5]fsr1
 16634  0566  0021               	movlb	1	; select bank1
 16635  0567  009B               	movwf	27	;volatile
 16636                           
 16637                           ;mtouch_sensor.c: 352: ADCON0bits.ADON = 1;
 16638  0568  1793               	bsf	19,7	;volatile
 16639                           
 16640                           ;mtouch_sensor.c: 353: sampling_flag= 1;
 16641  0569  0020               	movlb	0	; select bank0
 16642  056A  01CD               	clrf	_sampling_flag
 16643  056B  0ACD               	incf	_sampling_flag,f
 16644                           
 16645                           ;mtouch_sensor.c: 354: Sensor_SetTrisBit(currentScanSensor,1);
 16646  056C  01F0               	clrf	i1Sensor_SetTrisBit@TrisBit
 16647  056D  0AF0               	incf	i1Sensor_SetTrisBit@TrisBit,f
 16648  056E  084E               	movf	_currentScanSensor,w
 16649  056F  318A  229F  3184   	fcall	i1_Sensor_SetTrisBit
 16650                           
 16651                           ;mtouch_sensor.c: 355: GIE = 0;
 16652  0572  138B               	bcf	11,7	;volatile
 16653                           
 16654                           ;mtouch_sensor.c: 356: ADCON0bits.GO = 1;
 16655  0573  0021               	movlb	1	; select bank1
 16656  0574  1413               	bsf	19,0	;volatile
 16657                           
 16658                           ;mtouch_sensor.c: 357: ADACC = ((mtouch_sensor_packetsample_t)(sensor->oversampling)<<9)
      +                          ;
 16659  0575  087A               	movf	i1Sensor_scheduleNextScan@sensor,w
 16660  0576  3E04               	addlw	4
 16661  0577  0086               	movwf	6
 16662  0578  3001               	movlw	1	; select bank2/3
 16663  0579  0087               	movwf	7
 16664  057A  0801               	movf	1,w
 16665  057B  00F6               	movwf	??i1_Sensor_scheduleNextScan
 16666  057C  01F7               	clrf	??i1_Sensor_scheduleNextScan+1
 16667  057D  3009               	movlw	9
 16668  057E                     u337_25:	
 16669  057E  35F6               	lslf	??i1_Sensor_scheduleNextScan,f
 16670  057F  0DF7               	rlf	??i1_Sensor_scheduleNextScan+1,f
 16671  0580  0B89               	decfsz	9,f
 16672  0581  2D7E               	goto	u337_25
 16673  0582  0876               	movf	??i1_Sensor_scheduleNextScan,w
 16674  0583  0090               	movwf	16	;volatile
 16675  0584  0877               	movf	??i1_Sensor_scheduleNextScan+1,w
 16676  0585  0091               	movwf	17	;volatile
 16677                           
 16678                           ;mtouch_sensor.c: 358: GIE = state;
 16679  0586  1C78               	btfss	i1Sensor_scheduleNextScan@state,0
 16680  0587  2D8A               	goto	u338_20
 16681  0588  178B               	bsf	11,7	;volatile
 16682  0589  2D8B               	goto	i1l4420
 16683  058A                     u338_20:	
 16684  058A  138B               	bcf	11,7	;volatile
 16685  058B                     i1l4420:	
 16686                           
 16687                           ;mtouch_sensor.c: 359: scanInterrupted = 0;
 16688  058B  0020               	movlb	0	; select bank0
 16689  058C  01CC               	clrf	_scanInterrupted	;volatile
 16690  058D  0008               	return
 16691  058E                     __end_ofi1_Sensor_scheduleNextScan:	
 16692                           
 16693                           	psect	text84
 16694  16FE                     __ptext84:	
 16695 ;; *************** function i1_Sensor_isCalibrated *****************
 16696 ;; Defined at:
 16697 ;;		line 748 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
 16698 ;; Parameters:    Size  Location     Type
 16699 ;;  sensor          1    wreg     PTR struct .
 16700 ;;		 -> mtouch_sensor(27), 
 16701 ;; Auto vars:     Size  Location     Type
 16702 ;;  sensor          1    1[COMMON] PTR struct .
 16703 ;;		 -> mtouch_sensor(27), 
 16704 ;; Return value:  Size  Location     Type
 16705 ;;                  1    wreg      unsigned char 
 16706 ;; Registers used:
 16707 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 16708 ;; Tracked objects:
 16709 ;;		On entry : 0/0
 16710 ;;		On exit  : 0/0
 16711 ;;		Unchanged: 0/0
 16712 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 16713 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 16714 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 16715 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 16716 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 16717 ;;Total ram usage:        2 bytes
 16718 ;; Hardware stack levels used:    1
 16719 ;; This function calls:
 16720 ;;		Nothing
 16721 ;; This function is called by:
 16722 ;;		_MTOUCH_Sensor_Service
 16723 ;;		i1_Sensor_scheduleNextScan
 16724 ;; This function uses a non-reentrant model
 16725 ;;
 16726                           
 16727                           
 16728                           ;psect for function i1_Sensor_isCalibrated
 16729  16FE                     i1_Sensor_isCalibrated:	
 16730                           
 16731                           ;incstack = 0
 16732                           ; Regs used in i1_Sensor_isCalibrated: [wreg+fsr1l+fsr1h+status,2+status,0]
 16733                           ;i1Sensor_isCalibrated@sensor stored from wreg
 16734  16FE  00F1               	movwf	i1Sensor_isCalibrated@sensor
 16735                           
 16736                           ;mtouch_sensor.c: 750: return (bool)sensor->calibrated;
 16737  16FF  0871               	movf	i1Sensor_isCalibrated@sensor,w
 16738  1700  3E08               	addlw	8
 16739  1701  0086               	movwf	6
 16740  1702  3001               	movlw	1	; select bank2/3
 16741  1703  0087               	movwf	7
 16742  1704  0C01               	rrf	1,w
 16743  1705  00F0               	movwf	??i1_Sensor_isCalibrated
 16744  1706  0CF0               	rrf	??i1_Sensor_isCalibrated,f
 16745  1707  0C70               	rrf	??i1_Sensor_isCalibrated,w
 16746  1708  3901               	andlw	1
 16747  1709  0008               	return
 16748  170A                     __end_ofi1_Sensor_isCalibrated:	
 16749                           
 16750                           	psect	text85
 16751  0A9F                     __ptext85:	
 16752 ;; *************** function i1_Sensor_SetTrisBit *****************
 16753 ;; Defined at:
 16754 ;;		line 196 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
 16755 ;; Parameters:    Size  Location     Type
 16756 ;;  sensor          1    wreg     enum E11734
 16757 ;;  TrisBit         1    0[COMMON] unsigned char 
 16758 ;; Auto vars:     Size  Location     Type
 16759 ;;  sensor          1    1[COMMON] enum E11734
 16760 ;; Return value:  Size  Location     Type
 16761 ;;                  1    wreg      void 
 16762 ;; Registers used:
 16763 ;;		wreg, fsr0l, fsr0h, status,2, status,0
 16764 ;; Tracked objects:
 16765 ;;		On entry : 0/0
 16766 ;;		On exit  : 0/0
 16767 ;;		Unchanged: 0/0
 16768 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 16769 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 16770 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 16771 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 16772 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 16773 ;;Total ram usage:        2 bytes
 16774 ;; Hardware stack levels used:    1
 16775 ;; This function calls:
 16776 ;;		Nothing
 16777 ;; This function is called by:
 16778 ;;		_MTOUCH_Sensor_Service
 16779 ;;		i1_Sensor_scheduleNextScan
 16780 ;; This function uses a non-reentrant model
 16781 ;;
 16782                           
 16783                           
 16784                           ;psect for function i1_Sensor_SetTrisBit
 16785  0A9F                     i1_Sensor_SetTrisBit:	
 16786                           
 16787                           ;incstack = 0
 16788                           ; Regs used in i1_Sensor_SetTrisBit: [wreg-fsr0h+status,2+status,0]
 16789                           ;i1Sensor_SetTrisBit@sensor stored from wreg
 16790  0A9F  00F1               	movwf	i1Sensor_SetTrisBit@sensor
 16791                           
 16792                           ;mtouch_sensor.c: 198: switch(sensor)
 16793  0AA0  2AB6               	goto	i1l4162
 16794  0AA1                     i1l4154:	
 16795                           
 16796                           ;mtouch_sensor.c: 201: TRISAbits.TRISA1 = TrisBit;
 16797  0AA1  0C70               	rrf	i1Sensor_SetTrisBit@TrisBit,w
 16798  0AA2  0020               	movlb	0	; select bank0
 16799  0AA3  1C03               	skipc
 16800  0AA4  1091               	bcf	17,1	;volatile
 16801  0AA5  1803               	skipnc
 16802  0AA6  1491               	bsf	17,1	;volatile
 16803                           
 16804                           ;mtouch_sensor.c: 202: break;
 16805  0AA7  0008               	return
 16806  0AA8                     i1l4156:	
 16807                           
 16808                           ;mtouch_sensor.c: 204: TRISAbits.TRISA2 = TrisBit;
 16809  0AA8  0C70               	rrf	i1Sensor_SetTrisBit@TrisBit,w
 16810  0AA9  0020               	movlb	0	; select bank0
 16811  0AAA  1C03               	skipc
 16812  0AAB  1111               	bcf	17,2	;volatile
 16813  0AAC  1803               	skipnc
 16814  0AAD  1511               	bsf	17,2	;volatile
 16815                           
 16816                           ;mtouch_sensor.c: 205: break;
 16817  0AAE  0008               	return
 16818  0AAF                     i1l4158:	
 16819                           
 16820                           ;mtouch_sensor.c: 207: TRISAbits.TRISA3 = TrisBit;
 16821  0AAF  0C70               	rrf	i1Sensor_SetTrisBit@TrisBit,w
 16822  0AB0  0020               	movlb	0	; select bank0
 16823  0AB1  1C03               	skipc
 16824  0AB2  1191               	bcf	17,3	;volatile
 16825  0AB3  1803               	skipnc
 16826  0AB4  1591               	bsf	17,3	;volatile
 16827                           
 16828                           ;mtouch_sensor.c: 208: break;
 16829  0AB5  0008               	return
 16830  0AB6                     i1l4162:	
 16831  0AB6  0871               	movf	i1Sensor_SetTrisBit@sensor,w
 16832                           
 16833                           ; Switch size 1, requested type "simple"
 16834                           ; Number of cases is 3, Range of values is 0 to 2
 16835                           ; switch strategies available:
 16836                           ; Name         Instructions Cycles
 16837                           ; simple_byte           10     6 (average)
 16838                           ; direct_byte           12     6 (fixed)
 16839                           ; jumptable            260     6 (fixed)
 16840                           ;	Chosen strategy is simple_byte
 16841  0AB7  3A00               	xorlw	0	; case 0
 16842  0AB8  1903               	skipnz
 16843  0AB9  2AA1               	goto	i1l4154
 16844  0ABA  3A01               	xorlw	1	; case 1
 16845  0ABB  1903               	skipnz
 16846  0ABC  2AA8               	goto	i1l4156
 16847  0ABD  3A03               	xorlw	3	; case 2
 16848  0ABE  1903               	skipnz
 16849  0ABF  2AAF               	goto	i1l4158
 16850  0AC0  2AC1               	goto	i1l174
 16851  0AC1                     i1l174:	
 16852  0AC1  0008               	return
 16853  0AC2                     __end_ofi1_Sensor_SetTrisBit:	
 16854                           
 16855                           	psect	text86
 16856  083F                     __ptext86:	
 16857 ;; *************** function i1_MTOUCH_Sensor_wasSampled *****************
 16858 ;; Defined at:
 16859 ;;		line 788 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
 16860 ;; Parameters:    Size  Location     Type
 16861 ;;  sensor          1    wreg     enum E11734
 16862 ;; Auto vars:     Size  Location     Type
 16863 ;;  sensor          1    5[COMMON] enum E11734
 16864 ;; Return value:  Size  Location     Type
 16865 ;;                  1    wreg      unsigned char 
 16866 ;; Registers used:
 16867 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16868 ;; Tracked objects:
 16869 ;;		On entry : 0/0
 16870 ;;		On exit  : 0/0
 16871 ;;		Unchanged: 0/0
 16872 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 16873 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 16874 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 16875 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 16876 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 16877 ;;Total ram usage:        2 bytes
 16878 ;; Hardware stack levels used:    1
 16879 ;; Hardware stack levels required when called:    1
 16880 ;; This function calls:
 16881 ;;		i1___bmul
 16882 ;; This function is called by:
 16883 ;;		i1_Sensor_scheduleNextScan
 16884 ;; This function uses a non-reentrant model
 16885 ;;
 16886                           
 16887                           
 16888                           ;psect for function i1_MTOUCH_Sensor_wasSampled
 16889  083F                     i1_MTOUCH_Sensor_wasSampled:	
 16890                           
 16891                           ;incstack = 0
 16892                           ; Regs used in i1_MTOUCH_Sensor_wasSampled: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
 16893                           ;i1MTOUCH_Sensor_wasSampled@sensor stored from wreg
 16894  083F  00F5               	movwf	i1MTOUCH_Sensor_wasSampled@sensor
 16895                           
 16896                           ;mtouch_sensor.c: 790: if(sensor < 3)
 16897  0840  3003               	movlw	3
 16898  0841  0275               	subwf	i1MTOUCH_Sensor_wasSampled@sensor,w
 16899  0842  1803               	skipnc
 16900  0843  2852               	goto	i1l4192
 16901                           
 16902                           ;mtouch_sensor.c: 791: return (bool)mtouch_sensor[sensor].sampled;
 16903  0844  3009               	movlw	9
 16904  0845  00F4               	movwf	??i1_MTOUCH_Sensor_wasSampled
 16905  0846  0874               	movf	??i1_MTOUCH_Sensor_wasSampled,w
 16906  0847  00F0               	movwf	i1___bmul@multiplicand
 16907  0848  0875               	movf	i1MTOUCH_Sensor_wasSampled@sensor,w
 16908  0849  3197  27A8         	fcall	i1___bmul
 16909  084B  3E32               	addlw	(low ((_mtouch_sensor| (0+256)+8)))& (0+255)
 16910  084C  0086               	movwf	6
 16911  084D  3001               	movlw	1	; select bank2/3
 16912  084E  0087               	movwf	7
 16913  084F  0C01               	rrf	1,w
 16914  0850  3901               	andlw	1
 16915  0851  0008               	return
 16916  0852                     i1l4192:	
 16917                           
 16918                           ;mtouch_sensor.c: 792: else;mtouch_sensor.c: 793: return 0;
 16919  0852  3000               	movlw	0
 16920  0853  0008               	return
 16921  0854                     __end_ofi1_MTOUCH_Sensor_wasSampled:	
 16922                           
 16923                           	psect	text87
 16924  082A                     __ptext87:	
 16925 ;; *************** function i1_MTOUCH_Sensor_isEnabled *****************
 16926 ;; Defined at:
 16927 ;;		line 685 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
 16928 ;; Parameters:    Size  Location     Type
 16929 ;;  sensor          1    wreg     enum E11734
 16930 ;; Auto vars:     Size  Location     Type
 16931 ;;  sensor          1    5[COMMON] enum E11734
 16932 ;; Return value:  Size  Location     Type
 16933 ;;                  1    wreg      unsigned char 
 16934 ;; Registers used:
 16935 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16936 ;; Tracked objects:
 16937 ;;		On entry : 0/0
 16938 ;;		On exit  : 0/0
 16939 ;;		Unchanged: 0/0
 16940 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 16941 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 16942 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 16943 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 16944 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 16945 ;;Total ram usage:        2 bytes
 16946 ;; Hardware stack levels used:    1
 16947 ;; Hardware stack levels required when called:    1
 16948 ;; This function calls:
 16949 ;;		i1___bmul
 16950 ;; This function is called by:
 16951 ;;		i1_Sensor_scheduleNextScan
 16952 ;; This function uses a non-reentrant model
 16953 ;;
 16954                           
 16955                           
 16956                           ;psect for function i1_MTOUCH_Sensor_isEnabled
 16957  082A                     i1_MTOUCH_Sensor_isEnabled:	
 16958                           
 16959                           ;incstack = 0
 16960                           ; Regs used in i1_MTOUCH_Sensor_isEnabled: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cs
      +                          tack]
 16961                           ;i1MTOUCH_Sensor_isEnabled@sensor stored from wreg
 16962  082A  00F5               	movwf	i1MTOUCH_Sensor_isEnabled@sensor
 16963                           
 16964                           ;mtouch_sensor.c: 687: if(sensor < 3)
 16965  082B  3003               	movlw	3
 16966  082C  0275               	subwf	i1MTOUCH_Sensor_isEnabled@sensor,w
 16967  082D  1803               	skipnc
 16968  082E  283D               	goto	i1l4172
 16969                           
 16970                           ;mtouch_sensor.c: 688: return (bool)mtouch_sensor[sensor].enabled;
 16971  082F  3009               	movlw	9
 16972  0830  00F4               	movwf	??i1_MTOUCH_Sensor_isEnabled
 16973  0831  0874               	movf	??i1_MTOUCH_Sensor_isEnabled,w
 16974  0832  00F0               	movwf	i1___bmul@multiplicand
 16975  0833  0875               	movf	i1MTOUCH_Sensor_isEnabled@sensor,w
 16976  0834  3197  27A8         	fcall	i1___bmul
 16977  0836  3E32               	addlw	(low ((_mtouch_sensor| (0+256)+8)))& (0+255)
 16978  0837  0086               	movwf	6
 16979  0838  3001               	movlw	1	; select bank2/3
 16980  0839  0087               	movwf	7
 16981  083A  0801               	movf	1,w
 16982  083B  3901               	andlw	1
 16983  083C  0008               	return
 16984  083D                     i1l4172:	
 16985                           
 16986                           ;mtouch_sensor.c: 689: else;mtouch_sensor.c: 690: return 0;
 16987  083D  3000               	movlw	0
 16988  083E  0008               	return
 16989  083F                     __end_ofi1_MTOUCH_Sensor_isEnabled:	
 16990                           
 16991                           	psect	text88
 16992  17A8                     __ptext88:	
 16993 ;; *************** function i1___bmul *****************
 16994 ;; Defined at:
 16995 ;;		line 4 in file "C:\Program Files2\Microchip\xc8\v2.05\pic\sources\c90\common\Umul8.c"
 16996 ;; Parameters:    Size  Location     Type
 16997 ;;  multiplier      1    wreg     unsigned char 
 16998 ;;  multiplicand    1    0[COMMON] unsigned char 
 16999 ;; Auto vars:     Size  Location     Type
 17000 ;;  multiplier      1    2[COMMON] unsigned char 
 17001 ;;  __bmul          1    3[COMMON] unsigned char 
 17002 ;; Return value:  Size  Location     Type
 17003 ;;                  1    wreg      unsigned char 
 17004 ;; Registers used:
 17005 ;;		wreg, status,2, status,0
 17006 ;; Tracked objects:
 17007 ;;		On entry : 0/0
 17008 ;;		On exit  : 0/0
 17009 ;;		Unchanged: 0/0
 17010 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 17011 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 17012 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 17013 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 17014 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 17015 ;;Total ram usage:        4 bytes
 17016 ;; Hardware stack levels used:    1
 17017 ;; This function calls:
 17018 ;;		Nothing
 17019 ;; This function is called by:
 17020 ;;		_MTOUCH_Sensor_Service
 17021 ;;		i1_Sensor_scheduleNextScan
 17022 ;;		i1_MTOUCH_Sensor_isEnabled
 17023 ;;		i1_MTOUCH_Sensor_wasSampled
 17024 ;; This function uses a non-reentrant model
 17025 ;;
 17026                           
 17027                           
 17028                           ;psect for function i1___bmul
 17029  17A8                     i1___bmul:	
 17030                           
 17031                           ;incstack = 0
 17032                           ; Regs used in i1___bmul: [wreg+status,2+status,0]
 17033                           ;i1___bmul@multiplier stored from wreg
 17034  17A8  00F2               	movwf	i1___bmul@multiplier
 17035  17A9  01F3               	clrf	i1___bmul@product
 17036  17AA                     i1l3890:	
 17037  17AA  1C72               	btfss	i1___bmul@multiplier,0
 17038  17AB  2FB0               	goto	i1l3894
 17039  17AC  0870               	movf	i1___bmul@multiplicand,w
 17040  17AD  00F1               	movwf	??i1___bmul
 17041  17AE  0871               	movf	??i1___bmul,w
 17042  17AF  07F3               	addwf	i1___bmul@product,f
 17043  17B0                     i1l3894:	
 17044  17B0  1003               	clrc
 17045  17B1  0DF0               	rlf	i1___bmul@multiplicand,f
 17046  17B2  1003               	clrc
 17047  17B3  0CF2               	rrf	i1___bmul@multiplier,f
 17048  17B4  0872               	movf	i1___bmul@multiplier,w
 17049  17B5  1D03               	btfss	3,2
 17050  17B6  2FAA               	goto	i1l3890
 17051  17B7  0873               	movf	i1___bmul@product,w
 17052  17B8  0008               	return
 17053  17B9                     __end_ofi1___bmul:	
 17054                           
 17055                           	psect	text89
 17056  16A3                     __ptext89:	
 17057 ;; *************** function _Sensor_setSampled *****************
 17058 ;; Defined at:
 17059 ;;		line 801 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
 17060 ;; Parameters:    Size  Location     Type
 17061 ;;  sensor          1    wreg     PTR struct .
 17062 ;;		 -> mtouch_sensor(27), 
 17063 ;; Auto vars:     Size  Location     Type
 17064 ;;  sensor          1    0[COMMON] PTR struct .
 17065 ;;		 -> mtouch_sensor(27), 
 17066 ;; Return value:  Size  Location     Type
 17067 ;;                  1    wreg      void 
 17068 ;; Registers used:
 17069 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 17070 ;; Tracked objects:
 17071 ;;		On entry : 0/0
 17072 ;;		On exit  : 0/0
 17073 ;;		Unchanged: 0/0
 17074 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 17075 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 17076 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 17077 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 17078 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 17079 ;;Total ram usage:        1 bytes
 17080 ;; Hardware stack levels used:    1
 17081 ;; This function calls:
 17082 ;;		Nothing
 17083 ;; This function is called by:
 17084 ;;		_MTOUCH_Sensor_Service
 17085 ;; This function uses a non-reentrant model
 17086 ;;
 17087                           
 17088                           
 17089                           ;psect for function _Sensor_setSampled
 17090  16A3                     _Sensor_setSampled:	
 17091                           
 17092                           ;incstack = 0
 17093                           ; Regs used in _Sensor_setSampled: [wreg+fsr1l+fsr1h+status,2+status,0]
 17094                           ;Sensor_setSampled@sensor stored from wreg
 17095  16A3  00F0               	movwf	Sensor_setSampled@sensor
 17096                           
 17097                           ;mtouch_sensor.c: 803: sensor->sampled = 1;
 17098  16A4  0870               	movf	Sensor_setSampled@sensor,w
 17099  16A5  3E08               	addlw	8
 17100  16A6  0086               	movwf	6
 17101  16A7  3001               	movlw	1	; select bank2/3
 17102  16A8  0087               	movwf	7
 17103  16A9  1481               	bsf	1,1
 17104  16AA  0008               	return
 17105  16AB                     __end_of_Sensor_setSampled:	
 17106                           
 17107                           	psect	text90
 17108  0754                     __ptext90:	
 17109 ;; *************** function _Sensor_autoCalibration *****************
 17110 ;; Defined at:
 17111 ;;		line 370 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
 17112 ;; Parameters:    Size  Location     Type
 17113 ;;  sensor          1    wreg     PTR struct .
 17114 ;;		 -> mtouch_sensor(27), 
 17115 ;; Auto vars:     Size  Location     Type
 17116 ;;  sensor          1    9[COMMON] PTR struct .
 17117 ;;		 -> mtouch_sensor(27), 
 17118 ;;  name            1    8[COMMON] enum E11734
 17119 ;; Return value:  Size  Location     Type
 17120 ;;                  1    wreg      enum E11738
 17121 ;; Registers used:
 17122 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17123 ;; Tracked objects:
 17124 ;;		On entry : 0/0
 17125 ;;		On exit  : 0/0
 17126 ;;		Unchanged: 0/0
 17127 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 17128 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 17129 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 17130 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 17131 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 17132 ;;Total ram usage:        6 bytes
 17133 ;; Hardware stack levels used:    1
 17134 ;; Hardware stack levels required when called:    1
 17135 ;; This function calls:
 17136 ;;		_Sensor_setCalibratAcqTime
 17137 ;;		_Sensor_setCalibrated
 17138 ;;		i1_Sensor_isCalibratingAcqTime
 17139 ;;		i1_abs
 17140 ;; This function is called by:
 17141 ;;		_MTOUCH_Sensor_Service
 17142 ;; This function uses a non-reentrant model
 17143 ;;
 17144                           
 17145                           
 17146                           ;psect for function _Sensor_autoCalibration
 17147  0754                     _Sensor_autoCalibration:	
 17148                           
 17149                           ;incstack = 0
 17150                           ; Regs used in _Sensor_autoCalibration: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstac
      +                          k]
 17151                           ;Sensor_autoCalibration@sensor stored from wreg
 17152  0754  00F9               	movwf	Sensor_autoCalibration@sensor
 17153                           
 17154                           ;mtouch_sensor.c: 372: enum mtouch_sensor_names name = sensor->sensor_name;
 17155  0755  0879               	movf	Sensor_autoCalibration@sensor,w
 17156  0756  0086               	movwf	6
 17157  0757  3001               	movlw	1	; select bank2/3
 17158  0758  0087               	movwf	7
 17159  0759  0801               	movf	1,w
 17160  075A  00F4               	movwf	??_Sensor_autoCalibration
 17161  075B  0874               	movf	??_Sensor_autoCalibration,w
 17162  075C  00F8               	movwf	Sensor_autoCalibration@name
 17163                           
 17164                           ;mtouch_sensor.c: 374: if(!Sensor_isCalibratingAcqTime(sensor))
 17165  075D  0879               	movf	Sensor_autoCalibration@sensor,w
 17166  075E  3196  26B3  3187   	fcall	i1_Sensor_isCalibratingAcqTime
 17167  0761  3A00               	xorlw	0
 17168  0762  1D03               	skipz
 17169  0763  2F8F               	goto	i1l4336
 17170                           
 17171                           ;mtouch_sensor.c: 375: {;mtouch_sensor.c: 376: if(ADFLTR > ((mtouch_sensor_packetsample_
      +                          t)(sensor->oversampling)<<9))
 17172  0764  0879               	movf	Sensor_autoCalibration@sensor,w
 17173  0765  3E04               	addlw	4
 17174  0766  0086               	movwf	6
 17175  0767  3001               	movlw	1	; select bank2/3
 17176  0768  0087               	movwf	7
 17177  0769  0801               	movf	1,w
 17178  076A  00F4               	movwf	??_Sensor_autoCalibration
 17179  076B  01F5               	clrf	??_Sensor_autoCalibration+1
 17180  076C  3009               	movlw	9
 17181  076D                     u322_25:	
 17182  076D  35F4               	lslf	??_Sensor_autoCalibration,f
 17183  076E  0DF5               	rlf	??_Sensor_autoCalibration+1,f
 17184  076F  0B89               	decfsz	9,f
 17185  0770  2F6D               	goto	u322_25
 17186  0771  0022               	movlb	2	; select bank2
 17187  0772  0815               	movf	21,w	;volatile
 17188  0773  0275               	subwf	??_Sensor_autoCalibration+1,w
 17189  0774  1D03               	skipz
 17190  0775  2F78               	goto	u323_25
 17191  0776  0814               	movf	20,w	;volatile
 17192  0777  0274               	subwf	??_Sensor_autoCalibration,w
 17193  0778                     u323_25:	
 17194  0778  1803               	skipnc
 17195  0779  2F8B               	goto	i1l4334
 17196                           
 17197                           ;mtouch_sensor.c: 377: {;mtouch_sensor.c: 378: if(++(sensor->addcap) >= (mtouch_sensor_a
      +                          ddcap_t)31)
 17198  077A  3001               	movlw	1
 17199  077B  00F4               	movwf	??_Sensor_autoCalibration
 17200  077C  0879               	movf	Sensor_autoCalibration@sensor,w
 17201  077D  3E05               	addlw	5
 17202  077E  0086               	movwf	6
 17203  077F  3001               	movlw	1	; select bank2/3
 17204  0780  0087               	movwf	7
 17205  0781  0874               	movf	??_Sensor_autoCalibration,w
 17206  0782  0781               	addwf	1,f
 17207  0783  301F               	movlw	31
 17208  0784  0201               	subwf	1,w
 17209  0785  1C03               	skipc
 17210  0786  0008               	return
 17211                           
 17212                           ;mtouch_sensor.c: 379: Sensor_setCalibratAcqTime(sensor);
 17213  0787  0879               	movf	Sensor_autoCalibration@sensor,w
 17214  0788  3189  2121         	fcall	_Sensor_setCalibratAcqTime
 17215  078A  0008               	return
 17216  078B                     i1l4334:	
 17217                           
 17218                           ;mtouch_sensor.c: 381: else;mtouch_sensor.c: 382: {;mtouch_sensor.c: 383: Sensor_setCali
      +                          bratAcqTime(sensor);
 17219  078B  0879               	movf	Sensor_autoCalibration@sensor,w
 17220  078C  3189  2121         	fcall	_Sensor_setCalibratAcqTime
 17221  078E  0008               	return
 17222  078F                     i1l4336:	
 17223                           
 17224                           ;mtouch_sensor.c: 386: else;mtouch_sensor.c: 387: {;mtouch_sensor.c: 388: if((mtouch_sen
      +                          sor_packetsample_t)abs(packet_sample[name] - ADFLTR) < ((mtouch_sensor_packetsample_t)(s
      +                          ensor->oversampling)<<1))
 17225  078F  0879               	movf	Sensor_autoCalibration@sensor,w
 17226  0790  3E04               	addlw	4
 17227  0791  0086               	movwf	6
 17228  0792  3001               	movlw	1	; select bank2/3
 17229  0793  0087               	movwf	7
 17230  0794  0801               	movf	1,w
 17231  0795  00F4               	movwf	??_Sensor_autoCalibration
 17232  0796  01F5               	clrf	??_Sensor_autoCalibration+1
 17233  0797  35F4               	lslf	??_Sensor_autoCalibration,f
 17234  0798  0DF5               	rlf	??_Sensor_autoCalibration+1,f
 17235  0799  3578               	lslf	Sensor_autoCalibration@name,w
 17236  079A  3ECC               	addlw	(low (_packet_sample| 0))& (0+255)
 17237  079B  0086               	movwf	6
 17238  079C  0187               	clrf	7
 17239  079D  3F40               	moviw [0]fsr1
 17240  079E  00F6               	movwf	??_Sensor_autoCalibration+2
 17241  079F  3F41               	moviw [1]fsr1
 17242  07A0  00F7               	movwf	??_Sensor_autoCalibration+3
 17243  07A1  0022               	movlb	2	; select bank2
 17244  07A2  0814               	movf	20,w	;volatile
 17245  07A3  0276               	subwf	??_Sensor_autoCalibration+2,w
 17246  07A4  00F0               	movwf	i1abs@a
 17247  07A5  0815               	movf	21,w	;volatile
 17248  07A6  3B77               	subwfb	??_Sensor_autoCalibration+3,w
 17249  07A7  00F1               	movwf	i1abs@a+1
 17250  07A8  3197  2731  3187   	fcall	i1_abs
 17251  07AB  0875               	movf	??_Sensor_autoCalibration+1,w
 17252  07AC  0271               	subwf	?i1_abs+1,w
 17253  07AD  1D03               	skipz
 17254  07AE  2FB1               	goto	u325_25
 17255  07AF  0874               	movf	??_Sensor_autoCalibration,w
 17256  07B0  0270               	subwf	?i1_abs,w
 17257  07B1                     u325_25:	
 17258  07B1  1803               	skipnc
 17259  07B2  2FC0               	goto	i1l4342
 17260                           
 17261                           ;mtouch_sensor.c: 389: {;mtouch_sensor.c: 390: sensor->precharge_time = ((mtouch_sensor_
      +                          time_t)((mtouch_sensor_time_t)48 << (uint8_t)1));
 17262  07B3  3060               	movlw	96
 17263  07B4  00F4               	movwf	??_Sensor_autoCalibration
 17264  07B5  0879               	movf	Sensor_autoCalibration@sensor,w
 17265  07B6  3E02               	addlw	2
 17266  07B7  0086               	movwf	6
 17267  07B8  3001               	movlw	1	; select bank2/3
 17268  07B9  0087               	movwf	7
 17269  07BA  0874               	movf	??_Sensor_autoCalibration,w
 17270  07BB  0081               	movwf	1
 17271                           
 17272                           ;mtouch_sensor.c: 391: Sensor_setCalibrated(sensor);
 17273  07BC  0879               	movf	Sensor_autoCalibration@sensor,w
 17274  07BD  3197  2723         	fcall	_Sensor_setCalibrated
 17275                           
 17276                           ;mtouch_sensor.c: 392: }
 17277  07BF  0008               	return
 17278  07C0                     i1l4342:	
 17279                           
 17280                           ;mtouch_sensor.c: 393: else;mtouch_sensor.c: 394: {;mtouch_sensor.c: 396: if((sensor->ac
      +                          quisition_time) >= (mtouch_sensor_time_t)(((mtouch_sensor_time_t)((mtouch_sensor_time_t)
      +                          48 << (uint8_t)1)) - ((mtouch_sensor_time_t)1 << (uint8_t)1)))
 17281  07C0  0879               	movf	Sensor_autoCalibration@sensor,w
 17282  07C1  3E03               	addlw	3
 17283  07C2  0086               	movwf	6
 17284  07C3  3001               	movlw	1	; select bank2/3
 17285  07C4  0087               	movwf	7
 17286  07C5  305E               	movlw	94
 17287  07C6  0201               	subwf	1,w
 17288  07C7  1C03               	skipc
 17289  07C8  2FD6               	goto	i1l4348
 17290                           
 17291                           ;mtouch_sensor.c: 397: {;mtouch_sensor.c: 398: sensor->precharge_time = ((mtouch_sensor_
      +                          time_t)((mtouch_sensor_time_t)48 << (uint8_t)1));
 17292  07C9  3060               	movlw	96
 17293  07CA  00F4               	movwf	??_Sensor_autoCalibration
 17294  07CB  0879               	movf	Sensor_autoCalibration@sensor,w
 17295  07CC  3E02               	addlw	2
 17296  07CD  0086               	movwf	6
 17297  07CE  3001               	movlw	1	; select bank2/3
 17298  07CF  0087               	movwf	7
 17299  07D0  0874               	movf	??_Sensor_autoCalibration,w
 17300  07D1  0081               	movwf	1
 17301                           
 17302                           ;mtouch_sensor.c: 399: Sensor_setCalibrated(sensor);
 17303  07D2  0879               	movf	Sensor_autoCalibration@sensor,w
 17304  07D3  3197  2723         	fcall	_Sensor_setCalibrated
 17305                           
 17306                           ;mtouch_sensor.c: 400: }
 17307  07D5  0008               	return
 17308  07D6                     i1l4348:	
 17309                           
 17310                           ;mtouch_sensor.c: 401: else;mtouch_sensor.c: 402: {;mtouch_sensor.c: 403: sensor->acquis
      +                          ition_time += ((mtouch_sensor_time_t)1 << (uint8_t)1);
 17311  07D6  3002               	movlw	2
 17312  07D7  00F4               	movwf	??_Sensor_autoCalibration
 17313  07D8  0879               	movf	Sensor_autoCalibration@sensor,w
 17314  07D9  3E03               	addlw	3
 17315  07DA  0086               	movwf	6
 17316  07DB  3001               	movlw	1	; select bank2/3
 17317  07DC  0087               	movwf	7
 17318  07DD  0874               	movf	??_Sensor_autoCalibration,w
 17319  07DE  0781               	addwf	1,f
 17320  07DF  0008               	return
 17321  07E0                     __end_of_Sensor_autoCalibration:	
 17322                           
 17323                           	psect	text91
 17324  1731                     __ptext91:	
 17325 ;; *************** function i1_abs *****************
 17326 ;; Defined at:
 17327 ;;		line 4 in file "C:\Program Files2\Microchip\xc8\v2.05\pic\sources\c90\common\abs.c"
 17328 ;; Parameters:    Size  Location     Type
 17329 ;;  a               2    0[COMMON] int 
 17330 ;; Auto vars:     Size  Location     Type
 17331 ;;		None
 17332 ;; Return value:  Size  Location     Type
 17333 ;;                  2    0[COMMON] int 
 17334 ;; Registers used:
 17335 ;;		wreg, status,2, status,0
 17336 ;; Tracked objects:
 17337 ;;		On entry : 0/0
 17338 ;;		On exit  : 0/0
 17339 ;;		Unchanged: 0/0
 17340 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 17341 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 17342 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 17343 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 17344 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 17345 ;;Total ram usage:        4 bytes
 17346 ;; Hardware stack levels used:    1
 17347 ;; This function calls:
 17348 ;;		Nothing
 17349 ;; This function is called by:
 17350 ;;		_Sensor_autoCalibration
 17351 ;; This function uses a non-reentrant model
 17352 ;;
 17353                           
 17354                           
 17355                           ;psect for function i1_abs
 17356  1731                     i1_abs:	
 17357                           
 17358                           ;incstack = 0
 17359                           ; Regs used in i1_abs: [wreg+status,2+status,0]
 17360  1731  1FF1               	btfss	i1abs@a+1,7
 17361  1732  0008               	return
 17362  1733  0970               	comf	i1abs@a,w
 17363  1734  00F2               	movwf	??i1_abs
 17364  1735  0971               	comf	i1abs@a+1,w
 17365  1736  00F3               	movwf	??i1_abs+1
 17366  1737  0AF2               	incf	??i1_abs,f
 17367  1738  1903               	skipnz
 17368  1739  0AF3               	incf	??i1_abs+1,f
 17369  173A  0872               	movf	??i1_abs,w
 17370  173B  00F0               	movwf	?i1_abs
 17371  173C  0873               	movf	??i1_abs+1,w
 17372  173D  00F1               	movwf	?i1_abs+1
 17373  173E  0008               	return
 17374  173F                     __end_ofi1_abs:	
 17375                           
 17376                           	psect	text92
 17377  16B3                     __ptext92:	
 17378 ;; *************** function i1_Sensor_isCalibratingAcqTime *****************
 17379 ;; Defined at:
 17380 ;;		line 766 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
 17381 ;; Parameters:    Size  Location     Type
 17382 ;;  sensor          1    wreg     PTR struct .
 17383 ;;		 -> mtouch_sensor(27), 
 17384 ;; Auto vars:     Size  Location     Type
 17385 ;;  sensor          1    0[COMMON] PTR struct .
 17386 ;;		 -> mtouch_sensor(27), 
 17387 ;; Return value:  Size  Location     Type
 17388 ;;                  1    wreg      unsigned char 
 17389 ;; Registers used:
 17390 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 17391 ;; Tracked objects:
 17392 ;;		On entry : 0/0
 17393 ;;		On exit  : 0/0
 17394 ;;		Unchanged: 0/0
 17395 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 17396 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 17397 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 17398 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 17399 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 17400 ;;Total ram usage:        1 bytes
 17401 ;; Hardware stack levels used:    1
 17402 ;; This function calls:
 17403 ;;		Nothing
 17404 ;; This function is called by:
 17405 ;;		_Sensor_autoCalibration
 17406 ;;		i1_Sensor_scheduleNextScan
 17407 ;; This function uses a non-reentrant model
 17408 ;;
 17409                           
 17410                           
 17411                           ;psect for function i1_Sensor_isCalibratingAcqTime
 17412  16B3                     i1_Sensor_isCalibratingAcqTime:	
 17413                           
 17414                           ;incstack = 0
 17415                           ; Regs used in i1_Sensor_isCalibratingAcqTime: [wreg+fsr1l+fsr1h+status,2+status,0]
 17416                           ;i1Sensor_isCalibratingAcqTime@sensor stored from wreg
 17417  16B3  00F0               	movwf	i1Sensor_isCalibratingAcqTime@sensor
 17418                           
 17419                           ;mtouch_sensor.c: 768: return (bool)sensor->acqTime_cal;
 17420  16B4  0870               	movf	i1Sensor_isCalibratingAcqTime@sensor,w
 17421  16B5  3E08               	addlw	8
 17422  16B6  0086               	movwf	6
 17423  16B7  3001               	movlw	1	; select bank2/3
 17424  16B8  0087               	movwf	7
 17425  16B9  0E01               	swapf	1,w
 17426  16BA  3901               	andlw	1
 17427  16BB  0008               	return
 17428  16BC                     __end_ofi1_Sensor_isCalibratingAcqTime:	
 17429                           
 17430                           	psect	text93
 17431  1723                     __ptext93:	
 17432 ;; *************** function _Sensor_setCalibrated *****************
 17433 ;; Defined at:
 17434 ;;		line 753 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
 17435 ;; Parameters:    Size  Location     Type
 17436 ;;  sensor          1    wreg     PTR struct .
 17437 ;;		 -> mtouch_sensor(27), 
 17438 ;; Auto vars:     Size  Location     Type
 17439 ;;  sensor          1    0[COMMON] PTR struct .
 17440 ;;		 -> mtouch_sensor(27), 
 17441 ;; Return value:  Size  Location     Type
 17442 ;;                  1    wreg      void 
 17443 ;; Registers used:
 17444 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 17445 ;; Tracked objects:
 17446 ;;		On entry : 0/0
 17447 ;;		On exit  : 0/0
 17448 ;;		Unchanged: 0/0
 17449 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 17450 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 17451 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 17452 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 17453 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 17454 ;;Total ram usage:        1 bytes
 17455 ;; Hardware stack levels used:    1
 17456 ;; This function calls:
 17457 ;;		Nothing
 17458 ;; This function is called by:
 17459 ;;		_Sensor_autoCalibration
 17460 ;; This function uses a non-reentrant model
 17461 ;;
 17462                           
 17463                           
 17464                           ;psect for function _Sensor_setCalibrated
 17465  1723                     _Sensor_setCalibrated:	
 17466                           
 17467                           ;incstack = 0
 17468                           ; Regs used in _Sensor_setCalibrated: [wreg+fsr1l+fsr1h+status,2+status,0]
 17469                           ;Sensor_setCalibrated@sensor stored from wreg
 17470  1723  00F0               	movwf	Sensor_setCalibrated@sensor
 17471                           
 17472                           ;mtouch_sensor.c: 755: sensor->calibrated = 1;
 17473  1724  0870               	movf	Sensor_setCalibrated@sensor,w
 17474  1725  3E08               	addlw	8
 17475  1726  0086               	movwf	6
 17476  1727  3001               	movlw	1	; select bank2/3
 17477  1728  0087               	movwf	7
 17478  1729  1581               	bsf	1,3
 17479                           
 17480                           ;mtouch_sensor.c: 756: sensor->acqTime_cal = 0;
 17481  172A  0870               	movf	Sensor_setCalibrated@sensor,w
 17482  172B  3E08               	addlw	8
 17483  172C  0086               	movwf	6
 17484  172D  3001               	movlw	1	; select bank2/3
 17485  172E  0087               	movwf	7
 17486  172F  1201               	bcf	1,4
 17487  1730  0008               	return
 17488  1731                     __end_of_Sensor_setCalibrated:	
 17489                           
 17490                           	psect	text94
 17491  0921                     __ptext94:	
 17492 ;; *************** function _Sensor_setCalibratAcqTime *****************
 17493 ;; Defined at:
 17494 ;;		line 759 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
 17495 ;; Parameters:    Size  Location     Type
 17496 ;;  sensor          1    wreg     PTR struct .
 17497 ;;		 -> mtouch_sensor(27), 
 17498 ;; Auto vars:     Size  Location     Type
 17499 ;;  sensor          1    1[COMMON] PTR struct .
 17500 ;;		 -> mtouch_sensor(27), 
 17501 ;; Return value:  Size  Location     Type
 17502 ;;                  1    wreg      void 
 17503 ;; Registers used:
 17504 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 17505 ;; Tracked objects:
 17506 ;;		On entry : 0/0
 17507 ;;		On exit  : 0/0
 17508 ;;		Unchanged: 0/0
 17509 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 17510 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 17511 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 17512 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 17513 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 17514 ;;Total ram usage:        2 bytes
 17515 ;; Hardware stack levels used:    1
 17516 ;; This function calls:
 17517 ;;		Nothing
 17518 ;; This function is called by:
 17519 ;;		_Sensor_autoCalibration
 17520 ;; This function uses a non-reentrant model
 17521 ;;
 17522                           
 17523                           
 17524                           ;psect for function _Sensor_setCalibratAcqTime
 17525  0921                     _Sensor_setCalibratAcqTime:	
 17526                           
 17527                           ;incstack = 0
 17528                           ; Regs used in _Sensor_setCalibratAcqTime: [wreg+fsr1l+fsr1h+status,2+status,0]
 17529                           ;Sensor_setCalibratAcqTime@sensor stored from wreg
 17530  0921  00F1               	movwf	Sensor_setCalibratAcqTime@sensor
 17531                           
 17532                           ;mtouch_sensor.c: 761: sensor->acqTime_cal = 1;
 17533  0922  0871               	movf	Sensor_setCalibratAcqTime@sensor,w
 17534  0923  3E08               	addlw	8
 17535  0924  0086               	movwf	6
 17536  0925  3001               	movlw	1	; select bank2/3
 17537  0926  0087               	movwf	7
 17538  0927  1601               	bsf	1,4
 17539                           
 17540                           ;mtouch_sensor.c: 762: sensor->acquisition_time = ((mtouch_sensor_time_t)((mtouch_sensor
      +                          _time_t)1 << (uint8_t)1));
 17541  0928  3002               	movlw	2
 17542  0929  00F0               	movwf	??_Sensor_setCalibratAcqTime
 17543  092A  0871               	movf	Sensor_setCalibratAcqTime@sensor,w
 17544  092B  3E03               	addlw	3
 17545  092C  0086               	movwf	6
 17546  092D  3001               	movlw	1	; select bank2/3
 17547  092E  0087               	movwf	7
 17548  092F  0870               	movf	??_Sensor_setCalibratAcqTime,w
 17549  0930  0081               	movwf	1
 17550                           
 17551                           ;mtouch_sensor.c: 763: sensor->precharge_time = ((mtouch_sensor_time_t)((mtouch_sensor_t
      +                          ime_t)48 << (uint8_t)1));
 17552  0931  3060               	movlw	96
 17553  0932  00F0               	movwf	??_Sensor_setCalibratAcqTime
 17554  0933  0871               	movf	Sensor_setCalibratAcqTime@sensor,w
 17555  0934  3E02               	addlw	2
 17556  0935  0086               	movwf	6
 17557  0936  3001               	movlw	1	; select bank2/3
 17558  0937  0087               	movwf	7
 17559  0938  0870               	movf	??_Sensor_setCalibratAcqTime,w
 17560  0939  0081               	movwf	1
 17561  093A  0008               	return
 17562  093B                     __end_of_Sensor_setCalibratAcqTime:	
 17563  007E                     btemp	set	126	;btemp
 17564  007E                     int$flags	set	126
 17565  007E                     wtemp0	set	126


Data Sizes:
    Strings     0
    Constant    97
    Data        15
    BSS         193
    Persistent  32
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80     28      76
    BANK1            80      0      75
    BANK2            80      0      37
    BANK3            80      0      48
    BANK4            80      0       0
    BANK5            80      0       0
    BANK6            80      0       0
    BANK7            80      0       0
    BANK8            80      0       0
    BANK9            80      0       0
    BANK10           80      0       0
    BANK11           80      0       0
    BANK12           80      0       0
    BANK13           80      0       0
    BANK14           80      0       0
    BANK15           80      0       0
    BANK16           80      0       0
    BANK17           80      0       0
    BANK18           80      0       0
    BANK19           80      0       0
    BANK20           80      0       0
    BANK21           80      0       0
    BANK22           80      0       0
    BANK23           80      0       0
    BANK24           80      0       0
    BANK25           32      0       0

Pointer List with Targets:

    Button_Service$2597$0	PTR struct . size(1) Largest target is 48
		 -> mtouch_button(BANK3[48]), 

    Button_Service$2597	PTR FTN(PTR struct .,)void  size(2) Largest target is 1
		 -> Button_State_Pressed(), Button_State_NotPressed(), Button_State_Initializing(), 

    Button_StateMachine$0	PTR struct . size(1) Largest target is 48
		 -> mtouch_button(BANK3[48]), 

    __builtin_memcpy$1	PTR const void  size(2) Largest target is 48
		 -> mtouch_button_init(CODE[48]), mtouch_sensor_init(CODE[27]), 

    __builtin_memcpy$0	PTR void  size(1) Largest target is 48
		 -> mtouch_button(BANK3[48]), mtouch_sensor(BANK2[27]), 

    EUSART_SetRxInterruptHandler@interruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_Receive_ISR(), 

    EUSART_SetTxInterruptHandler@interruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_Transmit_ISR(), 

    TMR0_SetInterruptHandler@InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> v_service_routine(), TMR0_DefaultInterruptHandler(), 

    TMR0_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> v_service_routine(), TMR0_DefaultInterruptHandler(), Absolute function(), 

    EUSART_RxDefaultInterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_Receive_ISR(), Absolute function(), 

    EUSART_TxDefaultInterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_Transmit_ISR(), Absolute function(), 

    TMR1_SetInterruptHandler@InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> v_seg_display(), TMR1_DefaultInterruptHandler(), 

    TMR1_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> v_seg_display(), Absolute function(), TMR1_DefaultInterruptHandler(), 

    Button_Baseline_Update@button	PTR struct . size(1) Largest target is 48
		 -> mtouch_button(BANK3[48]), 

    Button_Baseline_Initialize@button	PTR struct . size(1) Largest target is 48
		 -> mtouch_button(BANK3[48]), 

    Button_Reading_Update_Helper@button	PTR struct . size(1) Largest target is 48
		 -> mtouch_button(BANK3[48]), 

    Button_Reading_Update@button	PTR struct . size(1) Largest target is 48
		 -> mtouch_button(BANK3[48]), 

    Button_Deviation_Update@button	PTR struct . size(1) Largest target is 48
		 -> mtouch_button(BANK3[48]), 

    Button_Tick_helper@button	PTR struct . size(1) Largest target is 48
		 -> mtouch_button(BANK3[48]), 

    Button_State_Pressed@button	PTR struct . size(1) Largest target is 48
		 -> mtouch_button(BANK3[48]), 

    Button_State_NotPressed@button	PTR struct . size(1) Largest target is 48
		 -> mtouch_button(BANK3[48]), 

    Button_State_Initializing@button	PTR struct . size(1) Largest target is 48
		 -> mtouch_button(BANK3[48]), 

    Button_Service@button	PTR struct . size(1) Largest target is 48
		 -> mtouch_button(BANK3[48]), 

    MTOUCH_Button_Initialize@button	PTR struct . size(1) Largest target is 48
		 -> mtouch_button(BANK3[48]), 

    Button_StateMachine	PTR FTN(PTR struct .,)void [3] size(2) Largest target is 1
		 -> Button_State_Pressed(), Button_State_NotPressed(), Button_State_Initializing(), 

    callback_notPressed	PTR FTN(enum E11678,)void  size(2) Largest target is 1
		 -> Button_DefaultCallback(), 

    callback_pressed	PTR FTN(enum E11678,)void  size(2) Largest target is 1
		 -> Button_DefaultCallback(), 

    Sensor_setSampled@sensor	PTR struct . size(1) Largest target is 27
		 -> mtouch_sensor(BANK2[27]), 

    Sensor_Sampled_Reset@sensor	PTR struct . size(1) Largest target is 27
		 -> mtouch_sensor(BANK2[27]), 

    MTOUCH_Sensor_Sampled_ResetAll@sensor	PTR struct . size(1) Largest target is 27
		 -> mtouch_sensor(BANK2[27]), 

    Sensor_isCalibratingAcqTime@sensor	PTR struct . size(1) Largest target is 27
		 -> mtouch_sensor(BANK2[27]), 

    Sensor_setCalibratAcqTime@sensor	PTR struct . size(1) Largest target is 27
		 -> mtouch_sensor(BANK2[27]), 

    Sensor_setCalibrated@sensor	PTR struct . size(1) Largest target is 27
		 -> mtouch_sensor(BANK2[27]), 

    Sensor_isCalibrated@sensor	PTR struct . size(1) Largest target is 27
		 -> mtouch_sensor(BANK2[27]), 

    Sensor_setInactive@sensor	PTR struct . size(1) Largest target is 27
		 -> mtouch_sensor(BANK2[27]), 

    Sensor_setActive@sensor	PTR struct . size(1) Largest target is 27
		 -> mtouch_sensor(BANK2[27]), 

    Sensor_isEnabled@sensor	PTR struct . size(1) Largest target is 27
		 -> mtouch_sensor(BANK2[27]), 

    Sensor_RawSample_Update@sensor	PTR struct . size(1) Largest target is 27
		 -> mtouch_sensor(BANK2[27]), 

    MTOUCH_Sensor_Service@sensor	PTR struct . size(1) Largest target is 27
		 -> mtouch_sensor(BANK2[27]), 

    Sensor_postAcquisitionProcess@sensor	PTR struct . size(1) Largest target is 27
		 -> mtouch_sensor(BANK2[27]), 

    Sensor_autoCalibration@sensor	PTR struct . size(1) Largest target is 27
		 -> mtouch_sensor(BANK2[27]), 

    Sensor_scheduleNextScan@sensor	PTR struct . size(1) Largest target is 27
		 -> mtouch_sensor(BANK2[27]), 

    sp____builtin_memcpy	PTR void  size(2) Largest target is 4096
		 -> RAM(DATA[4096]), 

    callback_sampled	PTR FTN(enum E11734,)void  size(2) Largest target is 1
		 -> Sensor_DefaultCallback(), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _INTERRUPT_InterruptManager in COMMON

    _TMR1_ISR->_v_seg_display
    _v_seg_display->i1_MTOUCH_Button_isPressed
    _TMR0_ISR->_v_service_routine
    _v_service_routine->i1_MTOUCH_Button_isPressed
    _ADCC_ThresholdISR_mTouch->_MTOUCH_Sensor_Service
    _MTOUCH_Sensor_Service->i1_Sensor_scheduleNextScan
    i1_Sensor_scheduleNextScan->i1_MTOUCH_Sensor_isEnabled
    i1_Sensor_scheduleNextScan->i1_MTOUCH_Sensor_wasSampled
    i1_MTOUCH_Sensor_wasSampled->i1___bmul
    i1_MTOUCH_Sensor_isEnabled->i1___bmul
    _Sensor_autoCalibration->i1_abs

Critical Paths under _main in BANK0

    _main->_MTOUCH_Service_Mainloop
    _v_uart_send_data->_EUSART_Write
    _v_uart_receive_data->_EUSART_Read
    _Save_System_Setting->_DATAEE_WriteByte
    _TMR1_Initialize->_TMR1_SetInterruptHandler
    _TMR0_Initialize->_TMR0_SetInterruptHandler
    _MTOUCH_Initialize->_MTOUCH_Button_InitializeAll
    _MTOUCH_Sensor_InitializeAll->_MTOUCH_Sensor_Initialize
    _MTOUCH_Sensor_Initialize->_MTOUCH_Sensor_Calibrate
    _MTOUCH_Sensor_Initialize->_MTOUCH_Sensor_Enable
    _MTOUCH_Sensor_Enable->___bmul
    _MTOUCH_Button_InitializeAll->_MTOUCH_Button_Initialize
    _MTOUCH_Service_Mainloop->_MTOUCH_Button_ServiceAll
    _MTOUCH_Service_Mainloop->_MTOUCH_Sensor_SampleAll
    _MTOUCH_Tick->_MTOUCH_Button_Tick
    _MTOUCH_Button_Tick->_Button_Tick_helper
    _MTOUCH_Sensor_Sampled_ResetAll->_Sensor_Sampled_Reset
    _MTOUCH_Sensor_SampleAll->_Sensor_FrequencyHopping
    _Sensor_scheduleNextScan->_MTOUCH_Sensor_isEnabled
    _Sensor_scheduleNextScan->_MTOUCH_Sensor_wasSampled
    _MTOUCH_Sensor_isEnabled->___bmul
    _Sensor_FrequencyHopping->_Sensor_FrequencyHopping_Autotune_Process
    _Sensor_FrequencyHopping->_Sensor_postAcquisitionProcess
    _Sensor_postAcquisitionProcess->_Sensor_RawSample_Update
    _Sensor_RawSample_Update->_medianFilter
    _medianFilter->___bmul
    _Sensor_FrequencyHopping_Autotune_Process->_abs
    _abs->___bmul
    _MTOUCH_Button_ServiceAll->_Button_Service
    _Button_Service->_Button_State_Initializing
    _MTOUCH_Sensor_wasSampled->___bmul
    _MTOUCH_Sensor_isCalibrated->___bmul
    _MTOUCH_Button_Initialize->_MTOUCH_Sensor_Calibrate
    _MTOUCH_Sensor_Calibrate->___bmul
    _Button_State_Initializing->_Button_Baseline_Initialize
    _Button_Baseline_Initialize->_MTOUCH_Sensor_RawSample_Get
    _Button_Reading_Update->_Button_Reading_Update_Helper
    _Button_Reading_Update_Helper->_MTOUCH_Sensor_RawSample_Get
    _MTOUCH_Sensor_RawSample_Get->___bmul
    _Load_System_Setting->_DATAEE_ReadByte
    _EUSART_Initialize->_EUSART_SetRxInterruptHandler
    _EUSART_Initialize->_EUSART_SetTxInterruptHandler

Critical Paths under _INTERRUPT_InterruptManager in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK15

    None.

Critical Paths under _main in BANK16

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK16

    None.

Critical Paths under _main in BANK17

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK17

    None.

Critical Paths under _main in BANK18

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK18

    None.

Critical Paths under _main in BANK19

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK19

    None.

Critical Paths under _main in BANK20

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK20

    None.

Critical Paths under _main in BANK21

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK21

    None.

Critical Paths under _main in BANK22

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK22

    None.

Critical Paths under _main in BANK23

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK23

    None.

Critical Paths under _main in BANK24

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK24

    None.

Critical Paths under _main in BANK25

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK25

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 3     3      0   31107
                                             25 BANK0      3     3      0
                   _DATAEE_WriteByte
                  _EUSART_Initialize
                _Load_System_Setting
            _MTOUCH_Button_isPressed
            _MTOUCH_Service_Mainloop
                  _SYSTEM_Initialize
                _Save_System_Setting
           _TMR0_SetInterruptHandler
           _TMR1_SetInterruptHandler
                _v_uart_receive_data
                   _v_uart_send_data
 ---------------------------------------------------------------------------------
 (1) _v_uart_send_data                                     1     1      0      44
                                              2 BANK0      1     1      0
                       _EUSART_Write
 ---------------------------------------------------------------------------------
 (2) _EUSART_Write                                         2     2      0      44
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _v_uart_receive_data                                  1     1      0      24
                                              2 BANK0      1     1      0
                        _EUSART_Read
 ---------------------------------------------------------------------------------
 (2) _EUSART_Read                                          2     2      0      24
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _Save_System_Setting                                  1     1      0    1305
                                              4 BANK0      1     1      0
                   _DATAEE_WriteByte
 ---------------------------------------------------------------------------------
 (2) _DATAEE_WriteByte                                     4     1      3    1305
                                              0 BANK0      4     1      3
 ---------------------------------------------------------------------------------
 (1) _SYSTEM_Initialize                                    0     0      0    5075
                  _MTOUCH_Initialize
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
                     _PMD_Initialize
                    _TMR0_Initialize
                    _TMR1_Initialize
 ---------------------------------------------------------------------------------
 (2) _TMR1_Initialize                                      0     0      0     174
           _TMR1_SetInterruptHandler
 ---------------------------------------------------------------------------------
 (1) _TMR1_SetInterruptHandler                             2     0      2     174
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (2) _TMR0_Initialize                                      0     0      0     174
           _TMR0_SetInterruptHandler
 ---------------------------------------------------------------------------------
 (1) _TMR0_SetInterruptHandler                             2     0      2     174
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (2) _PMD_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PIN_MANAGER_Initialize                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _MTOUCH_Initialize                                    0     0      0    4727
        _MTOUCH_Button_InitializeAll
        _MTOUCH_Sensor_InitializeAll
     _MTOUCH_Sensor_Sampled_ResetAll
      _MTOUCH_Sensor_Scan_Initialize
 ---------------------------------------------------------------------------------
 (3) _MTOUCH_Sensor_Scan_Initialize                        0     0      0       0
      _MTOUCH_Sensor_ADCC_Initialize
 ---------------------------------------------------------------------------------
 (4) _MTOUCH_Sensor_ADCC_Initialize                        0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _MTOUCH_Sensor_InitializeAll                          2     2      0    3322
                                              8 BANK0      2     2      0
           _MTOUCH_Sensor_Initialize
 ---------------------------------------------------------------------------------
 (4) _MTOUCH_Sensor_Initialize                             2     2      0    3254
                                              6 BANK0      2     2      0
            _MTOUCH_Sensor_Calibrate
               _MTOUCH_Sensor_Enable
               _Sensor_Sampled_Reset
                             ___bmul
 ---------------------------------------------------------------------------------
 (5) _MTOUCH_Sensor_Enable                                 2     2      0    1048
                                              4 BANK0      2     2      0
                             ___bmul
 ---------------------------------------------------------------------------------
 (3) _MTOUCH_Button_InitializeAll                          2     2      0    1249
                                             10 BANK0      2     2      0
           _MTOUCH_Button_Initialize
 ---------------------------------------------------------------------------------
 (1) _MTOUCH_Service_Mainloop                              1     1      0   21764
                                             24 BANK0      1     1      0
           _MTOUCH_Button_ServiceAll
            _MTOUCH_Sensor_SampleAll
     _MTOUCH_Sensor_Sampled_ResetAll
                        _MTOUCH_Tick
                 _MTOUCH_needReburst
 ---------------------------------------------------------------------------------
 (2) _MTOUCH_needReburst                                   1     1      0      23
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _MTOUCH_Tick                                          0     0      0     189
                 _MTOUCH_Button_Tick
 ---------------------------------------------------------------------------------
 (3) _MTOUCH_Button_Tick                                   2     2      0     189
                                              3 BANK0      2     2      0
                 _Button_Tick_helper
 ---------------------------------------------------------------------------------
 (4) _Button_Tick_helper                                   3     3      0     121
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (3) _MTOUCH_Sensor_Sampled_ResetAll                       2     2      0     156
                                              1 BANK0      2     2      0
               _Sensor_Sampled_Reset
 ---------------------------------------------------------------------------------
 (4) _Sensor_Sampled_Reset                                 1     1      0      88
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _MTOUCH_Sensor_SampleAll                              2     2      0   11115
                                             22 BANK0      2     2      0
            _MTOUCH_Sensor_isEnabled
           _MTOUCH_Sensor_isSampling
           _MTOUCH_Sensor_wasSampled
            _Sensor_FrequencyHopping
            _Sensor_scheduleNextScan
 ---------------------------------------------------------------------------------
 (3) _Sensor_scheduleNextScan                              5     5      0    3758
                                              6 BANK0      5     5      0
            _MTOUCH_Sensor_isEnabled
           _MTOUCH_Sensor_wasSampled
                  _Sensor_SetTrisBit
                _Sensor_isCalibrated
        _Sensor_isCalibratingAcqTime
                             ___bmul
 ---------------------------------------------------------------------------------
 (4) _Sensor_isCalibratingAcqTime                          1     1      0      88
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (4) _Sensor_isCalibrated                                  2     2      0      88
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (4) _Sensor_SetTrisBit                                    2     1      1     214
                                              0 BANK0      2     1      1
 ---------------------------------------------------------------------------------
 (4) _MTOUCH_Sensor_isEnabled                              2     2      0    1048
                                              4 BANK0      2     2      0
                             ___bmul
 ---------------------------------------------------------------------------------
 (3) _Sensor_FrequencyHopping                              2     2      0    5171
                                             20 BANK0      2     2      0
_Sensor_FrequencyHopping_Autotune_Pr
      _Sensor_postAcquisitionProcess
             _Sensor_setSamplePeriod
 ---------------------------------------------------------------------------------
 (4) _Sensor_setSamplePeriod                               1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (4) _Sensor_postAcquisitionProcess                        4     4      0    3376
                                             16 BANK0      4     4      0
             _Sensor_DefaultCallback
            _Sensor_RawSample_Update
                   _Sensor_isEnabled
                   _Sensor_setActive
                 _Sensor_setInactive
                             ___bmul
                                _abs
 ---------------------------------------------------------------------------------
 (5) _Sensor_setInactive                                   1     1      0      88
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (5) _Sensor_setActive                                     1     1      0      55
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (5) _Sensor_isEnabled                                     1     1      0      77
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (5) _Sensor_RawSample_Update                              3     3      0    1610
                                             13 BANK0      3     3      0
                       _medianFilter
 ---------------------------------------------------------------------------------
 (6) _medianFilter                                         9     7      2    1466
                                              4 BANK0      9     7      2
                             ___bmul
 ---------------------------------------------------------------------------------
 (5) _Sensor_DefaultCallback                               1     0      1      53
                                              0 BANK0      1     0      1
 ---------------------------------------------------------------------------------
 (4) _Sensor_FrequencyHopping_Autotune_Process            12    12      0    1727
                                              8 BANK0     12    12      0
                             ___bmul
                                _abs
 ---------------------------------------------------------------------------------
 (5) _abs                                                  4     2      2     268
                                              4 BANK0      4     2      2
                             ___bmul (ARG)
 ---------------------------------------------------------------------------------
 (3) _MTOUCH_Sensor_isSampling                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _MTOUCH_Button_ServiceAll                             2     2      0   10281
                                             22 BANK0      2     2      0
                     _Button_Service
 ---------------------------------------------------------------------------------
 (3) _Button_Service                                       4     4      0   10213
                                             18 BANK0      4     4      0
            _Button_Deviation_Update
              _Button_Reading_Update
          _Button_State_Initializing *
            _Button_State_NotPressed *
               _Button_State_Pressed *
           _MTOUCH_Button_Initialize
         _MTOUCH_Sensor_isCalibrated
           _MTOUCH_Sensor_wasSampled
 ---------------------------------------------------------------------------------
 (4) _MTOUCH_Sensor_wasSampled                             2     2      0    1048
                                              4 BANK0      2     2      0
                             ___bmul
 ---------------------------------------------------------------------------------
 (4) _MTOUCH_Sensor_isCalibrated                           3     3      0    1048
                                              4 BANK0      3     3      0
                             ___bmul
 ---------------------------------------------------------------------------------
 (4) _Button_State_Pressed                                 3     2      1    1613
                                             13 BANK0      3     2      1
             _Button_DefaultCallback
           _MTOUCH_Button_Initialize
 ---------------------------------------------------------------------------------
 (4) _Button_State_NotPressed                              3     2      1    1952
                                             13 BANK0      3     2      1
             _Button_Baseline_Update
             _Button_DefaultCallback
           _MTOUCH_Button_Initialize
 ---------------------------------------------------------------------------------
 (4) _MTOUCH_Button_Initialize                             4     4      0    1181
                                              6 BANK0      4     4      0
            _MTOUCH_Sensor_Calibrate
 ---------------------------------------------------------------------------------
 (5) _MTOUCH_Sensor_Calibrate                              2     2      0    1048
                                              4 BANK0      2     2      0
                             ___bmul
 ---------------------------------------------------------------------------------
 (5) _Button_DefaultCallback                               1     0      1     159
                                              0 BANK0      1     0      1
 ---------------------------------------------------------------------------------
 (4) _Button_State_Initializing                            5     4      1    1614
                                             13 BANK0      5     4      1
         _Button_Baseline_Initialize
             _Button_Baseline_Update
 ---------------------------------------------------------------------------------
 (5) _Button_Baseline_Update                               7     7      0     260
                                              0 BANK0      7     7      0
 ---------------------------------------------------------------------------------
 (5) _Button_Baseline_Initialize                           5     5      0    1156
                                              8 BANK0      5     5      0
        _MTOUCH_Sensor_RawSample_Get
 ---------------------------------------------------------------------------------
 (4) _Button_Reading_Update                                1     1      0    1345
                                             11 BANK0      1     1      0
       _Button_Reading_Update_Helper
 ---------------------------------------------------------------------------------
 (5) _Button_Reading_Update_Helper                         3     3      0    1268
                                              8 BANK0      3     3      0
        _MTOUCH_Sensor_RawSample_Get
 ---------------------------------------------------------------------------------
 (6) _MTOUCH_Sensor_RawSample_Get                          4     2      2    1048
                                              4 BANK0      4     2      2
                             ___bmul
 ---------------------------------------------------------------------------------
 (5) ___bmul                                               4     3      1    1004
                                              0 BANK0      4     3      1
 ---------------------------------------------------------------------------------
 (4) _Button_Deviation_Update                             15    15      0     213
                                              0 BANK0     15    15      0
 ---------------------------------------------------------------------------------
 (1) _MTOUCH_Button_isPressed                              2     2      0      44
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _Load_System_Setting                                  1     1      0     956
                                              2 BANK0      1     1      0
                    _DATAEE_ReadByte
 ---------------------------------------------------------------------------------
 (2) _DATAEE_ReadByte                                      2     0      2     956
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (1) _EUSART_Initialize                                    1     1      0     196
                                              2 BANK0      1     1      0
       _EUSART_SetRxInterruptHandler
       _EUSART_SetTxInterruptHandler
 ---------------------------------------------------------------------------------
 (2) _EUSART_SetTxInterruptHandler                         2     0      2      98
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (2) _EUSART_SetRxInterruptHandler                         2     0      2      98
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (8) _INTERRUPT_InterruptManager                           0     0      0    2426
                   Absolute function *
           _ADCC_ThresholdISR_mTouch
                 _EUSART_Receive_ISR *
                _EUSART_Transmit_ISR *
                           _TMR0_ISR
                           _TMR1_ISR
 ---------------------------------------------------------------------------------
 (9) _TMR1_ISR                                             0     0      0     284
                   Absolute function *
       _TMR1_DefaultInterruptHandler *
                    _TMR1_WriteTimer
                      _v_seg_display *
 ---------------------------------------------------------------------------------
 (10) _v_seg_display                                       1     1      0      44
                                              2 COMMON     1     1      0
          i1_MTOUCH_Button_isPressed
 ---------------------------------------------------------------------------------
 (10) _TMR1_WriteTimer                                     2     0      2     240
                                              0 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (10) _TMR1_DefaultInterruptHandler                        0     0      0       0
 ---------------------------------------------------------------------------------
 (9) _TMR0_ISR                                             0     0      0      44
                   Absolute function *
       _TMR0_DefaultInterruptHandler *
                  _v_service_routine *
 ---------------------------------------------------------------------------------
 (10) _v_service_routine                                   1     1      0      44
                                              2 COMMON     1     1      0
          i1_MTOUCH_Button_isPressed
 ---------------------------------------------------------------------------------
 (11) i1_MTOUCH_Button_isPressed                           2     2      0      44
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (10) _TMR0_DefaultInterruptHandler                        0     0      0       0
 ---------------------------------------------------------------------------------
 (10) Absolute function(Fake)                              0     0      0       0
 ---------------------------------------------------------------------------------
 (9) _EUSART_Transmit_ISR                                  1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (9) _EUSART_Receive_ISR                                   1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (9) _ADCC_ThresholdISR_mTouch                             0     0      0    2098
              _MTOUCH_Sensor_Service
 ---------------------------------------------------------------------------------
 (10) _MTOUCH_Sensor_Service                               3     3      0    2098
                                             11 COMMON     3     3      0
             _Sensor_autoCalibration
                  _Sensor_setSampled
                i1_Sensor_SetTrisBit
              i1_Sensor_isCalibrated
          i1_Sensor_scheduleNextScan
                           i1___bmul
 ---------------------------------------------------------------------------------
 (11) i1_Sensor_scheduleNextScan                           5     5      0     972
                                              6 COMMON     5     5      0
          i1_MTOUCH_Sensor_isEnabled
         i1_MTOUCH_Sensor_wasSampled
                i1_Sensor_SetTrisBit
              i1_Sensor_isCalibrated
      i1_Sensor_isCalibratingAcqTime
                           i1___bmul
 ---------------------------------------------------------------------------------
 (12) i1_Sensor_isCalibrated                               2     2      0      22
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (12) i1_Sensor_SetTrisBit                                 2     1      1     140
                                              0 COMMON     2     1      1
 ---------------------------------------------------------------------------------
 (12) i1_MTOUCH_Sensor_wasSampled                          2     2      0     188
                                              4 COMMON     2     2      0
                           i1___bmul
 ---------------------------------------------------------------------------------
 (12) i1_MTOUCH_Sensor_isEnabled                           2     2      0     188
                                              4 COMMON     2     2      0
                           i1___bmul
 ---------------------------------------------------------------------------------
 (11) i1___bmul                                            4     3      1     144
                                              0 COMMON     4     3      1
 ---------------------------------------------------------------------------------
 (11) _Sensor_setSampled                                   1     1      0      55
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (11) _Sensor_autoCalibration                              6     6      0     698
                                              4 COMMON     6     6      0
          _Sensor_setCalibratAcqTime
               _Sensor_setCalibrated
      i1_Sensor_isCalibratingAcqTime
                              i1_abs
 ---------------------------------------------------------------------------------
 (12) i1_abs                                               4     2      2      92
                                              0 COMMON     4     2      2
 ---------------------------------------------------------------------------------
 (12) i1_Sensor_isCalibratingAcqTime                       1     1      0      22
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (12) _Sensor_setCalibrated                                1     1      0     110
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (12) _Sensor_setCalibratAcqTime                           2     2      0     132
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 12
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _DATAEE_WriteByte
   _EUSART_Initialize
     _EUSART_SetRxInterruptHandler
     _EUSART_SetTxInterruptHandler
   _Load_System_Setting
     _DATAEE_ReadByte
   _MTOUCH_Button_isPressed
   _MTOUCH_Service_Mainloop
     _MTOUCH_Button_ServiceAll
       _Button_Service
         _Button_Deviation_Update
         _Button_Reading_Update
           _Button_Reading_Update_Helper
             _MTOUCH_Sensor_RawSample_Get
               ___bmul
         _Button_State_Initializing *
           _Button_Baseline_Initialize
             _MTOUCH_Sensor_RawSample_Get
               ___bmul
           _Button_Baseline_Update
         _Button_State_NotPressed *
           _Button_Baseline_Update
           _Button_DefaultCallback
           _MTOUCH_Button_Initialize
             _MTOUCH_Sensor_Calibrate
               ___bmul
         _Button_State_Pressed *
           _Button_DefaultCallback
           _MTOUCH_Button_Initialize
             _MTOUCH_Sensor_Calibrate
               ___bmul
         _MTOUCH_Button_Initialize *
           _MTOUCH_Sensor_Calibrate
             ___bmul
         _MTOUCH_Sensor_isCalibrated *
           ___bmul
         _MTOUCH_Sensor_wasSampled *
           ___bmul
     _MTOUCH_Sensor_SampleAll
       _MTOUCH_Sensor_isEnabled
         ___bmul
       _MTOUCH_Sensor_isSampling
       _MTOUCH_Sensor_wasSampled
         ___bmul
       _Sensor_FrequencyHopping
         _Sensor_FrequencyHopping_Autotune_Process
           ___bmul
           _abs
             ___bmul (ARG)
         _Sensor_postAcquisitionProcess
           _Sensor_DefaultCallback
           _Sensor_RawSample_Update
             _medianFilter
               ___bmul
           _Sensor_isEnabled
           _Sensor_setActive
           _Sensor_setInactive
           ___bmul
           _abs
             ___bmul (ARG)
         _Sensor_setSamplePeriod
       _Sensor_scheduleNextScan
         _MTOUCH_Sensor_isEnabled
           ___bmul
         _MTOUCH_Sensor_wasSampled
           ___bmul
         _Sensor_SetTrisBit
         _Sensor_isCalibrated
         _Sensor_isCalibratingAcqTime
         ___bmul
     _MTOUCH_Sensor_Sampled_ResetAll
       _Sensor_Sampled_Reset
     _MTOUCH_Tick
       _MTOUCH_Button_Tick
         _Button_Tick_helper
     _MTOUCH_needReburst
   _SYSTEM_Initialize
     _MTOUCH_Initialize
       _MTOUCH_Button_InitializeAll
         _MTOUCH_Button_Initialize
           _MTOUCH_Sensor_Calibrate
             ___bmul
       _MTOUCH_Sensor_InitializeAll
         _MTOUCH_Sensor_Initialize
           _MTOUCH_Sensor_Calibrate
             ___bmul
           _MTOUCH_Sensor_Enable
             ___bmul
           _Sensor_Sampled_Reset
           ___bmul
       _MTOUCH_Sensor_Sampled_ResetAll
         _Sensor_Sampled_Reset
       _MTOUCH_Sensor_Scan_Initialize
         _MTOUCH_Sensor_ADCC_Initialize
     _OSCILLATOR_Initialize
     _PIN_MANAGER_Initialize
     _PMD_Initialize
     _TMR0_Initialize
       _TMR0_SetInterruptHandler
     _TMR1_Initialize
       _TMR1_SetInterruptHandler
   _Save_System_Setting
     _DATAEE_WriteByte
   _TMR0_SetInterruptHandler
   _TMR1_SetInterruptHandler
   _v_uart_receive_data
     _EUSART_Read
   _v_uart_send_data
     _EUSART_Write

 _INTERRUPT_InterruptManager (ROOT)
   Absolute function(Fake) *
   _ADCC_ThresholdISR_mTouch *
     _MTOUCH_Sensor_Service
       _Sensor_autoCalibration
         _Sensor_setCalibratAcqTime
         _Sensor_setCalibrated
         i1_Sensor_isCalibratingAcqTime
         i1_abs
       _Sensor_setSampled
       i1_Sensor_SetTrisBit
       i1_Sensor_isCalibrated
       i1_Sensor_scheduleNextScan
         i1_MTOUCH_Sensor_isEnabled
           i1___bmul
         i1_MTOUCH_Sensor_wasSampled
           i1___bmul
         i1_Sensor_SetTrisBit
         i1_Sensor_isCalibrated
         i1_Sensor_isCalibratingAcqTime
         i1___bmul
       i1___bmul
   _EUSART_Receive_ISR *
   _EUSART_Transmit_ISR *
   _TMR0_ISR *
     Absolute function(Fake) *
     _TMR0_DefaultInterruptHandler *
     _v_service_routine *
       i1_MTOUCH_Button_isPressed
   _TMR1_ISR *
     Absolute function(Fake) *
     _TMR1_DefaultInterruptHandler *
     _TMR1_WriteTimer *
     _v_seg_display *
       i1_MTOUCH_Button_isPressed

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             7F0      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      E       E       2      100.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     1C      4C       5       95.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               50      0      4B       7       93.8%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITBANK2            50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BANK2               50      0      25       9       46.3%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BITBANK3            50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BANK3               50      0      30      11       60.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITBANK4            50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BANK4               50      0       0      13        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
ABS                  0      0      FA      14        0.0%
BITBANK5            50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BANK5               50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BITBANK6            50      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BANK6               50      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BITBANK7            50      0       0      19        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BANK7               50      0       0      20        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BANK8               50      0       0      22        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITBANK9            50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BANK9               50      0       0      24        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITBANK10           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BANK10              50      0       0      26        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITBANK11           50      0       0      27        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
DATA                 0      0      FA      28        0.0%
BANK11              50      0       0      29        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BITBANK12           50      0       0      30        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BANK12              50      0       0      31        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
BITBANK13           50      0       0      32        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%
BANK13              50      0       0      33        0.0%
BITBANK14           50      0       0      34        0.0%
BANK14              50      0       0      35        0.0%
BITBANK15           50      0       0      36        0.0%
BANK15              50      0       0      37        0.0%
BITBANK16           50      0       0      38        0.0%
BANK16              50      0       0      39        0.0%
BITBANK17           50      0       0      40        0.0%
BANK17              50      0       0      41        0.0%
BITBANK18           50      0       0      42        0.0%
BANK18              50      0       0      43        0.0%
BITBANK19           50      0       0      44        0.0%
BANK19              50      0       0      45        0.0%
BITBANK20           50      0       0      46        0.0%
BANK20              50      0       0      47        0.0%
BITBANK21           50      0       0      48        0.0%
BANK21              50      0       0      49        0.0%
BITBANK22           50      0       0      50        0.0%
BANK22              50      0       0      51        0.0%
BITBANK23           50      0       0      52        0.0%
BANK23              50      0       0      53        0.0%
BITBANK24           50      0       0      54        0.0%
BANK24              50      0       0      55        0.0%
BITBANK25           20      0       0      56        0.0%
BANK25              20      0       0      57        0.0%


Microchip Technology PIC Macro Assembler V2.05 build -831301201 
Symbol Table                                                                                   Tue May 07 14:26:19 2019

                                   ?_EUSART_SetRxInterruptHandler 0050  
                                    ?_MTOUCH_Sensor_RawSample_Get 0054  
                                                  ___bmul@product 0052  
                                   Sensor_FrequencyHopping@sensor 0065  
                                                     __CFG_CP$OFF 0000  
                                         ?_Sensor_autoCalibration 0070  
                                      __end_of_Sensor_setInactive 16E0  
                                       _Sensor_setCalibratAcqTime 0921  
                                                     __CFG_LVP$ON 0000  
                                                             l174 0A38  
                                                             l474 060C  
                                                             l749 16FB  
                                                             l973 0AF2  
                                                             l894 0A95  
                                                             _GIE 005F  
                                                    __CFG_CPD$OFF 0000  
                                                 _timer1ReloadVal 002A  
                                                             _abs 176B  
                                         __size_of_PMD_Initialize 0008  
                                                    __CFG_BORV$LO 0000  
                                                             wreg 0009  
                                ??_MTOUCH_Sensor_Sampled_ResetAll 0051  
                                 ?_MTOUCH_Sensor_Sampled_ResetAll 0070  
                                               ?_v_uart_send_data 0070  
                                __size_of_MTOUCH_Sensor_SampleAll 0028  
                               __size_of_MTOUCH_Sensor_Initialize 0018  
                                       ?_MTOUCH_Sensor_Initialize 0070  
                                 __size_of_Sensor_setSamplePeriod 0012  
                                                    ?_EUSART_Read 0070  
                                                    __CFG_ZCD$OFF 0000  
                                              ??_v_uart_send_data 0052  
                                                            l1111 067A  
                                                            l1113 0693  
                                                            ?_abs 0054  
                                                            l1109 0661  
                                                            l4010 0473  
                                                            l4004 043D  
                                                            l4102 0FF6  
                                                            l4110 0F31  
                                                            l4022 0496  
                                                            l4130 0603  
                                                            l4026 049C  
                                                            l4210 0A6F  
                                                            l4140 0EDC  
                                                            l4108 0F2D  
                                                            l4124 05CD  
                                                            l4044 04AF  
                                                            l4036 04A3  
                                                            l4028 04A0  
                                                            l4204 0A6D  
                                                            l4064 04D1  
                                                            l4224 0A4D  
                                                            l4090 1749  
                                                            l4058 04C3  
                                                            l4306 0436  
                                                            l4218 0A4B  
                                                            l5210 0129  
                                                            l4316 086E  
                                                            l5220 0139  
                                                            l5204 0121  
                                                            l4078 096D  
                                                            l4270 039B  
                                                            l4262 038D  
                                                            l5310 01D8  
                                                            l5302 01CD  
                                                            l5150 009D  
                                                            l4096 0FDA  
                                                            l4280 03CE  
                                                            l4272 03A3  
                                                            l4248 08C1  
                                                            l5320 01E6  
                                                            l5232 0157  
                                                            l5216 0131  
                                                            l4098 0FE2  
                                                            l3810 0370  
                                                            l3802 0338  
                                                            l5330 01F5  
                                                            l5242 0168  
                                                            l5162 00C5  
                                                            l4284 03E8  
                                                            l4268 0386  
                                                            l4620 07E0  
                                                            l5340 0204  
                                                            l5308 01D6  
                                                            l5252 0174  
                                                            l5180 00F4  
                                                            l5164 00C8  
                                                            l5156 00BC  
                                                            l3742 17D3  
                                                            l4366 0D95  
                                                            l3910 0A21  
                                                            l4286 03ED  
                                                            l4454 0B49  
                                                            l4446 0B32  
                                                            l5350 0213  
                                                            l5318 01E4  
                                                            l5254 0177  
                                                            l5182 00F8  
                                                            l3912 0A27  
                                                            l5328 01F3  
                                                            l5272 0199  
                                                            l5264 018F  
                                                            l5192 010F  
                                                            l4802 09BF  
                                                            l3738 17CD  
                                                            l3762 0952  
                                                            l4474 179A  
                                                            l3834 1787  
                                                            l4458 0B4B  
                                                            l4642 0AE7  
                                                            l5338 0202  
                                                            l5282 01AF  
                                                            l5274 019C  
                                                            l5194 0112  
                                                            l5186 00FE  
                                                            l4900 0655  
                                                            l3772 0258  
                                                            l3852 0B26  
                                                            l3908 0A1B  
                                                            l3916 0A2D  
                                                            l5348 0211  
                                                            l5188 0107  
                                                            l3790 02F0  
                                                            l3782 02B8  
                                                            l5358 0220  
                                                            l4912 069F  
                                                            l4904 066E  
                                                            l3960 08BD  
                                                            l4656 0B06  
                                                            l5296 01CA  
                                                            l3794 0300  
                                                            l5298 01C9  
                                                            l4916 06B8  
                                                            l4908 0687  
                                                            l3948 08A7  
                                                            l4756 09CC  
                                                            l3886 0D42  
                                                            l3878 070F  
                                                            l3990 0EB2  
                                                            l4934 0BF7  
                                                            l3984 0EA1  
                                                            l3986 0EA5  
                                                            l4964 0CAA  
                                                            l4896 063C  
                               __end_ofi1_MTOUCH_Sensor_isEnabled 083F  
                                   ?_Button_Reading_Update_Helper 0070  
                                                            _LATA 0016  
                                                            _LATB 0017  
                                                            _LATC 0018  
                                                            u2505 02DE  
                                                            u2515 0326  
                                                            u3180 0435  
                                                            u2605 06D7  
                                                            u2525 035E  
                                                            u2615 071D  
                                                            u3175 0425  
                                                            u3095 08C4  
                                                            u2705 0440  
                                                            u2465 0233  
                                                            u3275 0D59  
                                                            u2715 046D  
                                                            u2485 027E  
                                                            u4325 00B4  
                                                            u2575 0C12  
                                                            u2495 02A6  
                                                            u2585 0BCF  
                                                            u3810 09BD  
                                                            u2915 0F5A  
                                                            u2860 0FC1  
                                                            _PMD0 0796  
                                                            u3805 09AE  
                                                            u2685 0E9A  
                                                            _PMD1 0797  
                                                            _PMD2 0798  
                                                            u2855 0F89  
                                                            _PMD3 0799  
                                                            _PMD4 079A  
                                                            u2865 0FBD  
                                                            u2945 05E3  
                                                            _PMD5 079B  
                                                            u4797 00A1  
                                                            _PLLR 4480  
                                      Button_State_Pressed@button 005D  
                                         ??i1_Sensor_isCalibrated 0070  
                                                            _WPUA 0F39  
                                                            _WPUB 0F44  
                                                            _WPUC 0F4F  
                                                            _WPUE 0F65  
                                             _sensor_medianBuffer 00A0  
                                                    __CFG_WRT$OFF 0000  
                                                   __CFG_FCMEN$ON 0000  
                                              _MTOUCH_needReburst 07FE  
                                                            abs@a 0054  
                                                            _main 0063  
                            __size_of_MTOUCH_Button_InitializeAll 0022  
                                                            fsr0h 0005  
                                                            fsr1h 0007  
                                                            indf0 0000  
                                                            fsr0l 0004  
                                                            indf1 0001  
                                                            fsr1l 0006  
                            __size_of_MTOUCH_Sensor_InitializeAll 0022  
                                                            btemp 007E  
                                                   __CFG_BOREN$ON 0000  
                                                            start 0032  
                                         _i8_COMP_OFF_Temperature 0034  
                                     ?i1_MTOUCH_Sensor_wasSampled 0070  
                                       ??_Sensor_FrequencyHopping 0064  
                           __end_ofi1_Sensor_isCalibratingAcqTime 16BC  
                          __size_ofi1_Sensor_isCalibratingAcqTime 0009  
                                   i1_Sensor_isCalibratingAcqTime 16B3  
                                      ??_TMR1_SetInterruptHandler 0052  
                                                   __CFG_CSWEN$ON 0000  
                                               ___bmul@multiplier 0053  
                                                   __CFG_MCLRE$ON 0000  
                                             ?_MTOUCH_needReburst 0070  
                                         _u16_COMP_StartDelay_Sec 180E  
                                                   ?_medianFilter 0054  
                                  __end_of_Sensor_autoCalibration 07E0  
                                        ?_MTOUCH_Service_Mainloop 0070  
                                __size_of_MTOUCH_Button_isPressed 001C  
                                   __size_of_Button_State_Pressed 0060  
                                                           ??_abs 0056  
                                       __size_of_DATAEE_WriteByte 0022  
                                     ?_Button_Baseline_Initialize 0070  
                                         __end_of_TMR0_Initialize 0921  
Sensor_FrequencyHopping_Autotune_Process@varianceOverLimitCounter 00D2  
                                   ??_MTOUCH_Sensor_RawSample_Get 0056  
                                   Sensor_RawSample_Update@sensor 005F  
                                   Sensor_RawSample_Update@result 005D  
                                  ??_TMR0_DefaultInterruptHandler 0070  
                                       __size_of_Sensor_isEnabled 000F  
                                                   ?_EUSART_Write 0070  
                                  __size_of_OSCILLATOR_Initialize 000B  
                                                  _u8_COMP_Status 0036  
                                   __end_of_OSCILLATOR_Initialize 16FE  
                                                  _u8_DIS_Channel 003F  
                                       _EE_COMP_RUN_CountDown_Min 003B  
                             __end_of_Sensor_isCalibratingAcqTime 16F3  
                                     _Sensor_isCalibratingAcqTime 16E9  
                                                           _ADACC 0090  
                                                           _ADACQ 009D  
                                                           _ADCAP 009B  
                                                           ?_main 0070  
                                                           _ADCLK 0098  
                                                           _ADPCH 009E  
                                                           _ADREF 009A  
                                                           _ADPRE 009C  
                                                   __CFG_WDTE$OFF 0000  
                                                           _ADRPT 010D  
                                                           _T1CLK 0211  
                                                           _T1CON 020E  
                                                  __CFG_DEBUG$OFF 0000  
                                         __size_of_Button_Service 0055  
                                                           i1l232 0C51  
                                                           i1l174 0AC1  
                                                           i1l703 0030  
                                                           i1l691 000E  
                                                           i1l694 001A  
                                                           i1l696 0024  
                                                           i1l698 002B  
                                                           i1l985 09F7  
                                                           u303m0 0A69  
                                                           u305m0 0A47  
                                                           _OSCEN 0891  
                                                           _TMR0H 001D  
                                                           _TMR1H 020D  
                                                           _TMR0L 001C  
                                                           _TMR1L 020C  
                                                           _TRISA 0011  
                                                           _TRISB 0012  
                                                           _TRISC 0013  
                                                           i1_abs 1731  
                                                           _RXPPS 0ECB  
                               __size_of_TMR0_SetInterruptHandler 0006  
                                 __size_of_Button_DefaultCallback 0001  
                                       ?_TMR0_SetInterruptHandler 0050  
                                            ??_MTOUCH_needReburst 0050  
                                                __end_of_TMR0_ISR 17CA  
                                                __end_of_TMR1_ISR 0869  
                                                 _DATAEE_ReadByte 175C  
                                 __size_of_Sensor_DefaultCallback 0001  
                           __end_of_MTOUCH_Sensor_Scan_Initialize 0804  
                          __size_of_MTOUCH_Sensor_Scan_Initialize 0003  
                                   _MTOUCH_Sensor_Scan_Initialize 0801  
                                         Sensor_setSampled@sensor 0070  
                                 __end_of_Sensor_scheduleNextScan 0439  
                                                           main@i 006A  
                                __size_of_Button_State_NotPressed 00A1  
                                                __end_ofi1___bmul 17B9  
                                         __end_of_TMR1_Initialize 0A18  
                                                           pclath 000A  
                                            _Sensor_Sampled_Reset 16E0  
                                             _u8_SuperCool_Status 0038  
                                                           status 0003  
                                __size_of_MTOUCH_Sensor_isEnabled 0016  
                                                           wtemp0 007E  
                                       __size_of_Sensor_setActive 0009  
                                                 _TMR1_WriteTimer 174D  
                                          Sensor_isEnabled@sensor 0050  
                                                  _u8_IND_LEV_KEY 0040  
                                                  ??_medianFilter 0056  
                                                 __initialization 0034  
                                      ?i1_Sensor_scheduleNextScan 0070  
                                          _Sensor_setSamplePeriod 17DC  
                                                    __end_of_main 0225  
                                            _Sensor_setCalibrated 1723  
                                                  ??_EUSART_Write 0050  
                                        _u16_SLEEP_StartDelay_Sec 1810  
                                             _v_uart_receive_data 0BDA  
                                     ?_INTERRUPT_InterruptManager 0070  
                                  ??_EUSART_SetRxInterruptHandler 0052  
                                __end_of_MTOUCH_Button_Initialize 0C44  
                                                          ??_main 0069  
                                         _MTOUCH_Sensor_Calibrate 0804  
                                               _v_service_routine 0DA9  
                                         ??_Button_Reading_Update 005B  
                                                          ?i1_abs 0070  
                                __end_of_ADCC_ThresholdISR_mTouch 168B  
                            MTOUCH_Sensor_Sampled_ResetAll@sensor 0052  
                                        ?_Button_Deviation_Update 0070  
                                              ?_v_service_routine 0070  
                                                    ?_MTOUCH_Tick 0070  
                                    Button_Baseline_Update@button 0056  
                                                          _ADCON0 0093  
                                                          _ADCON1 0094  
                                                          _ADCON2 0095  
                                                          _ADCON3 0096  
                                                          _ADFLTR 0114  
                            __size_of_MTOUCH_Sensor_RawSample_Get 001A  
                                                          _ADLTHH 010F  
                                                          _ADLTHL 010E  
                                                          _ADUTHH 0111  
                                                          _ADUTHL 0110  
                                                          _ANSELA 0F38  
                                                          _ANSELB 0F43  
                                                          _ANSELC 0F4E  
                                                          _T0CON0 001E  
                                                          _T0CON1 001F  
                                                          _T1GATE 0210  
                                                          _T1GCON 020F  
                                     __end_ofi1_Sensor_SetTrisBit 0AC2  
                                            ?_v_uart_receive_data 0070  
                                                          _RC1REG 0119  
                                                          _RC1STA 011D  
                                         TMR1_WriteTimer@timerVal 0070  
                                                          i1l1133 0DE6  
                                                          i1l1142 0E02  
                                                          i1l1137 0DE9  
                                                          i1l1161 0E2E  
                                                          i1l1145 0E1F  
                                                          i1l1164 0E31  
                                                          i1l1157 0E2B  
                                                          i1l1167 0E3B  
                                                          _ODCONA 0F3A  
                                                          _ODCONB 0F45  
                                                          _ODCONC 0F50  
                                                          _RC6PPS 0F26  
                                                          i1l4400 054B  
                                                          i1l4154 0AA1  
                                                          i1l4162 0AB6  
                                                          i1l4172 083D  
                                                          i1l4156 0AA8  
                                                          i1l4420 058B  
                                                          i1l4500 0C6C  
                                                          i1l4342 07C0  
                                                          i1l4334 078B  
                                                          i1l4158 0AAF  
                                                          i1l4502 0C70  
                                                          i1l4430 09A3  
                                                          i1l4336 078F  
                                                          i1l4192 0852  
                                                          i1l4504 0C7A  
                                                          i1l4348 07D6  
                                                          i1l4382 04EB  
                                                          i1l4534 1757  
                                                          i1l4384 0501  
                                                          i1l4376 04F3  
                                                  __CFG_WDTCCS$SC 0000  
                                                          i1l4394 0530  
                                                          i1l4386 0509  
                                                          i1l4730 0E4D  
                                                          i1l4398 0546  
                                                          i1l4670 0DC3  
                                                          i1l4664 0DB2  
                                                          i1l4728 0E3F  
                                                          i1l4736 0E57  
                                                          i1l3890 17AA  
                                                          i1l4690 0DED  
                                                          i1l4682 0DDD  
                                                          i1l4674 0DCC  
                                                          i1l3894 17B0  
                                                          i1l4678 0DD5  
                                                          i1l4688 0DE7  
                                                          i1l4696 0DF7  
                                                          i1l4882 0974  
                                           ?_Sensor_Sampled_Reset 0070  
                                                          u322_25 076D  
                                                          u323_25 0778  
                                                          u325_25 07B1  
                                                          u341_25 0992  
                                                          u342_20 09A1  
                                             ??_v_service_routine 0072  
                                                          u337_25 057E  
                                                          u338_20 058A  
                                                  _u8_LOCK_Status 0037  
                                                          u368_20 0DF5  
                                                          _OSCFRQ 0893  
                                                          _TX1REG 011A  
                                                          _TX1STA 011E  
                               MTOUCH_Button_InitializeAll@button 005B  
                                                          i1abs@a 0070  
                                  ??_Button_Reading_Update_Helper 0058  
                                          _Button_DefaultCallback 0002  
                                 __end_of_MTOUCH_Service_Mainloop 09DD  
                                                  __CFG_PWRTE$OFF 0000  
                                 __end_of_i8_FC_TemperatureOffset 1815  
                                     ??i1_MTOUCH_Button_isPressed 0070  
                                             _Sensor_isCalibrated 1716  
                                     MTOUCH_Sensor_Service@sensor 007D  
                                             _Load_System_Setting 062F  
                            __end_of_TMR1_DefaultInterruptHandler 0801  
                           __size_of_TMR1_DefaultInterruptHandler 0001  
                                    _TMR1_DefaultInterruptHandler 0800  
                                          _Sensor_DefaultCallback 0003  
                                                   _packet_sample 00CC  
                                                          ___bmul 17CA  
                                           ?_Sensor_setCalibrated 0070  
                                                          _u8_seg 1800  
                               __end_ofi1_Sensor_scheduleNextScan 058E  
                                    Sensor_DefaultCallback@sensor 0050  
                                                  __CFG_STVREN$ON 0000  
                                             _EUSART_Transmit_ISR 09DD  
                                                ?_TMR0_Initialize 0070  
                                       __end_of_v_service_routine 0E03  
                                __end_of_MTOUCH_Button_ServiceAll 17A8  
                                  __size_of_MTOUCH_Sensor_Service 0039  
                                   __end_of_MTOUCH_Sensor_Service 0C7D  
                                    Sensor_autoCalibration@sensor 0079  
                                         __end_of_DATAEE_ReadByte 176B  
                                                  _PMD_Initialize 16AB  
                                         _MTOUCH_Sensor_SampleAll 0B30  
                                          _u8_Timer_Countdown_Min 003C  
                                    Button_DefaultCallback@button 0050  
                                            ?_Sensor_isCalibrated 0070  
                                            ?_Load_System_Setting 0070  
                                        ?_Sensor_RawSample_Update 0070  
                                         _i8_PC_TemperatureOffset 1813  
                                         ?_Button_Baseline_Update 0070  
                             Sensor_postAcquisitionProcess@sensor 0063  
                        TMR0_SetInterruptHandler@InterruptHandler 0050  
                        TMR1_SetInterruptHandler@InterruptHandler 0050  
                              __size_of_Sensor_setCalibratAcqTime 001A  
                                         __end_of_TMR1_WriteTimer 175C  
                                           ??_v_uart_receive_data 0052  
                                     ??i1_MTOUCH_Sensor_isEnabled 0074  
                                            ?_EUSART_Transmit_ISR 0070  
                                 MTOUCH_Sensor_RawSample_Get@name 0057  
                                                ?_TMR1_Initialize 0070  
                                            __size_of_EUSART_Read 001E  
                                               _SYSTEM_Initialize 17EE  
                                         __end_of__initialization 005F  
                             __size_of_Button_Baseline_Initialize 002F  
                                  ?_MTOUCH_Sensor_Scan_Initialize 0070  
                                 ??_Sensor_postAcquisitionProcess 0060  
                                              ?_SYSTEM_Initialize 0070  
                                             _Button_StateMachine 00DC  
                                    __size_of_Save_System_Setting 0048  
                                           __end_of_v_seg_display 0E5D  
                                      __end_of_Button_Tick_helper 0B80  
                                   MTOUCH_Sensor_Calibrate@sensor 0055  
                            __end_of_EUSART_SetTxInterruptHandler 16CE  
                           __size_of_EUSART_SetTxInterruptHandler 0009  
                                    _EUSART_SetTxInterruptHandler 16C5  
                                             ___bmul@multiplicand 0050  
                                                   __end_ofi1_abs 173F  
                               __size_of_MTOUCH_Sensor_isSampling 0003  
                                       ?_MTOUCH_Sensor_isSampling 0070  
                                                  __pcstackCOMMON 0070  
                                         _MTOUCH_Button_isPressed 09A5  
                                                    __pidataBANK1 1789  
                                             ??_SYSTEM_Initialize 005C  
                                                       ?_TMR0_ISR 0070  
                                                       ?_TMR1_ISR 0070  
                                   ?_TMR1_DefaultInterruptHandler 0070  
                                      __end_of_MTOUCH_Button_Tick 08D7  
                                                _DATAEE_WriteByte 0A7D  
                                __end_of_MTOUCH_Sensor_Initialize 08EF  
                                       ??_MTOUCH_Sensor_Calibrate 0054  
                                                _Sensor_isEnabled 177A  
                                __size_of_Sensor_scheduleNextScan 00B9  
                                 __end_of_Button_Deviation_Update 1000  
                                          __end_of_PMD_Initialize 16B3  
                                                       ?i1___bmul 0070  
                                        Sensor_setInactive@sensor 0050  
                                                  _Button_Service 0D54  
                                      ?_Button_State_Initializing 005D  
                                            Button_Service@button 0065  
                                       i1_MTOUCH_Button_isPressed 098A  
                                                         ??i1_abs 0072  
                                           ??_Sensor_isCalibrated 0050  
                                           ??_Load_System_Setting 0052  
                                  i1Sensor_scheduleNextScan@state 0078  
                                  __end_of_Button_Baseline_Update 0754  
       Sensor_FrequencyHopping_Autotune_Process@selectedFrequency 0061  
                                        _MTOUCH_Button_Initialize 0C0D  
                                            __end_of_medianFilter 0380  
                                                i1___bmul@product 0073  
                                         _Button_State_NotPressed 058E  
                                   __size_of_MTOUCH_Sensor_Enable 0013  
                                              _Sensor_setInactive 16D7  
                                       __end_of_SYSTEM_Initialize 1800  
                                           ??_EUSART_Transmit_ISR 0070  
                                MTOUCH_Sensor_isCalibrated@sensor 0056  
                                          ??_Sensor_Sampled_Reset 0050  
                                        _ADCC_ThresholdISR_mTouch 1686  
                                                      __pbssBANK0 0020  
                                                      __pbssBANK1 00A0  
                                                      __pbssBANK2 0120  
                                                      __pbssBANK3 01A0  
                                            __end_of_EUSART_Write 0B09  
                                         _MTOUCH_Sensor_isEnabled 08A9  
                                  __size_ofi1_Sensor_isCalibrated 000C  
                                   __end_ofi1_Sensor_isCalibrated 170A  
                                             ?_Sensor_setInactive 0070  
                                                _Sensor_setActive 16CE  
                                             _u16_COMP_DelayCount 0020  
                                     __size_of_EUSART_Receive_ISR 001B  
                                      __end_of_mtouch_button_init 1030  
                                            _u16_SLEEP_DelayCount 0022  
                                       __size_of_v_uart_send_data 003F  
                                          ??_Sensor_setCalibrated 0070  
                                                      __pmaintext 0063  
                                         Sensor_SetTrisBit@sensor 0051  
                                                         ?___bmul 0050  
                                   ?_EUSART_SetTxInterruptHandler 0050  
                                _EUSART_TxDefaultInterruptHandler 00DA  
                                __end_of_TMR0_SetInterruptHandler 1691  
                                       i1_MTOUCH_Sensor_isEnabled 082A  
                                                      ??_TMR0_ISR 0073  
                                                      ??_TMR1_ISR 0073  
                                  MTOUCH_Sensor_wasSampled@sensor 0055  
                                                      __pintentry 0004  
                                          __end_of_Button_Service 0DA9  
                             __end_of_MTOUCH_Button_InitializeAll 0A5B  
                                     _MTOUCH_Button_InitializeAll 0A39  
                                      __size_of_v_service_routine 005A  
                                                         _ADSTPTH 0113  
                                                         _ADSTPTL 0112  
                             __end_of_MTOUCH_Sensor_InitializeAll 0A7D  
                                     _MTOUCH_Sensor_InitializeAll 0A5B  
                                       ??_MTOUCH_Sensor_SampleAll 0066  
                                                      ??i1___bmul 0071  
                                                 ?_PMD_Initialize 0070  
                                 __end_of_Sensor_RawSample_Update 0B30  
                                            ??_Sensor_setInactive 0050  
                               __size_of_MTOUCH_Sensor_wasSampled 0016  
                                                ?_DATAEE_ReadByte 0050  
                                       ?_MTOUCH_Sensor_wasSampled 0070  
                                      _EE_COMP_TOTAL_RUN_Count_Hr 003A  
                                                   _eusartRxCount 0044  
                                       Sensor_isCalibrated@sensor 0051  
                                       i1Sensor_SetTrisBit@sensor 0071  
                               __end_of_Button_State_Initializing 0F79  
                                                    _EE_COMP_Flag 0035  
                                                         _SP1BRGH 011C  
                                                         _SP1BRGL 011B  
                                        _MTOUCH_Button_ServiceAll 1798  
                                                         _OSCCON1 088D  
                                                         _OSCCON3 088F  
                                   MTOUCH_Sensor_SampleAll@sensor 0067  
                                                         _NVMADRH 081B  
                                                         _NVMADRL 081A  
                                                         _NVMDATH 081D  
                                                         _OSCTUNE 0892  
                                                         _NVMDATL 081C  
                                __size_of_MTOUCH_Service_Mainloop 001C  
                                                         _NVMCON2 081F  
                                                         _SLRCONA 0F3B  
                                                         _SLRCONB 0F46  
                                                         _SLRCONC 0F51  
                                    __end_of_Button_State_Pressed 0F17  
                                Button_Baseline_Initialize@button 005C  
                                 Sensor_setCalibratAcqTime@sensor 0071  
                                                ?_TMR1_WriteTimer 0070  
                                            __size_of_MTOUCH_Tick 0003  
                            __size_of_Sensor_isCalibratingAcqTime 000A  
                                            DATAEE_WriteByte@bAdd 0050  
                                         ?_Sensor_setSamplePeriod 0070  
                                       ??_MTOUCH_Button_isPressed 0050  
                                                      _freq_index 004B  
                                               _Sensor_SetTrisBit 0A18  
                                                         _u8_DIG1 0043  
                                                         _u8_DIG2 0042  
                                                         _u8_DIG3 0041  
                           __end_of_Sensor_postAcquisitionProcess 0EB7  
                          __size_of_Sensor_postAcquisitionProcess 005A  
                                   _Sensor_postAcquisitionProcess 0E5D  
                                     ??i1_Sensor_scheduleNextScan 0076  
                                            __CFG_SCANE$available 0000  
                                              ?_Sensor_SetTrisBit 0050  
                                                 __size_of___bmul 0012  
                                  MTOUCH_Button_Initialize@button 0059  
                                          _i8_COMP_ON_Temperature 1812  
                                                 ?_Button_Service 0070  
                                                 _scanInterrupted 004C  
                                                         __ptext1 0C7D  
                                                         __ptext2 0AE5  
                                                         __ptext3 0BDA  
                                                         __ptext4 07E0  
                                                         __ptext5 0CBC  
                                                         __ptext6 0A7D  
                                                         __ptext7 17EE  
                                                         __ptext8 09FA  
                                                         __ptext9 1691  
                                     Button_Reading_Update@button 005B  
                                             ??_Sensor_SetTrisBit 0051  
                                  ??_TMR1_DefaultInterruptHandler 0070  
                                                       _T1CONbits 020E  
                                        _MTOUCH_Sensor_Initialize 08D7  
                                           _OSCILLATOR_Initialize 16F3  
                                                    __size_of_abs 000F  
                                       ??_Button_State_NotPressed 005E  
                               __size_of_TMR1_SetInterruptHandler 0006  
                                        ??_PIN_MANAGER_Initialize 0050  
                                       ?_TMR1_SetInterruptHandler 0050  
                                             i1___bmul@multiplier 0072  
                                  __size_of_Button_Reading_Update 000E  
                                     __size_of_MTOUCH_needReburst 0002  
                                   __end_of_Button_Reading_Update 174D  
                               MTOUCH_Sensor_InitializeAll@sensor 0059  
                                                _callback_sampled 00E9  
                                       ??_MTOUCH_Sensor_isEnabled 0054  
                                      __size_of_SYSTEM_Initialize 0012  
                                                         clrloop0 1698  
                                                _callback_pressed 00E7  
                                  MTOUCH_Sensor_Initialize@sensor 0057  
                                   Sensor_scheduleNextScan@sensor 005A  
                                            end_of_initialization 005F  
                                         ?_Button_DefaultCallback 0050  
                                  __end_of_Sensor_setSamplePeriod 17EE  
                                      __end_of_mtouch_sensor_init 104B  
                                                         init_ram 169D  
                                        ?_Sensor_FrequencyHopping 0070  
                                                         initloop 169E  
                                       __end_of_Sensor_SetTrisBit 0A39  
                                     i1Sensor_isCalibrated@sensor 0071  
                                         ?_Sensor_DefaultCallback 0050  
                                __size_of_Button_Deviation_Update 0087  
                                               _EUSART_Initialize 0B80  
                                    ??_MTOUCH_Sensor_isCalibrated 0054  
                                              ?_EUSART_Initialize 0070  
                             __end_of_MTOUCH_Sensor_RawSample_Get 0955  
                                     _MTOUCH_Sensor_RawSample_Get 093B  
                                         _Sensor_scheduleNextScan 0380  
                                           __CFG_WDTCPS$WDTCPS_31 0000  
                  Sensor_FrequencyHopping_Autotune_Process@sensor 0062  
                                             ??_EUSART_Initialize 0052  
                                  ??_EUSART_SetTxInterruptHandler 0052  
                                        _TMR0_SetInterruptHandler 168B  
                                           __size_of_medianFilter 015B  
                                          Sensor_setActive@sensor 0050  
                                             _Save_System_Setting 0CBC  
                                                 _u8_REF_SetLevel 0039  
                                   Button_Deviation_Update@button 005A  
                                                       _TRISAbits 0011  
                                       i1_Sensor_scheduleNextScan 04E6  
                                           __size_of_EUSART_Write 0024  
                                   MTOUCH_Sensor_isEnabled@sensor 0055  
                                      MTOUCH_Sensor_Enable@sensor 0055  
                                             _callback_notPressed 00E5  
                                                __CFG_FEXTOSC$OFF 0000  
                                __end_of_MTOUCH_Sensor_isSampling 1683  
                             __size_of_MTOUCH_Sensor_isCalibrated 001A  
                                  __end_of_Button_DefaultCallback 0003  
                                        __end_of_DATAEE_WriteByte 0A9F  
                                        __end_of_Sensor_isEnabled 1789  
                                      Sensor_setCalibrated@sensor 0070  
                                  __end_of_Sensor_DefaultCallback 0004  
                                       __end_of_EUSART_Initialize 0BAB  
                                        ??_Sensor_autoCalibration 0074  
                                            ?_Save_System_Setting 0070  
                                              medianFilter@sensor 005C  
                                __size_of_Sensor_RawSample_Update 0027  
                                                _v_uart_send_data 0C7D  
                                    __size_ofi1_Sensor_SetTrisBit 0023  
                                            _timer0ReloadVal16bit 0026  
                                                    _medianFilter 0225  
                                                   _u8_COMP_Start 0030  
                                            _Button_State_Pressed 0EB7  
                                                  __end_of___bmul 17DC  
                                                  __end_of_u8_seg 180E  
                           __end_of_MTOUCH_Sensor_ADCC_Initialize 0908  
                          __size_of_MTOUCH_Sensor_ADCC_Initialize 0019  
                                   _MTOUCH_Sensor_ADCC_Initialize 08EF  
                                      ??_MTOUCH_Button_Initialize 0056  
                __end_of_Sensor_FrequencyHopping_Autotune_Process 04E6  
               __size_of_Sensor_FrequencyHopping_Autotune_Process 00AD  
                      ??_Sensor_FrequencyHopping_Autotune_Process 0058  
                       ?_Sensor_FrequencyHopping_Autotune_Process 0070  
                        _Sensor_FrequencyHopping_Autotune_Process 0439  
                                 ??_MTOUCH_Sensor_Scan_Initialize 0050  
                                  ?_Sensor_postAcquisitionProcess 0070  
                                                    _EUSART_Write 0AE5  
                                               __size_of_TMR0_ISR 0011  
                                               __size_of_TMR1_ISR 0015  
                                              _Button_Tick_helper 0B58  
                                          ?_OSCILLATOR_Initialize 0070  
                                             MTOUCH_Button_Tick@i 0054  
                                      ??_ADCC_ThresholdISR_mTouch 007E  
                                        __end_of_Sensor_setActive 16D7  
                                     ??_Button_State_Initializing 005E  
                                     __end_of_v_uart_receive_data 0C0D  
                                               __size_ofi1___bmul 0011  
                                           _MTOUCH_Sensor_Service 0C44  
                                             start_initialization 0034  
                                         _MTOUCH_Service_Mainloop 09C1  
                                         _i8_FC_TemperatureOffset 1814  
                                        __size_of_TMR0_Initialize 0019  
                                 __size_of_PIN_MANAGER_Initialize 0023  
                                              _MTOUCH_Button_Tick 08BF  
                                             ?_Button_Tick_helper 0070  
                                                     __end_of_abs 177A  
                                                   ??_EUSART_Read 0050  
                                 __end_of_Sensor_FrequencyHopping 087E  
                    EUSART_SetRxInterruptHandler@interruptHandler 0050  
                    EUSART_SetTxInterruptHandler@interruptHandler 0050  
                                             ?_MTOUCH_Button_Tick 0070  
                                 Button_State_Initializing@button 005D  
                                           ??_Save_System_Setting 0054  
                                      __size_of_Sensor_SetTrisBit 0021  
                                             DATAEE_ReadByte@bAdd 0050  
                                 i1Sensor_scheduleNextScan@sensor 007A  
                                         medianFilter@bufferIndex 00D5  
                                __end_of_MTOUCH_Sensor_wasSampled 08A9  
                                                __CFG_LPBOREN$OFF 0000  
                                    ??i1_MTOUCH_Sensor_wasSampled 0074  
                                       ??_Sensor_scheduleNextScan 0056  
                                            ??_Button_Tick_helper 0050  
                                        __size_of_TMR1_Initialize 001E  
                                    __end_of_MTOUCH_Sensor_Enable 082A  
                                                        ??___bmul 0051  
                                                ??_PMD_Initialize 0050  
             Sensor_FrequencyHopping_Autotune_Process@maxVariance 005F  
                                           ?_Button_State_Pressed 005D  
                                      ??_MTOUCH_Button_ServiceAll 0066  
                                                     __pdataBANK1 00DC  
                                     __end_of_Sensor_isCalibrated 1723  
                                    ??_Button_Baseline_Initialize 0058  
                                     __end_of_Load_System_Setting 06C4  
                                            ??_MTOUCH_Button_Tick 0053  
                                              _mtouch_button_init 1000  
                                      Sensor_Sampled_Reset@sensor 0050  
                                  ?i1_Sensor_isCalibratingAcqTime 0070  
                                    ?_Sensor_isCalibratingAcqTime 0070  
                                                   _u8_3sec_Count 003E  
                                     __end_of_EUSART_Transmit_ISR 09FA  
                                                       ___latbits 0003  
                                                   _sampling_flag 004D  
                                          __size_of_v_seg_display 005A  
                                                   __pcstackBANK0 0050  
                                i1MTOUCH_Sensor_wasSampled@sensor 0075  
                                        Sensor_SetTrisBit@TrisBit 0050  
                                  MTOUCH_Button_ServiceAll@button 0067  
                             __size_ofi1_MTOUCH_Sensor_wasSampled 0015  
                                      __end_of_EUSART_Receive_ISR 098A  
                                 i1MTOUCH_Sensor_isEnabled@sensor 0075  
                                   __size_of_Sensor_Sampled_Reset 0009  
                                      __size_of_EUSART_Initialize 002B  
                                         _Button_Deviation_Update 0F79  
                                      ?_Sensor_setCalibratAcqTime 0070  
                                _EUSART_RxDefaultInterruptHandler 00D8  
                                             __end_of_EUSART_Read 07FE  
                                       _Button_State_Initializing 0F17  
                                        _MTOUCH_Sensor_isSampling 1680  
                              __end_of_MTOUCH_Sensor_isCalibrated 096F  
                                      _MTOUCH_Sensor_isCalibrated 0955  
                                           _TMR0_InterruptHandler 0024  
                                 __size_of_Sensor_autoCalibration 008C  
                                               _Sensor_setSampled 16A3  
                                           i1_Sensor_isCalibrated 16FE  
                                          _PIN_MANAGER_Initialize 0AC2  
                                                ??_Button_Service 0062  
                                        ?_MTOUCH_Sensor_Calibrate 0070  
                                            EUSART_Read@readValue 0051  
                                              ?_Sensor_setSampled 0070  
                              Button_Reading_Update_Helper@button 005A  
                                __end_of_TMR1_SetInterruptHandler 1697  
                                      ??_MTOUCH_Sensor_Initialize 0056  
                                   __size_of_Sensor_setCalibrated 000E  
                                                    _eusartRxHead 0046  
                                                    _eusartTxHead 0049  
                                                    _eusartRxTail 0045  
                                                __CFG_PPS1WAY$OFF 0000  
                                                    _eusartTxTail 0048  
                                    ??_INTERRUPT_InterruptManager 007E  
                                             ??_Sensor_setSampled 0070  
                                       ??_MTOUCH_Service_Mainloop 0068  
                                         _eusartTxBufferRemaining 0047  
                                          ?_MTOUCH_Sensor_Service 0070  
                                      i1Sensor_SetTrisBit@TrisBit 0070  
                                     __size_of_Sensor_setInactive 0009  
                                                        _BAUD1CON 011F  
                                  ?_MTOUCH_Sensor_ADCC_Initialize 0070  
                                                  __size_ofi1_abs 000E  
                                   ??_Sensor_isCalibratingAcqTime 0050  
                                 __end_of_u16_COMP_StartDelay_Sec 1810  
                                                   ??_MTOUCH_Tick 0055  
                                            __CFG_RSTOSC$HFINTPLL 0000  
                                        __size_of_DATAEE_ReadByte 000F  
                                                  _eusartRxBuffer 00BC  
                                               ??_TMR0_Initialize 0052  
                                                  _eusartTxBuffer 00C4  
                                       __end_of_Sensor_setSampled 16AB  
                                                        _LATCbits 0018  
                              __size_ofi1_Sensor_scheduleNextScan 00A8  
                                         _Sensor_RawSample_Update 0B09  
                               __end_of_Sensor_setCalibratAcqTime 093B  
                                                       clear_ram0 1697  
                                  __end_of_i8_COMP_ON_Temperature 1813  
                                                        _PIE0bits 0716  
                                                        _PIE1bits 0717  
                                                        _PIE3bits 0719  
                                                        _PIE4bits 071A  
                                           i1___bmul@multiplicand 0070  
                                        __size_of_TMR1_WriteTimer 000F  
                                                   _v_seg_display 0E03  
                             __size_of_INTERRUPT_InterruptManager 002E  
                                      ??_TMR0_SetInterruptHandler 0052  
                                                        _PIR0bits 070C  
                                                        _PIR1bits 070D  
                                                        _PIR3bits 070F  
                                                        _PIR4bits 0710  
                                          ??_Button_State_Pressed 005E  
                          __end_of_MTOUCH_Sensor_Sampled_ResetAll 0893  
                         __size_of_MTOUCH_Sensor_Sampled_ResetAll 0015  
                                  _MTOUCH_Sensor_Sampled_ResetAll 087E  
                                        ?_MTOUCH_Sensor_SampleAll 0070  
                                                        _TMR0_ISR 17B9  
                                                        _TMR1_ISR 0854  
                                              _mtouch_sensor_init 1030  
                                                  _u8_Rx_DataBuff 0120  
                                        _MTOUCH_Sensor_wasSampled 0893  
                                              _mtouch_time_toScan 004F  
                                __size_of_Sensor_FrequencyHopping 0015  
                                        ??_Button_Baseline_Update 0050  
                                               ??_TMR1_Initialize 0052  
                                                        i1___bmul 17A8  
          Sensor_FrequencyHopping_Autotune_Process@frequencyIndex 0063  
                                                      _ADCON0bits 0093  
                                          _Sensor_autoCalibration 0754  
                                                 _u8_SuperCool_Hr 1815  
                                      __end_of_MTOUCH_needReburst 0800  
                                             i1_Sensor_SetTrisBit 0A9F  
                                        __end_of_v_uart_send_data 0CBC  
                                           DATAEE_WriteByte@bData 0052  
                                            _MTOUCH_Sensor_Enable 0817  
                                                     _EUSART_Read 07E0  
                                        Button_Tick_helper@button 0052  
                                       ??_Button_Deviation_Update 0050  
                                           _Button_Reading_Update 173F  
                                                  _u8_Tx_DataBuff 00B2  
                                               ?_DATAEE_WriteByte 0050  
                                        ?_MTOUCH_Button_isPressed 0070  
                                               ?_Sensor_isEnabled 0070  
                                             __end_of_MTOUCH_Tick 1686  
                                               _MTOUCH_Initialize 170A  
                                              ??_DATAEE_WriteByte 0053  
                                 __end_of_MTOUCH_Sensor_Calibrate 0817  
                                          ?i1_Sensor_isCalibrated 0070  
                                              ??_Sensor_isEnabled 0050  
                                                  ?_v_seg_display 0070  
                              __end_ofi1_MTOUCH_Sensor_wasSampled 0854  
                                      i1_MTOUCH_Sensor_wasSampled 083F  
                                                _i8_R_Temperature 002C  
                                            ?i1_Sensor_SetTrisBit 0070  
                                              ?_MTOUCH_Initialize 0070  
                                                    _sample_delay 004A  
                                                        _u8_Index 0033  
                               Sensor_postAcquisitionProcess@name 0062  
                                         ??_OSCILLATOR_Initialize 0050  
                              __end_of_Button_Baseline_Initialize 0BDA  
                                      _Button_Baseline_Initialize 0BAB  
                                             ??_MTOUCH_Initialize 005C  
                                        ?_Button_State_NotPressed 005D  
                                        _TMR1_SetInterruptHandler 1691  
                                                   _u8_ErrorCodes 002F  
                                              Button_Service@name 0064  
                                           _TMR1_InterruptHandler 0028  
                                        ?_MTOUCH_Sensor_isEnabled 0070  
                                               ?_Sensor_setActive 0070  
                                                      _T0CON0bits 001E  
                                                     _v_u8_RxData 0031  
                                              ??_Sensor_setActive 0050  
                                           ?_MTOUCH_Sensor_Enable 0070  
                                                        __ptext10 0908  
                                                        __ptext11 168B  
                                                        __ptext20 0817  
                                                        __ptext12 16AB  
                                                        __ptext21 0A39  
                                                        __ptext13 0AC2  
                                                      _T1GCONbits 020F  
                                                        __ptext30 0380  
                                                        __ptext22 09C1  
                                                        __ptext14 16F3  
                                                        __ptext31 16E9  
                                                        __ptext23 07FE  
                                                        __ptext15 170A  
                                                        __ptext40 177A  
                                                        __ptext32 1716  
                                                        __ptext24 1683  
                                                        __ptext16 0801  
                                                        __ptext41 0B09  
                                                        __ptext33 0A18  
                                                        __ptext25 08BF  
                                                        __ptext17 08EF  
                                                        __ptext50 0955  
                                                        __ptext42 0225  
                                                        __ptext34 08A9  
                                                        __ptext26 0B58  
                                                        __ptext18 0A5B  
                                                        __ptext51 058E  
                                                        __ptext43 0003  
                                                        __ptext35 0869  
                                                        __ptext27 087E  
                                                        __ptext19 08D7  
                                                        __ptext60 0D04  
                                                        __ptext52 0F17  
                                                        __ptext44 0439  
                                                        __ptext36 17DC  
                                                        __ptext28 16E0  
                                                        __ptext61 093B  
                                                        __ptext53 0EB7  
                                                        __ptext45 176B  
                                                        __ptext37 0E5D  
                                                        __ptext29 0B30  
                                                        __ptext62 17CA  
                                                        __ptext54 0C0D  
                                                        __ptext46 1680  
                                                        __ptext38 16D7  
                                                        __ptext71 0854  
                                                        __ptext63 0F79  
                                                        __ptext55 0804  
                                                        __ptext47 1798  
                                                        __ptext39 16CE  
                                                        __ptext80 096F  
                                                        __ptext72 0800  
                                                        __ptext64 09A5  
                                                        __ptext56 0002  
                                                        __ptext48 0D54  
                                                        __ptext81 1686  
                                                        __ptext73 0E03  
                                                        __ptext65 062F  
                                                        __ptext57 06C4  
                                                        __ptext49 0893  
                                                        __ptext90 0754  
                                                        __ptext82 0C44  
                                                        __ptext74 174D  
                                                        __ptext66 175C  
                                                        __ptext58 0BAB  
                                                        __ptext91 1731  
                                                        __ptext83 04E6  
                                                        __ptext75 17B9  
                                                        __ptext67 0B80  
                                                        __ptext59 173F  
                                                        __ptext92 16B3  
                                                        __ptext84 16FE  
                                                        __ptext76 167F  
                                                        __ptext68 16C5  
                                                        __ptext93 1723  
                                                        __ptext85 0A9F  
                                                        __ptext77 0DA9  
                                                        __ptext69 16BC  
                                                        __ptext94 0921  
                                                        __ptext86 083F  
                                                        __ptext78 098A  
                                                        __ptext87 082A  
                                                        __ptext79 09DD  
                                                        __ptext88 17A8  
                                                        __ptext89 16A3  
                                       __end_of_MTOUCH_Initialize 1716  
                                     DATAEE_WriteByte@GIEBitValue 0053  
                                       ??_Sensor_RawSample_Update 005D  
                                                        _freq_hop 00E2  
                                      __size_of_Sensor_setSampled 0008  
                                               _currentScanSensor 004E  
                                                   __size_of_main 01C2  
                                           ??i1_Sensor_SetTrisBit 0071  
                                 __end_of_MTOUCH_Sensor_SampleAll 0B58  
                            __end_of_TMR0_DefaultInterruptHandler 1680  
                           __size_of_TMR0_DefaultInterruptHandler 0001  
                                    _TMR0_DefaultInterruptHandler 167F  
                                               ??_DATAEE_ReadByte 0052  
                                            __CFG_WDTCWS$WDTCWS_7 0000  
                                      Sensor_autoCalibration@name 0078  
                                 __end_of_i8_PC_TemperatureOffset 1814  
                                                      _RC1STAbits 011D  
                                                        int$flags 007E  
                                         __end_of_u8_SuperCool_Hr 1816  
                              __size_of_Button_State_Initializing 0062  
                              __end_of_INTERRUPT_InterruptManager 0032  
                                      _INTERRUPT_InterruptManager 0004  
                                               ??_TMR1_WriteTimer 0072  
                                 __size_of_Button_Baseline_Update 0090  
                                    ?_MTOUCH_Button_InitializeAll 0070  
                                    ?_MTOUCH_Sensor_InitializeAll 0070  
                                                   _mtouch_button 01A0  
                                                      _INTCONbits 000B  
                                                    _u8_Door_Open 002E  
                                                     _NVMCON1bits 081E  
                                                   _mtouch_sensor 012A  
                                 __end_of_MTOUCH_Button_isPressed 09C1  
                                        ??_Sensor_setSamplePeriod 0050  
                                      ??_MTOUCH_Sensor_isSampling 0050  
                                                     _MTOUCH_Tick 1683  
                                          ?_Button_Reading_Update 0070  
                                     __end_of_Save_System_Setting 0D04  
                                Button_Deviation_Update@deviation 005B  
                                    MTOUCH_Button_Initialize@name 0058  
                               __size_of_MTOUCH_Button_Initialize 0037  
                                                        intlevel1 0000  
                                       ?_MTOUCH_Button_Initialize 0070  
                                    __size_of_v_uart_receive_data 0033  
                                 ??i1_Sensor_isCalibratingAcqTime 0070  
                                                 ??_v_seg_display 0072  
                                         ?_PIN_MANAGER_Initialize 0070  
                               __size_of_ADCC_ThresholdISR_mTouch 0005  
                                     ??_Sensor_setCalibratAcqTime 0070  
                                       ?_ADCC_ThresholdISR_mTouch 0070  
                                               __CFG_CLKOUTEN$OFF 0000  
                                                   _u8_TouchDelay 003D  
                                     ?_MTOUCH_Sensor_isCalibrated 0070  
                              __size_ofi1_MTOUCH_Button_isPressed 001B  
                Sensor_FrequencyHopping_Autotune_Process@variance 005D  
                                    Sensor_scheduleNextScan@state 0058  
                                      ?i1_MTOUCH_Button_isPressed 0070  
                            __end_of_EUSART_SetRxInterruptHandler 16C5  
                           __size_of_EUSART_SetRxInterruptHandler 0009  
                                    _EUSART_SetRxInterruptHandler 16BC  
                                   ?_TMR0_DefaultInterruptHandler 0070  
                                     __size_of_Button_Tick_helper 0028  
                                 __end_of_Button_State_NotPressed 062F  
                                              _EUSART_Receive_ISR 096F  
                                         _Sensor_FrequencyHopping 0869  
                                         ??_MTOUCH_Sensor_Service 007B  
                                    __end_of_Sensor_Sampled_Reset 16E9  
                                 __end_of_MTOUCH_Sensor_isEnabled 08BF  
                                     __size_of_MTOUCH_Button_Tick 0018  
                                                   __pstringtext1 1800  
                                                   __pstringtext2 180E  
                                                   __pstringtext3 1810  
                                                   __pstringtext4 1812  
                                                   __pstringtext5 1813  
                                                   __pstringtext6 1814  
                                                   __pstringtext7 1815  
                                                   __pstringtext8 1000  
                                                   __pstringtext9 1030  
                                 Sensor_scheduleNextScan@skipScan 0059  
                               i1Sensor_scheduleNextScan@skipScan 0079  
                                             ?_EUSART_Receive_ISR 0070  
                                                    _u8_Tx_Status 0032  
                                   ??_MTOUCH_Button_InitializeAll 005A  
                                        ??_Button_DefaultCallback 0051  
                                   ??_MTOUCH_Sensor_InitializeAll 0058  
                                                 _TMR0_Initialize 0908  
                                __size_of_MTOUCH_Sensor_Calibrate 0013  
                                          ??_MTOUCH_Sensor_Enable 0054  
       Sensor_FrequencyHopping_Autotune_Process@newfrequencyFound 005C  
                               Sensor_isCalibratingAcqTime@sensor 0050  
                             i1Sensor_isCalibratingAcqTime@sensor 0070  
                                    __size_of_Sensor_isCalibrated 000D  
                                    __size_of_Load_System_Setting 0095  
                                        ??_Sensor_DefaultCallback 0051  
                                   i1MTOUCH_Button_isPressed@name 0071  
                                    __end_of_Sensor_setCalibrated 1731  
                              __size_ofi1_MTOUCH_Sensor_isEnabled 0015  
                            __end_of_Button_Reading_Update_Helper 0D54  
                           __size_of_Button_Reading_Update_Helper 0050  
                                    _Button_Reading_Update_Helper 0D04  
                                                      _TX1STAbits 011E  
                                      ?i1_MTOUCH_Sensor_isEnabled 0070  
                               __size_of_MTOUCH_Button_ServiceAll 0010  
                                       ?_MTOUCH_Button_ServiceAll 0070  
                                   Button_State_NotPressed@button 005D  
                                              EUSART_Write@txData 0051  
                                    __size_of_EUSART_Transmit_ISR 001D  
                                      __size_of_MTOUCH_Initialize 000C  
                                  __end_of_PIN_MANAGER_Initialize 0AE5  
                                          _Button_Baseline_Update 06C4  
                                                _i8_F_Temperature 002D  
                                        ?_Sensor_scheduleNextScan 0070  
                                 ??_MTOUCH_Sensor_ADCC_Initialize 0050  
                                     MTOUCH_Button_isPressed@name 0051  
                                            ??_EUSART_Receive_ISR 0070  
                                      ??_MTOUCH_Sensor_wasSampled 0054  
                                                 _TMR1_Initialize 09FA  
                                __end_of_u16_SLEEP_StartDelay_Sec 1812  
                               __end_ofi1_MTOUCH_Button_isPressed 09A5  
