

Microchip MPLAB XC8 Assembler V2.05 build -831301201 
                                                                                               Sun Jan 05 11:41:02 2020

Microchip MPLAB XC8 C Compiler v2.05 (Free license) build 20181220022703 Og1 
     1                           	processor	16F15344
     2                           	opt	pw 120
     3                           	opt	flic
     4                           	psect	idataBANK0,global,class=CODE,delta=2
     5                           	psect	idataBANK1,global,class=CODE,delta=2
     6                           	psect	stringtext1,global,class=STRCODE,delta=2
     7                           	psect	stringtext2,global,class=STRCODE,delta=2
     8                           	psect	stringtext3,global,class=STRCODE,delta=2
     9                           	psect	cinit,global,class=CODE,merge=1,delta=2
    10                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
    11                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    12                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    13                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    14                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
    15                           	psect	inittext,global,class=CODE,delta=2
    16                           	psect	clrtext,global,class=CODE,delta=2
    17                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    18                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    19                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    20                           	psect	text1,local,class=CODE,merge=1,delta=2
    21                           	psect	text2,local,class=CODE,merge=1,delta=2,group=1
    22                           	psect	text3,local,class=CODE,merge=1,delta=2,group=1
    23                           	psect	text4,local,class=CODE,merge=1,delta=2,group=1
    24                           	psect	text5,local,class=CODE,merge=1,delta=2
    25                           	psect	text6,local,class=CODE,merge=1,delta=2
    26                           	psect	text7,local,class=CODE,merge=1,delta=2
    27                           	psect	text8,local,class=CODE,merge=1,delta=2
    28                           	psect	text9,local,class=CODE,merge=1,delta=2
    29                           	psect	text10,local,class=CODE,merge=1,delta=2
    30                           	psect	text11,local,class=CODE,merge=1,delta=2
    31                           	psect	text12,local,class=CODE,merge=1,delta=2
    32                           	psect	text13,local,class=CODE,merge=1,delta=2
    33                           	psect	text14,local,class=CODE,merge=1,delta=2
    34                           	psect	text15,local,class=CODE,merge=1,delta=2
    35                           	psect	text16,local,class=CODE,merge=1,delta=2
    36                           	psect	text17,local,class=CODE,merge=1,delta=2
    37                           	psect	text18,local,class=CODE,merge=1,delta=2
    38                           	psect	text19,local,class=CODE,merge=1,delta=2,group=2
    39                           	psect	text20,local,class=CODE,merge=1,delta=2
    40                           	psect	text21,local,class=CODE,merge=1,delta=2
    41                           	psect	text22,local,class=CODE,merge=1,delta=2
    42                           	psect	text23,local,class=CODE,merge=1,delta=2
    43                           	psect	text24,local,class=CODE,merge=1,delta=2
    44                           	psect	text25,local,class=CODE,merge=1,delta=2
    45                           	psect	text26,local,class=CODE,merge=1,delta=2
    46                           	psect	text27,local,class=CODE,merge=1,inline,delta=2
    47                           	psect	text28,local,class=CODE,merge=1,delta=2
    48                           	psect	text29,local,class=CODE,merge=1,delta=2
    49                           	psect	text30,local,class=CODE,merge=1,inline,delta=2
    50                           	psect	text31,local,class=CODE,merge=1,delta=2
    51                           	psect	text32,local,class=CODE,merge=1,delta=2
    52                           	psect	text33,local,class=CODE,merge=1,delta=2
    53                           	psect	text34,local,class=CODE,merge=1,delta=2,group=2
    54                           	psect	text35,local,class=CODE,merge=1,inline,delta=2
    55                           	psect	text36,local,class=CODE,merge=1,inline,delta=2
    56                           	psect	text37,local,class=CODE,merge=1,delta=2
    57                           	psect	text38,local,class=CODE,merge=1,delta=2
    58                           	psect	text39,local,class=CODE,merge=1,delta=2
    59                           	psect	text40,local,class=CODE,merge=1,delta=2
    60                           	psect	text41,local,class=CODE,merge=1,delta=2
    61                           	psect	text42,local,class=CODE,merge=1,delta=2
    62                           	psect	text43,local,class=CODE,merge=1,delta=2
    63                           	psect	text44,local,class=CODE,merge=1,delta=2
    64                           	psect	text45,local,class=CODE,merge=1,delta=2
    65                           	psect	text46,local,class=CODE,merge=1,delta=2
    66                           	psect	text47,local,class=CODE,merge=1,delta=2
    67                           	psect	text48,local,class=CODE,merge=1,delta=2
    68                           	psect	text49,local,class=CODE,merge=1,delta=2
    69                           	psect	text50,local,class=CODE,merge=1,delta=2
    70                           	psect	text51,local,class=CODE,merge=1,delta=2
    71                           	psect	text52,local,class=CODE,merge=1,delta=2
    72                           	psect	text53,local,class=CODE,merge=1,delta=2
    73                           	psect	text54,local,class=CODE,merge=1,delta=2
    74                           	psect	text55,local,class=CODE,merge=1,delta=2
    75                           	psect	text56,local,class=CODE,merge=1,delta=2
    76                           	psect	text57,local,class=CODE,merge=1,delta=2
    77                           	psect	text58,local,class=CODE,merge=1,delta=2
    78                           	psect	text59,local,class=CODE,merge=1,delta=2
    79                           	psect	text60,local,class=CODE,merge=1,delta=2
    80                           	psect	text61,local,class=CODE,merge=1,delta=2
    81                           	psect	text62,local,class=CODE,merge=1,delta=2
    82                           	psect	text63,local,class=CODE,merge=1,delta=2
    83                           	psect	text64,local,class=CODE,merge=1,delta=2,group=1
    84                           	psect	text65,local,class=CODE,merge=1,delta=2
    85                           	psect	text66,local,class=CODE,merge=1,delta=2
    86                           	psect	text67,local,class=CODE,merge=1,delta=2
    87                           	psect	intentry,global,class=CODE,delta=2
    88                           	psect	text69,local,class=CODE,merge=1,delta=2
    89                           	psect	text70,local,class=CODE,merge=1,delta=2
    90                           	psect	text71,local,class=CODE,merge=1,delta=2
    91                           	psect	text72,local,class=CODE,merge=1,delta=2
    92                           	psect	text73,local,class=CODE,merge=1,delta=2
    93                           	psect	text74,local,class=CODE,merge=1,delta=2
    94                           	psect	text75,local,class=CODE,merge=1,delta=2
    95                           	psect	text76,local,class=CODE,merge=1,delta=2
    96                           	psect	text77,local,class=CODE,merge=1,delta=2
    97                           	psect	text78,local,class=CODE,merge=1,delta=2
    98                           	psect	text79,local,class=CODE,merge=1,delta=2
    99                           	psect	text80,local,class=CODE,merge=1,delta=2
   100                           	psect	text81,local,class=CODE,merge=1,delta=2
   101                           	psect	text82,local,class=CODE,merge=1,delta=2
   102                           	psect	text83,local,class=CODE,merge=1,delta=2
   103                           	dabs	1,0x7E,2
   104  0000                     
   105                           ; Version 2.05
   106                           ; Generated 20/12/2018 GMT
   107                           ; 
   108                           ; Copyright Â© 2018, Microchip Technology Inc. and its subsidiaries ("Microchip")
   109                           ; All rights reserved.
   110                           ; 
   111                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
   112                           ; 
   113                           ; Redistribution and use in source and binary forms, with or without modification, are
   114                           ; permitted provided that the following conditions are met:
   115                           ; 
   116                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   117                           ;        conditions and the following disclaimer.
   118                           ; 
   119                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   120                           ;        of conditions and the following disclaimer in the documentation and/or other
   121                           ;        materials provided with the distribution.
   122                           ; 
   123                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   124                           ;        software without specific prior written permission.
   125                           ; 
   126                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   127                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   128                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   129                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   130                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   131                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   132                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   133                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   134                           ; 
   135                           ; 
   136                           ; Code-generator required, PIC16F15344 Definitions
   137                           ; 
   138                           ; SFR Addresses
   139  0000                     	;# 
   140  0001                     	;# 
   141  0002                     	;# 
   142  0003                     	;# 
   143  0004                     	;# 
   144  0005                     	;# 
   145  0006                     	;# 
   146  0007                     	;# 
   147  0008                     	;# 
   148  0009                     	;# 
   149  000A                     	;# 
   150  000B                     	;# 
   151  000C                     	;# 
   152  000D                     	;# 
   153  000E                     	;# 
   154  0012                     	;# 
   155  0013                     	;# 
   156  0014                     	;# 
   157  0018                     	;# 
   158  0019                     	;# 
   159  001A                     	;# 
   160  009B                     	;# 
   161  009B                     	;# 
   162  009C                     	;# 
   163  009D                     	;# 
   164  009E                     	;# 
   165  009F                     	;# 
   166  0119                     	;# 
   167  0119                     	;# 
   168  0119                     	;# 
   169  011A                     	;# 
   170  011A                     	;# 
   171  011A                     	;# 
   172  011B                     	;# 
   173  011B                     	;# 
   174  011B                     	;# 
   175  011B                     	;# 
   176  011B                     	;# 
   177  011C                     	;# 
   178  011C                     	;# 
   179  011C                     	;# 
   180  011D                     	;# 
   181  011D                     	;# 
   182  011D                     	;# 
   183  011E                     	;# 
   184  011E                     	;# 
   185  011E                     	;# 
   186  011F                     	;# 
   187  011F                     	;# 
   188  011F                     	;# 
   189  011F                     	;# 
   190  011F                     	;# 
   191  018C                     	;# 
   192  018D                     	;# 
   193  018E                     	;# 
   194  018F                     	;# 
   195  0190                     	;# 
   196  0191                     	;# 
   197  0192                     	;# 
   198  020C                     	;# 
   199  020C                     	;# 
   200  020D                     	;# 
   201  020E                     	;# 
   202  020F                     	;# 
   203  020F                     	;# 
   204  0210                     	;# 
   205  0210                     	;# 
   206  0211                     	;# 
   207  0211                     	;# 
   208  028C                     	;# 
   209  028C                     	;# 
   210  028D                     	;# 
   211  028D                     	;# 
   212  028E                     	;# 
   213  028F                     	;# 
   214  0290                     	;# 
   215  0291                     	;# 
   216  030C                     	;# 
   217  030C                     	;# 
   218  030D                     	;# 
   219  030E                     	;# 
   220  030F                     	;# 
   221  0310                     	;# 
   222  0310                     	;# 
   223  0311                     	;# 
   224  0312                     	;# 
   225  0313                     	;# 
   226  0314                     	;# 
   227  0314                     	;# 
   228  0315                     	;# 
   229  0316                     	;# 
   230  0318                     	;# 
   231  0318                     	;# 
   232  0319                     	;# 
   233  031A                     	;# 
   234  031C                     	;# 
   235  031C                     	;# 
   236  031D                     	;# 
   237  031E                     	;# 
   238  038C                     	;# 
   239  038C                     	;# 
   240  038D                     	;# 
   241  038E                     	;# 
   242  058C                     	;# 
   243  058C                     	;# 
   244  058D                     	;# 
   245  058E                     	;# 
   246  058F                     	;# 
   247  058F                     	;# 
   248  0590                     	;# 
   249  0591                     	;# 
   250  0592                     	;# 
   251  0593                     	;# 
   252  059C                     	;# 
   253  059C                     	;# 
   254  059D                     	;# 
   255  059D                     	;# 
   256  059E                     	;# 
   257  059F                     	;# 
   258  060C                     	;# 
   259  060D                     	;# 
   260  060E                     	;# 
   261  060F                     	;# 
   262  0610                     	;# 
   263  0611                     	;# 
   264  0612                     	;# 
   265  0613                     	;# 
   266  0614                     	;# 
   267  070C                     	;# 
   268  070D                     	;# 
   269  070E                     	;# 
   270  070F                     	;# 
   271  0710                     	;# 
   272  0711                     	;# 
   273  0712                     	;# 
   274  0713                     	;# 
   275  0716                     	;# 
   276  0717                     	;# 
   277  0718                     	;# 
   278  0719                     	;# 
   279  071A                     	;# 
   280  071B                     	;# 
   281  071C                     	;# 
   282  071D                     	;# 
   283  0796                     	;# 
   284  0797                     	;# 
   285  0798                     	;# 
   286  0799                     	;# 
   287  079A                     	;# 
   288  079B                     	;# 
   289  080C                     	;# 
   290  080D                     	;# 
   291  080E                     	;# 
   292  080F                     	;# 
   293  0810                     	;# 
   294  0811                     	;# 
   295  0812                     	;# 
   296  0813                     	;# 
   297  0814                     	;# 
   298  081A                     	;# 
   299  081A                     	;# 
   300  081B                     	;# 
   301  081C                     	;# 
   302  081C                     	;# 
   303  081D                     	;# 
   304  081E                     	;# 
   305  081F                     	;# 
   306  088C                     	;# 
   307  088D                     	;# 
   308  088E                     	;# 
   309  088F                     	;# 
   310  0890                     	;# 
   311  0891                     	;# 
   312  0892                     	;# 
   313  0893                     	;# 
   314  0895                     	;# 
   315  0896                     	;# 
   316  090C                     	;# 
   317  090E                     	;# 
   318  090F                     	;# 
   319  091F                     	;# 
   320  098F                     	;# 
   321  098F                     	;# 
   322  0990                     	;# 
   323  0991                     	;# 
   324  0992                     	;# 
   325  0993                     	;# 
   326  0994                     	;# 
   327  0995                     	;# 
   328  0996                     	;# 
   329  0997                     	;# 
   330  0A19                     	;# 
   331  0A19                     	;# 
   332  0A1A                     	;# 
   333  0A1A                     	;# 
   334  0A1B                     	;# 
   335  0A1B                     	;# 
   336  0A1B                     	;# 
   337  0A1C                     	;# 
   338  0A1C                     	;# 
   339  0A1D                     	;# 
   340  0A1D                     	;# 
   341  0A1E                     	;# 
   342  0A1E                     	;# 
   343  0A1F                     	;# 
   344  0A1F                     	;# 
   345  0A1F                     	;# 
   346  1E0F                     	;# 
   347  1E10                     	;# 
   348  1E11                     	;# 
   349  1E12                     	;# 
   350  1E13                     	;# 
   351  1E14                     	;# 
   352  1E15                     	;# 
   353  1E16                     	;# 
   354  1E17                     	;# 
   355  1E18                     	;# 
   356  1E19                     	;# 
   357  1E1A                     	;# 
   358  1E1B                     	;# 
   359  1E1C                     	;# 
   360  1E1D                     	;# 
   361  1E1E                     	;# 
   362  1E1F                     	;# 
   363  1E20                     	;# 
   364  1E21                     	;# 
   365  1E22                     	;# 
   366  1E23                     	;# 
   367  1E24                     	;# 
   368  1E25                     	;# 
   369  1E26                     	;# 
   370  1E27                     	;# 
   371  1E28                     	;# 
   372  1E29                     	;# 
   373  1E2A                     	;# 
   374  1E2B                     	;# 
   375  1E2C                     	;# 
   376  1E2D                     	;# 
   377  1E2E                     	;# 
   378  1E2F                     	;# 
   379  1E30                     	;# 
   380  1E31                     	;# 
   381  1E32                     	;# 
   382  1E33                     	;# 
   383  1E34                     	;# 
   384  1E35                     	;# 
   385  1E36                     	;# 
   386  1E37                     	;# 
   387  1E8F                     	;# 
   388  1E90                     	;# 
   389  1E91                     	;# 
   390  1E92                     	;# 
   391  1E93                     	;# 
   392  1E9C                     	;# 
   393  1EA1                     	;# 
   394  1EA2                     	;# 
   395  1EB1                     	;# 
   396  1EBB                     	;# 
   397  1EBC                     	;# 
   398  1EBD                     	;# 
   399  1EBE                     	;# 
   400  1EC3                     	;# 
   401  1EC5                     	;# 
   402  1EC6                     	;# 
   403  1EC7                     	;# 
   404  1ECB                     	;# 
   405  1ECC                     	;# 
   406  1ECD                     	;# 
   407  1ECE                     	;# 
   408  1F10                     	;# 
   409  1F11                     	;# 
   410  1F12                     	;# 
   411  1F13                     	;# 
   412  1F14                     	;# 
   413  1F15                     	;# 
   414  1F1C                     	;# 
   415  1F1D                     	;# 
   416  1F1E                     	;# 
   417  1F1F                     	;# 
   418  1F20                     	;# 
   419  1F21                     	;# 
   420  1F22                     	;# 
   421  1F23                     	;# 
   422  1F24                     	;# 
   423  1F25                     	;# 
   424  1F26                     	;# 
   425  1F27                     	;# 
   426  1F38                     	;# 
   427  1F39                     	;# 
   428  1F3A                     	;# 
   429  1F3B                     	;# 
   430  1F3C                     	;# 
   431  1F3D                     	;# 
   432  1F3E                     	;# 
   433  1F3F                     	;# 
   434  1F43                     	;# 
   435  1F44                     	;# 
   436  1F45                     	;# 
   437  1F46                     	;# 
   438  1F47                     	;# 
   439  1F48                     	;# 
   440  1F49                     	;# 
   441  1F4A                     	;# 
   442  1F4E                     	;# 
   443  1F4F                     	;# 
   444  1F50                     	;# 
   445  1F51                     	;# 
   446  1F52                     	;# 
   447  1F53                     	;# 
   448  1F54                     	;# 
   449  1F55                     	;# 
   450  1FE4                     	;# 
   451  1FE5                     	;# 
   452  1FE6                     	;# 
   453  1FE7                     	;# 
   454  1FE8                     	;# 
   455  1FE8                     	;# 
   456  1FE9                     	;# 
   457  1FEA                     	;# 
   458  1FEA                     	;# 
   459  1FEB                     	;# 
   460  1FED                     	;# 
   461  1FEE                     	;# 
   462  1FEF                     	;# 
   463  0000                     	;# 
   464  0001                     	;# 
   465  0002                     	;# 
   466  0003                     	;# 
   467  0004                     	;# 
   468  0005                     	;# 
   469  0006                     	;# 
   470  0007                     	;# 
   471  0008                     	;# 
   472  0009                     	;# 
   473  000A                     	;# 
   474  000B                     	;# 
   475  000C                     	;# 
   476  000D                     	;# 
   477  000E                     	;# 
   478  0012                     	;# 
   479  0013                     	;# 
   480  0014                     	;# 
   481  0018                     	;# 
   482  0019                     	;# 
   483  001A                     	;# 
   484  009B                     	;# 
   485  009B                     	;# 
   486  009C                     	;# 
   487  009D                     	;# 
   488  009E                     	;# 
   489  009F                     	;# 
   490  0119                     	;# 
   491  0119                     	;# 
   492  0119                     	;# 
   493  011A                     	;# 
   494  011A                     	;# 
   495  011A                     	;# 
   496  011B                     	;# 
   497  011B                     	;# 
   498  011B                     	;# 
   499  011B                     	;# 
   500  011B                     	;# 
   501  011C                     	;# 
   502  011C                     	;# 
   503  011C                     	;# 
   504  011D                     	;# 
   505  011D                     	;# 
   506  011D                     	;# 
   507  011E                     	;# 
   508  011E                     	;# 
   509  011E                     	;# 
   510  011F                     	;# 
   511  011F                     	;# 
   512  011F                     	;# 
   513  011F                     	;# 
   514  011F                     	;# 
   515  018C                     	;# 
   516  018D                     	;# 
   517  018E                     	;# 
   518  018F                     	;# 
   519  0190                     	;# 
   520  0191                     	;# 
   521  0192                     	;# 
   522  020C                     	;# 
   523  020C                     	;# 
   524  020D                     	;# 
   525  020E                     	;# 
   526  020F                     	;# 
   527  020F                     	;# 
   528  0210                     	;# 
   529  0210                     	;# 
   530  0211                     	;# 
   531  0211                     	;# 
   532  028C                     	;# 
   533  028C                     	;# 
   534  028D                     	;# 
   535  028D                     	;# 
   536  028E                     	;# 
   537  028F                     	;# 
   538  0290                     	;# 
   539  0291                     	;# 
   540  030C                     	;# 
   541  030C                     	;# 
   542  030D                     	;# 
   543  030E                     	;# 
   544  030F                     	;# 
   545  0310                     	;# 
   546  0310                     	;# 
   547  0311                     	;# 
   548  0312                     	;# 
   549  0313                     	;# 
   550  0314                     	;# 
   551  0314                     	;# 
   552  0315                     	;# 
   553  0316                     	;# 
   554  0318                     	;# 
   555  0318                     	;# 
   556  0319                     	;# 
   557  031A                     	;# 
   558  031C                     	;# 
   559  031C                     	;# 
   560  031D                     	;# 
   561  031E                     	;# 
   562  038C                     	;# 
   563  038C                     	;# 
   564  038D                     	;# 
   565  038E                     	;# 
   566  058C                     	;# 
   567  058C                     	;# 
   568  058D                     	;# 
   569  058E                     	;# 
   570  058F                     	;# 
   571  058F                     	;# 
   572  0590                     	;# 
   573  0591                     	;# 
   574  0592                     	;# 
   575  0593                     	;# 
   576  059C                     	;# 
   577  059C                     	;# 
   578  059D                     	;# 
   579  059D                     	;# 
   580  059E                     	;# 
   581  059F                     	;# 
   582  060C                     	;# 
   583  060D                     	;# 
   584  060E                     	;# 
   585  060F                     	;# 
   586  0610                     	;# 
   587  0611                     	;# 
   588  0612                     	;# 
   589  0613                     	;# 
   590  0614                     	;# 
   591  070C                     	;# 
   592  070D                     	;# 
   593  070E                     	;# 
   594  070F                     	;# 
   595  0710                     	;# 
   596  0711                     	;# 
   597  0712                     	;# 
   598  0713                     	;# 
   599  0716                     	;# 
   600  0717                     	;# 
   601  0718                     	;# 
   602  0719                     	;# 
   603  071A                     	;# 
   604  071B                     	;# 
   605  071C                     	;# 
   606  071D                     	;# 
   607  0796                     	;# 
   608  0797                     	;# 
   609  0798                     	;# 
   610  0799                     	;# 
   611  079A                     	;# 
   612  079B                     	;# 
   613  080C                     	;# 
   614  080D                     	;# 
   615  080E                     	;# 
   616  080F                     	;# 
   617  0810                     	;# 
   618  0811                     	;# 
   619  0812                     	;# 
   620  0813                     	;# 
   621  0814                     	;# 
   622  081A                     	;# 
   623  081A                     	;# 
   624  081B                     	;# 
   625  081C                     	;# 
   626  081C                     	;# 
   627  081D                     	;# 
   628  081E                     	;# 
   629  081F                     	;# 
   630  088C                     	;# 
   631  088D                     	;# 
   632  088E                     	;# 
   633  088F                     	;# 
   634  0890                     	;# 
   635  0891                     	;# 
   636  0892                     	;# 
   637  0893                     	;# 
   638  0895                     	;# 
   639  0896                     	;# 
   640  090C                     	;# 
   641  090E                     	;# 
   642  090F                     	;# 
   643  091F                     	;# 
   644  098F                     	;# 
   645  098F                     	;# 
   646  0990                     	;# 
   647  0991                     	;# 
   648  0992                     	;# 
   649  0993                     	;# 
   650  0994                     	;# 
   651  0995                     	;# 
   652  0996                     	;# 
   653  0997                     	;# 
   654  0A19                     	;# 
   655  0A19                     	;# 
   656  0A1A                     	;# 
   657  0A1A                     	;# 
   658  0A1B                     	;# 
   659  0A1B                     	;# 
   660  0A1B                     	;# 
   661  0A1C                     	;# 
   662  0A1C                     	;# 
   663  0A1D                     	;# 
   664  0A1D                     	;# 
   665  0A1E                     	;# 
   666  0A1E                     	;# 
   667  0A1F                     	;# 
   668  0A1F                     	;# 
   669  0A1F                     	;# 
   670  1E0F                     	;# 
   671  1E10                     	;# 
   672  1E11                     	;# 
   673  1E12                     	;# 
   674  1E13                     	;# 
   675  1E14                     	;# 
   676  1E15                     	;# 
   677  1E16                     	;# 
   678  1E17                     	;# 
   679  1E18                     	;# 
   680  1E19                     	;# 
   681  1E1A                     	;# 
   682  1E1B                     	;# 
   683  1E1C                     	;# 
   684  1E1D                     	;# 
   685  1E1E                     	;# 
   686  1E1F                     	;# 
   687  1E20                     	;# 
   688  1E21                     	;# 
   689  1E22                     	;# 
   690  1E23                     	;# 
   691  1E24                     	;# 
   692  1E25                     	;# 
   693  1E26                     	;# 
   694  1E27                     	;# 
   695  1E28                     	;# 
   696  1E29                     	;# 
   697  1E2A                     	;# 
   698  1E2B                     	;# 
   699  1E2C                     	;# 
   700  1E2D                     	;# 
   701  1E2E                     	;# 
   702  1E2F                     	;# 
   703  1E30                     	;# 
   704  1E31                     	;# 
   705  1E32                     	;# 
   706  1E33                     	;# 
   707  1E34                     	;# 
   708  1E35                     	;# 
   709  1E36                     	;# 
   710  1E37                     	;# 
   711  1E8F                     	;# 
   712  1E90                     	;# 
   713  1E91                     	;# 
   714  1E92                     	;# 
   715  1E93                     	;# 
   716  1E9C                     	;# 
   717  1EA1                     	;# 
   718  1EA2                     	;# 
   719  1EB1                     	;# 
   720  1EBB                     	;# 
   721  1EBC                     	;# 
   722  1EBD                     	;# 
   723  1EBE                     	;# 
   724  1EC3                     	;# 
   725  1EC5                     	;# 
   726  1EC6                     	;# 
   727  1EC7                     	;# 
   728  1ECB                     	;# 
   729  1ECC                     	;# 
   730  1ECD                     	;# 
   731  1ECE                     	;# 
   732  1F10                     	;# 
   733  1F11                     	;# 
   734  1F12                     	;# 
   735  1F13                     	;# 
   736  1F14                     	;# 
   737  1F15                     	;# 
   738  1F1C                     	;# 
   739  1F1D                     	;# 
   740  1F1E                     	;# 
   741  1F1F                     	;# 
   742  1F20                     	;# 
   743  1F21                     	;# 
   744  1F22                     	;# 
   745  1F23                     	;# 
   746  1F24                     	;# 
   747  1F25                     	;# 
   748  1F26                     	;# 
   749  1F27                     	;# 
   750  1F38                     	;# 
   751  1F39                     	;# 
   752  1F3A                     	;# 
   753  1F3B                     	;# 
   754  1F3C                     	;# 
   755  1F3D                     	;# 
   756  1F3E                     	;# 
   757  1F3F                     	;# 
   758  1F43                     	;# 
   759  1F44                     	;# 
   760  1F45                     	;# 
   761  1F46                     	;# 
   762  1F47                     	;# 
   763  1F48                     	;# 
   764  1F49                     	;# 
   765  1F4A                     	;# 
   766  1F4E                     	;# 
   767  1F4F                     	;# 
   768  1F50                     	;# 
   769  1F51                     	;# 
   770  1F52                     	;# 
   771  1F53                     	;# 
   772  1F54                     	;# 
   773  1F55                     	;# 
   774  1FE4                     	;# 
   775  1FE5                     	;# 
   776  1FE6                     	;# 
   777  1FE7                     	;# 
   778  1FE8                     	;# 
   779  1FE8                     	;# 
   780  1FE9                     	;# 
   781  1FEA                     	;# 
   782  1FEA                     	;# 
   783  1FEB                     	;# 
   784  1FED                     	;# 
   785  1FEE                     	;# 
   786  1FEF                     	;# 
   787  0000                     	;# 
   788  0001                     	;# 
   789  0002                     	;# 
   790  0003                     	;# 
   791  0004                     	;# 
   792  0005                     	;# 
   793  0006                     	;# 
   794  0007                     	;# 
   795  0008                     	;# 
   796  0009                     	;# 
   797  000A                     	;# 
   798  000B                     	;# 
   799  000C                     	;# 
   800  000D                     	;# 
   801  000E                     	;# 
   802  0012                     	;# 
   803  0013                     	;# 
   804  0014                     	;# 
   805  0018                     	;# 
   806  0019                     	;# 
   807  001A                     	;# 
   808  009B                     	;# 
   809  009B                     	;# 
   810  009C                     	;# 
   811  009D                     	;# 
   812  009E                     	;# 
   813  009F                     	;# 
   814  0119                     	;# 
   815  0119                     	;# 
   816  0119                     	;# 
   817  011A                     	;# 
   818  011A                     	;# 
   819  011A                     	;# 
   820  011B                     	;# 
   821  011B                     	;# 
   822  011B                     	;# 
   823  011B                     	;# 
   824  011B                     	;# 
   825  011C                     	;# 
   826  011C                     	;# 
   827  011C                     	;# 
   828  011D                     	;# 
   829  011D                     	;# 
   830  011D                     	;# 
   831  011E                     	;# 
   832  011E                     	;# 
   833  011E                     	;# 
   834  011F                     	;# 
   835  011F                     	;# 
   836  011F                     	;# 
   837  011F                     	;# 
   838  011F                     	;# 
   839  018C                     	;# 
   840  018D                     	;# 
   841  018E                     	;# 
   842  018F                     	;# 
   843  0190                     	;# 
   844  0191                     	;# 
   845  0192                     	;# 
   846  020C                     	;# 
   847  020C                     	;# 
   848  020D                     	;# 
   849  020E                     	;# 
   850  020F                     	;# 
   851  020F                     	;# 
   852  0210                     	;# 
   853  0210                     	;# 
   854  0211                     	;# 
   855  0211                     	;# 
   856  028C                     	;# 
   857  028C                     	;# 
   858  028D                     	;# 
   859  028D                     	;# 
   860  028E                     	;# 
   861  028F                     	;# 
   862  0290                     	;# 
   863  0291                     	;# 
   864  030C                     	;# 
   865  030C                     	;# 
   866  030D                     	;# 
   867  030E                     	;# 
   868  030F                     	;# 
   869  0310                     	;# 
   870  0310                     	;# 
   871  0311                     	;# 
   872  0312                     	;# 
   873  0313                     	;# 
   874  0314                     	;# 
   875  0314                     	;# 
   876  0315                     	;# 
   877  0316                     	;# 
   878  0318                     	;# 
   879  0318                     	;# 
   880  0319                     	;# 
   881  031A                     	;# 
   882  031C                     	;# 
   883  031C                     	;# 
   884  031D                     	;# 
   885  031E                     	;# 
   886  038C                     	;# 
   887  038C                     	;# 
   888  038D                     	;# 
   889  038E                     	;# 
   890  058C                     	;# 
   891  058C                     	;# 
   892  058D                     	;# 
   893  058E                     	;# 
   894  058F                     	;# 
   895  058F                     	;# 
   896  0590                     	;# 
   897  0591                     	;# 
   898  0592                     	;# 
   899  0593                     	;# 
   900  059C                     	;# 
   901  059C                     	;# 
   902  059D                     	;# 
   903  059D                     	;# 
   904  059E                     	;# 
   905  059F                     	;# 
   906  060C                     	;# 
   907  060D                     	;# 
   908  060E                     	;# 
   909  060F                     	;# 
   910  0610                     	;# 
   911  0611                     	;# 
   912  0612                     	;# 
   913  0613                     	;# 
   914  0614                     	;# 
   915  070C                     	;# 
   916  070D                     	;# 
   917  070E                     	;# 
   918  070F                     	;# 
   919  0710                     	;# 
   920  0711                     	;# 
   921  0712                     	;# 
   922  0713                     	;# 
   923  0716                     	;# 
   924  0717                     	;# 
   925  0718                     	;# 
   926  0719                     	;# 
   927  071A                     	;# 
   928  071B                     	;# 
   929  071C                     	;# 
   930  071D                     	;# 
   931  0796                     	;# 
   932  0797                     	;# 
   933  0798                     	;# 
   934  0799                     	;# 
   935  079A                     	;# 
   936  079B                     	;# 
   937  080C                     	;# 
   938  080D                     	;# 
   939  080E                     	;# 
   940  080F                     	;# 
   941  0810                     	;# 
   942  0811                     	;# 
   943  0812                     	;# 
   944  0813                     	;# 
   945  0814                     	;# 
   946  081A                     	;# 
   947  081A                     	;# 
   948  081B                     	;# 
   949  081C                     	;# 
   950  081C                     	;# 
   951  081D                     	;# 
   952  081E                     	;# 
   953  081F                     	;# 
   954  088C                     	;# 
   955  088D                     	;# 
   956  088E                     	;# 
   957  088F                     	;# 
   958  0890                     	;# 
   959  0891                     	;# 
   960  0892                     	;# 
   961  0893                     	;# 
   962  0895                     	;# 
   963  0896                     	;# 
   964  090C                     	;# 
   965  090E                     	;# 
   966  090F                     	;# 
   967  091F                     	;# 
   968  098F                     	;# 
   969  098F                     	;# 
   970  0990                     	;# 
   971  0991                     	;# 
   972  0992                     	;# 
   973  0993                     	;# 
   974  0994                     	;# 
   975  0995                     	;# 
   976  0996                     	;# 
   977  0997                     	;# 
   978  0A19                     	;# 
   979  0A19                     	;# 
   980  0A1A                     	;# 
   981  0A1A                     	;# 
   982  0A1B                     	;# 
   983  0A1B                     	;# 
   984  0A1B                     	;# 
   985  0A1C                     	;# 
   986  0A1C                     	;# 
   987  0A1D                     	;# 
   988  0A1D                     	;# 
   989  0A1E                     	;# 
   990  0A1E                     	;# 
   991  0A1F                     	;# 
   992  0A1F                     	;# 
   993  0A1F                     	;# 
   994  1E0F                     	;# 
   995  1E10                     	;# 
   996  1E11                     	;# 
   997  1E12                     	;# 
   998  1E13                     	;# 
   999  1E14                     	;# 
  1000  1E15                     	;# 
  1001  1E16                     	;# 
  1002  1E17                     	;# 
  1003  1E18                     	;# 
  1004  1E19                     	;# 
  1005  1E1A                     	;# 
  1006  1E1B                     	;# 
  1007  1E1C                     	;# 
  1008  1E1D                     	;# 
  1009  1E1E                     	;# 
  1010  1E1F                     	;# 
  1011  1E20                     	;# 
  1012  1E21                     	;# 
  1013  1E22                     	;# 
  1014  1E23                     	;# 
  1015  1E24                     	;# 
  1016  1E25                     	;# 
  1017  1E26                     	;# 
  1018  1E27                     	;# 
  1019  1E28                     	;# 
  1020  1E29                     	;# 
  1021  1E2A                     	;# 
  1022  1E2B                     	;# 
  1023  1E2C                     	;# 
  1024  1E2D                     	;# 
  1025  1E2E                     	;# 
  1026  1E2F                     	;# 
  1027  1E30                     	;# 
  1028  1E31                     	;# 
  1029  1E32                     	;# 
  1030  1E33                     	;# 
  1031  1E34                     	;# 
  1032  1E35                     	;# 
  1033  1E36                     	;# 
  1034  1E37                     	;# 
  1035  1E8F                     	;# 
  1036  1E90                     	;# 
  1037  1E91                     	;# 
  1038  1E92                     	;# 
  1039  1E93                     	;# 
  1040  1E9C                     	;# 
  1041  1EA1                     	;# 
  1042  1EA2                     	;# 
  1043  1EB1                     	;# 
  1044  1EBB                     	;# 
  1045  1EBC                     	;# 
  1046  1EBD                     	;# 
  1047  1EBE                     	;# 
  1048  1EC3                     	;# 
  1049  1EC5                     	;# 
  1050  1EC6                     	;# 
  1051  1EC7                     	;# 
  1052  1ECB                     	;# 
  1053  1ECC                     	;# 
  1054  1ECD                     	;# 
  1055  1ECE                     	;# 
  1056  1F10                     	;# 
  1057  1F11                     	;# 
  1058  1F12                     	;# 
  1059  1F13                     	;# 
  1060  1F14                     	;# 
  1061  1F15                     	;# 
  1062  1F1C                     	;# 
  1063  1F1D                     	;# 
  1064  1F1E                     	;# 
  1065  1F1F                     	;# 
  1066  1F20                     	;# 
  1067  1F21                     	;# 
  1068  1F22                     	;# 
  1069  1F23                     	;# 
  1070  1F24                     	;# 
  1071  1F25                     	;# 
  1072  1F26                     	;# 
  1073  1F27                     	;# 
  1074  1F38                     	;# 
  1075  1F39                     	;# 
  1076  1F3A                     	;# 
  1077  1F3B                     	;# 
  1078  1F3C                     	;# 
  1079  1F3D                     	;# 
  1080  1F3E                     	;# 
  1081  1F3F                     	;# 
  1082  1F43                     	;# 
  1083  1F44                     	;# 
  1084  1F45                     	;# 
  1085  1F46                     	;# 
  1086  1F47                     	;# 
  1087  1F48                     	;# 
  1088  1F49                     	;# 
  1089  1F4A                     	;# 
  1090  1F4E                     	;# 
  1091  1F4F                     	;# 
  1092  1F50                     	;# 
  1093  1F51                     	;# 
  1094  1F52                     	;# 
  1095  1F53                     	;# 
  1096  1F54                     	;# 
  1097  1F55                     	;# 
  1098  1FE4                     	;# 
  1099  1FE5                     	;# 
  1100  1FE6                     	;# 
  1101  1FE7                     	;# 
  1102  1FE8                     	;# 
  1103  1FE8                     	;# 
  1104  1FE9                     	;# 
  1105  1FEA                     	;# 
  1106  1FEA                     	;# 
  1107  1FEB                     	;# 
  1108  1FED                     	;# 
  1109  1FEE                     	;# 
  1110  1FEF                     	;# 
  1111  0000                     	;# 
  1112  0001                     	;# 
  1113  0002                     	;# 
  1114  0003                     	;# 
  1115  0004                     	;# 
  1116  0005                     	;# 
  1117  0006                     	;# 
  1118  0007                     	;# 
  1119  0008                     	;# 
  1120  0009                     	;# 
  1121  000A                     	;# 
  1122  000B                     	;# 
  1123  000C                     	;# 
  1124  000D                     	;# 
  1125  000E                     	;# 
  1126  0012                     	;# 
  1127  0013                     	;# 
  1128  0014                     	;# 
  1129  0018                     	;# 
  1130  0019                     	;# 
  1131  001A                     	;# 
  1132  009B                     	;# 
  1133  009B                     	;# 
  1134  009C                     	;# 
  1135  009D                     	;# 
  1136  009E                     	;# 
  1137  009F                     	;# 
  1138  0119                     	;# 
  1139  0119                     	;# 
  1140  0119                     	;# 
  1141  011A                     	;# 
  1142  011A                     	;# 
  1143  011A                     	;# 
  1144  011B                     	;# 
  1145  011B                     	;# 
  1146  011B                     	;# 
  1147  011B                     	;# 
  1148  011B                     	;# 
  1149  011C                     	;# 
  1150  011C                     	;# 
  1151  011C                     	;# 
  1152  011D                     	;# 
  1153  011D                     	;# 
  1154  011D                     	;# 
  1155  011E                     	;# 
  1156  011E                     	;# 
  1157  011E                     	;# 
  1158  011F                     	;# 
  1159  011F                     	;# 
  1160  011F                     	;# 
  1161  011F                     	;# 
  1162  011F                     	;# 
  1163  018C                     	;# 
  1164  018D                     	;# 
  1165  018E                     	;# 
  1166  018F                     	;# 
  1167  0190                     	;# 
  1168  0191                     	;# 
  1169  0192                     	;# 
  1170  020C                     	;# 
  1171  020C                     	;# 
  1172  020D                     	;# 
  1173  020E                     	;# 
  1174  020F                     	;# 
  1175  020F                     	;# 
  1176  0210                     	;# 
  1177  0210                     	;# 
  1178  0211                     	;# 
  1179  0211                     	;# 
  1180  028C                     	;# 
  1181  028C                     	;# 
  1182  028D                     	;# 
  1183  028D                     	;# 
  1184  028E                     	;# 
  1185  028F                     	;# 
  1186  0290                     	;# 
  1187  0291                     	;# 
  1188  030C                     	;# 
  1189  030C                     	;# 
  1190  030D                     	;# 
  1191  030E                     	;# 
  1192  030F                     	;# 
  1193  0310                     	;# 
  1194  0310                     	;# 
  1195  0311                     	;# 
  1196  0312                     	;# 
  1197  0313                     	;# 
  1198  0314                     	;# 
  1199  0314                     	;# 
  1200  0315                     	;# 
  1201  0316                     	;# 
  1202  0318                     	;# 
  1203  0318                     	;# 
  1204  0319                     	;# 
  1205  031A                     	;# 
  1206  031C                     	;# 
  1207  031C                     	;# 
  1208  031D                     	;# 
  1209  031E                     	;# 
  1210  038C                     	;# 
  1211  038C                     	;# 
  1212  038D                     	;# 
  1213  038E                     	;# 
  1214  058C                     	;# 
  1215  058C                     	;# 
  1216  058D                     	;# 
  1217  058E                     	;# 
  1218  058F                     	;# 
  1219  058F                     	;# 
  1220  0590                     	;# 
  1221  0591                     	;# 
  1222  0592                     	;# 
  1223  0593                     	;# 
  1224  059C                     	;# 
  1225  059C                     	;# 
  1226  059D                     	;# 
  1227  059D                     	;# 
  1228  059E                     	;# 
  1229  059F                     	;# 
  1230  060C                     	;# 
  1231  060D                     	;# 
  1232  060E                     	;# 
  1233  060F                     	;# 
  1234  0610                     	;# 
  1235  0611                     	;# 
  1236  0612                     	;# 
  1237  0613                     	;# 
  1238  0614                     	;# 
  1239  070C                     	;# 
  1240  070D                     	;# 
  1241  070E                     	;# 
  1242  070F                     	;# 
  1243  0710                     	;# 
  1244  0711                     	;# 
  1245  0712                     	;# 
  1246  0713                     	;# 
  1247  0716                     	;# 
  1248  0717                     	;# 
  1249  0718                     	;# 
  1250  0719                     	;# 
  1251  071A                     	;# 
  1252  071B                     	;# 
  1253  071C                     	;# 
  1254  071D                     	;# 
  1255  0796                     	;# 
  1256  0797                     	;# 
  1257  0798                     	;# 
  1258  0799                     	;# 
  1259  079A                     	;# 
  1260  079B                     	;# 
  1261  080C                     	;# 
  1262  080D                     	;# 
  1263  080E                     	;# 
  1264  080F                     	;# 
  1265  0810                     	;# 
  1266  0811                     	;# 
  1267  0812                     	;# 
  1268  0813                     	;# 
  1269  0814                     	;# 
  1270  081A                     	;# 
  1271  081A                     	;# 
  1272  081B                     	;# 
  1273  081C                     	;# 
  1274  081C                     	;# 
  1275  081D                     	;# 
  1276  081E                     	;# 
  1277  081F                     	;# 
  1278  088C                     	;# 
  1279  088D                     	;# 
  1280  088E                     	;# 
  1281  088F                     	;# 
  1282  0890                     	;# 
  1283  0891                     	;# 
  1284  0892                     	;# 
  1285  0893                     	;# 
  1286  0895                     	;# 
  1287  0896                     	;# 
  1288  090C                     	;# 
  1289  090E                     	;# 
  1290  090F                     	;# 
  1291  091F                     	;# 
  1292  098F                     	;# 
  1293  098F                     	;# 
  1294  0990                     	;# 
  1295  0991                     	;# 
  1296  0992                     	;# 
  1297  0993                     	;# 
  1298  0994                     	;# 
  1299  0995                     	;# 
  1300  0996                     	;# 
  1301  0997                     	;# 
  1302  0A19                     	;# 
  1303  0A19                     	;# 
  1304  0A1A                     	;# 
  1305  0A1A                     	;# 
  1306  0A1B                     	;# 
  1307  0A1B                     	;# 
  1308  0A1B                     	;# 
  1309  0A1C                     	;# 
  1310  0A1C                     	;# 
  1311  0A1D                     	;# 
  1312  0A1D                     	;# 
  1313  0A1E                     	;# 
  1314  0A1E                     	;# 
  1315  0A1F                     	;# 
  1316  0A1F                     	;# 
  1317  0A1F                     	;# 
  1318  1E0F                     	;# 
  1319  1E10                     	;# 
  1320  1E11                     	;# 
  1321  1E12                     	;# 
  1322  1E13                     	;# 
  1323  1E14                     	;# 
  1324  1E15                     	;# 
  1325  1E16                     	;# 
  1326  1E17                     	;# 
  1327  1E18                     	;# 
  1328  1E19                     	;# 
  1329  1E1A                     	;# 
  1330  1E1B                     	;# 
  1331  1E1C                     	;# 
  1332  1E1D                     	;# 
  1333  1E1E                     	;# 
  1334  1E1F                     	;# 
  1335  1E20                     	;# 
  1336  1E21                     	;# 
  1337  1E22                     	;# 
  1338  1E23                     	;# 
  1339  1E24                     	;# 
  1340  1E25                     	;# 
  1341  1E26                     	;# 
  1342  1E27                     	;# 
  1343  1E28                     	;# 
  1344  1E29                     	;# 
  1345  1E2A                     	;# 
  1346  1E2B                     	;# 
  1347  1E2C                     	;# 
  1348  1E2D                     	;# 
  1349  1E2E                     	;# 
  1350  1E2F                     	;# 
  1351  1E30                     	;# 
  1352  1E31                     	;# 
  1353  1E32                     	;# 
  1354  1E33                     	;# 
  1355  1E34                     	;# 
  1356  1E35                     	;# 
  1357  1E36                     	;# 
  1358  1E37                     	;# 
  1359  1E8F                     	;# 
  1360  1E90                     	;# 
  1361  1E91                     	;# 
  1362  1E92                     	;# 
  1363  1E93                     	;# 
  1364  1E9C                     	;# 
  1365  1EA1                     	;# 
  1366  1EA2                     	;# 
  1367  1EB1                     	;# 
  1368  1EBB                     	;# 
  1369  1EBC                     	;# 
  1370  1EBD                     	;# 
  1371  1EBE                     	;# 
  1372  1EC3                     	;# 
  1373  1EC5                     	;# 
  1374  1EC6                     	;# 
  1375  1EC7                     	;# 
  1376  1ECB                     	;# 
  1377  1ECC                     	;# 
  1378  1ECD                     	;# 
  1379  1ECE                     	;# 
  1380  1F10                     	;# 
  1381  1F11                     	;# 
  1382  1F12                     	;# 
  1383  1F13                     	;# 
  1384  1F14                     	;# 
  1385  1F15                     	;# 
  1386  1F1C                     	;# 
  1387  1F1D                     	;# 
  1388  1F1E                     	;# 
  1389  1F1F                     	;# 
  1390  1F20                     	;# 
  1391  1F21                     	;# 
  1392  1F22                     	;# 
  1393  1F23                     	;# 
  1394  1F24                     	;# 
  1395  1F25                     	;# 
  1396  1F26                     	;# 
  1397  1F27                     	;# 
  1398  1F38                     	;# 
  1399  1F39                     	;# 
  1400  1F3A                     	;# 
  1401  1F3B                     	;# 
  1402  1F3C                     	;# 
  1403  1F3D                     	;# 
  1404  1F3E                     	;# 
  1405  1F3F                     	;# 
  1406  1F43                     	;# 
  1407  1F44                     	;# 
  1408  1F45                     	;# 
  1409  1F46                     	;# 
  1410  1F47                     	;# 
  1411  1F48                     	;# 
  1412  1F49                     	;# 
  1413  1F4A                     	;# 
  1414  1F4E                     	;# 
  1415  1F4F                     	;# 
  1416  1F50                     	;# 
  1417  1F51                     	;# 
  1418  1F52                     	;# 
  1419  1F53                     	;# 
  1420  1F54                     	;# 
  1421  1F55                     	;# 
  1422  1FE4                     	;# 
  1423  1FE5                     	;# 
  1424  1FE6                     	;# 
  1425  1FE7                     	;# 
  1426  1FE8                     	;# 
  1427  1FE8                     	;# 
  1428  1FE9                     	;# 
  1429  1FEA                     	;# 
  1430  1FEA                     	;# 
  1431  1FEB                     	;# 
  1432  1FED                     	;# 
  1433  1FEE                     	;# 
  1434  1FEF                     	;# 
  1435  0000                     	;# 
  1436  0001                     	;# 
  1437  0002                     	;# 
  1438  0003                     	;# 
  1439  0004                     	;# 
  1440  0005                     	;# 
  1441  0006                     	;# 
  1442  0007                     	;# 
  1443  0008                     	;# 
  1444  0009                     	;# 
  1445  000A                     	;# 
  1446  000B                     	;# 
  1447  000C                     	;# 
  1448  000D                     	;# 
  1449  000E                     	;# 
  1450  0012                     	;# 
  1451  0013                     	;# 
  1452  0014                     	;# 
  1453  0018                     	;# 
  1454  0019                     	;# 
  1455  001A                     	;# 
  1456  009B                     	;# 
  1457  009B                     	;# 
  1458  009C                     	;# 
  1459  009D                     	;# 
  1460  009E                     	;# 
  1461  009F                     	;# 
  1462  0119                     	;# 
  1463  0119                     	;# 
  1464  0119                     	;# 
  1465  011A                     	;# 
  1466  011A                     	;# 
  1467  011A                     	;# 
  1468  011B                     	;# 
  1469  011B                     	;# 
  1470  011B                     	;# 
  1471  011B                     	;# 
  1472  011B                     	;# 
  1473  011C                     	;# 
  1474  011C                     	;# 
  1475  011C                     	;# 
  1476  011D                     	;# 
  1477  011D                     	;# 
  1478  011D                     	;# 
  1479  011E                     	;# 
  1480  011E                     	;# 
  1481  011E                     	;# 
  1482  011F                     	;# 
  1483  011F                     	;# 
  1484  011F                     	;# 
  1485  011F                     	;# 
  1486  011F                     	;# 
  1487  018C                     	;# 
  1488  018D                     	;# 
  1489  018E                     	;# 
  1490  018F                     	;# 
  1491  0190                     	;# 
  1492  0191                     	;# 
  1493  0192                     	;# 
  1494  020C                     	;# 
  1495  020C                     	;# 
  1496  020D                     	;# 
  1497  020E                     	;# 
  1498  020F                     	;# 
  1499  020F                     	;# 
  1500  0210                     	;# 
  1501  0210                     	;# 
  1502  0211                     	;# 
  1503  0211                     	;# 
  1504  028C                     	;# 
  1505  028C                     	;# 
  1506  028D                     	;# 
  1507  028D                     	;# 
  1508  028E                     	;# 
  1509  028F                     	;# 
  1510  0290                     	;# 
  1511  0291                     	;# 
  1512  030C                     	;# 
  1513  030C                     	;# 
  1514  030D                     	;# 
  1515  030E                     	;# 
  1516  030F                     	;# 
  1517  0310                     	;# 
  1518  0310                     	;# 
  1519  0311                     	;# 
  1520  0312                     	;# 
  1521  0313                     	;# 
  1522  0314                     	;# 
  1523  0314                     	;# 
  1524  0315                     	;# 
  1525  0316                     	;# 
  1526  0318                     	;# 
  1527  0318                     	;# 
  1528  0319                     	;# 
  1529  031A                     	;# 
  1530  031C                     	;# 
  1531  031C                     	;# 
  1532  031D                     	;# 
  1533  031E                     	;# 
  1534  038C                     	;# 
  1535  038C                     	;# 
  1536  038D                     	;# 
  1537  038E                     	;# 
  1538  058C                     	;# 
  1539  058C                     	;# 
  1540  058D                     	;# 
  1541  058E                     	;# 
  1542  058F                     	;# 
  1543  058F                     	;# 
  1544  0590                     	;# 
  1545  0591                     	;# 
  1546  0592                     	;# 
  1547  0593                     	;# 
  1548  059C                     	;# 
  1549  059C                     	;# 
  1550  059D                     	;# 
  1551  059D                     	;# 
  1552  059E                     	;# 
  1553  059F                     	;# 
  1554  060C                     	;# 
  1555  060D                     	;# 
  1556  060E                     	;# 
  1557  060F                     	;# 
  1558  0610                     	;# 
  1559  0611                     	;# 
  1560  0612                     	;# 
  1561  0613                     	;# 
  1562  0614                     	;# 
  1563  070C                     	;# 
  1564  070D                     	;# 
  1565  070E                     	;# 
  1566  070F                     	;# 
  1567  0710                     	;# 
  1568  0711                     	;# 
  1569  0712                     	;# 
  1570  0713                     	;# 
  1571  0716                     	;# 
  1572  0717                     	;# 
  1573  0718                     	;# 
  1574  0719                     	;# 
  1575  071A                     	;# 
  1576  071B                     	;# 
  1577  071C                     	;# 
  1578  071D                     	;# 
  1579  0796                     	;# 
  1580  0797                     	;# 
  1581  0798                     	;# 
  1582  0799                     	;# 
  1583  079A                     	;# 
  1584  079B                     	;# 
  1585  080C                     	;# 
  1586  080D                     	;# 
  1587  080E                     	;# 
  1588  080F                     	;# 
  1589  0810                     	;# 
  1590  0811                     	;# 
  1591  0812                     	;# 
  1592  0813                     	;# 
  1593  0814                     	;# 
  1594  081A                     	;# 
  1595  081A                     	;# 
  1596  081B                     	;# 
  1597  081C                     	;# 
  1598  081C                     	;# 
  1599  081D                     	;# 
  1600  081E                     	;# 
  1601  081F                     	;# 
  1602  088C                     	;# 
  1603  088D                     	;# 
  1604  088E                     	;# 
  1605  088F                     	;# 
  1606  0890                     	;# 
  1607  0891                     	;# 
  1608  0892                     	;# 
  1609  0893                     	;# 
  1610  0895                     	;# 
  1611  0896                     	;# 
  1612  090C                     	;# 
  1613  090E                     	;# 
  1614  090F                     	;# 
  1615  091F                     	;# 
  1616  098F                     	;# 
  1617  098F                     	;# 
  1618  0990                     	;# 
  1619  0991                     	;# 
  1620  0992                     	;# 
  1621  0993                     	;# 
  1622  0994                     	;# 
  1623  0995                     	;# 
  1624  0996                     	;# 
  1625  0997                     	;# 
  1626  0A19                     	;# 
  1627  0A19                     	;# 
  1628  0A1A                     	;# 
  1629  0A1A                     	;# 
  1630  0A1B                     	;# 
  1631  0A1B                     	;# 
  1632  0A1B                     	;# 
  1633  0A1C                     	;# 
  1634  0A1C                     	;# 
  1635  0A1D                     	;# 
  1636  0A1D                     	;# 
  1637  0A1E                     	;# 
  1638  0A1E                     	;# 
  1639  0A1F                     	;# 
  1640  0A1F                     	;# 
  1641  0A1F                     	;# 
  1642  1E0F                     	;# 
  1643  1E10                     	;# 
  1644  1E11                     	;# 
  1645  1E12                     	;# 
  1646  1E13                     	;# 
  1647  1E14                     	;# 
  1648  1E15                     	;# 
  1649  1E16                     	;# 
  1650  1E17                     	;# 
  1651  1E18                     	;# 
  1652  1E19                     	;# 
  1653  1E1A                     	;# 
  1654  1E1B                     	;# 
  1655  1E1C                     	;# 
  1656  1E1D                     	;# 
  1657  1E1E                     	;# 
  1658  1E1F                     	;# 
  1659  1E20                     	;# 
  1660  1E21                     	;# 
  1661  1E22                     	;# 
  1662  1E23                     	;# 
  1663  1E24                     	;# 
  1664  1E25                     	;# 
  1665  1E26                     	;# 
  1666  1E27                     	;# 
  1667  1E28                     	;# 
  1668  1E29                     	;# 
  1669  1E2A                     	;# 
  1670  1E2B                     	;# 
  1671  1E2C                     	;# 
  1672  1E2D                     	;# 
  1673  1E2E                     	;# 
  1674  1E2F                     	;# 
  1675  1E30                     	;# 
  1676  1E31                     	;# 
  1677  1E32                     	;# 
  1678  1E33                     	;# 
  1679  1E34                     	;# 
  1680  1E35                     	;# 
  1681  1E36                     	;# 
  1682  1E37                     	;# 
  1683  1E8F                     	;# 
  1684  1E90                     	;# 
  1685  1E91                     	;# 
  1686  1E92                     	;# 
  1687  1E93                     	;# 
  1688  1E9C                     	;# 
  1689  1EA1                     	;# 
  1690  1EA2                     	;# 
  1691  1EB1                     	;# 
  1692  1EBB                     	;# 
  1693  1EBC                     	;# 
  1694  1EBD                     	;# 
  1695  1EBE                     	;# 
  1696  1EC3                     	;# 
  1697  1EC5                     	;# 
  1698  1EC6                     	;# 
  1699  1EC7                     	;# 
  1700  1ECB                     	;# 
  1701  1ECC                     	;# 
  1702  1ECD                     	;# 
  1703  1ECE                     	;# 
  1704  1F10                     	;# 
  1705  1F11                     	;# 
  1706  1F12                     	;# 
  1707  1F13                     	;# 
  1708  1F14                     	;# 
  1709  1F15                     	;# 
  1710  1F1C                     	;# 
  1711  1F1D                     	;# 
  1712  1F1E                     	;# 
  1713  1F1F                     	;# 
  1714  1F20                     	;# 
  1715  1F21                     	;# 
  1716  1F22                     	;# 
  1717  1F23                     	;# 
  1718  1F24                     	;# 
  1719  1F25                     	;# 
  1720  1F26                     	;# 
  1721  1F27                     	;# 
  1722  1F38                     	;# 
  1723  1F39                     	;# 
  1724  1F3A                     	;# 
  1725  1F3B                     	;# 
  1726  1F3C                     	;# 
  1727  1F3D                     	;# 
  1728  1F3E                     	;# 
  1729  1F3F                     	;# 
  1730  1F43                     	;# 
  1731  1F44                     	;# 
  1732  1F45                     	;# 
  1733  1F46                     	;# 
  1734  1F47                     	;# 
  1735  1F48                     	;# 
  1736  1F49                     	;# 
  1737  1F4A                     	;# 
  1738  1F4E                     	;# 
  1739  1F4F                     	;# 
  1740  1F50                     	;# 
  1741  1F51                     	;# 
  1742  1F52                     	;# 
  1743  1F53                     	;# 
  1744  1F54                     	;# 
  1745  1F55                     	;# 
  1746  1FE4                     	;# 
  1747  1FE5                     	;# 
  1748  1FE6                     	;# 
  1749  1FE7                     	;# 
  1750  1FE8                     	;# 
  1751  1FE8                     	;# 
  1752  1FE9                     	;# 
  1753  1FEA                     	;# 
  1754  1FEA                     	;# 
  1755  1FEB                     	;# 
  1756  1FED                     	;# 
  1757  1FEE                     	;# 
  1758  1FEF                     	;# 
  1759  0000                     	;# 
  1760  0001                     	;# 
  1761  0002                     	;# 
  1762  0003                     	;# 
  1763  0004                     	;# 
  1764  0005                     	;# 
  1765  0006                     	;# 
  1766  0007                     	;# 
  1767  0008                     	;# 
  1768  0009                     	;# 
  1769  000A                     	;# 
  1770  000B                     	;# 
  1771  000C                     	;# 
  1772  000D                     	;# 
  1773  000E                     	;# 
  1774  0012                     	;# 
  1775  0013                     	;# 
  1776  0014                     	;# 
  1777  0018                     	;# 
  1778  0019                     	;# 
  1779  001A                     	;# 
  1780  009B                     	;# 
  1781  009B                     	;# 
  1782  009C                     	;# 
  1783  009D                     	;# 
  1784  009E                     	;# 
  1785  009F                     	;# 
  1786  0119                     	;# 
  1787  0119                     	;# 
  1788  0119                     	;# 
  1789  011A                     	;# 
  1790  011A                     	;# 
  1791  011A                     	;# 
  1792  011B                     	;# 
  1793  011B                     	;# 
  1794  011B                     	;# 
  1795  011B                     	;# 
  1796  011B                     	;# 
  1797  011C                     	;# 
  1798  011C                     	;# 
  1799  011C                     	;# 
  1800  011D                     	;# 
  1801  011D                     	;# 
  1802  011D                     	;# 
  1803  011E                     	;# 
  1804  011E                     	;# 
  1805  011E                     	;# 
  1806  011F                     	;# 
  1807  011F                     	;# 
  1808  011F                     	;# 
  1809  011F                     	;# 
  1810  011F                     	;# 
  1811  018C                     	;# 
  1812  018D                     	;# 
  1813  018E                     	;# 
  1814  018F                     	;# 
  1815  0190                     	;# 
  1816  0191                     	;# 
  1817  0192                     	;# 
  1818  020C                     	;# 
  1819  020C                     	;# 
  1820  020D                     	;# 
  1821  020E                     	;# 
  1822  020F                     	;# 
  1823  020F                     	;# 
  1824  0210                     	;# 
  1825  0210                     	;# 
  1826  0211                     	;# 
  1827  0211                     	;# 
  1828  028C                     	;# 
  1829  028C                     	;# 
  1830  028D                     	;# 
  1831  028D                     	;# 
  1832  028E                     	;# 
  1833  028F                     	;# 
  1834  0290                     	;# 
  1835  0291                     	;# 
  1836  030C                     	;# 
  1837  030C                     	;# 
  1838  030D                     	;# 
  1839  030E                     	;# 
  1840  030F                     	;# 
  1841  0310                     	;# 
  1842  0310                     	;# 
  1843  0311                     	;# 
  1844  0312                     	;# 
  1845  0313                     	;# 
  1846  0314                     	;# 
  1847  0314                     	;# 
  1848  0315                     	;# 
  1849  0316                     	;# 
  1850  0318                     	;# 
  1851  0318                     	;# 
  1852  0319                     	;# 
  1853  031A                     	;# 
  1854  031C                     	;# 
  1855  031C                     	;# 
  1856  031D                     	;# 
  1857  031E                     	;# 
  1858  038C                     	;# 
  1859  038C                     	;# 
  1860  038D                     	;# 
  1861  038E                     	;# 
  1862  058C                     	;# 
  1863  058C                     	;# 
  1864  058D                     	;# 
  1865  058E                     	;# 
  1866  058F                     	;# 
  1867  058F                     	;# 
  1868  0590                     	;# 
  1869  0591                     	;# 
  1870  0592                     	;# 
  1871  0593                     	;# 
  1872  059C                     	;# 
  1873  059C                     	;# 
  1874  059D                     	;# 
  1875  059D                     	;# 
  1876  059E                     	;# 
  1877  059F                     	;# 
  1878  060C                     	;# 
  1879  060D                     	;# 
  1880  060E                     	;# 
  1881  060F                     	;# 
  1882  0610                     	;# 
  1883  0611                     	;# 
  1884  0612                     	;# 
  1885  0613                     	;# 
  1886  0614                     	;# 
  1887  070C                     	;# 
  1888  070D                     	;# 
  1889  070E                     	;# 
  1890  070F                     	;# 
  1891  0710                     	;# 
  1892  0711                     	;# 
  1893  0712                     	;# 
  1894  0713                     	;# 
  1895  0716                     	;# 
  1896  0717                     	;# 
  1897  0718                     	;# 
  1898  0719                     	;# 
  1899  071A                     	;# 
  1900  071B                     	;# 
  1901  071C                     	;# 
  1902  071D                     	;# 
  1903  0796                     	;# 
  1904  0797                     	;# 
  1905  0798                     	;# 
  1906  0799                     	;# 
  1907  079A                     	;# 
  1908  079B                     	;# 
  1909  080C                     	;# 
  1910  080D                     	;# 
  1911  080E                     	;# 
  1912  080F                     	;# 
  1913  0810                     	;# 
  1914  0811                     	;# 
  1915  0812                     	;# 
  1916  0813                     	;# 
  1917  0814                     	;# 
  1918  081A                     	;# 
  1919  081A                     	;# 
  1920  081B                     	;# 
  1921  081C                     	;# 
  1922  081C                     	;# 
  1923  081D                     	;# 
  1924  081E                     	;# 
  1925  081F                     	;# 
  1926  088C                     	;# 
  1927  088D                     	;# 
  1928  088E                     	;# 
  1929  088F                     	;# 
  1930  0890                     	;# 
  1931  0891                     	;# 
  1932  0892                     	;# 
  1933  0893                     	;# 
  1934  0895                     	;# 
  1935  0896                     	;# 
  1936  090C                     	;# 
  1937  090E                     	;# 
  1938  090F                     	;# 
  1939  091F                     	;# 
  1940  098F                     	;# 
  1941  098F                     	;# 
  1942  0990                     	;# 
  1943  0991                     	;# 
  1944  0992                     	;# 
  1945  0993                     	;# 
  1946  0994                     	;# 
  1947  0995                     	;# 
  1948  0996                     	;# 
  1949  0997                     	;# 
  1950  0A19                     	;# 
  1951  0A19                     	;# 
  1952  0A1A                     	;# 
  1953  0A1A                     	;# 
  1954  0A1B                     	;# 
  1955  0A1B                     	;# 
  1956  0A1B                     	;# 
  1957  0A1C                     	;# 
  1958  0A1C                     	;# 
  1959  0A1D                     	;# 
  1960  0A1D                     	;# 
  1961  0A1E                     	;# 
  1962  0A1E                     	;# 
  1963  0A1F                     	;# 
  1964  0A1F                     	;# 
  1965  0A1F                     	;# 
  1966  1E0F                     	;# 
  1967  1E10                     	;# 
  1968  1E11                     	;# 
  1969  1E12                     	;# 
  1970  1E13                     	;# 
  1971  1E14                     	;# 
  1972  1E15                     	;# 
  1973  1E16                     	;# 
  1974  1E17                     	;# 
  1975  1E18                     	;# 
  1976  1E19                     	;# 
  1977  1E1A                     	;# 
  1978  1E1B                     	;# 
  1979  1E1C                     	;# 
  1980  1E1D                     	;# 
  1981  1E1E                     	;# 
  1982  1E1F                     	;# 
  1983  1E20                     	;# 
  1984  1E21                     	;# 
  1985  1E22                     	;# 
  1986  1E23                     	;# 
  1987  1E24                     	;# 
  1988  1E25                     	;# 
  1989  1E26                     	;# 
  1990  1E27                     	;# 
  1991  1E28                     	;# 
  1992  1E29                     	;# 
  1993  1E2A                     	;# 
  1994  1E2B                     	;# 
  1995  1E2C                     	;# 
  1996  1E2D                     	;# 
  1997  1E2E                     	;# 
  1998  1E2F                     	;# 
  1999  1E30                     	;# 
  2000  1E31                     	;# 
  2001  1E32                     	;# 
  2002  1E33                     	;# 
  2003  1E34                     	;# 
  2004  1E35                     	;# 
  2005  1E36                     	;# 
  2006  1E37                     	;# 
  2007  1E8F                     	;# 
  2008  1E90                     	;# 
  2009  1E91                     	;# 
  2010  1E92                     	;# 
  2011  1E93                     	;# 
  2012  1E9C                     	;# 
  2013  1EA1                     	;# 
  2014  1EA2                     	;# 
  2015  1EB1                     	;# 
  2016  1EBB                     	;# 
  2017  1EBC                     	;# 
  2018  1EBD                     	;# 
  2019  1EBE                     	;# 
  2020  1EC3                     	;# 
  2021  1EC5                     	;# 
  2022  1EC6                     	;# 
  2023  1EC7                     	;# 
  2024  1ECB                     	;# 
  2025  1ECC                     	;# 
  2026  1ECD                     	;# 
  2027  1ECE                     	;# 
  2028  1F10                     	;# 
  2029  1F11                     	;# 
  2030  1F12                     	;# 
  2031  1F13                     	;# 
  2032  1F14                     	;# 
  2033  1F15                     	;# 
  2034  1F1C                     	;# 
  2035  1F1D                     	;# 
  2036  1F1E                     	;# 
  2037  1F1F                     	;# 
  2038  1F20                     	;# 
  2039  1F21                     	;# 
  2040  1F22                     	;# 
  2041  1F23                     	;# 
  2042  1F24                     	;# 
  2043  1F25                     	;# 
  2044  1F26                     	;# 
  2045  1F27                     	;# 
  2046  1F38                     	;# 
  2047  1F39                     	;# 
  2048  1F3A                     	;# 
  2049  1F3B                     	;# 
  2050  1F3C                     	;# 
  2051  1F3D                     	;# 
  2052  1F3E                     	;# 
  2053  1F3F                     	;# 
  2054  1F43                     	;# 
  2055  1F44                     	;# 
  2056  1F45                     	;# 
  2057  1F46                     	;# 
  2058  1F47                     	;# 
  2059  1F48                     	;# 
  2060  1F49                     	;# 
  2061  1F4A                     	;# 
  2062  1F4E                     	;# 
  2063  1F4F                     	;# 
  2064  1F50                     	;# 
  2065  1F51                     	;# 
  2066  1F52                     	;# 
  2067  1F53                     	;# 
  2068  1F54                     	;# 
  2069  1F55                     	;# 
  2070  1FE4                     	;# 
  2071  1FE5                     	;# 
  2072  1FE6                     	;# 
  2073  1FE7                     	;# 
  2074  1FE8                     	;# 
  2075  1FE8                     	;# 
  2076  1FE9                     	;# 
  2077  1FEA                     	;# 
  2078  1FEA                     	;# 
  2079  1FEB                     	;# 
  2080  1FED                     	;# 
  2081  1FEE                     	;# 
  2082  1FEF                     	;# 
  2083  0000                     	;# 
  2084  0001                     	;# 
  2085  0002                     	;# 
  2086  0003                     	;# 
  2087  0004                     	;# 
  2088  0005                     	;# 
  2089  0006                     	;# 
  2090  0007                     	;# 
  2091  0008                     	;# 
  2092  0009                     	;# 
  2093  000A                     	;# 
  2094  000B                     	;# 
  2095  000C                     	;# 
  2096  000D                     	;# 
  2097  000E                     	;# 
  2098  0012                     	;# 
  2099  0013                     	;# 
  2100  0014                     	;# 
  2101  0018                     	;# 
  2102  0019                     	;# 
  2103  001A                     	;# 
  2104  009B                     	;# 
  2105  009B                     	;# 
  2106  009C                     	;# 
  2107  009D                     	;# 
  2108  009E                     	;# 
  2109  009F                     	;# 
  2110  0119                     	;# 
  2111  0119                     	;# 
  2112  0119                     	;# 
  2113  011A                     	;# 
  2114  011A                     	;# 
  2115  011A                     	;# 
  2116  011B                     	;# 
  2117  011B                     	;# 
  2118  011B                     	;# 
  2119  011B                     	;# 
  2120  011B                     	;# 
  2121  011C                     	;# 
  2122  011C                     	;# 
  2123  011C                     	;# 
  2124  011D                     	;# 
  2125  011D                     	;# 
  2126  011D                     	;# 
  2127  011E                     	;# 
  2128  011E                     	;# 
  2129  011E                     	;# 
  2130  011F                     	;# 
  2131  011F                     	;# 
  2132  011F                     	;# 
  2133  011F                     	;# 
  2134  011F                     	;# 
  2135  018C                     	;# 
  2136  018D                     	;# 
  2137  018E                     	;# 
  2138  018F                     	;# 
  2139  0190                     	;# 
  2140  0191                     	;# 
  2141  0192                     	;# 
  2142  020C                     	;# 
  2143  020C                     	;# 
  2144  020D                     	;# 
  2145  020E                     	;# 
  2146  020F                     	;# 
  2147  020F                     	;# 
  2148  0210                     	;# 
  2149  0210                     	;# 
  2150  0211                     	;# 
  2151  0211                     	;# 
  2152  028C                     	;# 
  2153  028C                     	;# 
  2154  028D                     	;# 
  2155  028D                     	;# 
  2156  028E                     	;# 
  2157  028F                     	;# 
  2158  0290                     	;# 
  2159  0291                     	;# 
  2160  030C                     	;# 
  2161  030C                     	;# 
  2162  030D                     	;# 
  2163  030E                     	;# 
  2164  030F                     	;# 
  2165  0310                     	;# 
  2166  0310                     	;# 
  2167  0311                     	;# 
  2168  0312                     	;# 
  2169  0313                     	;# 
  2170  0314                     	;# 
  2171  0314                     	;# 
  2172  0315                     	;# 
  2173  0316                     	;# 
  2174  0318                     	;# 
  2175  0318                     	;# 
  2176  0319                     	;# 
  2177  031A                     	;# 
  2178  031C                     	;# 
  2179  031C                     	;# 
  2180  031D                     	;# 
  2181  031E                     	;# 
  2182  038C                     	;# 
  2183  038C                     	;# 
  2184  038D                     	;# 
  2185  038E                     	;# 
  2186  058C                     	;# 
  2187  058C                     	;# 
  2188  058D                     	;# 
  2189  058E                     	;# 
  2190  058F                     	;# 
  2191  058F                     	;# 
  2192  0590                     	;# 
  2193  0591                     	;# 
  2194  0592                     	;# 
  2195  0593                     	;# 
  2196  059C                     	;# 
  2197  059C                     	;# 
  2198  059D                     	;# 
  2199  059D                     	;# 
  2200  059E                     	;# 
  2201  059F                     	;# 
  2202  060C                     	;# 
  2203  060D                     	;# 
  2204  060E                     	;# 
  2205  060F                     	;# 
  2206  0610                     	;# 
  2207  0611                     	;# 
  2208  0612                     	;# 
  2209  0613                     	;# 
  2210  0614                     	;# 
  2211  070C                     	;# 
  2212  070D                     	;# 
  2213  070E                     	;# 
  2214  070F                     	;# 
  2215  0710                     	;# 
  2216  0711                     	;# 
  2217  0712                     	;# 
  2218  0713                     	;# 
  2219  0716                     	;# 
  2220  0717                     	;# 
  2221  0718                     	;# 
  2222  0719                     	;# 
  2223  071A                     	;# 
  2224  071B                     	;# 
  2225  071C                     	;# 
  2226  071D                     	;# 
  2227  0796                     	;# 
  2228  0797                     	;# 
  2229  0798                     	;# 
  2230  0799                     	;# 
  2231  079A                     	;# 
  2232  079B                     	;# 
  2233  080C                     	;# 
  2234  080D                     	;# 
  2235  080E                     	;# 
  2236  080F                     	;# 
  2237  0810                     	;# 
  2238  0811                     	;# 
  2239  0812                     	;# 
  2240  0813                     	;# 
  2241  0814                     	;# 
  2242  081A                     	;# 
  2243  081A                     	;# 
  2244  081B                     	;# 
  2245  081C                     	;# 
  2246  081C                     	;# 
  2247  081D                     	;# 
  2248  081E                     	;# 
  2249  081F                     	;# 
  2250  088C                     	;# 
  2251  088D                     	;# 
  2252  088E                     	;# 
  2253  088F                     	;# 
  2254  0890                     	;# 
  2255  0891                     	;# 
  2256  0892                     	;# 
  2257  0893                     	;# 
  2258  0895                     	;# 
  2259  0896                     	;# 
  2260  090C                     	;# 
  2261  090E                     	;# 
  2262  090F                     	;# 
  2263  091F                     	;# 
  2264  098F                     	;# 
  2265  098F                     	;# 
  2266  0990                     	;# 
  2267  0991                     	;# 
  2268  0992                     	;# 
  2269  0993                     	;# 
  2270  0994                     	;# 
  2271  0995                     	;# 
  2272  0996                     	;# 
  2273  0997                     	;# 
  2274  0A19                     	;# 
  2275  0A19                     	;# 
  2276  0A1A                     	;# 
  2277  0A1A                     	;# 
  2278  0A1B                     	;# 
  2279  0A1B                     	;# 
  2280  0A1B                     	;# 
  2281  0A1C                     	;# 
  2282  0A1C                     	;# 
  2283  0A1D                     	;# 
  2284  0A1D                     	;# 
  2285  0A1E                     	;# 
  2286  0A1E                     	;# 
  2287  0A1F                     	;# 
  2288  0A1F                     	;# 
  2289  0A1F                     	;# 
  2290  1E0F                     	;# 
  2291  1E10                     	;# 
  2292  1E11                     	;# 
  2293  1E12                     	;# 
  2294  1E13                     	;# 
  2295  1E14                     	;# 
  2296  1E15                     	;# 
  2297  1E16                     	;# 
  2298  1E17                     	;# 
  2299  1E18                     	;# 
  2300  1E19                     	;# 
  2301  1E1A                     	;# 
  2302  1E1B                     	;# 
  2303  1E1C                     	;# 
  2304  1E1D                     	;# 
  2305  1E1E                     	;# 
  2306  1E1F                     	;# 
  2307  1E20                     	;# 
  2308  1E21                     	;# 
  2309  1E22                     	;# 
  2310  1E23                     	;# 
  2311  1E24                     	;# 
  2312  1E25                     	;# 
  2313  1E26                     	;# 
  2314  1E27                     	;# 
  2315  1E28                     	;# 
  2316  1E29                     	;# 
  2317  1E2A                     	;# 
  2318  1E2B                     	;# 
  2319  1E2C                     	;# 
  2320  1E2D                     	;# 
  2321  1E2E                     	;# 
  2322  1E2F                     	;# 
  2323  1E30                     	;# 
  2324  1E31                     	;# 
  2325  1E32                     	;# 
  2326  1E33                     	;# 
  2327  1E34                     	;# 
  2328  1E35                     	;# 
  2329  1E36                     	;# 
  2330  1E37                     	;# 
  2331  1E8F                     	;# 
  2332  1E90                     	;# 
  2333  1E91                     	;# 
  2334  1E92                     	;# 
  2335  1E93                     	;# 
  2336  1E9C                     	;# 
  2337  1EA1                     	;# 
  2338  1EA2                     	;# 
  2339  1EB1                     	;# 
  2340  1EBB                     	;# 
  2341  1EBC                     	;# 
  2342  1EBD                     	;# 
  2343  1EBE                     	;# 
  2344  1EC3                     	;# 
  2345  1EC5                     	;# 
  2346  1EC6                     	;# 
  2347  1EC7                     	;# 
  2348  1ECB                     	;# 
  2349  1ECC                     	;# 
  2350  1ECD                     	;# 
  2351  1ECE                     	;# 
  2352  1F10                     	;# 
  2353  1F11                     	;# 
  2354  1F12                     	;# 
  2355  1F13                     	;# 
  2356  1F14                     	;# 
  2357  1F15                     	;# 
  2358  1F1C                     	;# 
  2359  1F1D                     	;# 
  2360  1F1E                     	;# 
  2361  1F1F                     	;# 
  2362  1F20                     	;# 
  2363  1F21                     	;# 
  2364  1F22                     	;# 
  2365  1F23                     	;# 
  2366  1F24                     	;# 
  2367  1F25                     	;# 
  2368  1F26                     	;# 
  2369  1F27                     	;# 
  2370  1F38                     	;# 
  2371  1F39                     	;# 
  2372  1F3A                     	;# 
  2373  1F3B                     	;# 
  2374  1F3C                     	;# 
  2375  1F3D                     	;# 
  2376  1F3E                     	;# 
  2377  1F3F                     	;# 
  2378  1F43                     	;# 
  2379  1F44                     	;# 
  2380  1F45                     	;# 
  2381  1F46                     	;# 
  2382  1F47                     	;# 
  2383  1F48                     	;# 
  2384  1F49                     	;# 
  2385  1F4A                     	;# 
  2386  1F4E                     	;# 
  2387  1F4F                     	;# 
  2388  1F50                     	;# 
  2389  1F51                     	;# 
  2390  1F52                     	;# 
  2391  1F53                     	;# 
  2392  1F54                     	;# 
  2393  1F55                     	;# 
  2394  1FE4                     	;# 
  2395  1FE5                     	;# 
  2396  1FE6                     	;# 
  2397  1FE7                     	;# 
  2398  1FE8                     	;# 
  2399  1FE8                     	;# 
  2400  1FE9                     	;# 
  2401  1FEA                     	;# 
  2402  1FEA                     	;# 
  2403  1FEB                     	;# 
  2404  1FED                     	;# 
  2405  1FEE                     	;# 
  2406  1FEF                     	;# 
  2407  0000                     	;# 
  2408  0001                     	;# 
  2409  0002                     	;# 
  2410  0003                     	;# 
  2411  0004                     	;# 
  2412  0005                     	;# 
  2413  0006                     	;# 
  2414  0007                     	;# 
  2415  0008                     	;# 
  2416  0009                     	;# 
  2417  000A                     	;# 
  2418  000B                     	;# 
  2419  000C                     	;# 
  2420  000D                     	;# 
  2421  000E                     	;# 
  2422  0012                     	;# 
  2423  0013                     	;# 
  2424  0014                     	;# 
  2425  0018                     	;# 
  2426  0019                     	;# 
  2427  001A                     	;# 
  2428  009B                     	;# 
  2429  009B                     	;# 
  2430  009C                     	;# 
  2431  009D                     	;# 
  2432  009E                     	;# 
  2433  009F                     	;# 
  2434  0119                     	;# 
  2435  0119                     	;# 
  2436  0119                     	;# 
  2437  011A                     	;# 
  2438  011A                     	;# 
  2439  011A                     	;# 
  2440  011B                     	;# 
  2441  011B                     	;# 
  2442  011B                     	;# 
  2443  011B                     	;# 
  2444  011B                     	;# 
  2445  011C                     	;# 
  2446  011C                     	;# 
  2447  011C                     	;# 
  2448  011D                     	;# 
  2449  011D                     	;# 
  2450  011D                     	;# 
  2451  011E                     	;# 
  2452  011E                     	;# 
  2453  011E                     	;# 
  2454  011F                     	;# 
  2455  011F                     	;# 
  2456  011F                     	;# 
  2457  011F                     	;# 
  2458  011F                     	;# 
  2459  018C                     	;# 
  2460  018D                     	;# 
  2461  018E                     	;# 
  2462  018F                     	;# 
  2463  0190                     	;# 
  2464  0191                     	;# 
  2465  0192                     	;# 
  2466  020C                     	;# 
  2467  020C                     	;# 
  2468  020D                     	;# 
  2469  020E                     	;# 
  2470  020F                     	;# 
  2471  020F                     	;# 
  2472  0210                     	;# 
  2473  0210                     	;# 
  2474  0211                     	;# 
  2475  0211                     	;# 
  2476  028C                     	;# 
  2477  028C                     	;# 
  2478  028D                     	;# 
  2479  028D                     	;# 
  2480  028E                     	;# 
  2481  028F                     	;# 
  2482  0290                     	;# 
  2483  0291                     	;# 
  2484  030C                     	;# 
  2485  030C                     	;# 
  2486  030D                     	;# 
  2487  030E                     	;# 
  2488  030F                     	;# 
  2489  0310                     	;# 
  2490  0310                     	;# 
  2491  0311                     	;# 
  2492  0312                     	;# 
  2493  0313                     	;# 
  2494  0314                     	;# 
  2495  0314                     	;# 
  2496  0315                     	;# 
  2497  0316                     	;# 
  2498  0318                     	;# 
  2499  0318                     	;# 
  2500  0319                     	;# 
  2501  031A                     	;# 
  2502  031C                     	;# 
  2503  031C                     	;# 
  2504  031D                     	;# 
  2505  031E                     	;# 
  2506  038C                     	;# 
  2507  038C                     	;# 
  2508  038D                     	;# 
  2509  038E                     	;# 
  2510  058C                     	;# 
  2511  058C                     	;# 
  2512  058D                     	;# 
  2513  058E                     	;# 
  2514  058F                     	;# 
  2515  058F                     	;# 
  2516  0590                     	;# 
  2517  0591                     	;# 
  2518  0592                     	;# 
  2519  0593                     	;# 
  2520  059C                     	;# 
  2521  059C                     	;# 
  2522  059D                     	;# 
  2523  059D                     	;# 
  2524  059E                     	;# 
  2525  059F                     	;# 
  2526  060C                     	;# 
  2527  060D                     	;# 
  2528  060E                     	;# 
  2529  060F                     	;# 
  2530  0610                     	;# 
  2531  0611                     	;# 
  2532  0612                     	;# 
  2533  0613                     	;# 
  2534  0614                     	;# 
  2535  070C                     	;# 
  2536  070D                     	;# 
  2537  070E                     	;# 
  2538  070F                     	;# 
  2539  0710                     	;# 
  2540  0711                     	;# 
  2541  0712                     	;# 
  2542  0713                     	;# 
  2543  0716                     	;# 
  2544  0717                     	;# 
  2545  0718                     	;# 
  2546  0719                     	;# 
  2547  071A                     	;# 
  2548  071B                     	;# 
  2549  071C                     	;# 
  2550  071D                     	;# 
  2551  0796                     	;# 
  2552  0797                     	;# 
  2553  0798                     	;# 
  2554  0799                     	;# 
  2555  079A                     	;# 
  2556  079B                     	;# 
  2557  080C                     	;# 
  2558  080D                     	;# 
  2559  080E                     	;# 
  2560  080F                     	;# 
  2561  0810                     	;# 
  2562  0811                     	;# 
  2563  0812                     	;# 
  2564  0813                     	;# 
  2565  0814                     	;# 
  2566  081A                     	;# 
  2567  081A                     	;# 
  2568  081B                     	;# 
  2569  081C                     	;# 
  2570  081C                     	;# 
  2571  081D                     	;# 
  2572  081E                     	;# 
  2573  081F                     	;# 
  2574  088C                     	;# 
  2575  088D                     	;# 
  2576  088E                     	;# 
  2577  088F                     	;# 
  2578  0890                     	;# 
  2579  0891                     	;# 
  2580  0892                     	;# 
  2581  0893                     	;# 
  2582  0895                     	;# 
  2583  0896                     	;# 
  2584  090C                     	;# 
  2585  090E                     	;# 
  2586  090F                     	;# 
  2587  091F                     	;# 
  2588  098F                     	;# 
  2589  098F                     	;# 
  2590  0990                     	;# 
  2591  0991                     	;# 
  2592  0992                     	;# 
  2593  0993                     	;# 
  2594  0994                     	;# 
  2595  0995                     	;# 
  2596  0996                     	;# 
  2597  0997                     	;# 
  2598  0A19                     	;# 
  2599  0A19                     	;# 
  2600  0A1A                     	;# 
  2601  0A1A                     	;# 
  2602  0A1B                     	;# 
  2603  0A1B                     	;# 
  2604  0A1B                     	;# 
  2605  0A1C                     	;# 
  2606  0A1C                     	;# 
  2607  0A1D                     	;# 
  2608  0A1D                     	;# 
  2609  0A1E                     	;# 
  2610  0A1E                     	;# 
  2611  0A1F                     	;# 
  2612  0A1F                     	;# 
  2613  0A1F                     	;# 
  2614  1E0F                     	;# 
  2615  1E10                     	;# 
  2616  1E11                     	;# 
  2617  1E12                     	;# 
  2618  1E13                     	;# 
  2619  1E14                     	;# 
  2620  1E15                     	;# 
  2621  1E16                     	;# 
  2622  1E17                     	;# 
  2623  1E18                     	;# 
  2624  1E19                     	;# 
  2625  1E1A                     	;# 
  2626  1E1B                     	;# 
  2627  1E1C                     	;# 
  2628  1E1D                     	;# 
  2629  1E1E                     	;# 
  2630  1E1F                     	;# 
  2631  1E20                     	;# 
  2632  1E21                     	;# 
  2633  1E22                     	;# 
  2634  1E23                     	;# 
  2635  1E24                     	;# 
  2636  1E25                     	;# 
  2637  1E26                     	;# 
  2638  1E27                     	;# 
  2639  1E28                     	;# 
  2640  1E29                     	;# 
  2641  1E2A                     	;# 
  2642  1E2B                     	;# 
  2643  1E2C                     	;# 
  2644  1E2D                     	;# 
  2645  1E2E                     	;# 
  2646  1E2F                     	;# 
  2647  1E30                     	;# 
  2648  1E31                     	;# 
  2649  1E32                     	;# 
  2650  1E33                     	;# 
  2651  1E34                     	;# 
  2652  1E35                     	;# 
  2653  1E36                     	;# 
  2654  1E37                     	;# 
  2655  1E8F                     	;# 
  2656  1E90                     	;# 
  2657  1E91                     	;# 
  2658  1E92                     	;# 
  2659  1E93                     	;# 
  2660  1E9C                     	;# 
  2661  1EA1                     	;# 
  2662  1EA2                     	;# 
  2663  1EB1                     	;# 
  2664  1EBB                     	;# 
  2665  1EBC                     	;# 
  2666  1EBD                     	;# 
  2667  1EBE                     	;# 
  2668  1EC3                     	;# 
  2669  1EC5                     	;# 
  2670  1EC6                     	;# 
  2671  1EC7                     	;# 
  2672  1ECB                     	;# 
  2673  1ECC                     	;# 
  2674  1ECD                     	;# 
  2675  1ECE                     	;# 
  2676  1F10                     	;# 
  2677  1F11                     	;# 
  2678  1F12                     	;# 
  2679  1F13                     	;# 
  2680  1F14                     	;# 
  2681  1F15                     	;# 
  2682  1F1C                     	;# 
  2683  1F1D                     	;# 
  2684  1F1E                     	;# 
  2685  1F1F                     	;# 
  2686  1F20                     	;# 
  2687  1F21                     	;# 
  2688  1F22                     	;# 
  2689  1F23                     	;# 
  2690  1F24                     	;# 
  2691  1F25                     	;# 
  2692  1F26                     	;# 
  2693  1F27                     	;# 
  2694  1F38                     	;# 
  2695  1F39                     	;# 
  2696  1F3A                     	;# 
  2697  1F3B                     	;# 
  2698  1F3C                     	;# 
  2699  1F3D                     	;# 
  2700  1F3E                     	;# 
  2701  1F3F                     	;# 
  2702  1F43                     	;# 
  2703  1F44                     	;# 
  2704  1F45                     	;# 
  2705  1F46                     	;# 
  2706  1F47                     	;# 
  2707  1F48                     	;# 
  2708  1F49                     	;# 
  2709  1F4A                     	;# 
  2710  1F4E                     	;# 
  2711  1F4F                     	;# 
  2712  1F50                     	;# 
  2713  1F51                     	;# 
  2714  1F52                     	;# 
  2715  1F53                     	;# 
  2716  1F54                     	;# 
  2717  1F55                     	;# 
  2718  1FE4                     	;# 
  2719  1FE5                     	;# 
  2720  1FE6                     	;# 
  2721  1FE7                     	;# 
  2722  1FE8                     	;# 
  2723  1FE8                     	;# 
  2724  1FE9                     	;# 
  2725  1FEA                     	;# 
  2726  1FEA                     	;# 
  2727  1FEB                     	;# 
  2728  1FED                     	;# 
  2729  1FEE                     	;# 
  2730  1FEF                     	;# 
  2731  0000                     	;# 
  2732  0001                     	;# 
  2733  0002                     	;# 
  2734  0003                     	;# 
  2735  0004                     	;# 
  2736  0005                     	;# 
  2737  0006                     	;# 
  2738  0007                     	;# 
  2739  0008                     	;# 
  2740  0009                     	;# 
  2741  000A                     	;# 
  2742  000B                     	;# 
  2743  000C                     	;# 
  2744  000D                     	;# 
  2745  000E                     	;# 
  2746  0012                     	;# 
  2747  0013                     	;# 
  2748  0014                     	;# 
  2749  0018                     	;# 
  2750  0019                     	;# 
  2751  001A                     	;# 
  2752  009B                     	;# 
  2753  009B                     	;# 
  2754  009C                     	;# 
  2755  009D                     	;# 
  2756  009E                     	;# 
  2757  009F                     	;# 
  2758  0119                     	;# 
  2759  0119                     	;# 
  2760  0119                     	;# 
  2761  011A                     	;# 
  2762  011A                     	;# 
  2763  011A                     	;# 
  2764  011B                     	;# 
  2765  011B                     	;# 
  2766  011B                     	;# 
  2767  011B                     	;# 
  2768  011B                     	;# 
  2769  011C                     	;# 
  2770  011C                     	;# 
  2771  011C                     	;# 
  2772  011D                     	;# 
  2773  011D                     	;# 
  2774  011D                     	;# 
  2775  011E                     	;# 
  2776  011E                     	;# 
  2777  011E                     	;# 
  2778  011F                     	;# 
  2779  011F                     	;# 
  2780  011F                     	;# 
  2781  011F                     	;# 
  2782  011F                     	;# 
  2783  018C                     	;# 
  2784  018D                     	;# 
  2785  018E                     	;# 
  2786  018F                     	;# 
  2787  0190                     	;# 
  2788  0191                     	;# 
  2789  0192                     	;# 
  2790  020C                     	;# 
  2791  020C                     	;# 
  2792  020D                     	;# 
  2793  020E                     	;# 
  2794  020F                     	;# 
  2795  020F                     	;# 
  2796  0210                     	;# 
  2797  0210                     	;# 
  2798  0211                     	;# 
  2799  0211                     	;# 
  2800  028C                     	;# 
  2801  028C                     	;# 
  2802  028D                     	;# 
  2803  028D                     	;# 
  2804  028E                     	;# 
  2805  028F                     	;# 
  2806  0290                     	;# 
  2807  0291                     	;# 
  2808  030C                     	;# 
  2809  030C                     	;# 
  2810  030D                     	;# 
  2811  030E                     	;# 
  2812  030F                     	;# 
  2813  0310                     	;# 
  2814  0310                     	;# 
  2815  0311                     	;# 
  2816  0312                     	;# 
  2817  0313                     	;# 
  2818  0314                     	;# 
  2819  0314                     	;# 
  2820  0315                     	;# 
  2821  0316                     	;# 
  2822  0318                     	;# 
  2823  0318                     	;# 
  2824  0319                     	;# 
  2825  031A                     	;# 
  2826  031C                     	;# 
  2827  031C                     	;# 
  2828  031D                     	;# 
  2829  031E                     	;# 
  2830  038C                     	;# 
  2831  038C                     	;# 
  2832  038D                     	;# 
  2833  038E                     	;# 
  2834  058C                     	;# 
  2835  058C                     	;# 
  2836  058D                     	;# 
  2837  058E                     	;# 
  2838  058F                     	;# 
  2839  058F                     	;# 
  2840  0590                     	;# 
  2841  0591                     	;# 
  2842  0592                     	;# 
  2843  0593                     	;# 
  2844  059C                     	;# 
  2845  059C                     	;# 
  2846  059D                     	;# 
  2847  059D                     	;# 
  2848  059E                     	;# 
  2849  059F                     	;# 
  2850  060C                     	;# 
  2851  060D                     	;# 
  2852  060E                     	;# 
  2853  060F                     	;# 
  2854  0610                     	;# 
  2855  0611                     	;# 
  2856  0612                     	;# 
  2857  0613                     	;# 
  2858  0614                     	;# 
  2859  070C                     	;# 
  2860  070D                     	;# 
  2861  070E                     	;# 
  2862  070F                     	;# 
  2863  0710                     	;# 
  2864  0711                     	;# 
  2865  0712                     	;# 
  2866  0713                     	;# 
  2867  0716                     	;# 
  2868  0717                     	;# 
  2869  0718                     	;# 
  2870  0719                     	;# 
  2871  071A                     	;# 
  2872  071B                     	;# 
  2873  071C                     	;# 
  2874  071D                     	;# 
  2875  0796                     	;# 
  2876  0797                     	;# 
  2877  0798                     	;# 
  2878  0799                     	;# 
  2879  079A                     	;# 
  2880  079B                     	;# 
  2881  080C                     	;# 
  2882  080D                     	;# 
  2883  080E                     	;# 
  2884  080F                     	;# 
  2885  0810                     	;# 
  2886  0811                     	;# 
  2887  0812                     	;# 
  2888  0813                     	;# 
  2889  0814                     	;# 
  2890  081A                     	;# 
  2891  081A                     	;# 
  2892  081B                     	;# 
  2893  081C                     	;# 
  2894  081C                     	;# 
  2895  081D                     	;# 
  2896  081E                     	;# 
  2897  081F                     	;# 
  2898  088C                     	;# 
  2899  088D                     	;# 
  2900  088E                     	;# 
  2901  088F                     	;# 
  2902  0890                     	;# 
  2903  0891                     	;# 
  2904  0892                     	;# 
  2905  0893                     	;# 
  2906  0895                     	;# 
  2907  0896                     	;# 
  2908  090C                     	;# 
  2909  090E                     	;# 
  2910  090F                     	;# 
  2911  091F                     	;# 
  2912  098F                     	;# 
  2913  098F                     	;# 
  2914  0990                     	;# 
  2915  0991                     	;# 
  2916  0992                     	;# 
  2917  0993                     	;# 
  2918  0994                     	;# 
  2919  0995                     	;# 
  2920  0996                     	;# 
  2921  0997                     	;# 
  2922  0A19                     	;# 
  2923  0A19                     	;# 
  2924  0A1A                     	;# 
  2925  0A1A                     	;# 
  2926  0A1B                     	;# 
  2927  0A1B                     	;# 
  2928  0A1B                     	;# 
  2929  0A1C                     	;# 
  2930  0A1C                     	;# 
  2931  0A1D                     	;# 
  2932  0A1D                     	;# 
  2933  0A1E                     	;# 
  2934  0A1E                     	;# 
  2935  0A1F                     	;# 
  2936  0A1F                     	;# 
  2937  0A1F                     	;# 
  2938  1E0F                     	;# 
  2939  1E10                     	;# 
  2940  1E11                     	;# 
  2941  1E12                     	;# 
  2942  1E13                     	;# 
  2943  1E14                     	;# 
  2944  1E15                     	;# 
  2945  1E16                     	;# 
  2946  1E17                     	;# 
  2947  1E18                     	;# 
  2948  1E19                     	;# 
  2949  1E1A                     	;# 
  2950  1E1B                     	;# 
  2951  1E1C                     	;# 
  2952  1E1D                     	;# 
  2953  1E1E                     	;# 
  2954  1E1F                     	;# 
  2955  1E20                     	;# 
  2956  1E21                     	;# 
  2957  1E22                     	;# 
  2958  1E23                     	;# 
  2959  1E24                     	;# 
  2960  1E25                     	;# 
  2961  1E26                     	;# 
  2962  1E27                     	;# 
  2963  1E28                     	;# 
  2964  1E29                     	;# 
  2965  1E2A                     	;# 
  2966  1E2B                     	;# 
  2967  1E2C                     	;# 
  2968  1E2D                     	;# 
  2969  1E2E                     	;# 
  2970  1E2F                     	;# 
  2971  1E30                     	;# 
  2972  1E31                     	;# 
  2973  1E32                     	;# 
  2974  1E33                     	;# 
  2975  1E34                     	;# 
  2976  1E35                     	;# 
  2977  1E36                     	;# 
  2978  1E37                     	;# 
  2979  1E8F                     	;# 
  2980  1E90                     	;# 
  2981  1E91                     	;# 
  2982  1E92                     	;# 
  2983  1E93                     	;# 
  2984  1E9C                     	;# 
  2985  1EA1                     	;# 
  2986  1EA2                     	;# 
  2987  1EB1                     	;# 
  2988  1EBB                     	;# 
  2989  1EBC                     	;# 
  2990  1EBD                     	;# 
  2991  1EBE                     	;# 
  2992  1EC3                     	;# 
  2993  1EC5                     	;# 
  2994  1EC6                     	;# 
  2995  1EC7                     	;# 
  2996  1ECB                     	;# 
  2997  1ECC                     	;# 
  2998  1ECD                     	;# 
  2999  1ECE                     	;# 
  3000  1F10                     	;# 
  3001  1F11                     	;# 
  3002  1F12                     	;# 
  3003  1F13                     	;# 
  3004  1F14                     	;# 
  3005  1F15                     	;# 
  3006  1F1C                     	;# 
  3007  1F1D                     	;# 
  3008  1F1E                     	;# 
  3009  1F1F                     	;# 
  3010  1F20                     	;# 
  3011  1F21                     	;# 
  3012  1F22                     	;# 
  3013  1F23                     	;# 
  3014  1F24                     	;# 
  3015  1F25                     	;# 
  3016  1F26                     	;# 
  3017  1F27                     	;# 
  3018  1F38                     	;# 
  3019  1F39                     	;# 
  3020  1F3A                     	;# 
  3021  1F3B                     	;# 
  3022  1F3C                     	;# 
  3023  1F3D                     	;# 
  3024  1F3E                     	;# 
  3025  1F3F                     	;# 
  3026  1F43                     	;# 
  3027  1F44                     	;# 
  3028  1F45                     	;# 
  3029  1F46                     	;# 
  3030  1F47                     	;# 
  3031  1F48                     	;# 
  3032  1F49                     	;# 
  3033  1F4A                     	;# 
  3034  1F4E                     	;# 
  3035  1F4F                     	;# 
  3036  1F50                     	;# 
  3037  1F51                     	;# 
  3038  1F52                     	;# 
  3039  1F53                     	;# 
  3040  1F54                     	;# 
  3041  1F55                     	;# 
  3042  1FE4                     	;# 
  3043  1FE5                     	;# 
  3044  1FE6                     	;# 
  3045  1FE7                     	;# 
  3046  1FE8                     	;# 
  3047  1FE8                     	;# 
  3048  1FE9                     	;# 
  3049  1FEA                     	;# 
  3050  1FEA                     	;# 
  3051  1FEB                     	;# 
  3052  1FED                     	;# 
  3053  1FEE                     	;# 
  3054  1FEF                     	;# 
  3055  0000                     	;# 
  3056  0001                     	;# 
  3057  0002                     	;# 
  3058  0003                     	;# 
  3059  0004                     	;# 
  3060  0005                     	;# 
  3061  0006                     	;# 
  3062  0007                     	;# 
  3063  0008                     	;# 
  3064  0009                     	;# 
  3065  000A                     	;# 
  3066  000B                     	;# 
  3067  000C                     	;# 
  3068  000D                     	;# 
  3069  000E                     	;# 
  3070  0012                     	;# 
  3071  0013                     	;# 
  3072  0014                     	;# 
  3073  0018                     	;# 
  3074  0019                     	;# 
  3075  001A                     	;# 
  3076  009B                     	;# 
  3077  009B                     	;# 
  3078  009C                     	;# 
  3079  009D                     	;# 
  3080  009E                     	;# 
  3081  009F                     	;# 
  3082  0119                     	;# 
  3083  0119                     	;# 
  3084  0119                     	;# 
  3085  011A                     	;# 
  3086  011A                     	;# 
  3087  011A                     	;# 
  3088  011B                     	;# 
  3089  011B                     	;# 
  3090  011B                     	;# 
  3091  011B                     	;# 
  3092  011B                     	;# 
  3093  011C                     	;# 
  3094  011C                     	;# 
  3095  011C                     	;# 
  3096  011D                     	;# 
  3097  011D                     	;# 
  3098  011D                     	;# 
  3099  011E                     	;# 
  3100  011E                     	;# 
  3101  011E                     	;# 
  3102  011F                     	;# 
  3103  011F                     	;# 
  3104  011F                     	;# 
  3105  011F                     	;# 
  3106  011F                     	;# 
  3107  018C                     	;# 
  3108  018D                     	;# 
  3109  018E                     	;# 
  3110  018F                     	;# 
  3111  0190                     	;# 
  3112  0191                     	;# 
  3113  0192                     	;# 
  3114  020C                     	;# 
  3115  020C                     	;# 
  3116  020D                     	;# 
  3117  020E                     	;# 
  3118  020F                     	;# 
  3119  020F                     	;# 
  3120  0210                     	;# 
  3121  0210                     	;# 
  3122  0211                     	;# 
  3123  0211                     	;# 
  3124  028C                     	;# 
  3125  028C                     	;# 
  3126  028D                     	;# 
  3127  028D                     	;# 
  3128  028E                     	;# 
  3129  028F                     	;# 
  3130  0290                     	;# 
  3131  0291                     	;# 
  3132  030C                     	;# 
  3133  030C                     	;# 
  3134  030D                     	;# 
  3135  030E                     	;# 
  3136  030F                     	;# 
  3137  0310                     	;# 
  3138  0310                     	;# 
  3139  0311                     	;# 
  3140  0312                     	;# 
  3141  0313                     	;# 
  3142  0314                     	;# 
  3143  0314                     	;# 
  3144  0315                     	;# 
  3145  0316                     	;# 
  3146  0318                     	;# 
  3147  0318                     	;# 
  3148  0319                     	;# 
  3149  031A                     	;# 
  3150  031C                     	;# 
  3151  031C                     	;# 
  3152  031D                     	;# 
  3153  031E                     	;# 
  3154  038C                     	;# 
  3155  038C                     	;# 
  3156  038D                     	;# 
  3157  038E                     	;# 
  3158  058C                     	;# 
  3159  058C                     	;# 
  3160  058D                     	;# 
  3161  058E                     	;# 
  3162  058F                     	;# 
  3163  058F                     	;# 
  3164  0590                     	;# 
  3165  0591                     	;# 
  3166  0592                     	;# 
  3167  0593                     	;# 
  3168  059C                     	;# 
  3169  059C                     	;# 
  3170  059D                     	;# 
  3171  059D                     	;# 
  3172  059E                     	;# 
  3173  059F                     	;# 
  3174  060C                     	;# 
  3175  060D                     	;# 
  3176  060E                     	;# 
  3177  060F                     	;# 
  3178  0610                     	;# 
  3179  0611                     	;# 
  3180  0612                     	;# 
  3181  0613                     	;# 
  3182  0614                     	;# 
  3183  070C                     	;# 
  3184  070D                     	;# 
  3185  070E                     	;# 
  3186  070F                     	;# 
  3187  0710                     	;# 
  3188  0711                     	;# 
  3189  0712                     	;# 
  3190  0713                     	;# 
  3191  0716                     	;# 
  3192  0717                     	;# 
  3193  0718                     	;# 
  3194  0719                     	;# 
  3195  071A                     	;# 
  3196  071B                     	;# 
  3197  071C                     	;# 
  3198  071D                     	;# 
  3199  0796                     	;# 
  3200  0797                     	;# 
  3201  0798                     	;# 
  3202  0799                     	;# 
  3203  079A                     	;# 
  3204  079B                     	;# 
  3205  080C                     	;# 
  3206  080D                     	;# 
  3207  080E                     	;# 
  3208  080F                     	;# 
  3209  0810                     	;# 
  3210  0811                     	;# 
  3211  0812                     	;# 
  3212  0813                     	;# 
  3213  0814                     	;# 
  3214  081A                     	;# 
  3215  081A                     	;# 
  3216  081B                     	;# 
  3217  081C                     	;# 
  3218  081C                     	;# 
  3219  081D                     	;# 
  3220  081E                     	;# 
  3221  081F                     	;# 
  3222  088C                     	;# 
  3223  088D                     	;# 
  3224  088E                     	;# 
  3225  088F                     	;# 
  3226  0890                     	;# 
  3227  0891                     	;# 
  3228  0892                     	;# 
  3229  0893                     	;# 
  3230  0895                     	;# 
  3231  0896                     	;# 
  3232  090C                     	;# 
  3233  090E                     	;# 
  3234  090F                     	;# 
  3235  091F                     	;# 
  3236  098F                     	;# 
  3237  098F                     	;# 
  3238  0990                     	;# 
  3239  0991                     	;# 
  3240  0992                     	;# 
  3241  0993                     	;# 
  3242  0994                     	;# 
  3243  0995                     	;# 
  3244  0996                     	;# 
  3245  0997                     	;# 
  3246  0A19                     	;# 
  3247  0A19                     	;# 
  3248  0A1A                     	;# 
  3249  0A1A                     	;# 
  3250  0A1B                     	;# 
  3251  0A1B                     	;# 
  3252  0A1B                     	;# 
  3253  0A1C                     	;# 
  3254  0A1C                     	;# 
  3255  0A1D                     	;# 
  3256  0A1D                     	;# 
  3257  0A1E                     	;# 
  3258  0A1E                     	;# 
  3259  0A1F                     	;# 
  3260  0A1F                     	;# 
  3261  0A1F                     	;# 
  3262  1E0F                     	;# 
  3263  1E10                     	;# 
  3264  1E11                     	;# 
  3265  1E12                     	;# 
  3266  1E13                     	;# 
  3267  1E14                     	;# 
  3268  1E15                     	;# 
  3269  1E16                     	;# 
  3270  1E17                     	;# 
  3271  1E18                     	;# 
  3272  1E19                     	;# 
  3273  1E1A                     	;# 
  3274  1E1B                     	;# 
  3275  1E1C                     	;# 
  3276  1E1D                     	;# 
  3277  1E1E                     	;# 
  3278  1E1F                     	;# 
  3279  1E20                     	;# 
  3280  1E21                     	;# 
  3281  1E22                     	;# 
  3282  1E23                     	;# 
  3283  1E24                     	;# 
  3284  1E25                     	;# 
  3285  1E26                     	;# 
  3286  1E27                     	;# 
  3287  1E28                     	;# 
  3288  1E29                     	;# 
  3289  1E2A                     	;# 
  3290  1E2B                     	;# 
  3291  1E2C                     	;# 
  3292  1E2D                     	;# 
  3293  1E2E                     	;# 
  3294  1E2F                     	;# 
  3295  1E30                     	;# 
  3296  1E31                     	;# 
  3297  1E32                     	;# 
  3298  1E33                     	;# 
  3299  1E34                     	;# 
  3300  1E35                     	;# 
  3301  1E36                     	;# 
  3302  1E37                     	;# 
  3303  1E8F                     	;# 
  3304  1E90                     	;# 
  3305  1E91                     	;# 
  3306  1E92                     	;# 
  3307  1E93                     	;# 
  3308  1E9C                     	;# 
  3309  1EA1                     	;# 
  3310  1EA2                     	;# 
  3311  1EB1                     	;# 
  3312  1EBB                     	;# 
  3313  1EBC                     	;# 
  3314  1EBD                     	;# 
  3315  1EBE                     	;# 
  3316  1EC3                     	;# 
  3317  1EC5                     	;# 
  3318  1EC6                     	;# 
  3319  1EC7                     	;# 
  3320  1ECB                     	;# 
  3321  1ECC                     	;# 
  3322  1ECD                     	;# 
  3323  1ECE                     	;# 
  3324  1F10                     	;# 
  3325  1F11                     	;# 
  3326  1F12                     	;# 
  3327  1F13                     	;# 
  3328  1F14                     	;# 
  3329  1F15                     	;# 
  3330  1F1C                     	;# 
  3331  1F1D                     	;# 
  3332  1F1E                     	;# 
  3333  1F1F                     	;# 
  3334  1F20                     	;# 
  3335  1F21                     	;# 
  3336  1F22                     	;# 
  3337  1F23                     	;# 
  3338  1F24                     	;# 
  3339  1F25                     	;# 
  3340  1F26                     	;# 
  3341  1F27                     	;# 
  3342  1F38                     	;# 
  3343  1F39                     	;# 
  3344  1F3A                     	;# 
  3345  1F3B                     	;# 
  3346  1F3C                     	;# 
  3347  1F3D                     	;# 
  3348  1F3E                     	;# 
  3349  1F3F                     	;# 
  3350  1F43                     	;# 
  3351  1F44                     	;# 
  3352  1F45                     	;# 
  3353  1F46                     	;# 
  3354  1F47                     	;# 
  3355  1F48                     	;# 
  3356  1F49                     	;# 
  3357  1F4A                     	;# 
  3358  1F4E                     	;# 
  3359  1F4F                     	;# 
  3360  1F50                     	;# 
  3361  1F51                     	;# 
  3362  1F52                     	;# 
  3363  1F53                     	;# 
  3364  1F54                     	;# 
  3365  1F55                     	;# 
  3366  1FE4                     	;# 
  3367  1FE5                     	;# 
  3368  1FE6                     	;# 
  3369  1FE7                     	;# 
  3370  1FE8                     	;# 
  3371  1FE8                     	;# 
  3372  1FE9                     	;# 
  3373  1FEA                     	;# 
  3374  1FEA                     	;# 
  3375  1FEB                     	;# 
  3376  1FED                     	;# 
  3377  1FEE                     	;# 
  3378  1FEF                     	;# 
  3379  0000                     	;# 
  3380  0001                     	;# 
  3381  0002                     	;# 
  3382  0003                     	;# 
  3383  0004                     	;# 
  3384  0005                     	;# 
  3385  0006                     	;# 
  3386  0007                     	;# 
  3387  0008                     	;# 
  3388  0009                     	;# 
  3389  000A                     	;# 
  3390  000B                     	;# 
  3391  000C                     	;# 
  3392  000D                     	;# 
  3393  000E                     	;# 
  3394  0012                     	;# 
  3395  0013                     	;# 
  3396  0014                     	;# 
  3397  0018                     	;# 
  3398  0019                     	;# 
  3399  001A                     	;# 
  3400  009B                     	;# 
  3401  009B                     	;# 
  3402  009C                     	;# 
  3403  009D                     	;# 
  3404  009E                     	;# 
  3405  009F                     	;# 
  3406  0119                     	;# 
  3407  0119                     	;# 
  3408  0119                     	;# 
  3409  011A                     	;# 
  3410  011A                     	;# 
  3411  011A                     	;# 
  3412  011B                     	;# 
  3413  011B                     	;# 
  3414  011B                     	;# 
  3415  011B                     	;# 
  3416  011B                     	;# 
  3417  011C                     	;# 
  3418  011C                     	;# 
  3419  011C                     	;# 
  3420  011D                     	;# 
  3421  011D                     	;# 
  3422  011D                     	;# 
  3423  011E                     	;# 
  3424  011E                     	;# 
  3425  011E                     	;# 
  3426  011F                     	;# 
  3427  011F                     	;# 
  3428  011F                     	;# 
  3429  011F                     	;# 
  3430  011F                     	;# 
  3431  018C                     	;# 
  3432  018D                     	;# 
  3433  018E                     	;# 
  3434  018F                     	;# 
  3435  0190                     	;# 
  3436  0191                     	;# 
  3437  0192                     	;# 
  3438  020C                     	;# 
  3439  020C                     	;# 
  3440  020D                     	;# 
  3441  020E                     	;# 
  3442  020F                     	;# 
  3443  020F                     	;# 
  3444  0210                     	;# 
  3445  0210                     	;# 
  3446  0211                     	;# 
  3447  0211                     	;# 
  3448  028C                     	;# 
  3449  028C                     	;# 
  3450  028D                     	;# 
  3451  028D                     	;# 
  3452  028E                     	;# 
  3453  028F                     	;# 
  3454  0290                     	;# 
  3455  0291                     	;# 
  3456  030C                     	;# 
  3457  030C                     	;# 
  3458  030D                     	;# 
  3459  030E                     	;# 
  3460  030F                     	;# 
  3461  0310                     	;# 
  3462  0310                     	;# 
  3463  0311                     	;# 
  3464  0312                     	;# 
  3465  0313                     	;# 
  3466  0314                     	;# 
  3467  0314                     	;# 
  3468  0315                     	;# 
  3469  0316                     	;# 
  3470  0318                     	;# 
  3471  0318                     	;# 
  3472  0319                     	;# 
  3473  031A                     	;# 
  3474  031C                     	;# 
  3475  031C                     	;# 
  3476  031D                     	;# 
  3477  031E                     	;# 
  3478  038C                     	;# 
  3479  038C                     	;# 
  3480  038D                     	;# 
  3481  038E                     	;# 
  3482  058C                     	;# 
  3483  058C                     	;# 
  3484  058D                     	;# 
  3485  058E                     	;# 
  3486  058F                     	;# 
  3487  058F                     	;# 
  3488  0590                     	;# 
  3489  0591                     	;# 
  3490  0592                     	;# 
  3491  0593                     	;# 
  3492  059C                     	;# 
  3493  059C                     	;# 
  3494  059D                     	;# 
  3495  059D                     	;# 
  3496  059E                     	;# 
  3497  059F                     	;# 
  3498  060C                     	;# 
  3499  060D                     	;# 
  3500  060E                     	;# 
  3501  060F                     	;# 
  3502  0610                     	;# 
  3503  0611                     	;# 
  3504  0612                     	;# 
  3505  0613                     	;# 
  3506  0614                     	;# 
  3507  070C                     	;# 
  3508  070D                     	;# 
  3509  070E                     	;# 
  3510  070F                     	;# 
  3511  0710                     	;# 
  3512  0711                     	;# 
  3513  0712                     	;# 
  3514  0713                     	;# 
  3515  0716                     	;# 
  3516  0717                     	;# 
  3517  0718                     	;# 
  3518  0719                     	;# 
  3519  071A                     	;# 
  3520  071B                     	;# 
  3521  071C                     	;# 
  3522  071D                     	;# 
  3523  0796                     	;# 
  3524  0797                     	;# 
  3525  0798                     	;# 
  3526  0799                     	;# 
  3527  079A                     	;# 
  3528  079B                     	;# 
  3529  080C                     	;# 
  3530  080D                     	;# 
  3531  080E                     	;# 
  3532  080F                     	;# 
  3533  0810                     	;# 
  3534  0811                     	;# 
  3535  0812                     	;# 
  3536  0813                     	;# 
  3537  0814                     	;# 
  3538  081A                     	;# 
  3539  081A                     	;# 
  3540  081B                     	;# 
  3541  081C                     	;# 
  3542  081C                     	;# 
  3543  081D                     	;# 
  3544  081E                     	;# 
  3545  081F                     	;# 
  3546  088C                     	;# 
  3547  088D                     	;# 
  3548  088E                     	;# 
  3549  088F                     	;# 
  3550  0890                     	;# 
  3551  0891                     	;# 
  3552  0892                     	;# 
  3553  0893                     	;# 
  3554  0895                     	;# 
  3555  0896                     	;# 
  3556  090C                     	;# 
  3557  090E                     	;# 
  3558  090F                     	;# 
  3559  091F                     	;# 
  3560  098F                     	;# 
  3561  098F                     	;# 
  3562  0990                     	;# 
  3563  0991                     	;# 
  3564  0992                     	;# 
  3565  0993                     	;# 
  3566  0994                     	;# 
  3567  0995                     	;# 
  3568  0996                     	;# 
  3569  0997                     	;# 
  3570  0A19                     	;# 
  3571  0A19                     	;# 
  3572  0A1A                     	;# 
  3573  0A1A                     	;# 
  3574  0A1B                     	;# 
  3575  0A1B                     	;# 
  3576  0A1B                     	;# 
  3577  0A1C                     	;# 
  3578  0A1C                     	;# 
  3579  0A1D                     	;# 
  3580  0A1D                     	;# 
  3581  0A1E                     	;# 
  3582  0A1E                     	;# 
  3583  0A1F                     	;# 
  3584  0A1F                     	;# 
  3585  0A1F                     	;# 
  3586  1E0F                     	;# 
  3587  1E10                     	;# 
  3588  1E11                     	;# 
  3589  1E12                     	;# 
  3590  1E13                     	;# 
  3591  1E14                     	;# 
  3592  1E15                     	;# 
  3593  1E16                     	;# 
  3594  1E17                     	;# 
  3595  1E18                     	;# 
  3596  1E19                     	;# 
  3597  1E1A                     	;# 
  3598  1E1B                     	;# 
  3599  1E1C                     	;# 
  3600  1E1D                     	;# 
  3601  1E1E                     	;# 
  3602  1E1F                     	;# 
  3603  1E20                     	;# 
  3604  1E21                     	;# 
  3605  1E22                     	;# 
  3606  1E23                     	;# 
  3607  1E24                     	;# 
  3608  1E25                     	;# 
  3609  1E26                     	;# 
  3610  1E27                     	;# 
  3611  1E28                     	;# 
  3612  1E29                     	;# 
  3613  1E2A                     	;# 
  3614  1E2B                     	;# 
  3615  1E2C                     	;# 
  3616  1E2D                     	;# 
  3617  1E2E                     	;# 
  3618  1E2F                     	;# 
  3619  1E30                     	;# 
  3620  1E31                     	;# 
  3621  1E32                     	;# 
  3622  1E33                     	;# 
  3623  1E34                     	;# 
  3624  1E35                     	;# 
  3625  1E36                     	;# 
  3626  1E37                     	;# 
  3627  1E8F                     	;# 
  3628  1E90                     	;# 
  3629  1E91                     	;# 
  3630  1E92                     	;# 
  3631  1E93                     	;# 
  3632  1E9C                     	;# 
  3633  1EA1                     	;# 
  3634  1EA2                     	;# 
  3635  1EB1                     	;# 
  3636  1EBB                     	;# 
  3637  1EBC                     	;# 
  3638  1EBD                     	;# 
  3639  1EBE                     	;# 
  3640  1EC3                     	;# 
  3641  1EC5                     	;# 
  3642  1EC6                     	;# 
  3643  1EC7                     	;# 
  3644  1ECB                     	;# 
  3645  1ECC                     	;# 
  3646  1ECD                     	;# 
  3647  1ECE                     	;# 
  3648  1F10                     	;# 
  3649  1F11                     	;# 
  3650  1F12                     	;# 
  3651  1F13                     	;# 
  3652  1F14                     	;# 
  3653  1F15                     	;# 
  3654  1F1C                     	;# 
  3655  1F1D                     	;# 
  3656  1F1E                     	;# 
  3657  1F1F                     	;# 
  3658  1F20                     	;# 
  3659  1F21                     	;# 
  3660  1F22                     	;# 
  3661  1F23                     	;# 
  3662  1F24                     	;# 
  3663  1F25                     	;# 
  3664  1F26                     	;# 
  3665  1F27                     	;# 
  3666  1F38                     	;# 
  3667  1F39                     	;# 
  3668  1F3A                     	;# 
  3669  1F3B                     	;# 
  3670  1F3C                     	;# 
  3671  1F3D                     	;# 
  3672  1F3E                     	;# 
  3673  1F3F                     	;# 
  3674  1F43                     	;# 
  3675  1F44                     	;# 
  3676  1F45                     	;# 
  3677  1F46                     	;# 
  3678  1F47                     	;# 
  3679  1F48                     	;# 
  3680  1F49                     	;# 
  3681  1F4A                     	;# 
  3682  1F4E                     	;# 
  3683  1F4F                     	;# 
  3684  1F50                     	;# 
  3685  1F51                     	;# 
  3686  1F52                     	;# 
  3687  1F53                     	;# 
  3688  1F54                     	;# 
  3689  1F55                     	;# 
  3690  1FE4                     	;# 
  3691  1FE5                     	;# 
  3692  1FE6                     	;# 
  3693  1FE7                     	;# 
  3694  1FE8                     	;# 
  3695  1FE8                     	;# 
  3696  1FE9                     	;# 
  3697  1FEA                     	;# 
  3698  1FEA                     	;# 
  3699  1FEB                     	;# 
  3700  1FED                     	;# 
  3701  1FEE                     	;# 
  3702  1FEF                     	;# 
  3703  0000                     	;# 
  3704  0001                     	;# 
  3705  0002                     	;# 
  3706  0003                     	;# 
  3707  0004                     	;# 
  3708  0005                     	;# 
  3709  0006                     	;# 
  3710  0007                     	;# 
  3711  0008                     	;# 
  3712  0009                     	;# 
  3713  000A                     	;# 
  3714  000B                     	;# 
  3715  000C                     	;# 
  3716  000D                     	;# 
  3717  000E                     	;# 
  3718  0012                     	;# 
  3719  0013                     	;# 
  3720  0014                     	;# 
  3721  0018                     	;# 
  3722  0019                     	;# 
  3723  001A                     	;# 
  3724  009B                     	;# 
  3725  009B                     	;# 
  3726  009C                     	;# 
  3727  009D                     	;# 
  3728  009E                     	;# 
  3729  009F                     	;# 
  3730  0119                     	;# 
  3731  0119                     	;# 
  3732  0119                     	;# 
  3733  011A                     	;# 
  3734  011A                     	;# 
  3735  011A                     	;# 
  3736  011B                     	;# 
  3737  011B                     	;# 
  3738  011B                     	;# 
  3739  011B                     	;# 
  3740  011B                     	;# 
  3741  011C                     	;# 
  3742  011C                     	;# 
  3743  011C                     	;# 
  3744  011D                     	;# 
  3745  011D                     	;# 
  3746  011D                     	;# 
  3747  011E                     	;# 
  3748  011E                     	;# 
  3749  011E                     	;# 
  3750  011F                     	;# 
  3751  011F                     	;# 
  3752  011F                     	;# 
  3753  011F                     	;# 
  3754  011F                     	;# 
  3755  018C                     	;# 
  3756  018D                     	;# 
  3757  018E                     	;# 
  3758  018F                     	;# 
  3759  0190                     	;# 
  3760  0191                     	;# 
  3761  0192                     	;# 
  3762  020C                     	;# 
  3763  020C                     	;# 
  3764  020D                     	;# 
  3765  020E                     	;# 
  3766  020F                     	;# 
  3767  020F                     	;# 
  3768  0210                     	;# 
  3769  0210                     	;# 
  3770  0211                     	;# 
  3771  0211                     	;# 
  3772  028C                     	;# 
  3773  028C                     	;# 
  3774  028D                     	;# 
  3775  028D                     	;# 
  3776  028E                     	;# 
  3777  028F                     	;# 
  3778  0290                     	;# 
  3779  0291                     	;# 
  3780  030C                     	;# 
  3781  030C                     	;# 
  3782  030D                     	;# 
  3783  030E                     	;# 
  3784  030F                     	;# 
  3785  0310                     	;# 
  3786  0310                     	;# 
  3787  0311                     	;# 
  3788  0312                     	;# 
  3789  0313                     	;# 
  3790  0314                     	;# 
  3791  0314                     	;# 
  3792  0315                     	;# 
  3793  0316                     	;# 
  3794  0318                     	;# 
  3795  0318                     	;# 
  3796  0319                     	;# 
  3797  031A                     	;# 
  3798  031C                     	;# 
  3799  031C                     	;# 
  3800  031D                     	;# 
  3801  031E                     	;# 
  3802  038C                     	;# 
  3803  038C                     	;# 
  3804  038D                     	;# 
  3805  038E                     	;# 
  3806  058C                     	;# 
  3807  058C                     	;# 
  3808  058D                     	;# 
  3809  058E                     	;# 
  3810  058F                     	;# 
  3811  058F                     	;# 
  3812  0590                     	;# 
  3813  0591                     	;# 
  3814  0592                     	;# 
  3815  0593                     	;# 
  3816  059C                     	;# 
  3817  059C                     	;# 
  3818  059D                     	;# 
  3819  059D                     	;# 
  3820  059E                     	;# 
  3821  059F                     	;# 
  3822  060C                     	;# 
  3823  060D                     	;# 
  3824  060E                     	;# 
  3825  060F                     	;# 
  3826  0610                     	;# 
  3827  0611                     	;# 
  3828  0612                     	;# 
  3829  0613                     	;# 
  3830  0614                     	;# 
  3831  070C                     	;# 
  3832  070D                     	;# 
  3833  070E                     	;# 
  3834  070F                     	;# 
  3835  0710                     	;# 
  3836  0711                     	;# 
  3837  0712                     	;# 
  3838  0713                     	;# 
  3839  0716                     	;# 
  3840  0717                     	;# 
  3841  0718                     	;# 
  3842  0719                     	;# 
  3843  071A                     	;# 
  3844  071B                     	;# 
  3845  071C                     	;# 
  3846  071D                     	;# 
  3847  0796                     	;# 
  3848  0797                     	;# 
  3849  0798                     	;# 
  3850  0799                     	;# 
  3851  079A                     	;# 
  3852  079B                     	;# 
  3853  080C                     	;# 
  3854  080D                     	;# 
  3855  080E                     	;# 
  3856  080F                     	;# 
  3857  0810                     	;# 
  3858  0811                     	;# 
  3859  0812                     	;# 
  3860  0813                     	;# 
  3861  0814                     	;# 
  3862  081A                     	;# 
  3863  081A                     	;# 
  3864  081B                     	;# 
  3865  081C                     	;# 
  3866  081C                     	;# 
  3867  081D                     	;# 
  3868  081E                     	;# 
  3869  081F                     	;# 
  3870  088C                     	;# 
  3871  088D                     	;# 
  3872  088E                     	;# 
  3873  088F                     	;# 
  3874  0890                     	;# 
  3875  0891                     	;# 
  3876  0892                     	;# 
  3877  0893                     	;# 
  3878  0895                     	;# 
  3879  0896                     	;# 
  3880  090C                     	;# 
  3881  090E                     	;# 
  3882  090F                     	;# 
  3883  091F                     	;# 
  3884  098F                     	;# 
  3885  098F                     	;# 
  3886  0990                     	;# 
  3887  0991                     	;# 
  3888  0992                     	;# 
  3889  0993                     	;# 
  3890  0994                     	;# 
  3891  0995                     	;# 
  3892  0996                     	;# 
  3893  0997                     	;# 
  3894  0A19                     	;# 
  3895  0A19                     	;# 
  3896  0A1A                     	;# 
  3897  0A1A                     	;# 
  3898  0A1B                     	;# 
  3899  0A1B                     	;# 
  3900  0A1B                     	;# 
  3901  0A1C                     	;# 
  3902  0A1C                     	;# 
  3903  0A1D                     	;# 
  3904  0A1D                     	;# 
  3905  0A1E                     	;# 
  3906  0A1E                     	;# 
  3907  0A1F                     	;# 
  3908  0A1F                     	;# 
  3909  0A1F                     	;# 
  3910  1E0F                     	;# 
  3911  1E10                     	;# 
  3912  1E11                     	;# 
  3913  1E12                     	;# 
  3914  1E13                     	;# 
  3915  1E14                     	;# 
  3916  1E15                     	;# 
  3917  1E16                     	;# 
  3918  1E17                     	;# 
  3919  1E18                     	;# 
  3920  1E19                     	;# 
  3921  1E1A                     	;# 
  3922  1E1B                     	;# 
  3923  1E1C                     	;# 
  3924  1E1D                     	;# 
  3925  1E1E                     	;# 
  3926  1E1F                     	;# 
  3927  1E20                     	;# 
  3928  1E21                     	;# 
  3929  1E22                     	;# 
  3930  1E23                     	;# 
  3931  1E24                     	;# 
  3932  1E25                     	;# 
  3933  1E26                     	;# 
  3934  1E27                     	;# 
  3935  1E28                     	;# 
  3936  1E29                     	;# 
  3937  1E2A                     	;# 
  3938  1E2B                     	;# 
  3939  1E2C                     	;# 
  3940  1E2D                     	;# 
  3941  1E2E                     	;# 
  3942  1E2F                     	;# 
  3943  1E30                     	;# 
  3944  1E31                     	;# 
  3945  1E32                     	;# 
  3946  1E33                     	;# 
  3947  1E34                     	;# 
  3948  1E35                     	;# 
  3949  1E36                     	;# 
  3950  1E37                     	;# 
  3951  1E8F                     	;# 
  3952  1E90                     	;# 
  3953  1E91                     	;# 
  3954  1E92                     	;# 
  3955  1E93                     	;# 
  3956  1E9C                     	;# 
  3957  1EA1                     	;# 
  3958  1EA2                     	;# 
  3959  1EB1                     	;# 
  3960  1EBB                     	;# 
  3961  1EBC                     	;# 
  3962  1EBD                     	;# 
  3963  1EBE                     	;# 
  3964  1EC3                     	;# 
  3965  1EC5                     	;# 
  3966  1EC6                     	;# 
  3967  1EC7                     	;# 
  3968  1ECB                     	;# 
  3969  1ECC                     	;# 
  3970  1ECD                     	;# 
  3971  1ECE                     	;# 
  3972  1F10                     	;# 
  3973  1F11                     	;# 
  3974  1F12                     	;# 
  3975  1F13                     	;# 
  3976  1F14                     	;# 
  3977  1F15                     	;# 
  3978  1F1C                     	;# 
  3979  1F1D                     	;# 
  3980  1F1E                     	;# 
  3981  1F1F                     	;# 
  3982  1F20                     	;# 
  3983  1F21                     	;# 
  3984  1F22                     	;# 
  3985  1F23                     	;# 
  3986  1F24                     	;# 
  3987  1F25                     	;# 
  3988  1F26                     	;# 
  3989  1F27                     	;# 
  3990  1F38                     	;# 
  3991  1F39                     	;# 
  3992  1F3A                     	;# 
  3993  1F3B                     	;# 
  3994  1F3C                     	;# 
  3995  1F3D                     	;# 
  3996  1F3E                     	;# 
  3997  1F3F                     	;# 
  3998  1F43                     	;# 
  3999  1F44                     	;# 
  4000  1F45                     	;# 
  4001  1F46                     	;# 
  4002  1F47                     	;# 
  4003  1F48                     	;# 
  4004  1F49                     	;# 
  4005  1F4A                     	;# 
  4006  1F4E                     	;# 
  4007  1F4F                     	;# 
  4008  1F50                     	;# 
  4009  1F51                     	;# 
  4010  1F52                     	;# 
  4011  1F53                     	;# 
  4012  1F54                     	;# 
  4013  1F55                     	;# 
  4014  1FE4                     	;# 
  4015  1FE5                     	;# 
  4016  1FE6                     	;# 
  4017  1FE7                     	;# 
  4018  1FE8                     	;# 
  4019  1FE8                     	;# 
  4020  1FE9                     	;# 
  4021  1FEA                     	;# 
  4022  1FEA                     	;# 
  4023  1FEB                     	;# 
  4024  1FED                     	;# 
  4025  1FEE                     	;# 
  4026  1FEF                     	;# 
  4027                           
  4028                           	psect	idataBANK0
  4029  0937                     __pidataBANK0:	
  4030                           
  4031                           ;initializer for _Sensor_scanB
  4032  0937  3495               	retlw	low _MTOUCH_CVD_ScanB_0
  4033  0938  340C               	retlw	high _MTOUCH_CVD_ScanB_0
  4034                           
  4035                           ;initializer for _Sensor_scanA
  4036  0939  3470               	retlw	low _MTOUCH_CVD_ScanA_0
  4037  093A  340C               	retlw	high _MTOUCH_CVD_ScanA_0
  4038                           
  4039                           ;initializer for _sample_period
  4040  093B  34C8               	retlw	200
  4041                           
  4042                           	psect	idataBANK1
  4043  0AE6                     __pidataBANK1:	
  4044                           
  4045                           ;initializer for _Button_StateMachine
  4046  0AE6  3442               	retlw	low _Button_State_Initializing
  4047  0AE7  340F               	retlw	high _Button_State_Initializing
  4048  0AE8  34C1               	retlw	low _Button_State_NotPressed
  4049  0AE9  3404               	retlw	high _Button_State_NotPressed
  4050  0AEA  34EC               	retlw	low _Button_State_Pressed
  4051  0AEB  340E               	retlw	high _Button_State_Pressed
  4052                           
  4053                           ;initializer for _callback_notPressed
  4054  0AEC  341F               	retlw	low _Button_DefaultCallback
  4055  0AED  3409               	retlw	high _Button_DefaultCallback
  4056                           
  4057                           ;initializer for _callback_pressed
  4058  0AEE  341F               	retlw	low _Button_DefaultCallback
  4059  0AEF  3409               	retlw	high _Button_DefaultCallback
  4060                           
  4061                           ;initializer for _callback_sampled
  4062  0AF0  3421               	retlw	low _Sensor_DefaultCallback
  4063  0AF1  3409               	retlw	high _Sensor_DefaultCallback
  4064                           
  4065                           ;initializer for _mtouch_sensor
  4066  0AF2  3400               	retlw	0
  4067  0AF3  3470               	retlw	low _MTOUCH_CVD_ScanA_0
  4068  0AF4  340C               	retlw	high _MTOUCH_CVD_ScanA_0
  4069  0AF5  3495               	retlw	low _MTOUCH_CVD_ScanB_0
  4070  0AF6  340C               	retlw	high _MTOUCH_CVD_ScanB_0
  4071  0AF7  3420               	retlw	32
  4072  0AF8  3400               	retlw	0
  4073  0AF9  3400               	retlw	0
  4074  0AFA  3400               	retlw	0
  4075                           
  4076                           	psect	stringtext1
  4077  07FF                     __pstringtext1:	
  4078  07FF                     _u8_PATTERN:	
  4079  07FF  34C0               	retlw	192
  4080  0800  34F9               	retlw	249
  4081  0801  34A4               	retlw	164
  4082  0802  34B0               	retlw	176
  4083  0803  3499               	retlw	153
  4084  0804  3492               	retlw	146
  4085  0805  3482               	retlw	130
  4086  0806  34F8               	retlw	248
  4087  0807  3480               	retlw	128
  4088  0808  3490               	retlw	144
  4089  0809  3400               	retlw	0
  4090  080A  34FF               	retlw	255
  4091  080B  3486               	retlw	134
  4092  080C  34C7               	retlw	199
  4093  080D  3489               	retlw	137
  4094  080E  34BF               	retlw	191
  4095  080F                     __end_of_u8_PATTERN:	
  4096                           
  4097                           	psect	stringtext2
  4098  081F                     __pstringtext2:	
  4099  081F                     Sensor_Scanfrequency_Evaluation@frequency_hop:	
  4100  081F  3403               	retlw	3
  4101  0820  340D               	retlw	13
  4102  0821  340E               	retlw	14
  4103  0822  3414               	retlw	20
  4104  0823  340D               	retlw	13
  4105  0824                     __end_ofSensor_Scanfrequency_Evaluation@frequency_hop:	
  4106                           
  4107                           	psect	stringtext3
  4108  080F                     __pstringtext3:	
  4109  080F                     _mtouch_button_init:	
  4110  080F  3400               	retlw	0
  4111  0810  3400               	retlw	0
  4112  0811  3400               	retlw	0
  4113  0812  3400               	retlw	0
  4114  0813  3400               	retlw	0
  4115  0814  3400               	retlw	0
  4116  0815  3400               	retlw	0
  4117  0816  3400               	retlw	0
  4118  0817  3400               	retlw	0
  4119  0818  3400               	retlw	0
  4120  0819  3400               	retlw	0
  4121  081A  3400               	retlw	0
  4122  081B  3400               	retlw	0
  4123  081C  3400               	retlw	0
  4124  081D  3450               	retlw	80
  4125  081E  3401               	retlw	1
  4126  081F                     __end_of_mtouch_button_init:	
  4127  0018                     _LATAbits	set	24
  4128  0019                     _LATBbits	set	25
  4129  0014                     _TRISC	set	20
  4130  0013                     _TRISB	set	19
  4131  0012                     _TRISA	set	18
  4132  001A                     _LATC	set	26
  4133  0019                     _LATB	set	25
  4134  0018                     _LATA	set	24
  4135  000B                     _INTCONbits	set	11
  4136  005F                     _GIE	set	95
  4137  009B                     _ADRES	set	155
  4138  009C                     _ADRESH	set	156
  4139  009B                     _ADRESL	set	155
  4140  009D                     _ADCON0bits	set	157
  4141  009E                     _ADCON1	set	158
  4142  009D                     _ADCON0	set	157
  4143  020F                     _T1GCONbits	set	527
  4144  020E                     _T1CONbits	set	526
  4145  020E                     _T1CON	set	526
  4146  020C                     _TMR1L	set	524
  4147  020D                     _TMR1H	set	525
  4148  0211                     _T1CLK	set	529
  4149  0210                     _T1GATE	set	528
  4150  020F                     _T1GCON	set	527
  4151  028D                     _PR2	set	653
  4152  028C                     _TMR2	set	652
  4153  0291                     _T2RSTbits	set	657
  4154  028F                     _T2HLTbits	set	655
  4155  028E                     _T2CON	set	654
  4156  028C                     _T2TMR	set	652
  4157  028D                     _T2PR	set	653
  4158  0291                     _T2RST	set	657
  4159  028F                     _T2HLT	set	655
  4160  0290                     _T2CLKCON	set	656
  4161  028E                     _T2CONbits	set	654
  4162  059E                     _T0CON0bits	set	1438
  4163  059E                     _T0CON0	set	1438
  4164  059C                     _TMR0L	set	1436
  4165  059D                     _TMR0H	set	1437
  4166  059F                     _T0CON1	set	1439
  4167  0710                     _PIR4bits	set	1808
  4168  071A                     _PIE4bits	set	1818
  4169  070C                     _PIR0bits	set	1804
  4170  0716                     _PIE0bits	set	1814
  4171  070D                     _PIR1bits	set	1805
  4172  079B                     _PMD5	set	1947
  4173  079A                     _PMD4	set	1946
  4174  0799                     _PMD3	set	1945
  4175  0798                     _PMD2	set	1944
  4176  0797                     _PMD1	set	1943
  4177  0796                     _PMD0	set	1942
  4178  0892                     _OSCTUNE	set	2194
  4179  0890                     _OSCSTAT	set	2192
  4180  0893                     _OSCFRQ	set	2195
  4181  0891                     _OSCEN	set	2193
  4182  088F                     _OSCCON3	set	2191
  4183  088D                     _OSCCON1	set	2189
  4184  4480                     _PLLR	set	17536
  4185  1F52                     _INLVLC	set	8018
  4186  1F47                     _INLVLB	set	8007
  4187  1F3C                     _INLVLA	set	7996
  4188  1F51                     _SLRCONC	set	8017
  4189  1F46                     _SLRCONB	set	8006
  4190  1F3B                     _SLRCONA	set	7995
  4191  1F50                     _ODCONC	set	8016
  4192  1F45                     _ODCONB	set	8005
  4193  1F3A                     _ODCONA	set	7994
  4194  1F4F                     _WPUC	set	8015
  4195  1F39                     _WPUA	set	7993
  4196  1F44                     _WPUB	set	8004
  4197  1F38                     _ANSELA	set	7992
  4198  1F43                     _ANSELB	set	8003
  4199  1F4E                     _ANSELC	set	8014
  4200                           
  4201                           ; #config settings
  4202  0000                     
  4203                           	psect	cinit
  4204  0020                     start_initialization:	
  4205  0020                     __initialization:	
  4206                           
  4207                           ; Initialize objects allocated to BANK0
  4208  0020  3037               	movlw	low __pidataBANK0
  4209  0021  0084               	movwf	4
  4210  0022  3089               	movlw	(high __pidataBANK0)| (0+128)
  4211  0023  0085               	movwf	5
  4212  0024  306B               	movlw	low __pdataBANK0
  4213  0025  0086               	movwf	6
  4214  0026  3000               	movlw	high __pdataBANK0
  4215  0027  0087               	movwf	7
  4216  0028  3005               	movlw	5
  4217  0029  3189  2160  3180   	fcall	init_ram
  4218                           
  4219                           ; Initialize objects allocated to BANK1
  4220  002C  30E6               	movlw	low __pidataBANK1
  4221  002D  0084               	movwf	4
  4222  002E  308A               	movlw	(high __pidataBANK1)| (0+128)
  4223  002F  0085               	movwf	5
  4224  0030  30A0               	movlw	low __pdataBANK1
  4225  0031  0086               	movwf	6
  4226  0032  3000               	movlw	high __pdataBANK1
  4227  0033  0087               	movwf	7
  4228  0034  3015               	movlw	21
  4229  0035  3189  2160  3180   	fcall	init_ram
  4230                           
  4231                           ; Clear objects allocated to COMMON
  4232  0038  01F8               	clrf	__pbssCOMMON& (0+127)
  4233  0039  01F9               	clrf	(__pbssCOMMON+1)& (0+127)
  4234  003A  01FA               	clrf	(__pbssCOMMON+2)& (0+127)
  4235  003B  01FB               	clrf	(__pbssCOMMON+3)& (0+127)
  4236  003C  01FC               	clrf	(__pbssCOMMON+4)& (0+127)
  4237  003D  01FD               	clrf	(__pbssCOMMON+5)& (0+127)
  4238                           
  4239                           ; Clear objects allocated to BANK0
  4240  003E  3020               	movlw	low __pbssBANK0
  4241  003F  0084               	movwf	4
  4242  0040  3000               	movlw	high __pbssBANK0
  4243  0041  0085               	movwf	5
  4244  0042  302A               	movlw	42
  4245  0043  3189  215A  3180   	fcall	clear_ram0
  4246                           
  4247                           ; Clear objects allocated to BANK1
  4248  0046  30B5               	movlw	low __pbssBANK1
  4249  0047  0084               	movwf	4
  4250  0048  3000               	movlw	high __pbssBANK1
  4251  0049  0085               	movwf	5
  4252  004A  3014               	movlw	20
  4253  004B  3189  215A         	fcall	clear_ram0
  4254  004D                     end_of_initialization:	
  4255                           ;End of C runtime variable initialization code
  4256                           
  4257  004D                     __end_of__initialization:	
  4258  004D  107E               	bcf	int$flags,0	;clear compiler interrupt flag (level 1)
  4259  004E  0140               	movlb	0
  4260  004F  3180  2851         	ljmp	_main	;jump to C main() function
  4261                           
  4262                           	psect	bssCOMMON
  4263  0078                     __pbssCOMMON:	
  4264  0078                     _timer1ReloadVal:	
  4265  0078                     	ds	2
  4266  007A                     Sensor_Acq_ExecuteScan@last_b:	
  4267  007A                     	ds	2
  4268  007C                     _packet_counter:	
  4269  007C                     	ds	1
  4270  007D                     _currentScannSensor:	
  4271  007D                     	ds	1
  4272                           
  4273                           	psect	bssBANK0
  4274  0020                     __pbssBANK0:	
  4275  0020                     _i32_R_SENSOR_ADCsample:	
  4276  0020                     	ds	4
  4277  0024                     _i32_F_SENSOR_ADCsample:	
  4278  0024                     	ds	4
  4279  0028                     _u32_Mn:	
  4280  0028                     	ds	4
  4281  002C                     _i16_R_SENSOR_TEMPERATURE_10xDEG:	
  4282  002C                     	ds	2
  4283  002E                     _u16_ADCsample_COUNT:	
  4284  002E                     	ds	2
  4285  0030                     _TMR1_InterruptHandler:	
  4286  0030                     	ds	2
  4287  0032                     _TMR2_InterruptHandler:	
  4288  0032                     	ds	2
  4289  0034                     _TMR0_InterruptHandler:	
  4290  0034                     	ds	2
  4291  0036                     Sensor_Acq_ExecuteScan@last_a:	
  4292  0036                     	ds	2
  4293  0038                     _packet_noise:	
  4294  0038                     	ds	2
  4295  003A                     _packet_sample:	
  4296  003A                     	ds	2
  4297  003C                     _u8_TOUCH_DELAY_COUNTDOWN:	
  4298  003C                     	ds	1
  4299  003D                     _u8_SLEEPING_START_COUNTDOWN_SEC:	
  4300  003D                     	ds	1
  4301  003E                     _u8_DIMMING_START_COUNTDOWN_SEC:	
  4302  003E                     	ds	1
  4303  003F                     _u8_DIG22:	
  4304  003F                     	ds	1
  4305  0040                     _u8_DIG21:	
  4306  0040                     	ds	1
  4307  0041                     _u8_DIG13:	
  4308  0041                     	ds	1
  4309  0042                     _u8_DIG12:	
  4310  0042                     	ds	1
  4311  0043                     _u8_DIG11:	
  4312  0043                     	ds	1
  4313  0044                     _u8_DIG_CHANNEL:	
  4314  0044                     	ds	1
  4315  0045                     _mtouch_time_toScan:	
  4316  0045                     	ds	1
  4317  0046                     _lowpowerActivated:	
  4318  0046                     	ds	1
  4319  0047                     _sensor_globalFlags:	
  4320  0047                     	ds	1
  4321  0048                     _i16_F_SENSOR_TEMPERATURE_10xDEG:	
  4322  0048                     	ds	2
  4323                           
  4324                           	psect	dataBANK0
  4325  006B                     __pdataBANK0:	
  4326  006B                     _Sensor_scanB:	
  4327  006B                     	ds	2
  4328  006D                     _Sensor_scanA:	
  4329  006D                     	ds	2
  4330  006F                     _sample_period:	
  4331  006F                     	ds	1
  4332                           
  4333                           	psect	bssBANK1
  4334  00B5                     __pbssBANK1:	
  4335  00B5                     _u32_Cn:	
  4336  00B5                     	ds	4
  4337  00B9                     _mtouch_button:	
  4338  00B9                     	ds	16
  4339                           
  4340                           	psect	dataBANK1
  4341  00A0                     __pdataBANK1:	
  4342  00A0                     _Button_StateMachine:	
  4343  00A0                     	ds	6
  4344  00A6                     _callback_notPressed:	
  4345  00A6                     	ds	2
  4346  00A8                     _callback_pressed:	
  4347  00A8                     	ds	2
  4348  00AA                     _callback_sampled:	
  4349  00AA                     	ds	2
  4350  00AC                     _mtouch_sensor:	
  4351  00AC                     	ds	9
  4352                           
  4353                           	psect	inittext
  4354  0960                     init_ram:	
  4355  0960  00FE               	movwf	126
  4356  0961                     initloop:	
  4357  0961  0012               	moviw fsr0++
  4358  0962  001E               	movwi fsr1++
  4359  0963  0BFE               	decfsz	126,f
  4360  0964  2961               	goto	initloop
  4361  0965  3400               	retlw	0
  4362                           
  4363                           	psect	clrtext
  4364  095A                     clear_ram0:	
  4365                           ;	Called with FSR0 containing the base address, and
  4366                           ;	WREG with the size to clear
  4367                           
  4368  095A  0064               	clrwdt	;clear the watchdog before getting into this loop
  4369  095B                     clrloop0:	
  4370  095B  0180               	clrf	0	;clear RAM location pointed to by FSR
  4371  095C  3101               	addfsr 0,1
  4372  095D  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  4373  095E  295B               	goto	clrloop0	;have we reached the end yet?
  4374  095F  3400               	retlw	0	;all done for this memory range, return
  4375                           
  4376                           	psect	cstackCOMMON
  4377  0070                     __pcstackCOMMON:	
  4378  0070                     ?_MTOUCH_Service_Mainloop:	
  4379  0070                     ?_MTOUCH_Button_isPressed:	
  4380                           ; 1 bytes @ 0x0
  4381                           
  4382  0070                     ?_MTOUCH_Sensor_Enable:	
  4383                           ; 1 bytes @ 0x0
  4384                           
  4385  0070                     ?_Sensor_Sampled_Reset:	
  4386                           ; 1 bytes @ 0x0
  4387                           
  4388  0070                     ?_Sensor_Service:	
  4389                           ; 1 bytes @ 0x0
  4390                           
  4391  0070                     ?_Sensor_Acquisition:	
  4392                           ; 1 bytes @ 0x0
  4393                           
  4394  0070                     ?_Sensor_isEnabled:	
  4395                           ; 1 bytes @ 0x0
  4396                           
  4397  0070                     ?_Sensor_RawSample_Update:	
  4398                           ; 1 bytes @ 0x0
  4399                           
  4400  0070                     ?_Sensor_setSampled:	
  4401                           ; 1 bytes @ 0x0
  4402                           
  4403  0070                     ?_Sensor_Acq_ExecutePacket:	
  4404                           ; 1 bytes @ 0x0
  4405                           
  4406  0070                     ?_Sensor_setActive:	
  4407                           ; 1 bytes @ 0x0
  4408                           
  4409  0070                     ?_Sensor_Scanfrequency_Evaluation:	
  4410                           ; 1 bytes @ 0x0
  4411                           
  4412  0070                     ?_Sensor_setInactive:	
  4413                           ; 1 bytes @ 0x0
  4414                           
  4415  0070                     ?_Sensor_setScanFunction:	
  4416                           ; 1 bytes @ 0x0
  4417                           
  4418  0070                     ?_Sensor_Acq_ExecuteScan:	
  4419                           ; 1 bytes @ 0x0
  4420                           
  4421  0070                     ?_TMR2_LoadPeriodRegister:	
  4422                           ; 1 bytes @ 0x0
  4423                           
  4424  0070                     ?_TMR2_StartTimer:	
  4425                           ; 1 bytes @ 0x0
  4426                           
  4427  0070                     ?_TMR2_StopTimer:	
  4428                           ; 1 bytes @ 0x0
  4429                           
  4430  0070                     ?_Button_Service:	
  4431                           ; 1 bytes @ 0x0
  4432                           
  4433  0070                     ?_Button_Reading_Update:	
  4434                           ; 1 bytes @ 0x0
  4435                           
  4436  0070                     ?_Button_Deviation_Update:	
  4437                           ; 1 bytes @ 0x0
  4438                           
  4439  0070                     ?_Button_Baseline_Initialize:	
  4440                           ; 1 bytes @ 0x0
  4441                           
  4442  0070                     ?_Button_Baseline_Update:	
  4443                           ; 1 bytes @ 0x0
  4444                           
  4445  0070                     ?_Button_Tick_helper:	
  4446                           ; 1 bytes @ 0x0
  4447                           
  4448  0070                     ?_Button_Reading_Update_Helper:	
  4449                           ; 1 bytes @ 0x0
  4450                           
  4451  0070                     ?_MTOUCH_needReburst:	
  4452                           ; 1 bytes @ 0x0
  4453                           
  4454  0070                     ?_MTOUCH_Tick:	
  4455                           ; 1 bytes @ 0x0
  4456                           
  4457  0070                     ?_TMR0_ISR:	
  4458                           ; 1 bytes @ 0x0
  4459                           
  4460  0070                     ?_TMR2_ISR:	
  4461                           ; 1 bytes @ 0x0
  4462                           
  4463  0070                     ?_TMR1_ISR:	
  4464                           ; 1 bytes @ 0x0
  4465                           
  4466  0070                     ?_PMD_Initialize:	
  4467                           ; 1 bytes @ 0x0
  4468                           
  4469  0070                     ?_PIN_MANAGER_Initialize:	
  4470                           ; 1 bytes @ 0x0
  4471                           
  4472  0070                     ?_OSCILLATOR_Initialize:	
  4473                           ; 1 bytes @ 0x0
  4474                           
  4475  0070                     ?_ADC_Initialize:	
  4476                           ; 1 bytes @ 0x0
  4477                           
  4478  0070                     ?_TMR2_Initialize:	
  4479                           ; 1 bytes @ 0x0
  4480                           
  4481  0070                     ?_TMR1_Initialize:	
  4482                           ; 1 bytes @ 0x0
  4483                           
  4484  0070                     ?_TMR0_Initialize:	
  4485                           ; 1 bytes @ 0x0
  4486                           
  4487  0070                     ?_TMR0_DefaultInterruptHandler:	
  4488                           ; 1 bytes @ 0x0
  4489                           
  4490  0070                     ??_TMR0_DefaultInterruptHandler:	
  4491                           ; 1 bytes @ 0x0
  4492                           
  4493  0070                     ?_TMR2_DefaultInterruptHandler:	
  4494                           ; 1 bytes @ 0x0
  4495                           
  4496  0070                     ??_TMR2_DefaultInterruptHandler:	
  4497                           ; 1 bytes @ 0x0
  4498                           
  4499  0070                     ?_TMR1_DefaultInterruptHandler:	
  4500                           ; 1 bytes @ 0x0
  4501                           
  4502  0070                     ??_TMR1_DefaultInterruptHandler:	
  4503                           ; 1 bytes @ 0x0
  4504                           
  4505  0070                     ?_MTOUCH_CVD_ScanA_0:	
  4506                           ; 1 bytes @ 0x0
  4507                           
  4508  0070                     ??_MTOUCH_CVD_ScanA_0:	
  4509                           ; 1 bytes @ 0x0
  4510                           
  4511  0070                     ?_MTOUCH_CVD_ScanB_0:	
  4512                           ; 1 bytes @ 0x0
  4513                           
  4514  0070                     ??_MTOUCH_CVD_ScanB_0:	
  4515                           ; 1 bytes @ 0x0
  4516                           
  4517  0070                     ?_MTOUCH_Sensor_Initialize:	
  4518                           ; 1 bytes @ 0x0
  4519                           
  4520  0070                     ?_MTOUCH_Sensor_InitializeAll:	
  4521                           ; 1 bytes @ 0x0
  4522                           
  4523  0070                     ?_MTOUCH_Sensor_Scan_Initialize:	
  4524                           ; 1 bytes @ 0x0
  4525                           
  4526  0070                     ?_MTOUCH_Sensor_SampleAll:	
  4527                           ; 1 bytes @ 0x0
  4528                           
  4529  0070                     ?_MTOUCH_Sensor_isCalibrated:	
  4530                           ; 1 bytes @ 0x0
  4531                           
  4532  0070                     ?_MTOUCH_Sensor_Calibrate:	
  4533                           ; 1 bytes @ 0x0
  4534                           
  4535  0070                     ?_MTOUCH_Sensor_Sampled_ResetAll:	
  4536                           ; 1 bytes @ 0x0
  4537                           
  4538  0070                     ?_MTOUCH_Sensor_wasSampled:	
  4539                           ; 1 bytes @ 0x0
  4540                           
  4541  0070                     ?_MTOUCH_Button_Initialize:	
  4542                           ; 1 bytes @ 0x0
  4543                           
  4544  0070                     ?_MTOUCH_Button_InitializeAll:	
  4545                           ; 1 bytes @ 0x0
  4546                           
  4547  0070                     ?_MTOUCH_Button_ServiceAll:	
  4548                           ; 1 bytes @ 0x0
  4549                           
  4550  0070                     ?_MTOUCH_Button_Tick:	
  4551                           ; 1 bytes @ 0x0
  4552                           
  4553  0070                     ?_MTOUCH_Initialize:	
  4554                           ; 1 bytes @ 0x0
  4555                           
  4556  0070                     ?_INTERRUPT_InterruptManager:	
  4557                           ; 1 bytes @ 0x0
  4558                           
  4559  0070                     ?_SYSTEM_Initialize:	
  4560                           ; 1 bytes @ 0x0
  4561                           
  4562  0070                     ?_TMR2_Start:	
  4563                           ; 1 bytes @ 0x0
  4564                           
  4565  0070                     ?_TMR2_Stop:	
  4566                           ; 1 bytes @ 0x0
  4567                           
  4568  0070                     ?_TMR2_Period8BitSet:	
  4569                           ; 1 bytes @ 0x0
  4570                           
  4571  0070                     ?_TMR1_WriteTimer:	
  4572                           ; 1 bytes @ 0x0
  4573                           
  4574  0070                     ?_v_1s_service_routine:	
  4575                           ; 1 bytes @ 0x0
  4576                           
  4577  0070                     ??_v_1s_service_routine:	
  4578                           ; 1 bytes @ 0x0
  4579                           
  4580  0070                     ?_v_1ms_service_routine:	
  4581                           ; 1 bytes @ 0x0
  4582                           
  4583  0070                     ?_main:	
  4584                           ; 1 bytes @ 0x0
  4585                           
  4586  0070                     ?i1_MTOUCH_Button_isPressed:	
  4587                           ; 1 bytes @ 0x0
  4588                           
  4589  0070                     ??i1_MTOUCH_Button_isPressed:	
  4590                           ; 1 bytes @ 0x0
  4591                           
  4592  0070                     ?i1___bmul:	
  4593                           ; 1 bytes @ 0x0
  4594                           
  4595  0070                     ?i1_abs:	
  4596                           ; 1 bytes @ 0x0
  4597                           
  4598  0070                     MTOUCH_Sensor_isCalibrated@sensor:	
  4599                           ; 2 bytes @ 0x0
  4600                           
  4601  0070                     MTOUCH_Sensor_Calibrate@sensor:	
  4602                           ; 1 bytes @ 0x0
  4603                           
  4604  0070                     i1___bmul@multiplicand:	
  4605                           ; 1 bytes @ 0x0
  4606                           
  4607  0070                     TMR1_WriteTimer@timerVal:	
  4608                           ; 1 bytes @ 0x0
  4609                           
  4610  0070                     i1abs@a:	
  4611                           ; 2 bytes @ 0x0
  4612                           
  4613                           
  4614                           ; 2 bytes @ 0x0
  4615  0070                     	ds	1
  4616  0071                     ??i1___bmul:	
  4617  0071                     i1MTOUCH_Button_isPressed@name:	
  4618                           ; 1 bytes @ 0x1
  4619                           
  4620                           
  4621                           ; 1 bytes @ 0x1
  4622  0071                     	ds	1
  4623  0072                     ??_TMR1_ISR:	
  4624  0072                     ??_TMR1_WriteTimer:	
  4625                           ; 1 bytes @ 0x2
  4626                           
  4627  0072                     ??_v_1ms_service_routine:	
  4628                           ; 1 bytes @ 0x2
  4629                           
  4630  0072                     ??i1_abs:	
  4631                           ; 1 bytes @ 0x2
  4632                           
  4633  0072                     i1___bmul@multiplier:	
  4634                           ; 1 bytes @ 0x2
  4635                           
  4636                           
  4637                           ; 1 bytes @ 0x2
  4638  0072                     	ds	1
  4639  0073                     i1___bmul@product:	
  4640                           
  4641                           ; 1 bytes @ 0x3
  4642  0073                     	ds	1
  4643  0074                     ??_Sensor_Acq_ExecuteScan:	
  4644  0074                     ??_TMR0_ISR:	
  4645                           ; 1 bytes @ 0x4
  4646                           
  4647                           
  4648                           ; 1 bytes @ 0x4
  4649  0074                     	ds	2
  4650  0076                     Sensor_Acq_ExecuteScan@result:	
  4651                           
  4652                           ; 2 bytes @ 0x6
  4653  0076                     	ds	2
  4654  0078                     ??_TMR2_ISR:	
  4655  0078                     ??_INTERRUPT_InterruptManager:	
  4656                           ; 1 bytes @ 0x8
  4657                           
  4658                           
  4659                           	psect	cstackBANK0
  4660  004A                     __pcstackBANK0:	
  4661                           ; 1 bytes @ 0x8
  4662                           
  4663  004A                     ??_MTOUCH_Button_isPressed:	
  4664  004A                     ?_Sensor_DefaultCallback:	
  4665                           ; 1 bytes @ 0x0
  4666                           
  4667  004A                     ??_Sensor_Sampled_Reset:	
  4668                           ; 1 bytes @ 0x0
  4669                           
  4670  004A                     ??_Sensor_isEnabled:	
  4671                           ; 1 bytes @ 0x0
  4672                           
  4673  004A                     ??_Sensor_RawSample_Update:	
  4674                           ; 1 bytes @ 0x0
  4675                           
  4676  004A                     ??_Sensor_setSampled:	
  4677                           ; 1 bytes @ 0x0
  4678                           
  4679  004A                     ??_Sensor_setActive:	
  4680                           ; 1 bytes @ 0x0
  4681                           
  4682  004A                     ??_Sensor_setInactive:	
  4683                           ; 1 bytes @ 0x0
  4684                           
  4685  004A                     ??_Sensor_setScanFunction:	
  4686                           ; 1 bytes @ 0x0
  4687                           
  4688  004A                     ?_TMR2_SetInterruptHandler:	
  4689                           ; 1 bytes @ 0x0
  4690                           
  4691  004A                     ??_TMR2_StartTimer:	
  4692                           ; 1 bytes @ 0x0
  4693                           
  4694  004A                     ??_TMR2_StopTimer:	
  4695                           ; 1 bytes @ 0x0
  4696                           
  4697  004A                     ?_Button_DefaultCallback:	
  4698                           ; 1 bytes @ 0x0
  4699                           
  4700  004A                     ?_memcpy:	
  4701                           ; 1 bytes @ 0x0
  4702                           
  4703  004A                     ??_Button_Deviation_Update:	
  4704                           ; 1 bytes @ 0x0
  4705                           
  4706  004A                     ??_Button_Baseline_Update:	
  4707                           ; 1 bytes @ 0x0
  4708                           
  4709  004A                     ??_Button_Tick_helper:	
  4710                           ; 1 bytes @ 0x0
  4711                           
  4712  004A                     ??_MTOUCH_needReburst:	
  4713                           ; 1 bytes @ 0x0
  4714                           
  4715  004A                     ??_PMD_Initialize:	
  4716                           ; 1 bytes @ 0x0
  4717                           
  4718  004A                     ??_PIN_MANAGER_Initialize:	
  4719                           ; 1 bytes @ 0x0
  4720                           
  4721  004A                     ??_OSCILLATOR_Initialize:	
  4722                           ; 1 bytes @ 0x0
  4723                           
  4724  004A                     ??_ADC_Initialize:	
  4725                           ; 1 bytes @ 0x0
  4726                           
  4727  004A                     ?_TMR0_SetInterruptHandler:	
  4728                           ; 1 bytes @ 0x0
  4729                           
  4730  004A                     ?_TMR1_SetInterruptHandler:	
  4731                           ; 1 bytes @ 0x0
  4732                           
  4733  004A                     ??_MTOUCH_Sensor_Scan_Initialize:	
  4734                           ; 1 bytes @ 0x0
  4735                           
  4736  004A                     ??_MTOUCH_Sensor_isCalibrated:	
  4737                           ; 1 bytes @ 0x0
  4738                           
  4739  004A                     ??_MTOUCH_Sensor_Calibrate:	
  4740                           ; 1 bytes @ 0x0
  4741                           
  4742  004A                     ??_MTOUCH_Button_Initialize:	
  4743                           ; 1 bytes @ 0x0
  4744                           
  4745  004A                     ??_TMR2_Start:	
  4746                           ; 1 bytes @ 0x0
  4747                           
  4748  004A                     ??_TMR2_Stop:	
  4749                           ; 1 bytes @ 0x0
  4750                           
  4751  004A                     ??_TMR2_Period8BitSet:	
  4752                           ; 1 bytes @ 0x0
  4753                           
  4754  004A                     ?_v_get_slope_intercept:	
  4755                           ; 1 bytes @ 0x0
  4756                           
  4757  004A                     ?___bmul:	
  4758                           ; 1 bytes @ 0x0
  4759                           
  4760  004A                     ?_abs:	
  4761                           ; 1 bytes @ 0x0
  4762                           
  4763  004A                     ?_ADC_GetConversion:	
  4764                           ; 2 bytes @ 0x0
  4765                           
  4766  004A                     ?___awdiv:	
  4767                           ; 2 bytes @ 0x0
  4768                           
  4769  004A                     ?___lmul:	
  4770                           ; 2 bytes @ 0x0
  4771                           
  4772  004A                     Sensor_RawSample_Update@sensor:	
  4773                           ; 4 bytes @ 0x0
  4774                           
  4775  004A                     Sensor_DefaultCallback@sensor:	
  4776                           ; 1 bytes @ 0x0
  4777                           
  4778  004A                     Sensor_setScanFunction@sensor:	
  4779                           ; 1 bytes @ 0x0
  4780                           
  4781  004A                     Sensor_isEnabled@sensor:	
  4782                           ; 1 bytes @ 0x0
  4783                           
  4784  004A                     Sensor_setActive@sensor:	
  4785                           ; 1 bytes @ 0x0
  4786                           
  4787  004A                     Sensor_setInactive@sensor:	
  4788                           ; 1 bytes @ 0x0
  4789                           
  4790  004A                     Sensor_Sampled_Reset@sensor:	
  4791                           ; 1 bytes @ 0x0
  4792                           
  4793  004A                     Sensor_setSampled@sensor:	
  4794                           ; 1 bytes @ 0x0
  4795                           
  4796  004A                     Button_DefaultCallback@button:	
  4797                           ; 1 bytes @ 0x0
  4798                           
  4799  004A                     TMR2_Period8BitSet@periodVal:	
  4800                           ; 1 bytes @ 0x0
  4801                           
  4802  004A                     ___bmul@multiplicand:	
  4803                           ; 1 bytes @ 0x0
  4804                           
  4805  004A                     TMR0_SetInterruptHandler@InterruptHandler:	
  4806                           ; 1 bytes @ 0x0
  4807                           
  4808  004A                     TMR2_SetInterruptHandler@InterruptHandler:	
  4809                           ; 2 bytes @ 0x0
  4810                           
  4811  004A                     TMR1_SetInterruptHandler@InterruptHandler:	
  4812                           ; 2 bytes @ 0x0
  4813                           
  4814  004A                     v_get_slope_intercept@u16_adc:	
  4815                           ; 2 bytes @ 0x0
  4816                           
  4817  004A                     ___awdiv@divisor:	
  4818                           ; 2 bytes @ 0x0
  4819                           
  4820  004A                     abs@a:	
  4821                           ; 2 bytes @ 0x0
  4822                           
  4823  004A                     memcpy@s1:	
  4824                           ; 2 bytes @ 0x0
  4825                           
  4826  004A                     ___lmul@multiplier:	
  4827                           ; 2 bytes @ 0x0
  4828                           
  4829                           
  4830                           ; 4 bytes @ 0x0
  4831  004A                     	ds	1
  4832  004B                     ??_Sensor_DefaultCallback:	
  4833  004B                     ??_TMR2_LoadPeriodRegister:	
  4834                           ; 1 bytes @ 0x1
  4835                           
  4836  004B                     ??_Button_DefaultCallback:	
  4837                           ; 1 bytes @ 0x1
  4838                           
  4839  004B                     ??_MTOUCH_Sensor_Sampled_ResetAll:	
  4840                           ; 1 bytes @ 0x1
  4841                           
  4842  004B                     ??___bmul:	
  4843                           ; 1 bytes @ 0x1
  4844                           
  4845  004B                     MTOUCH_Button_isPressed@name:	
  4846                           ; 1 bytes @ 0x1
  4847                           
  4848  004B                     TMR2_LoadPeriodRegister@periodVal:	
  4849                           ; 1 bytes @ 0x1
  4850                           
  4851                           
  4852                           ; 1 bytes @ 0x1
  4853  004B                     	ds	1
  4854  004C                     ??_Sensor_Acq_ExecutePacket:	
  4855  004C                     ??_abs:	
  4856                           ; 1 bytes @ 0x2
  4857                           
  4858  004C                     ??_TMR2_SetInterruptHandler:	
  4859                           ; 1 bytes @ 0x2
  4860                           
  4861  004C                     ??_TMR2_Initialize:	
  4862                           ; 1 bytes @ 0x2
  4863                           
  4864  004C                     ??_TMR1_Initialize:	
  4865                           ; 1 bytes @ 0x2
  4866                           
  4867  004C                     ??_TMR0_Initialize:	
  4868                           ; 1 bytes @ 0x2
  4869                           
  4870  004C                     ??_TMR0_SetInterruptHandler:	
  4871                           ; 1 bytes @ 0x2
  4872                           
  4873  004C                     ??_TMR1_SetInterruptHandler:	
  4874                           ; 1 bytes @ 0x2
  4875                           
  4876  004C                     ??_ADC_GetConversion:	
  4877                           ; 1 bytes @ 0x2
  4878                           
  4879  004C                     ??_v_get_slope_intercept:	
  4880                           ; 1 bytes @ 0x2
  4881                           
  4882  004C                     MTOUCH_Sensor_Sampled_ResetAll@sensor:	
  4883                           ; 1 bytes @ 0x2
  4884                           
  4885  004C                     MTOUCH_Button_Initialize@name:	
  4886                           ; 1 bytes @ 0x2
  4887                           
  4888  004C                     Button_Tick_helper@button:	
  4889                           ; 1 bytes @ 0x2
  4890                           
  4891  004C                     ___bmul@product:	
  4892                           ; 1 bytes @ 0x2
  4893                           
  4894  004C                     ___awdiv@dividend:	
  4895                           ; 1 bytes @ 0x2
  4896                           
  4897  004C                     memcpy@n:	
  4898                           ; 2 bytes @ 0x2
  4899                           
  4900                           
  4901                           ; 2 bytes @ 0x2
  4902  004C                     	ds	1
  4903  004D                     ??_MTOUCH_Tick:	
  4904  004D                     ??_MTOUCH_Button_Tick:	
  4905                           ; 1 bytes @ 0x3
  4906                           
  4907  004D                     Sensor_Acq_ExecutePacket@ADCON0_temp:	
  4908                           ; 1 bytes @ 0x3
  4909                           
  4910  004D                     MTOUCH_Button_Initialize@button:	
  4911                           ; 1 bytes @ 0x3
  4912                           
  4913  004D                     ADC_GetConversion@channel:	
  4914                           ; 1 bytes @ 0x3
  4915                           
  4916  004D                     ___bmul@multiplier:	
  4917                           ; 1 bytes @ 0x3
  4918                           
  4919                           
  4920                           ; 1 bytes @ 0x3
  4921  004D                     	ds	1
  4922  004E                     ??_MTOUCH_Sensor_Enable:	
  4923  004E                     ??_memcpy:	
  4924                           ; 1 bytes @ 0x4
  4925                           
  4926  004E                     ??_MTOUCH_Sensor_wasSampled:	
  4927                           ; 1 bytes @ 0x4
  4928                           
  4929  004E                     ??___awdiv:	
  4930                           ; 1 bytes @ 0x4
  4931                           
  4932  004E                     ?_MTOUCH_Sensor_RawSample_Get:	
  4933                           ; 1 bytes @ 0x4
  4934                           
  4935  004E                     Sensor_Acq_ExecutePacket@ADCON1_temp:	
  4936                           ; 2 bytes @ 0x4
  4937                           
  4938  004E                     ___lmul@multiplicand:	
  4939                           ; 1 bytes @ 0x4
  4940                           
  4941                           
  4942                           ; 4 bytes @ 0x4
  4943  004E                     	ds	1
  4944  004F                     Sensor_Acq_ExecutePacket@error:	
  4945  004F                     MTOUCH_Sensor_Enable@sensor:	
  4946                           ; 1 bytes @ 0x5
  4947                           
  4948  004F                     MTOUCH_Sensor_wasSampled@sensor:	
  4949                           ; 1 bytes @ 0x5
  4950                           
  4951  004F                     ___awdiv@counter:	
  4952                           ; 1 bytes @ 0x5
  4953                           
  4954  004F                     memcpy@s:	
  4955                           ; 1 bytes @ 0x5
  4956                           
  4957                           
  4958                           ; 2 bytes @ 0x5
  4959  004F                     	ds	1
  4960  0050                     ??_MTOUCH_Sensor_Initialize:	
  4961  0050                     ??_MTOUCH_Sensor_RawSample_Get:	
  4962                           ; 1 bytes @ 0x6
  4963                           
  4964  0050                     Sensor_Acq_ExecutePacket@sensor:	
  4965                           ; 1 bytes @ 0x6
  4966                           
  4967  0050                     Button_Baseline_Update@button:	
  4968                           ; 1 bytes @ 0x6
  4969                           
  4970  0050                     ___awdiv@sign:	
  4971                           ; 1 bytes @ 0x6
  4972                           
  4973                           
  4974                           ; 1 bytes @ 0x6
  4975  0050                     	ds	1
  4976  0051                     ??_Sensor_Scanfrequency_Evaluation:	
  4977  0051                     MTOUCH_Sensor_Initialize@sensor:	
  4978                           ; 1 bytes @ 0x7
  4979                           
  4980  0051                     MTOUCH_Sensor_RawSample_Get@name:	
  4981                           ; 1 bytes @ 0x7
  4982                           
  4983  0051                     memcpy@tmp:	
  4984                           ; 1 bytes @ 0x7
  4985                           
  4986  0051                     ___awdiv@quotient:	
  4987                           ; 1 bytes @ 0x7
  4988                           
  4989                           
  4990                           ; 2 bytes @ 0x7
  4991  0051                     	ds	1
  4992  0052                     ??_Button_Baseline_Initialize:	
  4993  0052                     ??_Button_Reading_Update_Helper:	
  4994                           ; 1 bytes @ 0x8
  4995                           
  4996  0052                     ??_MTOUCH_Sensor_InitializeAll:	
  4997                           ; 1 bytes @ 0x8
  4998                           
  4999  0052                     ??___lmul:	
  5000                           ; 1 bytes @ 0x8
  5001                           
  5002  0052                     memcpy@d1:	
  5003                           ; 1 bytes @ 0x8
  5004                           
  5005  0052                     ___lmul@product:	
  5006                           ; 1 bytes @ 0x8
  5007                           
  5008                           
  5009                           ; 4 bytes @ 0x8
  5010  0052                     	ds	1
  5011  0053                     ?___awmod:	
  5012  0053                     MTOUCH_Sensor_InitializeAll@sensor:	
  5013                           ; 2 bytes @ 0x9
  5014                           
  5015  0053                     memcpy@d:	
  5016                           ; 1 bytes @ 0x9
  5017                           
  5018  0053                     Sensor_Scanfrequency_Evaluation@packet_noise_Max:	
  5019                           ; 1 bytes @ 0x9
  5020                           
  5021  0053                     ___awmod@divisor:	
  5022                           ; 2 bytes @ 0x9
  5023                           
  5024                           
  5025                           ; 2 bytes @ 0x9
  5026  0053                     	ds	1
  5027  0054                     ??_MTOUCH_Button_InitializeAll:	
  5028  0054                     Button_Deviation_Update@button:	
  5029                           ; 1 bytes @ 0xA
  5030                           
  5031  0054                     Button_Reading_Update_Helper@button:	
  5032                           ; 1 bytes @ 0xA
  5033                           
  5034                           
  5035                           ; 1 bytes @ 0xA
  5036  0054                     	ds	1
  5037  0055                     ??_Button_Reading_Update:	
  5038  0055                     MTOUCH_Button_InitializeAll@button:	
  5039                           ; 1 bytes @ 0xB
  5040                           
  5041  0055                     Button_Reading_Update@button:	
  5042                           ; 1 bytes @ 0xB
  5043                           
  5044  0055                     Sensor_Scanfrequency_Evaluation@best_packet_sample:	
  5045                           ; 1 bytes @ 0xB
  5046                           
  5047  0055                     ___awmod@dividend:	
  5048                           ; 2 bytes @ 0xB
  5049                           
  5050  0055                     Button_Deviation_Update@deviation:	
  5051                           ; 2 bytes @ 0xB
  5052                           
  5053                           
  5054                           ; 4 bytes @ 0xB
  5055  0055                     	ds	1
  5056  0056                     ??_MTOUCH_Initialize:	
  5057  0056                     ??_SYSTEM_Initialize:	
  5058                           ; 1 bytes @ 0xC
  5059                           
  5060  0056                     Button_Baseline_Initialize@button:	
  5061                           ; 1 bytes @ 0xC
  5062                           
  5063                           
  5064                           ; 1 bytes @ 0xC
  5065  0056                     	ds	1
  5066  0057                     ?_Button_State_Initializing:	
  5067  0057                     ?_Button_State_NotPressed:	
  5068                           ; 1 bytes @ 0xD
  5069                           
  5070  0057                     ?_Button_State_Pressed:	
  5071                           ; 1 bytes @ 0xD
  5072                           
  5073  0057                     ??___awmod:	
  5074                           ; 1 bytes @ 0xD
  5075                           
  5076  0057                     Sensor_Scanfrequency_Evaluation@sensor:	
  5077                           ; 1 bytes @ 0xD
  5078                           
  5079  0057                     Button_State_Initializing@button:	
  5080                           ; 1 bytes @ 0xD
  5081                           
  5082  0057                     Button_State_NotPressed@button:	
  5083                           ; 1 bytes @ 0xD
  5084                           
  5085  0057                     Button_State_Pressed@button:	
  5086                           ; 1 bytes @ 0xD
  5087                           
  5088                           
  5089                           ; 1 bytes @ 0xD
  5090  0057                     	ds	1
  5091  0058                     ??_Button_State_Initializing:	
  5092  0058                     ??_Button_State_NotPressed:	
  5093                           ; 1 bytes @ 0xE
  5094                           
  5095  0058                     ??_Button_State_Pressed:	
  5096                           ; 1 bytes @ 0xE
  5097                           
  5098  0058                     Sensor_Scanfrequency_Evaluation@best_sample_period:	
  5099                           ; 1 bytes @ 0xE
  5100                           
  5101  0058                     ___awmod@counter:	
  5102                           ; 1 bytes @ 0xE
  5103                           
  5104                           
  5105                           ; 1 bytes @ 0xE
  5106  0058                     	ds	1
  5107  0059                     Sensor_Scanfrequency_Evaluation@retry:	
  5108  0059                     ___awmod@sign:	
  5109                           ; 1 bytes @ 0xF
  5110                           
  5111                           
  5112                           ; 1 bytes @ 0xF
  5113  0059                     	ds	1
  5114  005A                     Sensor_Scanfrequency_Evaluation@i:	
  5115                           
  5116                           ; 1 bytes @ 0x10
  5117  005A                     	ds	1
  5118  005B                     ??_Sensor_Acquisition:	
  5119                           
  5120                           ; 1 bytes @ 0x11
  5121  005B                     	ds	1
  5122  005C                     ??_Button_Service:	
  5123  005C                     Sensor_Acquisition@retry:	
  5124                           ; 1 bytes @ 0x12
  5125                           
  5126                           
  5127                           ; 1 bytes @ 0x12
  5128  005C                     	ds	1
  5129  005D                     Sensor_Acquisition@sensor:	
  5130                           
  5131                           ; 1 bytes @ 0x13
  5132  005D                     	ds	1
  5133  005E                     ??_Sensor_Service:	
  5134  005E                     Button_Service@name:	
  5135                           ; 1 bytes @ 0x14
  5136                           
  5137                           
  5138                           ; 1 bytes @ 0x14
  5139  005E                     	ds	1
  5140  005F                     Button_Service@button:	
  5141                           
  5142                           ; 1 bytes @ 0x15
  5143  005F                     	ds	1
  5144  0060                     ??_MTOUCH_Button_ServiceAll:	
  5145  0060                     Sensor_Service@name:	
  5146                           ; 1 bytes @ 0x16
  5147                           
  5148                           
  5149                           ; 1 bytes @ 0x16
  5150  0060                     	ds	1
  5151  0061                     Sensor_Service@error:	
  5152  0061                     MTOUCH_Button_ServiceAll@button:	
  5153                           ; 1 bytes @ 0x17
  5154                           
  5155                           
  5156                           ; 1 bytes @ 0x17
  5157  0061                     	ds	1
  5158  0062                     Sensor_Service@sensor:	
  5159                           
  5160                           ; 1 bytes @ 0x18
  5161  0062                     	ds	1
  5162  0063                     ??_MTOUCH_Sensor_SampleAll:	
  5163                           
  5164                           ; 1 bytes @ 0x19
  5165  0063                     	ds	1
  5166  0064                     MTOUCH_Sensor_SampleAll@sensor:	
  5167                           
  5168                           ; 1 bytes @ 0x1A
  5169  0064                     	ds	1
  5170  0065                     ??_MTOUCH_Service_Mainloop:	
  5171                           
  5172                           ; 1 bytes @ 0x1B
  5173  0065                     	ds	1
  5174  0066                     ??_main:	
  5175                           
  5176                           ; 1 bytes @ 0x1C
  5177  0066                     	ds	5
  5178                           
  5179                           	psect	maintext
  5180  0051                     __pmaintext:	
  5181 ;;
  5182 ;;Main: autosize = 0, tempsize = 5, incstack = 0, save=0
  5183 ;;
  5184 ;; *************** function _main *****************
  5185 ;; Defined at:
  5186 ;;		line 216 in file "main.c"
  5187 ;; Parameters:    Size  Location     Type
  5188 ;;		None
  5189 ;; Auto vars:     Size  Location     Type
  5190 ;;		None
  5191 ;; Return value:  Size  Location     Type
  5192 ;;                  1    wreg      void 
  5193 ;; Registers used:
  5194 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5195 ;; Tracked objects:
  5196 ;;		On entry : B3F/0
  5197 ;;		On exit  : 0/0
  5198 ;;		Unchanged: 0/0
  5199 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5200 ;;      Params:         0       0       0       0       0       0       0       0
  5201 ;;      Locals:         0       0       0       0       0       0       0       0
  5202 ;;      Temps:          0       5       0       0       0       0       0       0
  5203 ;;      Totals:         0       5       0       0       0       0       0       0
  5204 ;;Total ram usage:        5 bytes
  5205 ;; Hardware stack levels required when called:   12
  5206 ;; This function calls:
  5207 ;;		_ADC_GetConversion
  5208 ;;		_MTOUCH_Button_isPressed
  5209 ;;		_MTOUCH_Service_Mainloop
  5210 ;;		_SYSTEM_Initialize
  5211 ;;		_TMR0_SetInterruptHandler
  5212 ;;		_TMR1_SetInterruptHandler
  5213 ;;		___awdiv
  5214 ;;		___awmod
  5215 ;;		___lmul
  5216 ;;		_v_get_slope_intercept
  5217 ;; This function is called by:
  5218 ;;		Startup code after reset
  5219 ;; This function uses a non-reentrant model
  5220 ;;
  5221                           
  5222                           
  5223                           ;psect for function _main
  5224  0051                     _main:	
  5225                           
  5226                           ;main.c: 218:     SYSTEM_Initialize();
  5227                           
  5228                           ;incstack = 0
  5229                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5230  0051  318B  2358  3180   	fcall	_SYSTEM_Initialize
  5231                           
  5232                           ;main.c: 220:     (INTCONbits.GIE = 1);
  5233  0054  178B               	bsf	11,7	;volatile
  5234                           
  5235                           ;main.c: 222:     (INTCONbits.PEIE = 1);
  5236  0055  170B               	bsf	11,6	;volatile
  5237                           
  5238                           ;main.c: 225:     TMR0_SetInterruptHandler(v_1ms_service_routine);
  5239  0056  309D               	movlw	low _v_1ms_service_routine
  5240  0057  0140               	movlb	0	; select bank0
  5241  0058  00CA               	movwf	TMR0_SetInterruptHandler@InterruptHandler
  5242  0059  300F               	movlw	high _v_1ms_service_routine
  5243  005A  00CB               	movwf	TMR0_SetInterruptHandler@InterruptHandler+1
  5244  005B  3189  214E  3180   	fcall	_TMR0_SetInterruptHandler
  5245                           
  5246                           ;main.c: 227:     TMR1_SetInterruptHandler(v_1s_service_routine);
  5247  005E  30A0               	movlw	low _v_1s_service_routine
  5248  005F  0140               	movlb	0	; select bank0
  5249  0060  00CA               	movwf	TMR1_SetInterruptHandler@InterruptHandler
  5250  0061  3009               	movlw	high _v_1s_service_routine
  5251  0062  00CB               	movwf	TMR1_SetInterruptHandler@InterruptHandler+1
  5252  0063  3189  2154  3180   	fcall	_TMR1_SetInterruptHandler
  5253                           
  5254                           ;main.c: 230:     u8_DIG_CHANNEL = 0;
  5255  0066  0140               	movlb	0	; select bank0
  5256  0067  01C4               	clrf	_u8_DIG_CHANNEL
  5257                           
  5258                           ;main.c: 231:     u8_DIG11 = 10;
  5259  0068  300A               	movlw	10
  5260  0069  00E6               	movwf	??_main
  5261  006A  0866               	movf	??_main,w
  5262  006B  00C3               	movwf	_u8_DIG11
  5263                           
  5264                           ;main.c: 232:     u8_DIG12 = 10;
  5265  006C  300A               	movlw	10
  5266  006D  00E6               	movwf	??_main
  5267  006E  0866               	movf	??_main,w
  5268  006F  00C2               	movwf	_u8_DIG12
  5269                           
  5270                           ;main.c: 233:     u8_DIG13 = 10;
  5271  0070  300A               	movlw	10
  5272  0071  00E6               	movwf	??_main
  5273  0072  0866               	movf	??_main,w
  5274  0073  00C1               	movwf	_u8_DIG13
  5275                           
  5276                           ;main.c: 234:     u8_DIG21 = 10;
  5277  0074  300A               	movlw	10
  5278  0075  00E6               	movwf	??_main
  5279  0076  0866               	movf	??_main,w
  5280  0077  00C0               	movwf	_u8_DIG21
  5281                           
  5282                           ;main.c: 235:     u8_DIG22 = 10;
  5283  0078  300A               	movlw	10
  5284  0079  00E6               	movwf	??_main
  5285  007A  0866               	movf	??_main,w
  5286  007B  00BF               	movwf	_u8_DIG22
  5287                           
  5288                           ;main.c: 236:     u8_DIMMING_START_COUNTDOWN_SEC = 10;
  5289  007C  300A               	movlw	10
  5290  007D  00E6               	movwf	??_main
  5291  007E  0866               	movf	??_main,w
  5292  007F  00BE               	movwf	_u8_DIMMING_START_COUNTDOWN_SEC
  5293                           
  5294                           ;main.c: 237:     u8_SLEEPING_START_COUNTDOWN_SEC = 60;
  5295  0080  303C               	movlw	60
  5296  0081  00E6               	movwf	??_main
  5297  0082  0866               	movf	??_main,w
  5298  0083  00BD               	movwf	_u8_SLEEPING_START_COUNTDOWN_SEC
  5299                           
  5300                           ;main.c: 238:     u8_TOUCH_DELAY_COUNTDOWN = 5;
  5301  0084  3005               	movlw	5
  5302  0085  00E6               	movwf	??_main
  5303  0086  0866               	movf	??_main,w
  5304  0087  00BC               	movwf	_u8_TOUCH_DELAY_COUNTDOWN
  5305                           
  5306                           ;main.c: 239:     u16_ADCsample_COUNT = 0;
  5307  0088  01AE               	clrf	_u16_ADCsample_COUNT
  5308  0089  01AF               	clrf	_u16_ADCsample_COUNT+1
  5309                           
  5310                           ;main.c: 240:     u32_Mn = 0;
  5311  008A  3000               	movlw	0
  5312  008B  00AB               	movwf	_u32_Mn+3
  5313  008C  3000               	movlw	0
  5314  008D  00AA               	movwf	_u32_Mn+2
  5315  008E  3000               	movlw	0
  5316  008F  00A9               	movwf	_u32_Mn+1
  5317  0090  3000               	movlw	0
  5318  0091  00A8               	movwf	_u32_Mn
  5319                           
  5320                           ;main.c: 241:     u32_Cn = 0;
  5321  0092  3000               	movlw	0
  5322  0093  0141               	movlb	1	; select bank1
  5323  0094  00B8               	movwf	(_u32_Cn+3)^(0+128)
  5324  0095  3000               	movlw	0
  5325  0096  00B7               	movwf	(_u32_Cn+2)^(0+128)
  5326  0097  3000               	movlw	0
  5327  0098  00B6               	movwf	(_u32_Cn+1)^(0+128)
  5328  0099  3000               	movlw	0
  5329  009A  00B5               	movwf	_u32_Cn^(0+128)
  5330                           
  5331                           ;main.c: 242:     i16_F_SENSOR_TEMPERATURE_10xDEG = 0;
  5332  009B  0140               	movlb	0	; select bank0
  5333  009C  01C8               	clrf	_i16_F_SENSOR_TEMPERATURE_10xDEG
  5334  009D  01C9               	clrf	_i16_F_SENSOR_TEMPERATURE_10xDEG+1
  5335                           
  5336                           ;main.c: 243:     i16_R_SENSOR_TEMPERATURE_10xDEG = 0;
  5337  009E  01AC               	clrf	_i16_R_SENSOR_TEMPERATURE_10xDEG
  5338  009F  01AD               	clrf	_i16_R_SENSOR_TEMPERATURE_10xDEG+1
  5339                           
  5340                           ;main.c: 244:     i32_F_SENSOR_ADCsample = 0;
  5341  00A0  3000               	movlw	0
  5342  00A1  00A7               	movwf	_i32_F_SENSOR_ADCsample+3
  5343  00A2  3000               	movlw	0
  5344  00A3  00A6               	movwf	_i32_F_SENSOR_ADCsample+2
  5345  00A4  3000               	movlw	0
  5346  00A5  00A5               	movwf	_i32_F_SENSOR_ADCsample+1
  5347  00A6  3000               	movlw	0
  5348  00A7  00A4               	movwf	_i32_F_SENSOR_ADCsample
  5349                           
  5350                           ;main.c: 245:     i32_R_SENSOR_ADCsample = 0;
  5351  00A8  3000               	movlw	0
  5352  00A9  00A3               	movwf	_i32_R_SENSOR_ADCsample+3
  5353  00AA  3000               	movlw	0
  5354  00AB  00A2               	movwf	_i32_R_SENSOR_ADCsample+2
  5355  00AC  3000               	movlw	0
  5356  00AD  00A1               	movwf	_i32_R_SENSOR_ADCsample+1
  5357  00AE  3000               	movlw	0
  5358  00AF  00A0               	movwf	_i32_R_SENSOR_ADCsample
  5359  00B0                     l4194:	
  5360                           
  5361                           ;main.c: 254:         i32_F_SENSOR_ADCsample += (int32_t) ADC_GetConversion(A_FS);
  5362  00B0  3004               	movlw	4
  5363  00B1  318C  242D  3180   	fcall	_ADC_GetConversion
  5364  00B4  0140               	movlb	0	; select bank0
  5365  00B5  084A               	movf	?_ADC_GetConversion,w
  5366  00B6  07A4               	addwf	_i32_F_SENSOR_ADCsample,f
  5367  00B7  084B               	movf	?_ADC_GetConversion+1,w
  5368  00B8  3DA5               	addwfc	_i32_F_SENSOR_ADCsample+1,f
  5369  00B9  3000               	movlw	0
  5370  00BA  3DA6               	addwfc	_i32_F_SENSOR_ADCsample+2,f
  5371  00BB  3DA7               	addwfc	_i32_F_SENSOR_ADCsample+3,f
  5372                           
  5373                           ;main.c: 255:         i32_R_SENSOR_ADCsample += (int32_t) ADC_GetConversion(A_RS);
  5374  00BC  3002               	movlw	2
  5375  00BD  318C  242D  3180   	fcall	_ADC_GetConversion
  5376  00C0  0140               	movlb	0	; select bank0
  5377  00C1  084A               	movf	?_ADC_GetConversion,w
  5378  00C2  07A0               	addwf	_i32_R_SENSOR_ADCsample,f
  5379  00C3  084B               	movf	?_ADC_GetConversion+1,w
  5380  00C4  3DA1               	addwfc	_i32_R_SENSOR_ADCsample+1,f
  5381  00C5  3000               	movlw	0
  5382  00C6  3DA2               	addwfc	_i32_R_SENSOR_ADCsample+2,f
  5383  00C7  3DA3               	addwfc	_i32_R_SENSOR_ADCsample+3,f
  5384                           
  5385                           ;main.c: 256:         u16_ADCsample_COUNT++;
  5386  00C8  3001               	movlw	1
  5387  00C9  07AE               	addwf	_u16_ADCsample_COUNT,f
  5388  00CA  3000               	movlw	0
  5389  00CB  3DAF               	addwfc	_u16_ADCsample_COUNT+1,f
  5390                           
  5391                           ;main.c: 260:         if (u16_ADCsample_COUNT == 256) {
  5392  00CC  032F               	decf	_u16_ADCsample_COUNT+1,w
  5393  00CD  042E               	iorwf	_u16_ADCsample_COUNT,w
  5394  00CE  1D03               	btfss	3,2
  5395  00CF  2B9E               	goto	l4316
  5396                           
  5397                           ;main.c: 263:             i32_F_SENSOR_ADCsample = i32_F_SENSOR_ADCsample >> 8;
  5398  00D0  0824               	movf	_i32_F_SENSOR_ADCsample,w
  5399  00D1  00E6               	movwf	??_main
  5400  00D2  0825               	movf	_i32_F_SENSOR_ADCsample+1,w
  5401  00D3  00E7               	movwf	??_main+1
  5402  00D4  0826               	movf	_i32_F_SENSOR_ADCsample+2,w
  5403  00D5  00E8               	movwf	??_main+2
  5404  00D6  0827               	movf	_i32_F_SENSOR_ADCsample+3,w
  5405  00D7  00E9               	movwf	??_main+3
  5406  00D8  3008               	movlw	8
  5407  00D9  00EA               	movwf	??_main+4
  5408  00DA                     u3445:	
  5409  00DA  37E9               	asrf	??_main+3,f
  5410  00DB  0CE8               	rrf	??_main+2,f
  5411  00DC  0CE7               	rrf	??_main+1,f
  5412  00DD  0CE6               	rrf	??_main,f
  5413  00DE  0BEA               	decfsz	??_main+4,f
  5414  00DF  28DA               	goto	u3445
  5415  00E0  0869               	movf	??_main+3,w
  5416  00E1  00A7               	movwf	_i32_F_SENSOR_ADCsample+3
  5417  00E2  0868               	movf	??_main+2,w
  5418  00E3  00A6               	movwf	_i32_F_SENSOR_ADCsample+2
  5419  00E4  0867               	movf	??_main+1,w
  5420  00E5  00A5               	movwf	_i32_F_SENSOR_ADCsample+1
  5421  00E6  0866               	movf	??_main,w
  5422  00E7  00A4               	movwf	_i32_F_SENSOR_ADCsample
  5423                           
  5424                           ;main.c: 265:             if (i32_F_SENSOR_ADCsample <= 203) {
  5425  00E8  1BA7               	btfsc	_i32_F_SENSOR_ADCsample+3,7
  5426  00E9  28F7               	goto	l4204
  5427  00EA  0827               	movf	_i32_F_SENSOR_ADCsample+3,w
  5428  00EB  1D03               	btfss	3,2
  5429  00EC  28FF               	goto	l4208
  5430  00ED  0826               	movf	_i32_F_SENSOR_ADCsample+2,w
  5431  00EE  1D03               	btfss	3,2
  5432  00EF  28FF               	goto	l4208
  5433  00F0  0825               	movf	_i32_F_SENSOR_ADCsample+1,w
  5434  00F1  1D03               	btfss	3,2
  5435  00F2  28FF               	goto	l4208
  5436  00F3  30CC               	movlw	204
  5437  00F4  0224               	subwf	_i32_F_SENSOR_ADCsample,w
  5438  00F5  1803               	btfsc	3,0
  5439  00F6  28FF               	goto	l4208
  5440  00F7                     l4204:	
  5441                           
  5442                           ;main.c: 267:                 u8_DIG11 = 11;
  5443  00F7  300B               	movlw	11
  5444  00F8  00E6               	movwf	??_main
  5445  00F9  0866               	movf	??_main,w
  5446  00FA  00C3               	movwf	_u8_DIG11
  5447                           
  5448                           ;main.c: 268:                 u8_DIG12 = 1;
  5449  00FB  01C2               	clrf	_u8_DIG12
  5450  00FC  0AC2               	incf	_u8_DIG12,f
  5451                           
  5452                           ;main.c: 269:                 u8_DIG13 = 14;
  5453  00FD  300E               	movlw	14
  5454  00FE  2A6F               	goto	L4
  5455  00FF                     l4208:	
  5456                           ;main.c: 270:             } else if (i32_F_SENSOR_ADCsample >= 994) {
  5457                           
  5458  00FF  1BA7               	btfsc	_i32_F_SENSOR_ADCsample+3,7
  5459  0100  2915               	goto	l4214
  5460  0101  0827               	movf	_i32_F_SENSOR_ADCsample+3,w
  5461  0102  1D03               	btfss	3,2
  5462  0103  290D               	goto	l4210
  5463  0104  0826               	movf	_i32_F_SENSOR_ADCsample+2,w
  5464  0105  1D03               	btfss	3,2
  5465  0106  290D               	goto	l4210
  5466  0107  30E2               	movlw	226
  5467  0108  0224               	subwf	_i32_F_SENSOR_ADCsample,w
  5468  0109  3003               	movlw	3
  5469  010A  3B25               	subwfb	_i32_F_SENSOR_ADCsample+1,w
  5470  010B  1C03               	btfss	3,0
  5471  010C  2915               	goto	l4214
  5472  010D                     l4210:	
  5473                           
  5474                           ;main.c: 272:                 u8_DIG11 = 11;
  5475  010D  300B               	movlw	11
  5476  010E  00E6               	movwf	??_main
  5477  010F  0866               	movf	??_main,w
  5478  0110  00C3               	movwf	_u8_DIG11
  5479                           
  5480                           ;main.c: 273:                 u8_DIG12 = 1;
  5481  0111  01C2               	clrf	_u8_DIG12
  5482  0112  0AC2               	incf	_u8_DIG12,f
  5483                           
  5484                           ;main.c: 274:                 u8_DIG13 = 13;
  5485  0113  300D               	movlw	13
  5486  0114  2A6F               	goto	L4
  5487  0115                     l4214:	
  5488                           ;main.c: 275:             }
  5489                           
  5490                           
  5491                           ;main.c: 278:                 v_get_slope_intercept((uint16_t) i32_F_SENSOR_ADCsample);
  5492  0115  0825               	movf	_i32_F_SENSOR_ADCsample+1,w
  5493  0116  00CB               	movwf	v_get_slope_intercept@u16_adc+1
  5494  0117  0824               	movf	_i32_F_SENSOR_ADCsample,w
  5495  0118  00CA               	movwf	v_get_slope_intercept@u16_adc
  5496  0119  3183  23C2  3180   	fcall	_v_get_slope_intercept
  5497                           
  5498                           ;main.c: 279:                 i32_F_SENSOR_ADCsample = i32_F_SENSOR_ADCsample * u32_Mn;
  5499  011C  0140               	movlb	0	; select bank0
  5500  011D  0827               	movf	_i32_F_SENSOR_ADCsample+3,w
  5501  011E  00CD               	movwf	___lmul@multiplier+3
  5502  011F  0826               	movf	_i32_F_SENSOR_ADCsample+2,w
  5503  0120  00CC               	movwf	___lmul@multiplier+2
  5504  0121  0825               	movf	_i32_F_SENSOR_ADCsample+1,w
  5505  0122  00CB               	movwf	___lmul@multiplier+1
  5506  0123  0824               	movf	_i32_F_SENSOR_ADCsample,w
  5507  0124  00CA               	movwf	___lmul@multiplier
  5508  0125  082B               	movf	_u32_Mn+3,w
  5509  0126  00D1               	movwf	___lmul@multiplicand+3
  5510  0127  082A               	movf	_u32_Mn+2,w
  5511  0128  00D0               	movwf	___lmul@multiplicand+2
  5512  0129  0829               	movf	_u32_Mn+1,w
  5513  012A  00CF               	movwf	___lmul@multiplicand+1
  5514  012B  0828               	movf	_u32_Mn,w
  5515  012C  00CE               	movwf	___lmul@multiplicand
  5516  012D  318D  2511  3180   	fcall	___lmul
  5517  0130  0140               	movlb	0	; select bank0
  5518  0131  084D               	movf	?___lmul+3,w
  5519  0132  00A7               	movwf	_i32_F_SENSOR_ADCsample+3
  5520  0133  084C               	movf	?___lmul+2,w
  5521  0134  00A6               	movwf	_i32_F_SENSOR_ADCsample+2
  5522  0135  084B               	movf	?___lmul+1,w
  5523  0136  00A5               	movwf	_i32_F_SENSOR_ADCsample+1
  5524  0137  084A               	movf	?___lmul,w
  5525  0138  00A4               	movwf	_i32_F_SENSOR_ADCsample
  5526                           
  5527                           ;main.c: 280:                 i32_F_SENSOR_ADCsample = (u32_Cn - i32_F_SENSOR_ADCsample)
      +                           >> 10;
  5528  0139  0824               	movf	_i32_F_SENSOR_ADCsample,w
  5529  013A  0141               	movlb	1	; select bank1
  5530  013B  0235               	subwf	_u32_Cn^(0+128),w
  5531  013C  0140               	movlb	0	; select bank0
  5532  013D  00E6               	movwf	??_main
  5533  013E  0825               	movf	_i32_F_SENSOR_ADCsample+1,w
  5534  013F  0141               	movlb	1	; select bank1
  5535  0140  3B36               	subwfb	(_u32_Cn+1)^(0+128),w
  5536  0141  0140               	movlb	0	; select bank0
  5537  0142  00E7               	movwf	??_main+1
  5538  0143  0826               	movf	_i32_F_SENSOR_ADCsample+2,w
  5539  0144  0141               	movlb	1	; select bank1
  5540  0145  3B37               	subwfb	(_u32_Cn+2)^(0+128),w
  5541  0146  0140               	movlb	0	; select bank0
  5542  0147  00E8               	movwf	??_main+2
  5543  0148  0827               	movf	_i32_F_SENSOR_ADCsample+3,w
  5544  0149  0141               	movlb	1	; select bank1
  5545  014A  3B38               	subwfb	(_u32_Cn+3)^(0+128),w
  5546  014B  0140               	movlb	0	; select bank0
  5547  014C  00E9               	movwf	??_main+3
  5548  014D  300A               	movlw	10
  5549  014E                     u3475:	
  5550  014E  36E9               	lsrf	??_main+3,f
  5551  014F  0CE8               	rrf	??_main+2,f
  5552  0150  0CE7               	rrf	??_main+1,f
  5553  0151  0CE6               	rrf	??_main,f
  5554  0152  0B89               	decfsz	9,f
  5555  0153  294E               	goto	u3475
  5556  0154  0869               	movf	??_main+3,w
  5557  0155  00A7               	movwf	_i32_F_SENSOR_ADCsample+3
  5558  0156  0868               	movf	??_main+2,w
  5559  0157  00A6               	movwf	_i32_F_SENSOR_ADCsample+2
  5560  0158  0867               	movf	??_main+1,w
  5561  0159  00A5               	movwf	_i32_F_SENSOR_ADCsample+1
  5562  015A  0866               	movf	??_main,w
  5563  015B  00A4               	movwf	_i32_F_SENSOR_ADCsample
  5564                           
  5565                           ;main.c: 281:                 i16_F_SENSOR_TEMPERATURE_10xDEG = (int16_t) i32_F_SENSOR_A
      +                          DCsample;
  5566  015C  0825               	movf	_i32_F_SENSOR_ADCsample+1,w
  5567  015D  00C9               	movwf	_i16_F_SENSOR_TEMPERATURE_10xDEG+1
  5568  015E  0824               	movf	_i32_F_SENSOR_ADCsample,w
  5569  015F  00C8               	movwf	_i16_F_SENSOR_TEMPERATURE_10xDEG
  5570                           
  5571                           ;main.c: 285:                 if (i16_F_SENSOR_TEMPERATURE_10xDEG >= 0 && (i16_F_SENSOR_
      +                          TEMPERATURE_10xDEG % 10) >= 5) {
  5572  0160  1BC9               	btfsc	_i16_F_SENSOR_TEMPERATURE_10xDEG+1,7
  5573  0161  297F               	goto	l1018
  5574  0162  300A               	movlw	10
  5575  0163  00D3               	movwf	___awmod@divisor
  5576  0164  3000               	movlw	0
  5577  0165  00D4               	movwf	___awmod@divisor+1
  5578  0166  0849               	movf	_i16_F_SENSOR_TEMPERATURE_10xDEG+1,w
  5579  0167  00D6               	movwf	___awmod@dividend+1
  5580  0168  0848               	movf	_i16_F_SENSOR_TEMPERATURE_10xDEG,w
  5581  0169  00D5               	movwf	___awmod@dividend
  5582  016A  318D  25B6  3180   	fcall	___awmod
  5583  016D  0140               	movlb	0	; select bank0
  5584  016E  0854               	movf	?___awmod+1,w
  5585  016F  3A80               	xorlw	128
  5586  0170  00E6               	movwf	??_main
  5587  0171  3080               	movlw	128
  5588  0172  0266               	subwf	??_main,w
  5589  0173  1D03               	skipz
  5590  0174  2977               	goto	u3495
  5591  0175  3005               	movlw	5
  5592  0176  0253               	subwf	?___awmod,w
  5593  0177                     u3495:	
  5594  0177  1C03               	skipc
  5595  0178  297F               	goto	l1018
  5596                           
  5597                           ;main.c: 286:                     i16_F_SENSOR_TEMPERATURE_10xDEG = i16_F_SENSOR_TEMPERA
      +                          TURE_10xDEG + 5;
  5598  0179  0140               	movlb	0	; select bank0
  5599  017A  0848               	movf	_i16_F_SENSOR_TEMPERATURE_10xDEG,w
  5600  017B  3E05               	addlw	5
  5601  017C  00C8               	movwf	_i16_F_SENSOR_TEMPERATURE_10xDEG
  5602  017D  3000               	movlw	0
  5603  017E  29A5               	goto	L3
  5604  017F                     l1018:	
  5605                           ;main.c: 288:                 else if (i16_F_SENSOR_TEMPERATURE_10xDEG < 0 && ((i16_F_SE
      +                          NSOR_TEMPERATURE_10xDEG*-1) % 10) >= 5) {
  5606                           
  5607                           ;main.c: 287:                 }
  5608                           
  5609  017F  0140               	movlb	0	; select bank0
  5610  0180  1FC9               	btfss	_i16_F_SENSOR_TEMPERATURE_10xDEG+1,7
  5611  0181  29A7               	goto	l4230
  5612  0182  300A               	movlw	10
  5613  0183  00D3               	movwf	___awmod@divisor
  5614  0184  3000               	movlw	0
  5615  0185  00D4               	movwf	___awmod@divisor+1
  5616  0186  0948               	comf	_i16_F_SENSOR_TEMPERATURE_10xDEG,w
  5617  0187  00E6               	movwf	??_main
  5618  0188  0949               	comf	_i16_F_SENSOR_TEMPERATURE_10xDEG+1,w
  5619  0189  00E7               	movwf	??_main+1
  5620  018A  0AE6               	incf	??_main,f
  5621  018B  1903               	skipnz
  5622  018C  0AE7               	incf	??_main+1,f
  5623  018D  0866               	movf	??_main,w
  5624  018E  00D5               	movwf	___awmod@dividend
  5625  018F  0867               	movf	??_main+1,w
  5626  0190  00D6               	movwf	___awmod@dividend+1
  5627  0191  318D  25B6  3180   	fcall	___awmod
  5628  0194  0140               	movlb	0	; select bank0
  5629  0195  0854               	movf	?___awmod+1,w
  5630  0196  3A80               	xorlw	128
  5631  0197  00E8               	movwf	??_main+2
  5632  0198  3080               	movlw	128
  5633  0199  0268               	subwf	??_main+2,w
  5634  019A  1D03               	skipz
  5635  019B  299E               	goto	u3515
  5636  019C  3005               	movlw	5
  5637  019D  0253               	subwf	?___awmod,w
  5638  019E                     u3515:	
  5639  019E  1C03               	skipc
  5640  019F  29A7               	goto	l4230
  5641                           
  5642                           ;main.c: 289:                     i16_F_SENSOR_TEMPERATURE_10xDEG = i16_F_SENSOR_TEMPERA
      +                          TURE_10xDEG - 5;
  5643  01A0  0140               	movlb	0	; select bank0
  5644  01A1  0848               	movf	_i16_F_SENSOR_TEMPERATURE_10xDEG,w
  5645  01A2  3EFB               	addlw	251
  5646  01A3  00C8               	movwf	_i16_F_SENSOR_TEMPERATURE_10xDEG
  5647  01A4  30FF               	movlw	255
  5648  01A5                     L3:	
  5649  01A5  3D49               	addwfc	_i16_F_SENSOR_TEMPERATURE_10xDEG+1,w
  5650  01A6  00C9               	movwf	_i16_F_SENSOR_TEMPERATURE_10xDEG+1
  5651  01A7                     l4230:	
  5652                           
  5653                           ;main.c: 294:                 if (i16_F_SENSOR_TEMPERATURE_10xDEG <= -10) {
  5654  01A7  0140               	movlb	0	; select bank0
  5655  01A8  0849               	movf	_i16_F_SENSOR_TEMPERATURE_10xDEG+1,w
  5656  01A9  3A80               	xorlw	128
  5657  01AA  00E6               	movwf	??_main
  5658  01AB  307F               	movlw	127
  5659  01AC  0266               	subwf	??_main,w
  5660  01AD  1D03               	skipz
  5661  01AE  29B1               	goto	u3525
  5662  01AF  30F7               	movlw	247
  5663  01B0  0248               	subwf	_i16_F_SENSOR_TEMPERATURE_10xDEG,w
  5664  01B1                     u3525:	
  5665  01B1  1803               	skipnc
  5666  01B2  2A00               	goto	l4248
  5667                           
  5668                           ;main.c: 296:                     if (i16_F_SENSOR_TEMPERATURE_10xDEG < -400) {
  5669  01B3  0140               	movlb	0	; select bank0
  5670  01B4  0849               	movf	_i16_F_SENSOR_TEMPERATURE_10xDEG+1,w
  5671  01B5  3A80               	xorlw	128
  5672  01B6  00E6               	movwf	??_main
  5673  01B7  307E               	movlw	126
  5674  01B8  0266               	subwf	??_main,w
  5675  01B9  1D03               	skipz
  5676  01BA  29BD               	goto	u3535
  5677  01BB  3070               	movlw	112
  5678  01BC  0248               	subwf	_i16_F_SENSOR_TEMPERATURE_10xDEG,w
  5679  01BD                     u3535:	
  5680  01BD  1803               	skipnc
  5681  01BE  29C4               	goto	l1022
  5682                           
  5683                           ;main.c: 297:                         i16_F_SENSOR_TEMPERATURE_10xDEG = -400;
  5684  01BF  3070               	movlw	112
  5685  01C0  0140               	movlb	0	; select bank0
  5686  01C1  00C8               	movwf	_i16_F_SENSOR_TEMPERATURE_10xDEG
  5687  01C2  30FE               	movlw	254
  5688  01C3  00C9               	movwf	_i16_F_SENSOR_TEMPERATURE_10xDEG+1
  5689  01C4                     l1022:	
  5690                           ;main.c: 298:                     }
  5691                           
  5692                           
  5693                           ;main.c: 300:                     if ((i16_F_SENSOR_TEMPERATURE_10xDEG > -100) && (i16_F
      +                          _SENSOR_TEMPERATURE_10xDEG <= -10)) {
  5694  01C4  0140               	movlb	0	; select bank0
  5695  01C5  0849               	movf	_i16_F_SENSOR_TEMPERATURE_10xDEG+1,w
  5696  01C6  3A80               	xorlw	128
  5697  01C7  00E6               	movwf	??_main
  5698  01C8  307F               	movlw	127
  5699  01C9  0266               	subwf	??_main,w
  5700  01CA  1D03               	skipz
  5701  01CB  29CE               	goto	u3545
  5702  01CC  309D               	movlw	157
  5703  01CD  0248               	subwf	_i16_F_SENSOR_TEMPERATURE_10xDEG,w
  5704  01CE                     u3545:	
  5705  01CE  1C03               	skipc
  5706  01CF  29ED               	goto	l4242
  5707  01D0  0140               	movlb	0	; select bank0
  5708  01D1  0849               	movf	_i16_F_SENSOR_TEMPERATURE_10xDEG+1,w
  5709  01D2  3A80               	xorlw	128
  5710  01D3  00E6               	movwf	??_main
  5711  01D4  307F               	movlw	127
  5712  01D5  0266               	subwf	??_main,w
  5713  01D6  1D03               	skipz
  5714  01D7  29DA               	goto	u3555
  5715  01D8  30F7               	movlw	247
  5716  01D9  0248               	subwf	_i16_F_SENSOR_TEMPERATURE_10xDEG,w
  5717  01DA                     u3555:	
  5718  01DA  1803               	skipnc
  5719  01DB  29ED               	goto	l4242
  5720                           
  5721                           ;main.c: 301:                         u8_DIG11 = 11;
  5722  01DC  300B               	movlw	11
  5723  01DD  0140               	movlb	0	; select bank0
  5724  01DE  00E6               	movwf	??_main
  5725  01DF  0866               	movf	??_main,w
  5726  01E0  00C3               	movwf	_u8_DIG11
  5727                           
  5728                           ;main.c: 302:                         u8_DIG12 = 15;
  5729  01E1  300F               	movlw	15
  5730  01E2                     L5:	
  5731  01E2  00E6               	movwf	??_main
  5732  01E3  0866               	movf	??_main,w
  5733  01E4  00C2               	movwf	_u8_DIG12
  5734                           
  5735                           ;main.c: 303:                         u8_DIG13 = ((i16_F_SENSOR_TEMPERATURE_10xDEG*-1) /
      +                           10) % 10;
  5736  01E5  300A               	movlw	10
  5737  01E6  00D3               	movwf	___awmod@divisor
  5738  01E7  3000               	movlw	0
  5739  01E8  00D4               	movwf	___awmod@divisor+1
  5740  01E9  30F6               	movlw	246
  5741  01EA  00CA               	movwf	___awdiv@divisor
  5742  01EB  30FF               	movlw	255
  5743  01EC  2A5D               	goto	L9
  5744  01ED                     l4242:	
  5745                           ;main.c: 304:                     }
  5746                           
  5747                           
  5748                           ;main.c: 306:                         u8_DIG11 = 15;
  5749  01ED  300F               	movlw	15
  5750  01EE  0140               	movlb	0	; select bank0
  5751  01EF  00E6               	movwf	??_main
  5752  01F0  0866               	movf	??_main,w
  5753  01F1  00C3               	movwf	_u8_DIG11
  5754                           
  5755                           ;main.c: 307:                         u8_DIG12 = (i16_F_SENSOR_TEMPERATURE_10xDEG*-1) / 
      +                          100;
  5756  01F2  309C               	movlw	156
  5757  01F3  00CA               	movwf	___awdiv@divisor
  5758  01F4  30FF               	movlw	255
  5759  01F5  00CB               	movwf	___awdiv@divisor+1
  5760  01F6  0849               	movf	_i16_F_SENSOR_TEMPERATURE_10xDEG+1,w
  5761  01F7  00CD               	movwf	___awdiv@dividend+1
  5762  01F8  0848               	movf	_i16_F_SENSOR_TEMPERATURE_10xDEG,w
  5763  01F9  00CC               	movwf	___awdiv@dividend
  5764  01FA  318E  2645  3180   	fcall	___awdiv
  5765  01FD  0140               	movlb	0	; select bank0
  5766  01FE  084A               	movf	?___awdiv,w
  5767  01FF  29E2               	goto	L5
  5768  0200                     l4248:	
  5769                           
  5770                           ;main.c: 313:                     if ((i16_F_SENSOR_TEMPERATURE_10xDEG > -10)&&(i16_F_SE
      +                          NSOR_TEMPERATURE_10xDEG <= 0)) {
  5771  0200  0140               	movlb	0	; select bank0
  5772  0201  0849               	movf	_i16_F_SENSOR_TEMPERATURE_10xDEG+1,w
  5773  0202  3A80               	xorlw	128
  5774  0203  00E6               	movwf	??_main
  5775  0204  307F               	movlw	127
  5776  0205  0266               	subwf	??_main,w
  5777  0206  1D03               	skipz
  5778  0207  2A0A               	goto	u3565
  5779  0208  30F7               	movlw	247
  5780  0209  0248               	subwf	_i16_F_SENSOR_TEMPERATURE_10xDEG,w
  5781  020A                     u3565:	
  5782  020A  1C03               	skipc
  5783  020B  2A1B               	goto	l4254
  5784  020C  0140               	movlb	0	; select bank0
  5785  020D  0849               	movf	_i16_F_SENSOR_TEMPERATURE_10xDEG+1,w
  5786  020E  3A80               	xorlw	128
  5787  020F  00E6               	movwf	??_main
  5788  0210  3080               	movlw	128
  5789  0211  0266               	subwf	??_main,w
  5790  0212  1D03               	skipz
  5791  0213  2A16               	goto	u3575
  5792  0214  3001               	movlw	1
  5793  0215  0248               	subwf	_i16_F_SENSOR_TEMPERATURE_10xDEG,w
  5794  0216                     u3575:	
  5795  0216  1803               	skipnc
  5796  0217  2A1B               	goto	l4254
  5797                           
  5798                           ;main.c: 314:                         i16_F_SENSOR_TEMPERATURE_10xDEG = 0;
  5799  0218  0140               	movlb	0	; select bank0
  5800  0219  01C8               	clrf	_i16_F_SENSOR_TEMPERATURE_10xDEG
  5801  021A  01C9               	clrf	_i16_F_SENSOR_TEMPERATURE_10xDEG+1
  5802  021B                     l4254:	
  5803                           
  5804                           ;main.c: 317:                     if (i16_F_SENSOR_TEMPERATURE_10xDEG > 600) {
  5805  021B  0140               	movlb	0	; select bank0
  5806  021C  0849               	movf	_i16_F_SENSOR_TEMPERATURE_10xDEG+1,w
  5807  021D  3A80               	xorlw	128
  5808  021E  00E6               	movwf	??_main
  5809  021F  3082               	movlw	130
  5810  0220  0266               	subwf	??_main,w
  5811  0221  1D03               	skipz
  5812  0222  2A25               	goto	u3585
  5813  0223  3059               	movlw	89
  5814  0224  0248               	subwf	_i16_F_SENSOR_TEMPERATURE_10xDEG,w
  5815  0225                     u3585:	
  5816  0225  1C03               	skipc
  5817  0226  2A2C               	goto	l4258
  5818                           
  5819                           ;main.c: 318:                         i16_F_SENSOR_TEMPERATURE_10xDEG = 600;
  5820  0227  3058               	movlw	88
  5821  0228  0140               	movlb	0	; select bank0
  5822  0229  00C8               	movwf	_i16_F_SENSOR_TEMPERATURE_10xDEG
  5823  022A  3002               	movlw	2
  5824  022B  00C9               	movwf	_i16_F_SENSOR_TEMPERATURE_10xDEG+1
  5825  022C                     l4258:	
  5826                           
  5827                           ;main.c: 321:                     if ((i16_F_SENSOR_TEMPERATURE_10xDEG >= 0) && (i16_F_S
      +                          ENSOR_TEMPERATURE_10xDEG < 100)) {
  5828  022C  0140               	movlb	0	; select bank0
  5829  022D  1BC9               	btfsc	_i16_F_SENSOR_TEMPERATURE_10xDEG+1,7
  5830  022E  2A41               	goto	l4266
  5831  022F  0849               	movf	_i16_F_SENSOR_TEMPERATURE_10xDEG+1,w
  5832  0230  3A80               	xorlw	128
  5833  0231  00E6               	movwf	??_main
  5834  0232  3080               	movlw	128
  5835  0233  0266               	subwf	??_main,w
  5836  0234  1D03               	skipz
  5837  0235  2A38               	goto	u3605
  5838  0236  3064               	movlw	100
  5839  0237  0248               	subwf	_i16_F_SENSOR_TEMPERATURE_10xDEG,w
  5840  0238                     u3605:	
  5841  0238  1803               	skipnc
  5842  0239  2A41               	goto	l4266
  5843                           
  5844                           ;main.c: 322:                         u8_DIG11 = 11;
  5845  023A  300B               	movlw	11
  5846  023B  0140               	movlb	0	; select bank0
  5847  023C  00E6               	movwf	??_main
  5848  023D  0866               	movf	??_main,w
  5849  023E  00C3               	movwf	_u8_DIG11
  5850                           
  5851                           ;main.c: 323:                         u8_DIG12 = 11;
  5852  023F  300B               	movlw	11
  5853  0240  2A53               	goto	L7
  5854  0241                     l4266:	
  5855                           ;main.c: 325:                     }
  5856                           
  5857                           
  5858                           ;main.c: 327:                         u8_DIG11 = 11;
  5859  0241  300B               	movlw	11
  5860  0242  0140               	movlb	0	; select bank0
  5861  0243  00E6               	movwf	??_main
  5862  0244  0866               	movf	??_main,w
  5863  0245  00C3               	movwf	_u8_DIG11
  5864                           
  5865                           ;main.c: 328:                         u8_DIG12 = i16_F_SENSOR_TEMPERATURE_10xDEG / 100;
  5866  0246  3064               	movlw	100
  5867  0247  00CA               	movwf	___awdiv@divisor
  5868  0248  3000               	movlw	0
  5869  0249  00CB               	movwf	___awdiv@divisor+1
  5870  024A  0849               	movf	_i16_F_SENSOR_TEMPERATURE_10xDEG+1,w
  5871  024B  00CD               	movwf	___awdiv@dividend+1
  5872  024C  0848               	movf	_i16_F_SENSOR_TEMPERATURE_10xDEG,w
  5873  024D  00CC               	movwf	___awdiv@dividend
  5874  024E  318E  2645  3180   	fcall	___awdiv
  5875  0251  0140               	movlb	0	; select bank0
  5876  0252  084A               	movf	?___awdiv,w
  5877  0253                     L7:	
  5878  0253  00E6               	movwf	??_main
  5879  0254  0866               	movf	??_main,w
  5880  0255  00C2               	movwf	_u8_DIG12
  5881                           
  5882                           ;main.c: 324:                         u8_DIG13 = (i16_F_SENSOR_TEMPERATURE_10xDEG / 10) 
      +                          % 10;
  5883  0256  300A               	movlw	10
  5884  0257  00D3               	movwf	___awmod@divisor
  5885  0258  3000               	movlw	0
  5886  0259  00D4               	movwf	___awmod@divisor+1
  5887  025A  300A               	movlw	10
  5888  025B  00CA               	movwf	___awdiv@divisor
  5889  025C  3000               	movlw	0
  5890  025D                     L9:	
  5891  025D  00CB               	movwf	___awdiv@divisor+1
  5892  025E  0849               	movf	_i16_F_SENSOR_TEMPERATURE_10xDEG+1,w
  5893  025F  00CD               	movwf	___awdiv@dividend+1
  5894  0260  0848               	movf	_i16_F_SENSOR_TEMPERATURE_10xDEG,w
  5895  0261  00CC               	movwf	___awdiv@dividend
  5896  0262  318E  2645  3180   	fcall	___awdiv
  5897  0265  0140               	movlb	0	; select bank0
  5898  0266  084B               	movf	?___awdiv+1,w
  5899  0267  00D6               	movwf	___awmod@dividend+1
  5900  0268  084A               	movf	?___awdiv,w
  5901  0269  00D5               	movwf	___awmod@dividend
  5902  026A  318D  25B6  3180   	fcall	___awmod
  5903  026D  0140               	movlb	0	; select bank0
  5904  026E  0853               	movf	?___awmod,w
  5905  026F                     L4:	
  5906  026F  00E6               	movwf	??_main
  5907  0270  0866               	movf	??_main,w
  5908  0271  00C1               	movwf	_u8_DIG13
  5909                           
  5910                           ;main.c: 338:             i32_R_SENSOR_ADCsample = i32_R_SENSOR_ADCsample >> 8;
  5911  0272  0820               	movf	_i32_R_SENSOR_ADCsample,w
  5912  0273  00E6               	movwf	??_main
  5913  0274  0821               	movf	_i32_R_SENSOR_ADCsample+1,w
  5914  0275  00E7               	movwf	??_main+1
  5915  0276  0822               	movf	_i32_R_SENSOR_ADCsample+2,w
  5916  0277  00E8               	movwf	??_main+2
  5917  0278  0823               	movf	_i32_R_SENSOR_ADCsample+3,w
  5918  0279  00E9               	movwf	??_main+3
  5919  027A  3008               	movlw	8
  5920  027B  00EA               	movwf	??_main+4
  5921  027C                     u3615:	
  5922  027C  37E9               	asrf	??_main+3,f
  5923  027D  0CE8               	rrf	??_main+2,f
  5924  027E  0CE7               	rrf	??_main+1,f
  5925  027F  0CE6               	rrf	??_main,f
  5926  0280  0BEA               	decfsz	??_main+4,f
  5927  0281  2A7C               	goto	u3615
  5928  0282  0869               	movf	??_main+3,w
  5929  0283  00A3               	movwf	_i32_R_SENSOR_ADCsample+3
  5930  0284  0868               	movf	??_main+2,w
  5931  0285  00A2               	movwf	_i32_R_SENSOR_ADCsample+2
  5932  0286  0867               	movf	??_main+1,w
  5933  0287  00A1               	movwf	_i32_R_SENSOR_ADCsample+1
  5934  0288  0866               	movf	??_main,w
  5935  0289  00A0               	movwf	_i32_R_SENSOR_ADCsample
  5936                           
  5937                           ;main.c: 340:             if (i32_R_SENSOR_ADCsample <= 203) {
  5938  028A  1BA3               	btfsc	_i32_R_SENSOR_ADCsample+3,7
  5939  028B  2A99               	goto	l4276
  5940  028C  0823               	movf	_i32_R_SENSOR_ADCsample+3,w
  5941  028D  1D03               	btfss	3,2
  5942  028E  2A9F               	goto	l4278
  5943  028F  0822               	movf	_i32_R_SENSOR_ADCsample+2,w
  5944  0290  1D03               	btfss	3,2
  5945  0291  2A9F               	goto	l4278
  5946  0292  0821               	movf	_i32_R_SENSOR_ADCsample+1,w
  5947  0293  1D03               	btfss	3,2
  5948  0294  2A9F               	goto	l4278
  5949  0295  30CC               	movlw	204
  5950  0296  0220               	subwf	_i32_R_SENSOR_ADCsample,w
  5951  0297  1803               	btfsc	3,0
  5952  0298  2A9F               	goto	l4278
  5953  0299                     l4276:	
  5954                           
  5955                           ;main.c: 342:                 u8_DIG21 = 2;
  5956  0299  3002               	movlw	2
  5957  029A  00E6               	movwf	??_main
  5958  029B  0866               	movf	??_main,w
  5959  029C  00C0               	movwf	_u8_DIG21
  5960                           
  5961                           ;main.c: 343:                 u8_DIG22 = 14;
  5962  029D  300E               	movlw	14
  5963  029E  2B89               	goto	L6
  5964  029F                     l4278:	
  5965                           ;main.c: 344:             } else if (i32_R_SENSOR_ADCsample >= 994) {
  5966                           
  5967  029F  1BA3               	btfsc	_i32_R_SENSOR_ADCsample+3,7
  5968  02A0  2AB3               	goto	l4282
  5969  02A1  0823               	movf	_i32_R_SENSOR_ADCsample+3,w
  5970  02A2  1D03               	btfss	3,2
  5971  02A3  2AAD               	goto	l4280
  5972  02A4  0822               	movf	_i32_R_SENSOR_ADCsample+2,w
  5973  02A5  1D03               	btfss	3,2
  5974  02A6  2AAD               	goto	l4280
  5975  02A7  30E2               	movlw	226
  5976  02A8  0220               	subwf	_i32_R_SENSOR_ADCsample,w
  5977  02A9  3003               	movlw	3
  5978  02AA  3B21               	subwfb	_i32_R_SENSOR_ADCsample+1,w
  5979  02AB  1C03               	btfss	3,0
  5980  02AC  2AB3               	goto	l4282
  5981  02AD                     l4280:	
  5982                           
  5983                           ;main.c: 346:                 u8_DIG21 = 2;
  5984  02AD  3002               	movlw	2
  5985  02AE  00E6               	movwf	??_main
  5986  02AF  0866               	movf	??_main,w
  5987  02B0  00C0               	movwf	_u8_DIG21
  5988                           
  5989                           ;main.c: 347:                 u8_DIG22 = 13;
  5990  02B1  300D               	movlw	13
  5991  02B2  2B89               	goto	L6
  5992  02B3                     l4282:	
  5993                           ;main.c: 348:             }
  5994                           
  5995                           
  5996                           ;main.c: 351:                 v_get_slope_intercept((uint16_t) i32_R_SENSOR_ADCsample);
  5997  02B3  0821               	movf	_i32_R_SENSOR_ADCsample+1,w
  5998  02B4  00CB               	movwf	v_get_slope_intercept@u16_adc+1
  5999  02B5  0820               	movf	_i32_R_SENSOR_ADCsample,w
  6000  02B6  00CA               	movwf	v_get_slope_intercept@u16_adc
  6001  02B7  3183  23C2  3180   	fcall	_v_get_slope_intercept
  6002                           
  6003                           ;main.c: 352:                 i32_R_SENSOR_ADCsample = i32_R_SENSOR_ADCsample * u32_Mn;
  6004  02BA  0140               	movlb	0	; select bank0
  6005  02BB  0823               	movf	_i32_R_SENSOR_ADCsample+3,w
  6006  02BC  00CD               	movwf	___lmul@multiplier+3
  6007  02BD  0822               	movf	_i32_R_SENSOR_ADCsample+2,w
  6008  02BE  00CC               	movwf	___lmul@multiplier+2
  6009  02BF  0821               	movf	_i32_R_SENSOR_ADCsample+1,w
  6010  02C0  00CB               	movwf	___lmul@multiplier+1
  6011  02C1  0820               	movf	_i32_R_SENSOR_ADCsample,w
  6012  02C2  00CA               	movwf	___lmul@multiplier
  6013  02C3  082B               	movf	_u32_Mn+3,w
  6014  02C4  00D1               	movwf	___lmul@multiplicand+3
  6015  02C5  082A               	movf	_u32_Mn+2,w
  6016  02C6  00D0               	movwf	___lmul@multiplicand+2
  6017  02C7  0829               	movf	_u32_Mn+1,w
  6018  02C8  00CF               	movwf	___lmul@multiplicand+1
  6019  02C9  0828               	movf	_u32_Mn,w
  6020  02CA  00CE               	movwf	___lmul@multiplicand
  6021  02CB  318D  2511  3180   	fcall	___lmul
  6022  02CE  0140               	movlb	0	; select bank0
  6023  02CF  084D               	movf	?___lmul+3,w
  6024  02D0  00A3               	movwf	_i32_R_SENSOR_ADCsample+3
  6025  02D1  084C               	movf	?___lmul+2,w
  6026  02D2  00A2               	movwf	_i32_R_SENSOR_ADCsample+2
  6027  02D3  084B               	movf	?___lmul+1,w
  6028  02D4  00A1               	movwf	_i32_R_SENSOR_ADCsample+1
  6029  02D5  084A               	movf	?___lmul,w
  6030  02D6  00A0               	movwf	_i32_R_SENSOR_ADCsample
  6031                           
  6032                           ;main.c: 353:                 i32_R_SENSOR_ADCsample = (u32_Cn - i32_R_SENSOR_ADCsample)
      +                           >> 10;
  6033  02D7  0820               	movf	_i32_R_SENSOR_ADCsample,w
  6034  02D8  0141               	movlb	1	; select bank1
  6035  02D9  0235               	subwf	_u32_Cn^(0+128),w
  6036  02DA  0140               	movlb	0	; select bank0
  6037  02DB  00E6               	movwf	??_main
  6038  02DC  0821               	movf	_i32_R_SENSOR_ADCsample+1,w
  6039  02DD  0141               	movlb	1	; select bank1
  6040  02DE  3B36               	subwfb	(_u32_Cn+1)^(0+128),w
  6041  02DF  0140               	movlb	0	; select bank0
  6042  02E0  00E7               	movwf	??_main+1
  6043  02E1  0822               	movf	_i32_R_SENSOR_ADCsample+2,w
  6044  02E2  0141               	movlb	1	; select bank1
  6045  02E3  3B37               	subwfb	(_u32_Cn+2)^(0+128),w
  6046  02E4  0140               	movlb	0	; select bank0
  6047  02E5  00E8               	movwf	??_main+2
  6048  02E6  0823               	movf	_i32_R_SENSOR_ADCsample+3,w
  6049  02E7  0141               	movlb	1	; select bank1
  6050  02E8  3B38               	subwfb	(_u32_Cn+3)^(0+128),w
  6051  02E9  0140               	movlb	0	; select bank0
  6052  02EA  00E9               	movwf	??_main+3
  6053  02EB  300A               	movlw	10
  6054  02EC                     u3645:	
  6055  02EC  36E9               	lsrf	??_main+3,f
  6056  02ED  0CE8               	rrf	??_main+2,f
  6057  02EE  0CE7               	rrf	??_main+1,f
  6058  02EF  0CE6               	rrf	??_main,f
  6059  02F0  0B89               	decfsz	9,f
  6060  02F1  2AEC               	goto	u3645
  6061  02F2  0869               	movf	??_main+3,w
  6062  02F3  00A3               	movwf	_i32_R_SENSOR_ADCsample+3
  6063  02F4  0868               	movf	??_main+2,w
  6064  02F5  00A2               	movwf	_i32_R_SENSOR_ADCsample+2
  6065  02F6  0867               	movf	??_main+1,w
  6066  02F7  00A1               	movwf	_i32_R_SENSOR_ADCsample+1
  6067  02F8  0866               	movf	??_main,w
  6068  02F9  00A0               	movwf	_i32_R_SENSOR_ADCsample
  6069                           
  6070                           ;main.c: 354:                 i16_R_SENSOR_TEMPERATURE_10xDEG = (int16_t) i32_R_SENSOR_A
      +                          DCsample;
  6071  02FA  0821               	movf	_i32_R_SENSOR_ADCsample+1,w
  6072  02FB  00AD               	movwf	_i16_R_SENSOR_TEMPERATURE_10xDEG+1
  6073  02FC  0820               	movf	_i32_R_SENSOR_ADCsample,w
  6074  02FD  00AC               	movwf	_i16_R_SENSOR_TEMPERATURE_10xDEG
  6075                           
  6076                           ;main.c: 356:                 i16_R_SENSOR_TEMPERATURE_10xDEG += -30;
  6077  02FE  30E2               	movlw	226
  6078  02FF  07AC               	addwf	_i16_R_SENSOR_TEMPERATURE_10xDEG,f
  6079  0300  30FF               	movlw	255
  6080  0301  3DAD               	addwfc	_i16_R_SENSOR_TEMPERATURE_10xDEG+1,f
  6081                           
  6082                           ;main.c: 358:                 if (i16_R_SENSOR_TEMPERATURE_10xDEG >= 0 && (i16_R_SENSOR_
      +                          TEMPERATURE_10xDEG % 10) >= 5) {
  6083  0302  1BAD               	btfsc	_i16_R_SENSOR_TEMPERATURE_10xDEG+1,7
  6084  0303  2B22               	goto	l4296
  6085  0304  300A               	movlw	10
  6086  0305  00D3               	movwf	___awmod@divisor
  6087  0306  3000               	movlw	0
  6088  0307  00D4               	movwf	___awmod@divisor+1
  6089  0308  082D               	movf	_i16_R_SENSOR_TEMPERATURE_10xDEG+1,w
  6090  0309  00D6               	movwf	___awmod@dividend+1
  6091  030A  082C               	movf	_i16_R_SENSOR_TEMPERATURE_10xDEG,w
  6092  030B  00D5               	movwf	___awmod@dividend
  6093  030C  318D  25B6  3180   	fcall	___awmod
  6094  030F  0140               	movlb	0	; select bank0
  6095  0310  0854               	movf	?___awmod+1,w
  6096  0311  3A80               	xorlw	128
  6097  0312  00E6               	movwf	??_main
  6098  0313  3080               	movlw	128
  6099  0314  0266               	subwf	??_main,w
  6100  0315  1D03               	skipz
  6101  0316  2B19               	goto	u3665
  6102  0317  3005               	movlw	5
  6103  0318  0253               	subwf	?___awmod,w
  6104  0319                     u3665:	
  6105  0319  1C03               	skipc
  6106  031A  2B22               	goto	l4296
  6107                           
  6108                           ;main.c: 359:                     i16_R_SENSOR_TEMPERATURE_10xDEG = i16_R_SENSOR_TEMPERA
      +                          TURE_10xDEG + 5;
  6109  031B  0140               	movlb	0	; select bank0
  6110  031C  082C               	movf	_i16_R_SENSOR_TEMPERATURE_10xDEG,w
  6111  031D  3E05               	addlw	5
  6112  031E  00AC               	movwf	_i16_R_SENSOR_TEMPERATURE_10xDEG
  6113  031F  3000               	movlw	0
  6114  0320  3D2D               	addwfc	_i16_R_SENSOR_TEMPERATURE_10xDEG+1,w
  6115  0321  00AD               	movwf	_i16_R_SENSOR_TEMPERATURE_10xDEG+1
  6116  0322                     l4296:	
  6117                           
  6118                           ;main.c: 366:                 if (i16_R_SENSOR_TEMPERATURE_10xDEG <= 10) {
  6119  0322  0140               	movlb	0	; select bank0
  6120  0323  082D               	movf	_i16_R_SENSOR_TEMPERATURE_10xDEG+1,w
  6121  0324  3A80               	xorlw	128
  6122  0325  00E6               	movwf	??_main
  6123  0326  3080               	movlw	128
  6124  0327  0266               	subwf	??_main,w
  6125  0328  1D03               	skipz
  6126  0329  2B2C               	goto	u3675
  6127  032A  300B               	movlw	11
  6128  032B  022C               	subwf	_i16_R_SENSOR_TEMPERATURE_10xDEG,w
  6129  032C                     u3675:	
  6130  032C  1803               	skipnc
  6131  032D  2B33               	goto	l1035
  6132                           
  6133                           ;main.c: 368:                     i16_R_SENSOR_TEMPERATURE_10xDEG = 10;
  6134  032E  300A               	movlw	10
  6135  032F  0140               	movlb	0	; select bank0
  6136  0330  00AC               	movwf	_i16_R_SENSOR_TEMPERATURE_10xDEG
  6137  0331  3000               	movlw	0
  6138  0332  00AD               	movwf	_i16_R_SENSOR_TEMPERATURE_10xDEG+1
  6139  0333                     l1035:	
  6140                           ;main.c: 369:                 }
  6141                           
  6142                           
  6143                           ;main.c: 371:                 if (i16_R_SENSOR_TEMPERATURE_10xDEG > 600) {
  6144  0333  0140               	movlb	0	; select bank0
  6145  0334  082D               	movf	_i16_R_SENSOR_TEMPERATURE_10xDEG+1,w
  6146  0335  3A80               	xorlw	128
  6147  0336  00E6               	movwf	??_main
  6148  0337  3082               	movlw	130
  6149  0338  0266               	subwf	??_main,w
  6150  0339  1D03               	skipz
  6151  033A  2B3D               	goto	u3685
  6152  033B  3059               	movlw	89
  6153  033C  022C               	subwf	_i16_R_SENSOR_TEMPERATURE_10xDEG,w
  6154  033D                     u3685:	
  6155  033D  1C03               	skipc
  6156  033E  2B44               	goto	l1036
  6157                           
  6158                           ;main.c: 372:                     i16_R_SENSOR_TEMPERATURE_10xDEG = 600;
  6159  033F  3058               	movlw	88
  6160  0340  0140               	movlb	0	; select bank0
  6161  0341  00AC               	movwf	_i16_R_SENSOR_TEMPERATURE_10xDEG
  6162  0342  3002               	movlw	2
  6163  0343  00AD               	movwf	_i16_R_SENSOR_TEMPERATURE_10xDEG+1
  6164  0344                     l1036:	
  6165                           ;main.c: 373:                 }
  6166                           
  6167                           
  6168                           ;main.c: 375:                 if ((i16_R_SENSOR_TEMPERATURE_10xDEG >= 10) && (i16_R_SENS
      +                          OR_TEMPERATURE_10xDEG < 100)) {
  6169  0344  0140               	movlb	0	; select bank0
  6170  0345  082D               	movf	_i16_R_SENSOR_TEMPERATURE_10xDEG+1,w
  6171  0346  3A80               	xorlw	128
  6172  0347  00E6               	movwf	??_main
  6173  0348  3080               	movlw	128
  6174  0349  0266               	subwf	??_main,w
  6175  034A  1D03               	skipz
  6176  034B  2B4E               	goto	u3695
  6177  034C  300A               	movlw	10
  6178  034D  022C               	subwf	_i16_R_SENSOR_TEMPERATURE_10xDEG,w
  6179  034E                     u3695:	
  6180  034E  1C03               	skipc
  6181  034F  2B5F               	goto	l4308
  6182  0350  0140               	movlb	0	; select bank0
  6183  0351  082D               	movf	_i16_R_SENSOR_TEMPERATURE_10xDEG+1,w
  6184  0352  3A80               	xorlw	128
  6185  0353  00E6               	movwf	??_main
  6186  0354  3080               	movlw	128
  6187  0355  0266               	subwf	??_main,w
  6188  0356  1D03               	skipz
  6189  0357  2B5A               	goto	u3705
  6190  0358  3064               	movlw	100
  6191  0359  022C               	subwf	_i16_R_SENSOR_TEMPERATURE_10xDEG,w
  6192  035A                     u3705:	
  6193  035A  1803               	skipnc
  6194  035B  2B5F               	goto	l4308
  6195                           
  6196                           ;main.c: 376:                     u8_DIG21 = 11;
  6197  035C  300B               	movlw	11
  6198  035D  0140               	movlb	0	; select bank0
  6199  035E  2B6D               	goto	L8
  6200  035F                     l4308:	
  6201                           ;main.c: 378:                 }
  6202                           
  6203                           ;main.c: 377:                     u8_DIG22 = (i16_R_SENSOR_TEMPERATURE_10xDEG / 10) % 10
      +                          ;
  6204                           
  6205                           
  6206                           ;main.c: 380:                     u8_DIG21 = i16_R_SENSOR_TEMPERATURE_10xDEG / 100;
  6207  035F  3064               	movlw	100
  6208  0360  0140               	movlb	0	; select bank0
  6209  0361  00CA               	movwf	___awdiv@divisor
  6210  0362  3000               	movlw	0
  6211  0363  00CB               	movwf	___awdiv@divisor+1
  6212  0364  082D               	movf	_i16_R_SENSOR_TEMPERATURE_10xDEG+1,w
  6213  0365  00CD               	movwf	___awdiv@dividend+1
  6214  0366  082C               	movf	_i16_R_SENSOR_TEMPERATURE_10xDEG,w
  6215  0367  00CC               	movwf	___awdiv@dividend
  6216  0368  318E  2645  3180   	fcall	___awdiv
  6217  036B  0140               	movlb	0	; select bank0
  6218  036C  084A               	movf	?___awdiv,w
  6219  036D                     L8:	
  6220  036D  00E6               	movwf	??_main
  6221  036E  0866               	movf	??_main,w
  6222  036F  00C0               	movwf	_u8_DIG21
  6223                           
  6224                           ;main.c: 381:                     u8_DIG22 = (i16_R_SENSOR_TEMPERATURE_10xDEG / 10) % 10
      +                          ;
  6225  0370  300A               	movlw	10
  6226  0371  00D3               	movwf	___awmod@divisor
  6227  0372  3000               	movlw	0
  6228  0373  00D4               	movwf	___awmod@divisor+1
  6229  0374  300A               	movlw	10
  6230  0375  00CA               	movwf	___awdiv@divisor
  6231  0376  3000               	movlw	0
  6232  0377  00CB               	movwf	___awdiv@divisor+1
  6233  0378  082D               	movf	_i16_R_SENSOR_TEMPERATURE_10xDEG+1,w
  6234  0379  00CD               	movwf	___awdiv@dividend+1
  6235  037A  082C               	movf	_i16_R_SENSOR_TEMPERATURE_10xDEG,w
  6236  037B  00CC               	movwf	___awdiv@dividend
  6237  037C  318E  2645  3180   	fcall	___awdiv
  6238  037F  0140               	movlb	0	; select bank0
  6239  0380  084B               	movf	?___awdiv+1,w
  6240  0381  00D6               	movwf	___awmod@dividend+1
  6241  0382  084A               	movf	?___awdiv,w
  6242  0383  00D5               	movwf	___awmod@dividend
  6243  0384  318D  25B6  3180   	fcall	___awmod
  6244  0387  0140               	movlb	0	; select bank0
  6245  0388  0853               	movf	?___awmod,w
  6246  0389                     L6:	
  6247  0389  00E6               	movwf	??_main
  6248  038A  0866               	movf	??_main,w
  6249  038B  00BF               	movwf	_u8_DIG22
  6250                           
  6251                           ;main.c: 388:             u16_ADCsample_COUNT = 0;
  6252  038C  01AE               	clrf	_u16_ADCsample_COUNT
  6253  038D  01AF               	clrf	_u16_ADCsample_COUNT+1
  6254                           
  6255                           ;main.c: 389:             i32_F_SENSOR_ADCsample = 0;
  6256  038E  3000               	movlw	0
  6257  038F  00A7               	movwf	_i32_F_SENSOR_ADCsample+3
  6258  0390  3000               	movlw	0
  6259  0391  00A6               	movwf	_i32_F_SENSOR_ADCsample+2
  6260  0392  3000               	movlw	0
  6261  0393  00A5               	movwf	_i32_F_SENSOR_ADCsample+1
  6262  0394  3000               	movlw	0
  6263  0395  00A4               	movwf	_i32_F_SENSOR_ADCsample
  6264                           
  6265                           ;main.c: 390:             i32_R_SENSOR_ADCsample = 0;
  6266  0396  3000               	movlw	0
  6267  0397  00A3               	movwf	_i32_R_SENSOR_ADCsample+3
  6268  0398  3000               	movlw	0
  6269  0399  00A2               	movwf	_i32_R_SENSOR_ADCsample+2
  6270  039A  3000               	movlw	0
  6271  039B  00A1               	movwf	_i32_R_SENSOR_ADCsample+1
  6272  039C  3000               	movlw	0
  6273  039D  00A0               	movwf	_i32_R_SENSOR_ADCsample
  6274  039E                     l4316:	
  6275                           
  6276                           ;main.c: 397:         if (MTOUCH_Service_Mainloop()) {
  6277  039E  318B  23D7  3180   	fcall	_MTOUCH_Service_Mainloop
  6278  03A1  3A00               	xorlw	0
  6279  03A2  1903               	skipnz
  6280  03A3  28B0               	goto	l4194
  6281                           
  6282                           ;main.c: 398:             if (MTOUCH_Button_isPressed(I_K1) && !u8_TOUCH_DELAY_COUNTDOWN
      +                          ) {
  6283  03A4  3000               	movlw	0
  6284  03A5  318B  23A2  3180   	fcall	_MTOUCH_Button_isPressed
  6285  03A8  3A00               	xorlw	0
  6286  03A9  1903               	skipnz
  6287  03AA  28B0               	goto	l4194
  6288  03AB  0140               	movlb	0	; select bank0
  6289  03AC  083C               	movf	_u8_TOUCH_DELAY_COUNTDOWN,w
  6290  03AD  1D03               	btfss	3,2
  6291  03AE  28B0               	goto	l4194
  6292                           
  6293                           ;main.c: 399:                 u8_TOUCH_DELAY_COUNTDOWN = 5;
  6294  03AF  3005               	movlw	5
  6295  03B0  00E6               	movwf	??_main
  6296  03B1  0866               	movf	??_main,w
  6297  03B2  00BC               	movwf	_u8_TOUCH_DELAY_COUNTDOWN
  6298                           
  6299                           ;main.c: 400:                 if (!u8_SLEEPING_START_COUNTDOWN_SEC) {
  6300  03B3  083D               	movf	_u8_SLEEPING_START_COUNTDOWN_SEC,w
  6301  03B4  1D03               	btfss	3,2
  6302  03B5  2BBF               	goto	l4328
  6303                           
  6304                           ;main.c: 401:                     u8_SLEEPING_START_COUNTDOWN_SEC = 60;
  6305  03B6  303C               	movlw	60
  6306  03B7  00E6               	movwf	??_main
  6307  03B8  0866               	movf	??_main,w
  6308  03B9  00BD               	movwf	_u8_SLEEPING_START_COUNTDOWN_SEC
  6309                           
  6310                           ;main.c: 402:                     u8_DIMMING_START_COUNTDOWN_SEC = 10;
  6311  03BA  300A               	movlw	10
  6312  03BB  00E6               	movwf	??_main
  6313  03BC  0866               	movf	??_main,w
  6314  03BD  00BE               	movwf	_u8_DIMMING_START_COUNTDOWN_SEC
  6315                           
  6316                           ;main.c: 403:                 } else {
  6317  03BE  28B0               	goto	l4194
  6318  03BF                     l4328:	
  6319                           
  6320                           ;main.c: 404:                     u8_SLEEPING_START_COUNTDOWN_SEC = 0;
  6321  03BF  01BD               	clrf	_u8_SLEEPING_START_COUNTDOWN_SEC
  6322                           
  6323                           ;main.c: 405:                     u8_DIMMING_START_COUNTDOWN_SEC = 0;
  6324  03C0  01BE               	clrf	_u8_DIMMING_START_COUNTDOWN_SEC
  6325  03C1  28B0               	goto	l4194
  6326  03C2                     __end_of_main:	
  6327                           
  6328                           	psect	text1
  6329  03C2                     __ptext1:	
  6330 ;; *************** function _v_get_slope_intercept *****************
  6331 ;; Defined at:
  6332 ;;		line 173 in file "main.c"
  6333 ;; Parameters:    Size  Location     Type
  6334 ;;  u16_adc         2    0[BANK0 ] unsigned short 
  6335 ;; Auto vars:     Size  Location     Type
  6336 ;;		None
  6337 ;; Return value:  Size  Location     Type
  6338 ;;                  1    wreg      void 
  6339 ;; Registers used:
  6340 ;;		wreg, status,2, status,0
  6341 ;; Tracked objects:
  6342 ;;		On entry : 0/0
  6343 ;;		On exit  : 0/0
  6344 ;;		Unchanged: 0/0
  6345 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6346 ;;      Params:         0       2       0       0       0       0       0       0
  6347 ;;      Locals:         0       0       0       0       0       0       0       0
  6348 ;;      Temps:          0       0       0       0       0       0       0       0
  6349 ;;      Totals:         0       2       0       0       0       0       0       0
  6350 ;;Total ram usage:        2 bytes
  6351 ;; Hardware stack levels used:    1
  6352 ;; Hardware stack levels required when called:    4
  6353 ;; This function calls:
  6354 ;;		Nothing
  6355 ;; This function is called by:
  6356 ;;		_main
  6357 ;; This function uses a non-reentrant model
  6358 ;;
  6359                           
  6360                           
  6361                           ;psect for function _v_get_slope_intercept
  6362  03C2                     _v_get_slope_intercept:	
  6363                           
  6364                           ;main.c: 174:     if (u16_adc) {
  6365                           
  6366                           ;incstack = 0
  6367                           ; Regs used in _v_get_slope_intercept: [wreg+status,2+status,0]
  6368  03C2  0140               	movlb	0	; select bank0
  6369  03C3  084A               	movf	v_get_slope_intercept@u16_adc,w
  6370  03C4  044B               	iorwf	v_get_slope_intercept@u16_adc+1,w
  6371  03C5  1903               	btfsc	3,2
  6372  03C6  0008               	return
  6373                           
  6374                           ;main.c: 175:         if (u16_adc > 967) {
  6375  03C7  3003               	movlw	3
  6376  03C8  024B               	subwf	v_get_slope_intercept@u16_adc+1,w
  6377  03C9  30C8               	movlw	200
  6378  03CA  1903               	skipnz
  6379  03CB  024A               	subwf	v_get_slope_intercept@u16_adc,w
  6380  03CC  1C03               	skipc
  6381  03CD  2BE0               	goto	l3904
  6382                           
  6383                           ;main.c: 176:             u32_Mn = 4064;
  6384  03CE  3000               	movlw	0
  6385  03CF  00AB               	movwf	_u32_Mn+3
  6386  03D0  3000               	movlw	0
  6387  03D1  00AA               	movwf	_u32_Mn+2
  6388  03D2  300F               	movlw	15
  6389  03D3  00A9               	movwf	_u32_Mn+1
  6390  03D4  30E0               	movlw	224
  6391  03D5  00A8               	movwf	_u32_Mn
  6392                           
  6393                           ;main.c: 177:             u32_Cn = 3634688;
  6394  03D6  3000               	movlw	0
  6395  03D7  0141               	movlb	1	; select bank1
  6396  03D8  00B8               	movwf	(_u32_Cn+3)^(0+128)
  6397  03D9  3037               	movlw	55
  6398  03DA  00B7               	movwf	(_u32_Cn+2)^(0+128)
  6399  03DB  3076               	movlw	118
  6400  03DC  00B6               	movwf	(_u32_Cn+1)^(0+128)
  6401  03DD  3000               	movlw	0
  6402  03DE  00B5               	movwf	_u32_Cn^(0+128)
  6403                           
  6404                           ;main.c: 178:         } else if (u16_adc > 928) {
  6405  03DF  0008               	return
  6406  03E0                     l3904:	
  6407  03E0  3003               	movlw	3
  6408  03E1  024B               	subwf	v_get_slope_intercept@u16_adc+1,w
  6409  03E2  30A1               	movlw	161
  6410  03E3  1903               	skipnz
  6411  03E4  024A               	subwf	v_get_slope_intercept@u16_adc,w
  6412  03E5  1C03               	skipc
  6413  03E6  2BF9               	goto	l3908
  6414                           
  6415                           ;main.c: 179:             u32_Mn = 2503;
  6416  03E7  3000               	movlw	0
  6417  03E8  00AB               	movwf	_u32_Mn+3
  6418  03E9  3000               	movlw	0
  6419  03EA  00AA               	movwf	_u32_Mn+2
  6420  03EB  3009               	movlw	9
  6421  03EC  00A9               	movwf	_u32_Mn+1
  6422  03ED  30C7               	movlw	199
  6423  03EE  00A8               	movwf	_u32_Mn
  6424                           
  6425                           ;main.c: 180:             u32_Cn = 2121523;
  6426  03EF  3000               	movlw	0
  6427  03F0  0141               	movlb	1	; select bank1
  6428  03F1  00B8               	movwf	(_u32_Cn+3)^(0+128)
  6429  03F2  3020               	movlw	32
  6430  03F3  00B7               	movwf	(_u32_Cn+2)^(0+128)
  6431  03F4  305F               	movlw	95
  6432  03F5  00B6               	movwf	(_u32_Cn+1)^(0+128)
  6433  03F6  3033               	movlw	51
  6434  03F7  00B5               	movwf	_u32_Cn^(0+128)
  6435                           
  6436                           ;main.c: 181:         } else if (u16_adc > 867) {
  6437  03F8  0008               	return
  6438  03F9                     l3908:	
  6439  03F9  3003               	movlw	3
  6440  03FA  024B               	subwf	v_get_slope_intercept@u16_adc+1,w
  6441  03FB  3064               	movlw	100
  6442  03FC  1903               	skipnz
  6443  03FD  024A               	subwf	v_get_slope_intercept@u16_adc,w
  6444  03FE  1C03               	skipc
  6445  03FF  2C12               	goto	l3912
  6446                           
  6447                           ;main.c: 182:             u32_Mn = 1672;
  6448  0400  3000               	movlw	0
  6449  0401  00AB               	movwf	_u32_Mn+3
  6450  0402  3000               	movlw	0
  6451  0403  00AA               	movwf	_u32_Mn+2
  6452  0404  3006               	movlw	6
  6453  0405  00A9               	movwf	_u32_Mn+1
  6454  0406  3088               	movlw	136
  6455  0407  00A8               	movwf	_u32_Mn
  6456                           
  6457                           ;main.c: 183:             u32_Cn = 1350451;
  6458  0408  3000               	movlw	0
  6459  0409  0141               	movlb	1	; select bank1
  6460  040A  00B8               	movwf	(_u32_Cn+3)^(0+128)
  6461  040B  3014               	movlw	20
  6462  040C  00B7               	movwf	(_u32_Cn+2)^(0+128)
  6463  040D  309B               	movlw	155
  6464  040E  00B6               	movwf	(_u32_Cn+1)^(0+128)
  6465  040F  3033               	movlw	51
  6466  0410  00B5               	movwf	_u32_Cn^(0+128)
  6467                           
  6468                           ;main.c: 184:         } else if (u16_adc > 784) {
  6469  0411  0008               	return
  6470  0412                     l3912:	
  6471  0412  3003               	movlw	3
  6472  0413  024B               	subwf	v_get_slope_intercept@u16_adc+1,w
  6473  0414  3011               	movlw	17
  6474  0415  1903               	skipnz
  6475  0416  024A               	subwf	v_get_slope_intercept@u16_adc,w
  6476  0417  1C03               	skipc
  6477  0418  2C2B               	goto	l3916
  6478                           
  6479                           ;main.c: 185:             u32_Mn = 1227;
  6480  0419  3000               	movlw	0
  6481  041A  00AB               	movwf	_u32_Mn+3
  6482  041B  3000               	movlw	0
  6483  041C  00AA               	movwf	_u32_Mn+2
  6484  041D  3004               	movlw	4
  6485  041E  00A9               	movwf	_u32_Mn+1
  6486  041F  30CB               	movlw	203
  6487  0420  00A8               	movwf	_u32_Mn
  6488                           
  6489                           ;main.c: 186:             u32_Cn = 963461;
  6490  0421  3000               	movlw	0
  6491  0422  0141               	movlb	1	; select bank1
  6492  0423  00B8               	movwf	(_u32_Cn+3)^(0+128)
  6493  0424  300E               	movlw	14
  6494  0425  00B7               	movwf	(_u32_Cn+2)^(0+128)
  6495  0426  30B3               	movlw	179
  6496  0427  00B6               	movwf	(_u32_Cn+1)^(0+128)
  6497  0428  3085               	movlw	133
  6498  0429  00B5               	movwf	_u32_Cn^(0+128)
  6499                           
  6500                           ;main.c: 187:         } else if (u16_adc > 681) {
  6501  042A  0008               	return
  6502  042B                     l3916:	
  6503  042B  3002               	movlw	2
  6504  042C  024B               	subwf	v_get_slope_intercept@u16_adc+1,w
  6505  042D  30AA               	movlw	170
  6506  042E  1903               	skipnz
  6507  042F  024A               	subwf	v_get_slope_intercept@u16_adc,w
  6508  0430  1C03               	skipc
  6509  0431  2C44               	goto	l3920
  6510                           
  6511                           ;main.c: 188:             u32_Mn = 998;
  6512  0432  3000               	movlw	0
  6513  0433  00AB               	movwf	_u32_Mn+3
  6514  0434  3000               	movlw	0
  6515  0435  00AA               	movwf	_u32_Mn+2
  6516  0436  3003               	movlw	3
  6517  0437  00A9               	movwf	_u32_Mn+1
  6518  0438  30E6               	movlw	230
  6519  0439  00A8               	movwf	_u32_Mn
  6520                           
  6521                           ;main.c: 189:             u32_Cn = 783544;
  6522  043A  3000               	movlw	0
  6523  043B  0141               	movlb	1	; select bank1
  6524  043C  00B8               	movwf	(_u32_Cn+3)^(0+128)
  6525  043D  300B               	movlw	11
  6526  043E  00B7               	movwf	(_u32_Cn+2)^(0+128)
  6527  043F  30F4               	movlw	244
  6528  0440  00B6               	movwf	(_u32_Cn+1)^(0+128)
  6529  0441  30B8               	movlw	184
  6530  0442  00B5               	movwf	_u32_Cn^(0+128)
  6531                           
  6532                           ;main.c: 190:         } else if (u16_adc > 568) {
  6533  0443  0008               	return
  6534  0444                     l3920:	
  6535  0444  3002               	movlw	2
  6536  0445  024B               	subwf	v_get_slope_intercept@u16_adc+1,w
  6537  0446  3039               	movlw	57
  6538  0447  1903               	skipnz
  6539  0448  024A               	subwf	v_get_slope_intercept@u16_adc,w
  6540  0449  1C03               	skipc
  6541  044A  2C5D               	goto	l3924
  6542                           
  6543                           ;main.c: 191:             u32_Mn = 905;
  6544  044B  3000               	movlw	0
  6545  044C  00AB               	movwf	_u32_Mn+3
  6546  044D  3000               	movlw	0
  6547  044E  00AA               	movwf	_u32_Mn+2
  6548  044F  3003               	movlw	3
  6549  0450  00A9               	movwf	_u32_Mn+1
  6550  0451  3089               	movlw	137
  6551  0452  00A8               	movwf	_u32_Mn
  6552                           
  6553                           ;main.c: 192:             u32_Cn = 719657;
  6554  0453  3000               	movlw	0
  6555  0454  0141               	movlb	1	; select bank1
  6556  0455  00B8               	movwf	(_u32_Cn+3)^(0+128)
  6557  0456  300A               	movlw	10
  6558  0457  00B7               	movwf	(_u32_Cn+2)^(0+128)
  6559  0458  30FB               	movlw	251
  6560  0459  00B6               	movwf	(_u32_Cn+1)^(0+128)
  6561  045A  3029               	movlw	41
  6562  045B  00B5               	movwf	_u32_Cn^(0+128)
  6563                           
  6564                           ;main.c: 193:         } else if (u16_adc > 456) {
  6565  045C  0008               	return
  6566  045D                     l3924:	
  6567  045D  3001               	movlw	1
  6568  045E  024B               	subwf	v_get_slope_intercept@u16_adc+1,w
  6569  045F  30C9               	movlw	201
  6570  0460  1903               	skipnz
  6571  0461  024A               	subwf	v_get_slope_intercept@u16_adc,w
  6572  0462  1C03               	skipc
  6573  0463  2C76               	goto	l3928
  6574                           
  6575                           ;main.c: 194:             u32_Mn = 912;
  6576  0464  3000               	movlw	0
  6577  0465  00AB               	movwf	_u32_Mn+3
  6578  0466  3000               	movlw	0
  6579  0467  00AA               	movwf	_u32_Mn+2
  6580  0468  3003               	movlw	3
  6581  0469  00A9               	movwf	_u32_Mn+1
  6582  046A  3090               	movlw	144
  6583  046B  00A8               	movwf	_u32_Mn
  6584                           
  6585                           ;main.c: 195:             u32_Cn = 723139;
  6586  046C  3000               	movlw	0
  6587  046D  0141               	movlb	1	; select bank1
  6588  046E  00B8               	movwf	(_u32_Cn+3)^(0+128)
  6589  046F  300B               	movlw	11
  6590  0470  00B7               	movwf	(_u32_Cn+2)^(0+128)
  6591  0471  3008               	movlw	8
  6592  0472  00B6               	movwf	(_u32_Cn+1)^(0+128)
  6593  0473  30C3               	movlw	195
  6594  0474  00B5               	movwf	_u32_Cn^(0+128)
  6595                           
  6596                           ;main.c: 196:         } else if (u16_adc > 355) {
  6597  0475  0008               	return
  6598  0476                     l3928:	
  6599  0476  3001               	movlw	1
  6600  0477  024B               	subwf	v_get_slope_intercept@u16_adc+1,w
  6601  0478  3064               	movlw	100
  6602  0479  1903               	skipnz
  6603  047A  024A               	subwf	v_get_slope_intercept@u16_adc,w
  6604  047B  1C03               	skipc
  6605  047C  2C8F               	goto	l3932
  6606                           
  6607                           ;main.c: 197:             u32_Mn = 1010;
  6608  047D  3000               	movlw	0
  6609  047E  00AB               	movwf	_u32_Mn+3
  6610  047F  3000               	movlw	0
  6611  0480  00AA               	movwf	_u32_Mn+2
  6612  0481  3003               	movlw	3
  6613  0482  00A9               	movwf	_u32_Mn+1
  6614  0483  30F2               	movlw	242
  6615  0484  00A8               	movwf	_u32_Mn
  6616                           
  6617                           ;main.c: 198:             u32_Cn = 767048;
  6618  0485  3000               	movlw	0
  6619  0486  0141               	movlb	1	; select bank1
  6620  0487  00B8               	movwf	(_u32_Cn+3)^(0+128)
  6621  0488  300B               	movlw	11
  6622  0489  00B7               	movwf	(_u32_Cn+2)^(0+128)
  6623  048A  30B4               	movlw	180
  6624  048B  00B6               	movwf	(_u32_Cn+1)^(0+128)
  6625  048C  3048               	movlw	72
  6626  048D  00B5               	movwf	_u32_Cn^(0+128)
  6627                           
  6628                           ;main.c: 199:         } else if (u16_adc > 270) {
  6629  048E  0008               	return
  6630  048F                     l3932:	
  6631  048F  3001               	movlw	1
  6632  0490  024B               	subwf	v_get_slope_intercept@u16_adc+1,w
  6633  0491  300F               	movlw	15
  6634  0492  1903               	skipnz
  6635  0493  024A               	subwf	v_get_slope_intercept@u16_adc,w
  6636  0494  1C03               	skipc
  6637  0495  2CA8               	goto	l3936
  6638                           
  6639                           ;main.c: 200:             u32_Mn = 1205;
  6640  0496  3000               	movlw	0
  6641  0497  00AB               	movwf	_u32_Mn+3
  6642  0498  3000               	movlw	0
  6643  0499  00AA               	movwf	_u32_Mn+2
  6644  049A  3004               	movlw	4
  6645  049B  00A9               	movwf	_u32_Mn+1
  6646  049C  30B5               	movlw	181
  6647  049D  00A8               	movwf	_u32_Mn
  6648                           
  6649                           ;main.c: 201:             u32_Cn = 835963;
  6650  049E  3000               	movlw	0
  6651  049F  0141               	movlb	1	; select bank1
  6652  04A0  00B8               	movwf	(_u32_Cn+3)^(0+128)
  6653  04A1  300C               	movlw	12
  6654  04A2  00B7               	movwf	(_u32_Cn+2)^(0+128)
  6655  04A3  30C1               	movlw	193
  6656  04A4  00B6               	movwf	(_u32_Cn+1)^(0+128)
  6657  04A5  307B               	movlw	123
  6658  04A6  00B5               	movwf	_u32_Cn^(0+128)
  6659                           
  6660                           ;main.c: 202:         } else if (u16_adc > 203) {
  6661  04A7  0008               	return
  6662  04A8                     l3936:	
  6663  04A8  3000               	movlw	0
  6664  04A9  024B               	subwf	v_get_slope_intercept@u16_adc+1,w
  6665  04AA  30CC               	movlw	204
  6666  04AB  1903               	skipnz
  6667  04AC  024A               	subwf	v_get_slope_intercept@u16_adc,w
  6668  04AD  1C03               	skipc
  6669  04AE  0008               	return
  6670                           
  6671                           ;main.c: 203:             u32_Mn = 1521;
  6672  04AF  3000               	movlw	0
  6673  04B0  00AB               	movwf	_u32_Mn+3
  6674  04B1  3000               	movlw	0
  6675  04B2  00AA               	movwf	_u32_Mn+2
  6676  04B3  3005               	movlw	5
  6677  04B4  00A9               	movwf	_u32_Mn+1
  6678  04B5  30F1               	movlw	241
  6679  04B6  00A8               	movwf	_u32_Mn
  6680                           
  6681                           ;main.c: 204:             u32_Cn = 920842;
  6682  04B7  3000               	movlw	0
  6683  04B8  0141               	movlb	1	; select bank1
  6684  04B9  00B8               	movwf	(_u32_Cn+3)^(0+128)
  6685  04BA  300E               	movlw	14
  6686  04BB  00B7               	movwf	(_u32_Cn+2)^(0+128)
  6687  04BC  300D               	movlw	13
  6688  04BD  00B6               	movwf	(_u32_Cn+1)^(0+128)
  6689  04BE  300A               	movlw	10
  6690  04BF  00B5               	movwf	_u32_Cn^(0+128)
  6691  04C0  0008               	return
  6692  04C1                     __end_of_v_get_slope_intercept:	
  6693                           
  6694                           	psect	text2
  6695  0D11                     __ptext2:	
  6696 ;; *************** function ___lmul *****************
  6697 ;; Defined at:
  6698 ;;		line 15 in file "C:\Program Files2\Microchip\xc8\v2.05\pic\sources\c99\common\Umul32.c"
  6699 ;; Parameters:    Size  Location     Type
  6700 ;;  multiplier      4    0[BANK0 ] unsigned long 
  6701 ;;  multiplicand    4    4[BANK0 ] unsigned long 
  6702 ;; Auto vars:     Size  Location     Type
  6703 ;;  product         4    8[BANK0 ] unsigned long 
  6704 ;; Return value:  Size  Location     Type
  6705 ;;                  4    0[BANK0 ] unsigned long 
  6706 ;; Registers used:
  6707 ;;		wreg, status,2, status,0
  6708 ;; Tracked objects:
  6709 ;;		On entry : 0/0
  6710 ;;		On exit  : 0/0
  6711 ;;		Unchanged: 0/0
  6712 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6713 ;;      Params:         0       8       0       0       0       0       0       0
  6714 ;;      Locals:         0       4       0       0       0       0       0       0
  6715 ;;      Temps:          0       0       0       0       0       0       0       0
  6716 ;;      Totals:         0      12       0       0       0       0       0       0
  6717 ;;Total ram usage:       12 bytes
  6718 ;; Hardware stack levels used:    1
  6719 ;; Hardware stack levels required when called:    4
  6720 ;; This function calls:
  6721 ;;		Nothing
  6722 ;; This function is called by:
  6723 ;;		_main
  6724 ;; This function uses a non-reentrant model
  6725 ;;
  6726                           
  6727                           
  6728                           ;psect for function ___lmul
  6729  0D11                     ___lmul:	
  6730                           
  6731                           ;incstack = 0
  6732                           ; Regs used in ___lmul: [wreg+status,2+status,0]
  6733  0D11  3000               	movlw	0
  6734  0D12  0140               	movlb	0	; select bank0
  6735  0D13  00D5               	movwf	___lmul@product+3
  6736  0D14  3000               	movlw	0
  6737  0D15  00D4               	movwf	___lmul@product+2
  6738  0D16  3000               	movlw	0
  6739  0D17  00D3               	movwf	___lmul@product+1
  6740  0D18  3000               	movlw	0
  6741  0D19  00D2               	movwf	___lmul@product
  6742  0D1A                     l3942:	
  6743  0D1A  1C4A               	btfss	___lmul@multiplier,0
  6744  0D1B  2D24               	goto	l3946
  6745  0D1C  084E               	movf	___lmul@multiplicand,w
  6746  0D1D  07D2               	addwf	___lmul@product,f
  6747  0D1E  084F               	movf	___lmul@multiplicand+1,w
  6748  0D1F  3DD3               	addwfc	___lmul@product+1,f
  6749  0D20  0850               	movf	___lmul@multiplicand+2,w
  6750  0D21  3DD4               	addwfc	___lmul@product+2,f
  6751  0D22  0851               	movf	___lmul@multiplicand+3,w
  6752  0D23  3DD5               	addwfc	___lmul@product+3,f
  6753  0D24                     l3946:	
  6754  0D24  3001               	movlw	1
  6755  0D25                     u2905:	
  6756  0D25  35CE               	lslf	___lmul@multiplicand,f
  6757  0D26  0DCF               	rlf	___lmul@multiplicand+1,f
  6758  0D27  0DD0               	rlf	___lmul@multiplicand+2,f
  6759  0D28  0DD1               	rlf	___lmul@multiplicand+3,f
  6760  0D29  0B89               	decfsz	9,f
  6761  0D2A  2D25               	goto	u2905
  6762  0D2B  3001               	movlw	1
  6763  0D2C                     u2915:	
  6764  0D2C  36CD               	lsrf	___lmul@multiplier+3,f
  6765  0D2D  0CCC               	rrf	___lmul@multiplier+2,f
  6766  0D2E  0CCB               	rrf	___lmul@multiplier+1,f
  6767  0D2F  0CCA               	rrf	___lmul@multiplier,f
  6768  0D30  0B89               	decfsz	9,f
  6769  0D31  2D2C               	goto	u2915
  6770  0D32  084D               	movf	___lmul@multiplier+3,w
  6771  0D33  044C               	iorwf	___lmul@multiplier+2,w
  6772  0D34  044B               	iorwf	___lmul@multiplier+1,w
  6773  0D35  044A               	iorwf	___lmul@multiplier,w
  6774  0D36  1D03               	skipz
  6775  0D37  2D1A               	goto	l3942
  6776  0D38  0855               	movf	___lmul@product+3,w
  6777  0D39  00CD               	movwf	?___lmul+3
  6778  0D3A  0854               	movf	___lmul@product+2,w
  6779  0D3B  00CC               	movwf	?___lmul+2
  6780  0D3C  0853               	movf	___lmul@product+1,w
  6781  0D3D  00CB               	movwf	?___lmul+1
  6782  0D3E  0852               	movf	___lmul@product,w
  6783  0D3F  00CA               	movwf	?___lmul
  6784  0D40  0008               	return
  6785  0D41                     __end_of___lmul:	
  6786                           
  6787                           	psect	text3
  6788  0DB6                     __ptext3:	
  6789 ;; *************** function ___awmod *****************
  6790 ;; Defined at:
  6791 ;;		line 5 in file "C:\Program Files2\Microchip\xc8\v2.05\pic\sources\c99\common\awmod.c"
  6792 ;; Parameters:    Size  Location     Type
  6793 ;;  divisor         2    9[BANK0 ] int 
  6794 ;;  dividend        2   11[BANK0 ] int 
  6795 ;; Auto vars:     Size  Location     Type
  6796 ;;  sign            1   15[BANK0 ] unsigned char 
  6797 ;;  counter         1   14[BANK0 ] unsigned char 
  6798 ;; Return value:  Size  Location     Type
  6799 ;;                  2    9[BANK0 ] int 
  6800 ;; Registers used:
  6801 ;;		wreg, status,2, status,0
  6802 ;; Tracked objects:
  6803 ;;		On entry : 0/0
  6804 ;;		On exit  : 0/0
  6805 ;;		Unchanged: 0/0
  6806 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6807 ;;      Params:         0       4       0       0       0       0       0       0
  6808 ;;      Locals:         0       2       0       0       0       0       0       0
  6809 ;;      Temps:          0       1       0       0       0       0       0       0
  6810 ;;      Totals:         0       7       0       0       0       0       0       0
  6811 ;;Total ram usage:        7 bytes
  6812 ;; Hardware stack levels used:    1
  6813 ;; Hardware stack levels required when called:    4
  6814 ;; This function calls:
  6815 ;;		Nothing
  6816 ;; This function is called by:
  6817 ;;		_main
  6818 ;; This function uses a non-reentrant model
  6819 ;;
  6820                           
  6821                           
  6822                           ;psect for function ___awmod
  6823  0DB6                     ___awmod:	
  6824                           
  6825                           ;incstack = 0
  6826                           ; Regs used in ___awmod: [wreg+status,2+status,0]
  6827  0DB6  0140               	movlb	0	; select bank0
  6828  0DB7  01D9               	clrf	___awmod@sign
  6829  0DB8  1FD6               	btfss	___awmod@dividend+1,7
  6830  0DB9  2DC1               	goto	l4006
  6831  0DBA  09D5               	comf	___awmod@dividend,f
  6832  0DBB  09D6               	comf	___awmod@dividend+1,f
  6833  0DBC  0AD5               	incf	___awmod@dividend,f
  6834  0DBD  1903               	skipnz
  6835  0DBE  0AD6               	incf	___awmod@dividend+1,f
  6836  0DBF  01D9               	clrf	___awmod@sign
  6837  0DC0  0AD9               	incf	___awmod@sign,f
  6838  0DC1                     l4006:	
  6839  0DC1  1FD4               	btfss	___awmod@divisor+1,7
  6840  0DC2  2DC8               	goto	l4010
  6841  0DC3  09D3               	comf	___awmod@divisor,f
  6842  0DC4  09D4               	comf	___awmod@divisor+1,f
  6843  0DC5  0AD3               	incf	___awmod@divisor,f
  6844  0DC6  1903               	skipnz
  6845  0DC7  0AD4               	incf	___awmod@divisor+1,f
  6846  0DC8                     l4010:	
  6847  0DC8  0853               	movf	___awmod@divisor,w
  6848  0DC9  0454               	iorwf	___awmod@divisor+1,w
  6849  0DCA  1903               	btfsc	3,2
  6850  0DCB  2DEF               	goto	l4028
  6851  0DCC  01D8               	clrf	___awmod@counter
  6852  0DCD  0AD8               	incf	___awmod@counter,f
  6853  0DCE                     l4018:	
  6854  0DCE  1BD4               	btfsc	___awmod@divisor+1,7
  6855  0DCF  2DDA               	goto	l4020
  6856  0DD0  3001               	movlw	1
  6857  0DD1                     u3065:	
  6858  0DD1  35D3               	lslf	___awmod@divisor,f
  6859  0DD2  0DD4               	rlf	___awmod@divisor+1,f
  6860  0DD3  0B89               	decfsz	9,f
  6861  0DD4  2DD1               	goto	u3065
  6862  0DD5  3001               	movlw	1
  6863  0DD6  00D7               	movwf	??___awmod
  6864  0DD7  0857               	movf	??___awmod,w
  6865  0DD8  07D8               	addwf	___awmod@counter,f
  6866  0DD9  2DCE               	goto	l4018
  6867  0DDA                     l4020:	
  6868  0DDA  0854               	movf	___awmod@divisor+1,w
  6869  0DDB  0256               	subwf	___awmod@dividend+1,w
  6870  0DDC  1D03               	skipz
  6871  0DDD  2DE0               	goto	u3085
  6872  0DDE  0853               	movf	___awmod@divisor,w
  6873  0DDF  0255               	subwf	___awmod@dividend,w
  6874  0DE0                     u3085:	
  6875  0DE0  1C03               	skipc
  6876  0DE1  2DE6               	goto	l4024
  6877  0DE2  0853               	movf	___awmod@divisor,w
  6878  0DE3  02D5               	subwf	___awmod@dividend,f
  6879  0DE4  0854               	movf	___awmod@divisor+1,w
  6880  0DE5  3BD6               	subwfb	___awmod@dividend+1,f
  6881  0DE6                     l4024:	
  6882  0DE6  3001               	movlw	1
  6883  0DE7                     u3095:	
  6884  0DE7  36D4               	lsrf	___awmod@divisor+1,f
  6885  0DE8  0CD3               	rrf	___awmod@divisor,f
  6886  0DE9  0B89               	decfsz	9,f
  6887  0DEA  2DE7               	goto	u3095
  6888  0DEB  3001               	movlw	1
  6889  0DEC  02D8               	subwf	___awmod@counter,f
  6890  0DED  1D03               	btfss	3,2
  6891  0DEE  2DDA               	goto	l4020
  6892  0DEF                     l4028:	
  6893  0DEF  0859               	movf	___awmod@sign,w
  6894  0DF0  1903               	btfsc	3,2
  6895  0DF1  2DF7               	goto	l4032
  6896  0DF2  09D5               	comf	___awmod@dividend,f
  6897  0DF3  09D6               	comf	___awmod@dividend+1,f
  6898  0DF4  0AD5               	incf	___awmod@dividend,f
  6899  0DF5  1903               	skipnz
  6900  0DF6  0AD6               	incf	___awmod@dividend+1,f
  6901  0DF7                     l4032:	
  6902  0DF7  0856               	movf	___awmod@dividend+1,w
  6903  0DF8  00D4               	movwf	?___awmod+1
  6904  0DF9  0855               	movf	___awmod@dividend,w
  6905  0DFA  00D3               	movwf	?___awmod
  6906  0DFB  0008               	return
  6907  0DFC                     __end_of___awmod:	
  6908                           
  6909                           	psect	text4
  6910  0E45                     __ptext4:	
  6911 ;; *************** function ___awdiv *****************
  6912 ;; Defined at:
  6913 ;;		line 5 in file "C:\Program Files2\Microchip\xc8\v2.05\pic\sources\c99\common\awdiv.c"
  6914 ;; Parameters:    Size  Location     Type
  6915 ;;  divisor         2    0[BANK0 ] int 
  6916 ;;  dividend        2    2[BANK0 ] int 
  6917 ;; Auto vars:     Size  Location     Type
  6918 ;;  quotient        2    7[BANK0 ] int 
  6919 ;;  sign            1    6[BANK0 ] unsigned char 
  6920 ;;  counter         1    5[BANK0 ] unsigned char 
  6921 ;; Return value:  Size  Location     Type
  6922 ;;                  2    0[BANK0 ] int 
  6923 ;; Registers used:
  6924 ;;		wreg, status,2, status,0
  6925 ;; Tracked objects:
  6926 ;;		On entry : 0/0
  6927 ;;		On exit  : 0/0
  6928 ;;		Unchanged: 0/0
  6929 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6930 ;;      Params:         0       4       0       0       0       0       0       0
  6931 ;;      Locals:         0       4       0       0       0       0       0       0
  6932 ;;      Temps:          0       1       0       0       0       0       0       0
  6933 ;;      Totals:         0       9       0       0       0       0       0       0
  6934 ;;Total ram usage:        9 bytes
  6935 ;; Hardware stack levels used:    1
  6936 ;; Hardware stack levels required when called:    4
  6937 ;; This function calls:
  6938 ;;		Nothing
  6939 ;; This function is called by:
  6940 ;;		_main
  6941 ;; This function uses a non-reentrant model
  6942 ;;
  6943                           
  6944                           
  6945                           ;psect for function ___awdiv
  6946  0E45                     ___awdiv:	
  6947                           
  6948                           ;incstack = 0
  6949                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
  6950  0E45  0140               	movlb	0	; select bank0
  6951  0E46  01D0               	clrf	___awdiv@sign
  6952  0E47  1FCB               	btfss	___awdiv@divisor+1,7
  6953  0E48  2E50               	goto	l3962
  6954  0E49  09CA               	comf	___awdiv@divisor,f
  6955  0E4A  09CB               	comf	___awdiv@divisor+1,f
  6956  0E4B  0ACA               	incf	___awdiv@divisor,f
  6957  0E4C  1903               	skipnz
  6958  0E4D  0ACB               	incf	___awdiv@divisor+1,f
  6959  0E4E  01D0               	clrf	___awdiv@sign
  6960  0E4F  0AD0               	incf	___awdiv@sign,f
  6961  0E50                     l3962:	
  6962  0E50  1FCD               	btfss	___awdiv@dividend+1,7
  6963  0E51  2E5B               	goto	l3968
  6964  0E52  09CC               	comf	___awdiv@dividend,f
  6965  0E53  09CD               	comf	___awdiv@dividend+1,f
  6966  0E54  0ACC               	incf	___awdiv@dividend,f
  6967  0E55  1903               	skipnz
  6968  0E56  0ACD               	incf	___awdiv@dividend+1,f
  6969  0E57  3001               	movlw	1
  6970  0E58  00CE               	movwf	??___awdiv
  6971  0E59  084E               	movf	??___awdiv,w
  6972  0E5A  06D0               	xorwf	___awdiv@sign,f
  6973  0E5B                     l3968:	
  6974  0E5B  01D1               	clrf	___awdiv@quotient
  6975  0E5C  01D2               	clrf	___awdiv@quotient+1
  6976  0E5D  084A               	movf	___awdiv@divisor,w
  6977  0E5E  044B               	iorwf	___awdiv@divisor+1,w
  6978  0E5F  1903               	btfsc	3,2
  6979  0E60  2E8A               	goto	l3990
  6980  0E61  01CF               	clrf	___awdiv@counter
  6981  0E62  0ACF               	incf	___awdiv@counter,f
  6982  0E63                     l3978:	
  6983  0E63  1BCB               	btfsc	___awdiv@divisor+1,7
  6984  0E64  2E6F               	goto	l3980
  6985  0E65  3001               	movlw	1
  6986  0E66                     u2965:	
  6987  0E66  35CA               	lslf	___awdiv@divisor,f
  6988  0E67  0DCB               	rlf	___awdiv@divisor+1,f
  6989  0E68  0B89               	decfsz	9,f
  6990  0E69  2E66               	goto	u2965
  6991  0E6A  3001               	movlw	1
  6992  0E6B  00CE               	movwf	??___awdiv
  6993  0E6C  084E               	movf	??___awdiv,w
  6994  0E6D  07CF               	addwf	___awdiv@counter,f
  6995  0E6E  2E63               	goto	l3978
  6996  0E6F                     l3980:	
  6997  0E6F  3001               	movlw	1
  6998  0E70                     u2985:	
  6999  0E70  35D1               	lslf	___awdiv@quotient,f
  7000  0E71  0DD2               	rlf	___awdiv@quotient+1,f
  7001  0E72  0B89               	decfsz	9,f
  7002  0E73  2E70               	goto	u2985
  7003  0E74  084B               	movf	___awdiv@divisor+1,w
  7004  0E75  024D               	subwf	___awdiv@dividend+1,w
  7005  0E76  1D03               	skipz
  7006  0E77  2E7A               	goto	u2995
  7007  0E78  084A               	movf	___awdiv@divisor,w
  7008  0E79  024C               	subwf	___awdiv@dividend,w
  7009  0E7A                     u2995:	
  7010  0E7A  1C03               	skipc
  7011  0E7B  2E81               	goto	l3986
  7012  0E7C  084A               	movf	___awdiv@divisor,w
  7013  0E7D  02CC               	subwf	___awdiv@dividend,f
  7014  0E7E  084B               	movf	___awdiv@divisor+1,w
  7015  0E7F  3BCD               	subwfb	___awdiv@dividend+1,f
  7016  0E80  1451               	bsf	___awdiv@quotient,0
  7017  0E81                     l3986:	
  7018  0E81  3001               	movlw	1
  7019  0E82                     u3005:	
  7020  0E82  36CB               	lsrf	___awdiv@divisor+1,f
  7021  0E83  0CCA               	rrf	___awdiv@divisor,f
  7022  0E84  0B89               	decfsz	9,f
  7023  0E85  2E82               	goto	u3005
  7024  0E86  3001               	movlw	1
  7025  0E87  02CF               	subwf	___awdiv@counter,f
  7026  0E88  1D03               	btfss	3,2
  7027  0E89  2E6F               	goto	l3980
  7028  0E8A                     l3990:	
  7029  0E8A  0850               	movf	___awdiv@sign,w
  7030  0E8B  1903               	btfsc	3,2
  7031  0E8C  2E92               	goto	l3994
  7032  0E8D  09D1               	comf	___awdiv@quotient,f
  7033  0E8E  09D2               	comf	___awdiv@quotient+1,f
  7034  0E8F  0AD1               	incf	___awdiv@quotient,f
  7035  0E90  1903               	skipnz
  7036  0E91  0AD2               	incf	___awdiv@quotient+1,f
  7037  0E92                     l3994:	
  7038  0E92  0852               	movf	___awdiv@quotient+1,w
  7039  0E93  00CB               	movwf	?___awdiv+1
  7040  0E94  0851               	movf	___awdiv@quotient,w
  7041  0E95  00CA               	movwf	?___awdiv
  7042  0E96  0008               	return
  7043  0E97                     __end_of___awdiv:	
  7044                           
  7045                           	psect	text5
  7046  0B58                     __ptext5:	
  7047 ;; *************** function _SYSTEM_Initialize *****************
  7048 ;; Defined at:
  7049 ;;		line 50 in file "mcc_generated_files/mcc.c"
  7050 ;; Parameters:    Size  Location     Type
  7051 ;;		None
  7052 ;; Auto vars:     Size  Location     Type
  7053 ;;		None
  7054 ;; Return value:  Size  Location     Type
  7055 ;;                  1    wreg      void 
  7056 ;; Registers used:
  7057 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7058 ;; Tracked objects:
  7059 ;;		On entry : 0/0
  7060 ;;		On exit  : 0/0
  7061 ;;		Unchanged: 0/0
  7062 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7063 ;;      Params:         0       0       0       0       0       0       0       0
  7064 ;;      Locals:         0       0       0       0       0       0       0       0
  7065 ;;      Temps:          0       0       0       0       0       0       0       0
  7066 ;;      Totals:         0       0       0       0       0       0       0       0
  7067 ;;Total ram usage:        0 bytes
  7068 ;; Hardware stack levels used:    1
  7069 ;; Hardware stack levels required when called:    9
  7070 ;; This function calls:
  7071 ;;		_ADC_Initialize
  7072 ;;		_MTOUCH_Initialize
  7073 ;;		_OSCILLATOR_Initialize
  7074 ;;		_PIN_MANAGER_Initialize
  7075 ;;		_PMD_Initialize
  7076 ;;		_TMR0_Initialize
  7077 ;;		_TMR1_Initialize
  7078 ;;		_TMR2_Initialize
  7079 ;; This function is called by:
  7080 ;;		_main
  7081 ;; This function uses a non-reentrant model
  7082 ;;
  7083                           
  7084                           
  7085                           ;psect for function _SYSTEM_Initialize
  7086  0B58                     _SYSTEM_Initialize:	
  7087                           
  7088                           ;mcc_generated_files/mcc.c: 52:     PMD_Initialize();
  7089                           
  7090                           ;incstack = 0
  7091                           ; Regs used in _SYSTEM_Initialize: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7092  0B58  3189  218E  318B   	fcall	_PMD_Initialize
  7093                           
  7094                           ;mcc_generated_files/mcc.c: 53:     PIN_MANAGER_Initialize();
  7095  0B5B  318C  240F  318B   	fcall	_PIN_MANAGER_Initialize
  7096                           
  7097                           ;mcc_generated_files/mcc.c: 54:     OSCILLATOR_Initialize();
  7098  0B5E  3189  21B8  318B   	fcall	_OSCILLATOR_Initialize
  7099                           
  7100                           ;mcc_generated_files/mcc.c: 55:     ADC_Initialize();
  7101  0B61  3189  2186  318B   	fcall	_ADC_Initialize
  7102                           
  7103                           ;mcc_generated_files/mcc.c: 56:     TMR2_Initialize();
  7104  0B64  318A  22FB  318B   	fcall	_TMR2_Initialize
  7105                           
  7106                           ;mcc_generated_files/mcc.c: 57:     TMR1_Initialize();
  7107  0B67  318B  23BC  318B   	fcall	_TMR1_Initialize
  7108                           
  7109                           ;mcc_generated_files/mcc.c: 58:     TMR0_Initialize();
  7110  0B6A  318A  22A8  318B   	fcall	_TMR0_Initialize
  7111                           
  7112                           ;mcc_generated_files/mcc.c: 59:     MTOUCH_Initialize();
  7113  0B6D  3189  21AC         	fcall	_MTOUCH_Initialize
  7114  0B6F  0008               	return
  7115  0B70                     __end_of_SYSTEM_Initialize:	
  7116                           
  7117                           	psect	text6
  7118  0AFB                     __ptext6:	
  7119 ;; *************** function _TMR2_Initialize *****************
  7120 ;; Defined at:
  7121 ;;		line 64 in file "mcc_generated_files/tmr2.c"
  7122 ;; Parameters:    Size  Location     Type
  7123 ;;		None
  7124 ;; Auto vars:     Size  Location     Type
  7125 ;;		None
  7126 ;; Return value:  Size  Location     Type
  7127 ;;                  1    wreg      void 
  7128 ;; Registers used:
  7129 ;;		wreg, status,2, status,0, pclath, cstack
  7130 ;; Tracked objects:
  7131 ;;		On entry : 0/0
  7132 ;;		On exit  : 0/0
  7133 ;;		Unchanged: 0/0
  7134 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7135 ;;      Params:         0       0       0       0       0       0       0       0
  7136 ;;      Locals:         0       0       0       0       0       0       0       0
  7137 ;;      Temps:          0       0       0       0       0       0       0       0
  7138 ;;      Totals:         0       0       0       0       0       0       0       0
  7139 ;;Total ram usage:        0 bytes
  7140 ;; Hardware stack levels used:    1
  7141 ;; Hardware stack levels required when called:    5
  7142 ;; This function calls:
  7143 ;;		_TMR2_SetInterruptHandler
  7144 ;; This function is called by:
  7145 ;;		_SYSTEM_Initialize
  7146 ;; This function uses a non-reentrant model
  7147 ;;
  7148                           
  7149                           
  7150                           ;psect for function _TMR2_Initialize
  7151  0AFB                     _TMR2_Initialize:	
  7152                           
  7153                           ;mcc_generated_files/tmr2.c: 69:     T2CLKCON = 0x03;
  7154                           
  7155                           ;incstack = 0
  7156                           ; Regs used in _TMR2_Initialize: [wreg+status,2+status,0+pclath+cstack]
  7157  0AFB  3003               	movlw	3
  7158  0AFC  0145               	movlb	5	; select bank5
  7159  0AFD  0090               	movwf	16	;volatile
  7160                           
  7161                           ;mcc_generated_files/tmr2.c: 72:     T2HLT = 0x00;
  7162  0AFE  018F               	clrf	15	;volatile
  7163                           
  7164                           ;mcc_generated_files/tmr2.c: 75:     T2RST = 0x00;
  7165  0AFF  0191               	clrf	17	;volatile
  7166                           
  7167                           ;mcc_generated_files/tmr2.c: 78:     T2PR = 0xFF;
  7168  0B00  30FF               	movlw	255
  7169  0B01  008D               	movwf	13	;volatile
  7170                           
  7171                           ;mcc_generated_files/tmr2.c: 81:     T2TMR = 0x00;
  7172  0B02  018C               	clrf	12	;volatile
  7173                           
  7174                           ;mcc_generated_files/tmr2.c: 84:     PIR4bits.TMR2IF = 0;
  7175  0B03  014E               	movlb	14	; select bank14
  7176  0B04  1090               	bcf	16,1	;volatile
  7177                           
  7178                           ;mcc_generated_files/tmr2.c: 87:     PIE4bits.TMR2IE = 1;
  7179  0B05  149A               	bsf	26,1	;volatile
  7180                           
  7181                           ;mcc_generated_files/tmr2.c: 90:     TMR2_SetInterruptHandler(TMR2_DefaultInterruptHandl
      +                          er);
  7182  0B06  301E               	movlw	low _TMR2_DefaultInterruptHandler
  7183  0B07  0140               	movlb	0	; select bank0
  7184  0B08  00CA               	movwf	TMR2_SetInterruptHandler@InterruptHandler
  7185  0B09  3009               	movlw	high _TMR2_DefaultInterruptHandler
  7186  0B0A  00CB               	movwf	TMR2_SetInterruptHandler@InterruptHandler+1
  7187  0B0B  3189  2148         	fcall	_TMR2_SetInterruptHandler
  7188                           
  7189                           ;mcc_generated_files/tmr2.c: 93:     T2CON = 0x80;
  7190  0B0D  3080               	movlw	128
  7191  0B0E  0145               	movlb	5	; select bank5
  7192  0B0F  008E               	movwf	14	;volatile
  7193  0B10  0008               	return
  7194  0B11                     __end_of_TMR2_Initialize:	
  7195                           
  7196                           	psect	text7
  7197  0BBC                     __ptext7:	
  7198 ;; *************** function _TMR1_Initialize *****************
  7199 ;; Defined at:
  7200 ;;		line 64 in file "mcc_generated_files/tmr1.c"
  7201 ;; Parameters:    Size  Location     Type
  7202 ;;		None
  7203 ;; Auto vars:     Size  Location     Type
  7204 ;;		None
  7205 ;; Return value:  Size  Location     Type
  7206 ;;                  1    wreg      void 
  7207 ;; Registers used:
  7208 ;;		wreg, status,2, status,0, pclath, cstack
  7209 ;; Tracked objects:
  7210 ;;		On entry : 0/0
  7211 ;;		On exit  : 0/0
  7212 ;;		Unchanged: 0/0
  7213 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7214 ;;      Params:         0       0       0       0       0       0       0       0
  7215 ;;      Locals:         0       0       0       0       0       0       0       0
  7216 ;;      Temps:          0       0       0       0       0       0       0       0
  7217 ;;      Totals:         0       0       0       0       0       0       0       0
  7218 ;;Total ram usage:        0 bytes
  7219 ;; Hardware stack levels used:    1
  7220 ;; Hardware stack levels required when called:    5
  7221 ;; This function calls:
  7222 ;;		_TMR1_SetInterruptHandler
  7223 ;; This function is called by:
  7224 ;;		_SYSTEM_Initialize
  7225 ;; This function uses a non-reentrant model
  7226 ;;
  7227                           
  7228                           
  7229                           ;psect for function _TMR1_Initialize
  7230  0BBC                     _TMR1_Initialize:	
  7231                           
  7232                           ;mcc_generated_files/tmr1.c: 69:     T1GCON = 0x00;
  7233                           
  7234                           ;incstack = 0
  7235                           ; Regs used in _TMR1_Initialize: [wreg+status,2+status,0+pclath+cstack]
  7236  0BBC  0144               	movlb	4	; select bank4
  7237  0BBD  018F               	clrf	15	;volatile
  7238                           
  7239                           ;mcc_generated_files/tmr1.c: 72:     T1GATE = 0x00;
  7240  0BBE  0190               	clrf	16	;volatile
  7241                           
  7242                           ;mcc_generated_files/tmr1.c: 75:     T1CLK = 0x04;
  7243  0BBF  3004               	movlw	4
  7244  0BC0  0091               	movwf	17	;volatile
  7245                           
  7246                           ;mcc_generated_files/tmr1.c: 78:     TMR1H = 0x86;
  7247  0BC1  3086               	movlw	134
  7248  0BC2  008D               	movwf	13	;volatile
  7249                           
  7250                           ;mcc_generated_files/tmr1.c: 81:     TMR1L = 0xE8;
  7251  0BC3  30E8               	movlw	232
  7252  0BC4  008C               	movwf	12	;volatile
  7253                           
  7254                           ;mcc_generated_files/tmr1.c: 84:     timer1ReloadVal=(uint16_t)((TMR1H << 8) | TMR1L);
  7255  0BC5  080D               	movf	13,w	;volatile
  7256  0BC6  00F9               	movwf	_timer1ReloadVal+1	;volatile
  7257  0BC7  080C               	movf	12,w	;volatile
  7258  0BC8  00F8               	movwf	_timer1ReloadVal	;volatile
  7259                           
  7260                           ;mcc_generated_files/tmr1.c: 87:     PIR4bits.TMR1IF = 0;
  7261  0BC9  014E               	movlb	14	; select bank14
  7262  0BCA  1010               	bcf	16,0	;volatile
  7263                           
  7264                           ;mcc_generated_files/tmr1.c: 90:     PIE4bits.TMR1IE = 1;
  7265  0BCB  141A               	bsf	26,0	;volatile
  7266                           
  7267                           ;mcc_generated_files/tmr1.c: 93:     TMR1_SetInterruptHandler(TMR1_DefaultInterruptHandl
      +                          er);
  7268  0BCC  301D               	movlw	low _TMR1_DefaultInterruptHandler
  7269  0BCD  0140               	movlb	0	; select bank0
  7270  0BCE  00CA               	movwf	TMR1_SetInterruptHandler@InterruptHandler
  7271  0BCF  3009               	movlw	high _TMR1_DefaultInterruptHandler
  7272  0BD0  00CB               	movwf	TMR1_SetInterruptHandler@InterruptHandler+1
  7273  0BD1  3189  2154         	fcall	_TMR1_SetInterruptHandler
  7274                           
  7275                           ;mcc_generated_files/tmr1.c: 96:     T1CON = 0x01;
  7276  0BD3  3001               	movlw	1
  7277  0BD4  0144               	movlb	4	; select bank4
  7278  0BD5  008E               	movwf	14	;volatile
  7279  0BD6  0008               	return
  7280  0BD7                     __end_of_TMR1_Initialize:	
  7281                           
  7282                           	psect	text8
  7283  0954                     __ptext8:	
  7284 ;; *************** function _TMR1_SetInterruptHandler *****************
  7285 ;; Defined at:
  7286 ;;		line 178 in file "mcc_generated_files/tmr1.c"
  7287 ;; Parameters:    Size  Location     Type
  7288 ;;  InterruptHan    2    0[BANK0 ] PTR FTN()void 
  7289 ;;		 -> v_1s_service_routine(1), TMR1_DefaultInterruptHandler(1), 
  7290 ;; Auto vars:     Size  Location     Type
  7291 ;;		None
  7292 ;; Return value:  Size  Location     Type
  7293 ;;                  1    wreg      void 
  7294 ;; Registers used:
  7295 ;;		wreg
  7296 ;; Tracked objects:
  7297 ;;		On entry : 0/0
  7298 ;;		On exit  : 0/0
  7299 ;;		Unchanged: 0/0
  7300 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7301 ;;      Params:         0       2       0       0       0       0       0       0
  7302 ;;      Locals:         0       0       0       0       0       0       0       0
  7303 ;;      Temps:          0       0       0       0       0       0       0       0
  7304 ;;      Totals:         0       2       0       0       0       0       0       0
  7305 ;;Total ram usage:        2 bytes
  7306 ;; Hardware stack levels used:    1
  7307 ;; Hardware stack levels required when called:    4
  7308 ;; This function calls:
  7309 ;;		Nothing
  7310 ;; This function is called by:
  7311 ;;		_TMR1_Initialize
  7312 ;;		_main
  7313 ;; This function uses a non-reentrant model
  7314 ;;
  7315                           
  7316                           
  7317                           ;psect for function _TMR1_SetInterruptHandler
  7318  0954                     _TMR1_SetInterruptHandler:	
  7319                           
  7320                           ;mcc_generated_files/tmr1.c: 179:     TMR1_InterruptHandler = InterruptHandler;
  7321                           
  7322                           ;incstack = 0
  7323                           ; Regs used in _TMR1_SetInterruptHandler: [wreg]
  7324  0954  0140               	movlb	0	; select bank0
  7325  0955  084B               	movf	TMR1_SetInterruptHandler@InterruptHandler+1,w
  7326  0956  00B1               	movwf	_TMR1_InterruptHandler+1
  7327  0957  084A               	movf	TMR1_SetInterruptHandler@InterruptHandler,w
  7328  0958  00B0               	movwf	_TMR1_InterruptHandler
  7329  0959  0008               	return
  7330  095A                     __end_of_TMR1_SetInterruptHandler:	
  7331                           
  7332                           	psect	text9
  7333  0AA8                     __ptext9:	
  7334 ;; *************** function _TMR0_Initialize *****************
  7335 ;; Defined at:
  7336 ;;		line 61 in file "mcc_generated_files/tmr0.c"
  7337 ;; Parameters:    Size  Location     Type
  7338 ;;		None
  7339 ;; Auto vars:     Size  Location     Type
  7340 ;;		None
  7341 ;; Return value:  Size  Location     Type
  7342 ;;                  1    wreg      void 
  7343 ;; Registers used:
  7344 ;;		wreg, status,2, status,0, pclath, cstack
  7345 ;; Tracked objects:
  7346 ;;		On entry : 0/0
  7347 ;;		On exit  : 0/0
  7348 ;;		Unchanged: 0/0
  7349 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7350 ;;      Params:         0       0       0       0       0       0       0       0
  7351 ;;      Locals:         0       0       0       0       0       0       0       0
  7352 ;;      Temps:          0       0       0       0       0       0       0       0
  7353 ;;      Totals:         0       0       0       0       0       0       0       0
  7354 ;;Total ram usage:        0 bytes
  7355 ;; Hardware stack levels used:    1
  7356 ;; Hardware stack levels required when called:    5
  7357 ;; This function calls:
  7358 ;;		_TMR0_SetInterruptHandler
  7359 ;; This function is called by:
  7360 ;;		_SYSTEM_Initialize
  7361 ;; This function uses a non-reentrant model
  7362 ;;
  7363                           
  7364                           
  7365                           ;psect for function _TMR0_Initialize
  7366  0AA8                     _TMR0_Initialize:	
  7367                           
  7368                           ;mcc_generated_files/tmr0.c: 66:     T0CON1 = 0x80;
  7369                           
  7370                           ;incstack = 0
  7371                           ; Regs used in _TMR0_Initialize: [wreg+status,2+status,0+pclath+cstack]
  7372  0AA8  3080               	movlw	128
  7373  0AA9  014B               	movlb	11	; select bank11
  7374  0AAA  009F               	movwf	31	;volatile
  7375                           
  7376                           ;mcc_generated_files/tmr0.c: 69:     TMR0H = 0x1E;
  7377  0AAB  301E               	movlw	30
  7378  0AAC  009D               	movwf	29	;volatile
  7379                           
  7380                           ;mcc_generated_files/tmr0.c: 72:     TMR0L = 0x00;
  7381  0AAD  019C               	clrf	28	;volatile
  7382                           
  7383                           ;mcc_generated_files/tmr0.c: 75:     PIR0bits.TMR0IF = 0;
  7384  0AAE  014E               	movlb	14	; select bank14
  7385  0AAF  128C               	bcf	12,5	;volatile
  7386                           
  7387                           ;mcc_generated_files/tmr0.c: 78:     PIE0bits.TMR0IE = 1;
  7388  0AB0  1696               	bsf	22,5	;volatile
  7389                           
  7390                           ;mcc_generated_files/tmr0.c: 81:     TMR0_SetInterruptHandler(TMR0_DefaultInterruptHandl
      +                          er);
  7391  0AB1  301C               	movlw	low _TMR0_DefaultInterruptHandler
  7392  0AB2  0140               	movlb	0	; select bank0
  7393  0AB3  00CA               	movwf	TMR0_SetInterruptHandler@InterruptHandler
  7394  0AB4  3009               	movlw	high _TMR0_DefaultInterruptHandler
  7395  0AB5  00CB               	movwf	TMR0_SetInterruptHandler@InterruptHandler+1
  7396  0AB6  3189  214E         	fcall	_TMR0_SetInterruptHandler
  7397                           
  7398                           ;mcc_generated_files/tmr0.c: 84:     T0CON0 = 0x80;
  7399  0AB8  3080               	movlw	128
  7400  0AB9  014B               	movlb	11	; select bank11
  7401  0ABA  009E               	movwf	30	;volatile
  7402  0ABB  0008               	return
  7403  0ABC                     __end_of_TMR0_Initialize:	
  7404                           
  7405                           	psect	text10
  7406  094E                     __ptext10:	
  7407 ;; *************** function _TMR0_SetInterruptHandler *****************
  7408 ;; Defined at:
  7409 ;;		line 134 in file "mcc_generated_files/tmr0.c"
  7410 ;; Parameters:    Size  Location     Type
  7411 ;;  InterruptHan    2    0[BANK0 ] PTR FTN()void 
  7412 ;;		 -> v_1ms_service_routine(1), TMR0_DefaultInterruptHandler(1), 
  7413 ;; Auto vars:     Size  Location     Type
  7414 ;;		None
  7415 ;; Return value:  Size  Location     Type
  7416 ;;                  1    wreg      void 
  7417 ;; Registers used:
  7418 ;;		wreg
  7419 ;; Tracked objects:
  7420 ;;		On entry : 0/0
  7421 ;;		On exit  : 0/0
  7422 ;;		Unchanged: 0/0
  7423 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7424 ;;      Params:         0       2       0       0       0       0       0       0
  7425 ;;      Locals:         0       0       0       0       0       0       0       0
  7426 ;;      Temps:          0       0       0       0       0       0       0       0
  7427 ;;      Totals:         0       2       0       0       0       0       0       0
  7428 ;;Total ram usage:        2 bytes
  7429 ;; Hardware stack levels used:    1
  7430 ;; Hardware stack levels required when called:    4
  7431 ;; This function calls:
  7432 ;;		Nothing
  7433 ;; This function is called by:
  7434 ;;		_TMR0_Initialize
  7435 ;;		_main
  7436 ;; This function uses a non-reentrant model
  7437 ;;
  7438                           
  7439                           
  7440                           ;psect for function _TMR0_SetInterruptHandler
  7441  094E                     _TMR0_SetInterruptHandler:	
  7442                           
  7443                           ;mcc_generated_files/tmr0.c: 135:     TMR0_InterruptHandler = InterruptHandler;
  7444                           
  7445                           ;incstack = 0
  7446                           ; Regs used in _TMR0_SetInterruptHandler: [wreg]
  7447  094E  0140               	movlb	0	; select bank0
  7448  094F  084B               	movf	TMR0_SetInterruptHandler@InterruptHandler+1,w
  7449  0950  00B5               	movwf	_TMR0_InterruptHandler+1
  7450  0951  084A               	movf	TMR0_SetInterruptHandler@InterruptHandler,w
  7451  0952  00B4               	movwf	_TMR0_InterruptHandler
  7452  0953  0008               	return
  7453  0954                     __end_of_TMR0_SetInterruptHandler:	
  7454                           
  7455                           	psect	text11
  7456  098E                     __ptext11:	
  7457 ;; *************** function _PMD_Initialize *****************
  7458 ;; Defined at:
  7459 ;;		line 82 in file "mcc_generated_files/mcc.c"
  7460 ;; Parameters:    Size  Location     Type
  7461 ;;		None
  7462 ;; Auto vars:     Size  Location     Type
  7463 ;;		None
  7464 ;; Return value:  Size  Location     Type
  7465 ;;                  1    wreg      void 
  7466 ;; Registers used:
  7467 ;;		status,2
  7468 ;; Tracked objects:
  7469 ;;		On entry : 0/0
  7470 ;;		On exit  : 0/0
  7471 ;;		Unchanged: 0/0
  7472 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7473 ;;      Params:         0       0       0       0       0       0       0       0
  7474 ;;      Locals:         0       0       0       0       0       0       0       0
  7475 ;;      Temps:          0       0       0       0       0       0       0       0
  7476 ;;      Totals:         0       0       0       0       0       0       0       0
  7477 ;;Total ram usage:        0 bytes
  7478 ;; Hardware stack levels used:    1
  7479 ;; Hardware stack levels required when called:    4
  7480 ;; This function calls:
  7481 ;;		Nothing
  7482 ;; This function is called by:
  7483 ;;		_SYSTEM_Initialize
  7484 ;; This function uses a non-reentrant model
  7485 ;;
  7486                           
  7487                           
  7488                           ;psect for function _PMD_Initialize
  7489  098E                     _PMD_Initialize:	
  7490                           
  7491                           ;mcc_generated_files/mcc.c: 85:     PMD0 = 0x00;
  7492                           
  7493                           ;incstack = 0
  7494                           ; Regs used in _PMD_Initialize: [status,2]
  7495  098E  014F               	movlb	15	; select bank15
  7496  098F  0196               	clrf	22	;volatile
  7497                           
  7498                           ;mcc_generated_files/mcc.c: 87:     PMD1 = 0x00;
  7499  0990  0197               	clrf	23	;volatile
  7500                           
  7501                           ;mcc_generated_files/mcc.c: 89:     PMD2 = 0x00;
  7502  0991  0198               	clrf	24	;volatile
  7503                           
  7504                           ;mcc_generated_files/mcc.c: 91:     PMD3 = 0x00;
  7505  0992  0199               	clrf	25	;volatile
  7506                           
  7507                           ;mcc_generated_files/mcc.c: 93:     PMD4 = 0x00;
  7508  0993  019A               	clrf	26	;volatile
  7509                           
  7510                           ;mcc_generated_files/mcc.c: 95:     PMD5 = 0x00;
  7511  0994  019B               	clrf	27	;volatile
  7512  0995  0008               	return
  7513  0996                     __end_of_PMD_Initialize:	
  7514                           
  7515                           	psect	text12
  7516  0C0F                     __ptext12:	
  7517 ;; *************** function _PIN_MANAGER_Initialize *****************
  7518 ;; Defined at:
  7519 ;;		line 55 in file "mcc_generated_files/pin_manager.c"
  7520 ;; Parameters:    Size  Location     Type
  7521 ;;		None
  7522 ;; Auto vars:     Size  Location     Type
  7523 ;;		None
  7524 ;; Return value:  Size  Location     Type
  7525 ;;                  1    wreg      void 
  7526 ;; Registers used:
  7527 ;;		wreg, status,2
  7528 ;; Tracked objects:
  7529 ;;		On entry : 0/0
  7530 ;;		On exit  : 0/0
  7531 ;;		Unchanged: 0/0
  7532 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7533 ;;      Params:         0       0       0       0       0       0       0       0
  7534 ;;      Locals:         0       0       0       0       0       0       0       0
  7535 ;;      Temps:          0       0       0       0       0       0       0       0
  7536 ;;      Totals:         0       0       0       0       0       0       0       0
  7537 ;;Total ram usage:        0 bytes
  7538 ;; Hardware stack levels used:    1
  7539 ;; Hardware stack levels required when called:    4
  7540 ;; This function calls:
  7541 ;;		Nothing
  7542 ;; This function is called by:
  7543 ;;		_SYSTEM_Initialize
  7544 ;; This function uses a non-reentrant model
  7545 ;;
  7546                           
  7547                           
  7548                           ;psect for function _PIN_MANAGER_Initialize
  7549  0C0F                     _PIN_MANAGER_Initialize:	
  7550                           
  7551                           ;mcc_generated_files/pin_manager.c: 60:     LATA = 0x00;
  7552                           
  7553                           ;incstack = 0
  7554                           ; Regs used in _PIN_MANAGER_Initialize: [wreg+status,2]
  7555  0C0F  0140               	movlb	0	; select bank0
  7556  0C10  0198               	clrf	24	;volatile
  7557                           
  7558                           ;mcc_generated_files/pin_manager.c: 61:     LATB = 0x00;
  7559  0C11  0199               	clrf	25	;volatile
  7560                           
  7561                           ;mcc_generated_files/pin_manager.c: 62:     LATC = 0x00;
  7562  0C12  019A               	clrf	26	;volatile
  7563                           
  7564                           ;mcc_generated_files/pin_manager.c: 67:     TRISA = 0x1C;
  7565  0C13  301C               	movlw	28
  7566  0C14  0092               	movwf	18	;volatile
  7567                           
  7568                           ;mcc_generated_files/pin_manager.c: 68:     TRISB = 0x00;
  7569  0C15  0193               	clrf	19	;volatile
  7570                           
  7571                           ;mcc_generated_files/pin_manager.c: 69:     TRISC = 0x00;
  7572  0C16  0194               	clrf	20	;volatile
  7573                           
  7574                           ;mcc_generated_files/pin_manager.c: 74:     ANSELC = 0x00;
  7575  0C17  017E               	movlb	62	; select bank62
  7576  0C18  01CE               	clrf	78	;volatile
  7577                           
  7578                           ;mcc_generated_files/pin_manager.c: 75:     ANSELB = 0x00;
  7579  0C19  01C3               	clrf	67	;volatile
  7580                           
  7581                           ;mcc_generated_files/pin_manager.c: 76:     ANSELA = 0x14;
  7582  0C1A  3014               	movlw	20
  7583  0C1B  00B8               	movwf	56	;volatile
  7584                           
  7585                           ;mcc_generated_files/pin_manager.c: 81:     WPUB = 0x00;
  7586  0C1C  01C4               	clrf	68	;volatile
  7587                           
  7588                           ;mcc_generated_files/pin_manager.c: 82:     WPUA = 0x00;
  7589  0C1D  01B9               	clrf	57	;volatile
  7590                           
  7591                           ;mcc_generated_files/pin_manager.c: 83:     WPUC = 0x00;
  7592  0C1E  01CF               	clrf	79	;volatile
  7593                           
  7594                           ;mcc_generated_files/pin_manager.c: 88:     ODCONA = 0x00;
  7595  0C1F  01BA               	clrf	58	;volatile
  7596                           
  7597                           ;mcc_generated_files/pin_manager.c: 89:     ODCONB = 0x00;
  7598  0C20  01C5               	clrf	69	;volatile
  7599                           
  7600                           ;mcc_generated_files/pin_manager.c: 90:     ODCONC = 0x00;
  7601  0C21  01D0               	clrf	80	;volatile
  7602                           
  7603                           ;mcc_generated_files/pin_manager.c: 95:     SLRCONA = 0x3F;
  7604  0C22  303F               	movlw	63
  7605  0C23  00BB               	movwf	59	;volatile
  7606                           
  7607                           ;mcc_generated_files/pin_manager.c: 96:     SLRCONB = 0x00;
  7608  0C24  01C6               	clrf	70	;volatile
  7609                           
  7610                           ;mcc_generated_files/pin_manager.c: 97:     SLRCONC = 0x3F;
  7611  0C25  303F               	movlw	63
  7612  0C26  00D1               	movwf	81	;volatile
  7613                           
  7614                           ;mcc_generated_files/pin_manager.c: 102:     INLVLA = 0x3F;
  7615  0C27  303F               	movlw	63
  7616  0C28  00BC               	movwf	60	;volatile
  7617                           
  7618                           ;mcc_generated_files/pin_manager.c: 103:     INLVLB = 0x00;
  7619  0C29  01C7               	clrf	71	;volatile
  7620                           
  7621                           ;mcc_generated_files/pin_manager.c: 104:     INLVLC = 0x3F;
  7622  0C2A  303F               	movlw	63
  7623  0C2B  00D2               	movwf	82	;volatile
  7624  0C2C  0008               	return
  7625  0C2D                     __end_of_PIN_MANAGER_Initialize:	
  7626                           
  7627                           	psect	text13
  7628  09B8                     __ptext13:	
  7629 ;; *************** function _OSCILLATOR_Initialize *****************
  7630 ;; Defined at:
  7631 ;;		line 62 in file "mcc_generated_files/mcc.c"
  7632 ;; Parameters:    Size  Location     Type
  7633 ;;		None
  7634 ;; Auto vars:     Size  Location     Type
  7635 ;;		None
  7636 ;; Return value:  Size  Location     Type
  7637 ;;                  1    wreg      void 
  7638 ;; Registers used:
  7639 ;;		wreg, status,2
  7640 ;; Tracked objects:
  7641 ;;		On entry : 0/0
  7642 ;;		On exit  : 0/0
  7643 ;;		Unchanged: 0/0
  7644 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7645 ;;      Params:         0       0       0       0       0       0       0       0
  7646 ;;      Locals:         0       0       0       0       0       0       0       0
  7647 ;;      Temps:          0       0       0       0       0       0       0       0
  7648 ;;      Totals:         0       0       0       0       0       0       0       0
  7649 ;;Total ram usage:        0 bytes
  7650 ;; Hardware stack levels used:    1
  7651 ;; Hardware stack levels required when called:    4
  7652 ;; This function calls:
  7653 ;;		Nothing
  7654 ;; This function is called by:
  7655 ;;		_SYSTEM_Initialize
  7656 ;; This function uses a non-reentrant model
  7657 ;;
  7658                           
  7659                           
  7660                           ;psect for function _OSCILLATOR_Initialize
  7661  09B8                     _OSCILLATOR_Initialize:	
  7662                           
  7663                           ;mcc_generated_files/mcc.c: 65:     OSCCON1 = 0x10;
  7664                           
  7665                           ;incstack = 0
  7666                           ; Regs used in _OSCILLATOR_Initialize: [wreg+status,2]
  7667  09B8  3010               	movlw	16
  7668  09B9  0151               	movlb	17	; select bank17
  7669  09BA  008D               	movwf	13	;volatile
  7670                           
  7671                           ;mcc_generated_files/mcc.c: 67:     OSCCON3 = 0x00;
  7672  09BB  018F               	clrf	15	;volatile
  7673                           
  7674                           ;mcc_generated_files/mcc.c: 69:     OSCEN = 0x00;
  7675  09BC  0191               	clrf	17	;volatile
  7676                           
  7677                           ;mcc_generated_files/mcc.c: 71:     OSCFRQ = 0x03;
  7678  09BD  3003               	movlw	3
  7679  09BE  0093               	movwf	19	;volatile
  7680                           
  7681                           ;mcc_generated_files/mcc.c: 73:     OSCSTAT = 0x00;
  7682  09BF  0190               	clrf	16	;volatile
  7683                           
  7684                           ;mcc_generated_files/mcc.c: 75:     OSCTUNE = 0x00;
  7685  09C0  0192               	clrf	18	;volatile
  7686  09C1                     l590:	
  7687                           ;mcc_generated_files/mcc.c: 78:     {;mcc_generated_files/mcc.c: 79:     }
  7688                           
  7689                           
  7690                           ;mcc_generated_files/mcc.c: 77:     while(PLLR == 0)
  7691  09C1  1810               	btfsc	16,0	;volatile
  7692  09C2  0008               	return
  7693  09C3  29C1               	goto	l590
  7694  09C4                     __end_of_OSCILLATOR_Initialize:	
  7695                           
  7696                           	psect	text14
  7697  09AC                     __ptext14:	
  7698 ;; *************** function _MTOUCH_Initialize *****************
  7699 ;; Defined at:
  7700 ;;		line 80 in file "mcc_generated_files/mtouch/mtouch.c"
  7701 ;; Parameters:    Size  Location     Type
  7702 ;;		None
  7703 ;; Auto vars:     Size  Location     Type
  7704 ;;		None
  7705 ;; Return value:  Size  Location     Type
  7706 ;;                  1    wreg      void 
  7707 ;; Registers used:
  7708 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7709 ;; Tracked objects:
  7710 ;;		On entry : 0/0
  7711 ;;		On exit  : 0/0
  7712 ;;		Unchanged: 0/0
  7713 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7714 ;;      Params:         0       0       0       0       0       0       0       0
  7715 ;;      Locals:         0       0       0       0       0       0       0       0
  7716 ;;      Temps:          0       0       0       0       0       0       0       0
  7717 ;;      Totals:         0       0       0       0       0       0       0       0
  7718 ;;Total ram usage:        0 bytes
  7719 ;; Hardware stack levels used:    1
  7720 ;; Hardware stack levels required when called:    8
  7721 ;; This function calls:
  7722 ;;		_MTOUCH_Button_InitializeAll
  7723 ;;		_MTOUCH_Sensor_InitializeAll
  7724 ;;		_MTOUCH_Sensor_Sampled_ResetAll
  7725 ;;		_MTOUCH_Sensor_Scan_Initialize
  7726 ;; This function is called by:
  7727 ;;		_SYSTEM_Initialize
  7728 ;; This function uses a non-reentrant model
  7729 ;;
  7730                           
  7731                           
  7732                           ;psect for function _MTOUCH_Initialize
  7733  09AC                     _MTOUCH_Initialize:	
  7734                           
  7735                           ;mcc_generated_files/mtouch/mtouch.c: 82:     MTOUCH_Sensor_InitializeAll();
  7736                           
  7737                           ;incstack = 0
  7738                           ; Regs used in _MTOUCH_Initialize: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7739  09AC  318A  2218  3189   	fcall	_MTOUCH_Sensor_InitializeAll
  7740                           
  7741                           ;mcc_generated_files/mtouch/mtouch.c: 83:     MTOUCH_Button_InitializeAll();
  7742  09AF  318B  23F3  3189   	fcall	_MTOUCH_Button_InitializeAll
  7743                           
  7744                           ;mcc_generated_files/mtouch/mtouch.c: 84:     MTOUCH_Sensor_Sampled_ResetAll();
  7745  09B2  318A  22D1  3189   	fcall	_MTOUCH_Sensor_Sampled_ResetAll
  7746                           
  7747                           ;mcc_generated_files/mtouch/mtouch.c: 85:     MTOUCH_Sensor_Scan_Initialize();
  7748  09B5  3189  2196         	fcall	_MTOUCH_Sensor_Scan_Initialize
  7749  09B7  0008               	return
  7750  09B8                     __end_of_MTOUCH_Initialize:	
  7751                           
  7752                           	psect	text15
  7753  0A18                     __ptext15:	
  7754 ;; *************** function _MTOUCH_Sensor_InitializeAll *****************
  7755 ;; Defined at:
  7756 ;;		line 163 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  7757 ;; Parameters:    Size  Location     Type
  7758 ;;		None
  7759 ;; Auto vars:     Size  Location     Type
  7760 ;;  sensor          1    9[BANK0 ] enum E6808
  7761 ;; Return value:  Size  Location     Type
  7762 ;;                  1    wreg      void 
  7763 ;; Registers used:
  7764 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7765 ;; Tracked objects:
  7766 ;;		On entry : 0/0
  7767 ;;		On exit  : 0/0
  7768 ;;		Unchanged: 0/0
  7769 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7770 ;;      Params:         0       0       0       0       0       0       0       0
  7771 ;;      Locals:         0       1       0       0       0       0       0       0
  7772 ;;      Temps:          0       1       0       0       0       0       0       0
  7773 ;;      Totals:         0       2       0       0       0       0       0       0
  7774 ;;Total ram usage:        2 bytes
  7775 ;; Hardware stack levels used:    1
  7776 ;; Hardware stack levels required when called:    7
  7777 ;; This function calls:
  7778 ;;		_MTOUCH_Sensor_Initialize
  7779 ;; This function is called by:
  7780 ;;		_MTOUCH_Initialize
  7781 ;; This function uses a non-reentrant model
  7782 ;;
  7783                           
  7784                           
  7785                           ;psect for function _MTOUCH_Sensor_InitializeAll
  7786  0A18                     _MTOUCH_Sensor_InitializeAll:	
  7787                           
  7788                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 165:     enum mtouch_sensor_names sensor;;m
      +                          cc_generated_files/mtouch/mtouch_sensor.c: 166:     for (sensor = 0; sensor < 1u; sensor
      +                          ++)
  7789                           
  7790                           ;incstack = 0
  7791                           ; Regs used in _MTOUCH_Sensor_InitializeAll: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+
      +                          cstack]
  7792  0A18  0140               	movlb	0	; select bank0
  7793  0A19  01D3               	clrf	MTOUCH_Sensor_InitializeAll@sensor
  7794  0A1A                     l3424:	
  7795                           
  7796                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 167:     {;mcc_generated_files/mtouch/mtouc
      +                          h_sensor.c: 168:         MTOUCH_Sensor_Initialize(sensor);
  7797  0A1A  0853               	movf	MTOUCH_Sensor_InitializeAll@sensor,w
  7798  0A1B  318A  226D  318A   	fcall	_MTOUCH_Sensor_Initialize
  7799                           
  7800                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 169:     }
  7801  0A1E  3001               	movlw	1
  7802  0A1F  0140               	movlb	0	; select bank0
  7803  0A20  00D2               	movwf	??_MTOUCH_Sensor_InitializeAll
  7804  0A21  0852               	movf	??_MTOUCH_Sensor_InitializeAll,w
  7805  0A22  07D3               	addwf	MTOUCH_Sensor_InitializeAll@sensor,f
  7806  0A23  0853               	movf	MTOUCH_Sensor_InitializeAll@sensor,w
  7807  0A24  1D03               	btfss	3,2
  7808  0A25  0008               	return
  7809  0A26  2A1A               	goto	l3424
  7810  0A27                     __end_of_MTOUCH_Sensor_InitializeAll:	
  7811                           
  7812                           	psect	text16
  7813  0A6D                     __ptext16:	
  7814 ;; *************** function _MTOUCH_Sensor_Initialize *****************
  7815 ;; Defined at:
  7816 ;;		line 149 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  7817 ;; Parameters:    Size  Location     Type
  7818 ;;  sensor          1    wreg     enum E6808
  7819 ;; Auto vars:     Size  Location     Type
  7820 ;;  sensor          1    7[BANK0 ] enum E6808
  7821 ;; Return value:  Size  Location     Type
  7822 ;;                  1    wreg      enum E6810
  7823 ;; Registers used:
  7824 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7825 ;; Tracked objects:
  7826 ;;		On entry : 0/0
  7827 ;;		On exit  : 0/0
  7828 ;;		Unchanged: 0/0
  7829 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7830 ;;      Params:         0       0       0       0       0       0       0       0
  7831 ;;      Locals:         0       1       0       0       0       0       0       0
  7832 ;;      Temps:          0       1       0       0       0       0       0       0
  7833 ;;      Totals:         0       2       0       0       0       0       0       0
  7834 ;;Total ram usage:        2 bytes
  7835 ;; Hardware stack levels used:    1
  7836 ;; Hardware stack levels required when called:    6
  7837 ;; This function calls:
  7838 ;;		_MTOUCH_Sensor_Enable
  7839 ;;		_Sensor_Sampled_Reset
  7840 ;;		___bmul
  7841 ;; This function is called by:
  7842 ;;		_MTOUCH_Sensor_InitializeAll
  7843 ;; This function uses a non-reentrant model
  7844 ;;
  7845                           
  7846                           
  7847                           ;psect for function _MTOUCH_Sensor_Initialize
  7848  0A6D                     _MTOUCH_Sensor_Initialize:	
  7849                           
  7850                           ;incstack = 0
  7851                           ; Regs used in _MTOUCH_Sensor_Initialize: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cst
      +                          ack]
  7852                           ;MTOUCH_Sensor_Initialize@sensor stored from wreg
  7853  0A6D  0140               	movlb	0	; select bank0
  7854  0A6E  00D1               	movwf	MTOUCH_Sensor_Initialize@sensor
  7855                           
  7856                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 149: enum mtouch_sensor_error MTOUCH_Sensor
      +                          _Initialize(enum mtouch_sensor_names sensor);mcc_generated_files/mtouch/mtouch_sensor.c:
      +                           150: {;mcc_generated_files/mtouch/mtouch_sensor.c: 151:     MTOUCH_Sensor_Enable(sensor
      +                          );
  7857  0A6F  0851               	movf	MTOUCH_Sensor_Initialize@sensor,w
  7858  0A70  318A  2238  318A   	fcall	_MTOUCH_Sensor_Enable
  7859                           
  7860                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 152:     Sensor_Sampled_Reset(&mtouch_senso
      +                          r[sensor]);
  7861  0A73  3009               	movlw	9
  7862  0A74  0140               	movlb	0	; select bank0
  7863  0A75  00D0               	movwf	??_MTOUCH_Sensor_Initialize
  7864  0A76  0850               	movf	??_MTOUCH_Sensor_Initialize,w
  7865  0A77  00CA               	movwf	___bmul@multiplicand
  7866  0A78  0851               	movf	MTOUCH_Sensor_Initialize@sensor,w
  7867  0A79  318A  2249  318A   	fcall	___bmul
  7868  0A7C  3EAC               	addlw	(low (_mtouch_sensor| 0))& (0+255)
  7869  0A7D  3189  217E         	fcall	_Sensor_Sampled_Reset
  7870  0A7F  0008               	return
  7871  0A80                     __end_of_MTOUCH_Sensor_Initialize:	
  7872                           
  7873                           	psect	text17
  7874  0A38                     __ptext17:	
  7875 ;; *************** function _MTOUCH_Sensor_Enable *****************
  7876 ;; Defined at:
  7877 ;;		line 559 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  7878 ;; Parameters:    Size  Location     Type
  7879 ;;  sensor          1    wreg     enum E6808
  7880 ;; Auto vars:     Size  Location     Type
  7881 ;;  sensor          1    5[BANK0 ] enum E6808
  7882 ;; Return value:  Size  Location     Type
  7883 ;;                  1    wreg      void 
  7884 ;; Registers used:
  7885 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7886 ;; Tracked objects:
  7887 ;;		On entry : 0/0
  7888 ;;		On exit  : 0/0
  7889 ;;		Unchanged: 0/0
  7890 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7891 ;;      Params:         0       0       0       0       0       0       0       0
  7892 ;;      Locals:         0       1       0       0       0       0       0       0
  7893 ;;      Temps:          0       1       0       0       0       0       0       0
  7894 ;;      Totals:         0       2       0       0       0       0       0       0
  7895 ;;Total ram usage:        2 bytes
  7896 ;; Hardware stack levels used:    1
  7897 ;; Hardware stack levels required when called:    5
  7898 ;; This function calls:
  7899 ;;		___bmul
  7900 ;; This function is called by:
  7901 ;;		_MTOUCH_Sensor_Initialize
  7902 ;; This function uses a non-reentrant model
  7903 ;;
  7904                           
  7905                           
  7906                           ;psect for function _MTOUCH_Sensor_Enable
  7907  0A38                     _MTOUCH_Sensor_Enable:	
  7908                           
  7909                           ;incstack = 0
  7910                           ; Regs used in _MTOUCH_Sensor_Enable: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7911                           ;MTOUCH_Sensor_Enable@sensor stored from wreg
  7912  0A38  0140               	movlb	0	; select bank0
  7913  0A39  00CF               	movwf	MTOUCH_Sensor_Enable@sensor
  7914                           
  7915                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 559: void MTOUCH_Sensor_Enable(enum mtouch_
      +                          sensor_names sensor);mcc_generated_files/mtouch/mtouch_sensor.c: 560: {;mcc_generated_fi
      +                          les/mtouch/mtouch_sensor.c: 561:     if(sensor < 1u)
  7916  0A3A  084F               	movf	MTOUCH_Sensor_Enable@sensor,w
  7917  0A3B  1D03               	btfss	3,2
  7918  0A3C  0008               	return
  7919                           
  7920                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 562:         mtouch_sensor[sensor].enabled 
      +                          = 1;
  7921  0A3D  3009               	movlw	9
  7922  0A3E  00CE               	movwf	??_MTOUCH_Sensor_Enable
  7923  0A3F  084E               	movf	??_MTOUCH_Sensor_Enable,w
  7924  0A40  00CA               	movwf	___bmul@multiplicand
  7925  0A41  084F               	movf	MTOUCH_Sensor_Enable@sensor,w
  7926  0A42  318A  2249         	fcall	___bmul
  7927  0A44  3EB4               	addlw	(low ((_mtouch_sensor| 0+8)))& (0+255)
  7928  0A45  0086               	movwf	6
  7929  0A46  0187               	clrf	7
  7930  0A47  1401               	bsf	1,0
  7931  0A48  0008               	return
  7932  0A49                     __end_of_MTOUCH_Sensor_Enable:	
  7933                           
  7934                           	psect	text18
  7935  0BF3                     __ptext18:	
  7936 ;; *************** function _MTOUCH_Button_InitializeAll *****************
  7937 ;; Defined at:
  7938 ;;		line 155 in file "mcc_generated_files/mtouch/mtouch_button.c"
  7939 ;; Parameters:    Size  Location     Type
  7940 ;;		None
  7941 ;; Auto vars:     Size  Location     Type
  7942 ;;  button          1   11[BANK0 ] enum E6960
  7943 ;; Return value:  Size  Location     Type
  7944 ;;                  1    wreg      void 
  7945 ;; Registers used:
  7946 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7947 ;; Tracked objects:
  7948 ;;		On entry : 0/0
  7949 ;;		On exit  : 0/0
  7950 ;;		Unchanged: 0/0
  7951 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7952 ;;      Params:         0       0       0       0       0       0       0       0
  7953 ;;      Locals:         0       1       0       0       0       0       0       0
  7954 ;;      Temps:          0       1       0       0       0       0       0       0
  7955 ;;      Totals:         0       2       0       0       0       0       0       0
  7956 ;;Total ram usage:        2 bytes
  7957 ;; Hardware stack levels used:    1
  7958 ;; Hardware stack levels required when called:    6
  7959 ;; This function calls:
  7960 ;;		_MTOUCH_Button_Initialize
  7961 ;;		_memcpy
  7962 ;; This function is called by:
  7963 ;;		_MTOUCH_Initialize
  7964 ;; This function uses a non-reentrant model
  7965 ;;
  7966                           
  7967                           
  7968                           ;psect for function _MTOUCH_Button_InitializeAll
  7969  0BF3                     _MTOUCH_Button_InitializeAll:	
  7970                           
  7971                           ;mcc_generated_files/mtouch/mtouch_button.c: 157:     enum mtouch_button_names button;;m
      +                          cc_generated_files/mtouch/mtouch_button.c: 159:     memcpy(mtouch_button,mtouch_button_i
      +                          nit,sizeof(mtouch_button_init));
  7972                           
  7973                           ;incstack = 0
  7974                           ; Regs used in _MTOUCH_Button_InitializeAll: [wreg-fsr1h+status,2+status,0+pclath+cstack
      +                          ]
  7975  0BF3  300F               	movlw	low (_mtouch_button_init| (0+32768))
  7976  0BF4  0140               	movlb	0	; select bank0
  7977  0BF5  00CA               	movwf	memcpy@s1
  7978  0BF6  3088               	movlw	high (_mtouch_button_init| (0+32768))
  7979  0BF7  00CB               	movwf	memcpy@s1+1
  7980  0BF8  3010               	movlw	16
  7981  0BF9  00CC               	movwf	memcpy@n
  7982  0BFA  3000               	movlw	0
  7983  0BFB  00CD               	movwf	memcpy@n+1
  7984  0BFC  30B9               	movlw	(low (_mtouch_button| 0))& (0+255)
  7985  0BFD  318C  24BA  318B   	fcall	_memcpy
  7986                           
  7987                           ;mcc_generated_files/mtouch/mtouch_button.c: 161:     for (button = 0; button < 1u; butt
      +                          on++)
  7988  0C00  0140               	movlb	0	; select bank0
  7989  0C01  01D5               	clrf	MTOUCH_Button_InitializeAll@button
  7990  0C02                     l3476:	
  7991                           
  7992                           ;mcc_generated_files/mtouch/mtouch_button.c: 162:     {;mcc_generated_files/mtouch/mtouc
      +                          h_button.c: 163:         MTOUCH_Button_Initialize(button);
  7993  0C02  0855               	movf	MTOUCH_Button_InitializeAll@button,w
  7994  0C03  318D  2541  318B   	fcall	_MTOUCH_Button_Initialize
  7995                           
  7996                           ;mcc_generated_files/mtouch/mtouch_button.c: 164:     }
  7997  0C06  3001               	movlw	1
  7998  0C07  0140               	movlb	0	; select bank0
  7999  0C08  00D4               	movwf	??_MTOUCH_Button_InitializeAll
  8000  0C09  0854               	movf	??_MTOUCH_Button_InitializeAll,w
  8001  0C0A  07D5               	addwf	MTOUCH_Button_InitializeAll@button,f
  8002  0C0B  0855               	movf	MTOUCH_Button_InitializeAll@button,w
  8003  0C0C  1D03               	btfss	3,2
  8004  0C0D  0008               	return
  8005  0C0E  2C02               	goto	l3476
  8006  0C0F                     __end_of_MTOUCH_Button_InitializeAll:	
  8007                           
  8008                           	psect	text19
  8009  0CBA                     __ptext19:	
  8010 ;; *************** function _memcpy *****************
  8011 ;; Defined at:
  8012 ;;		line 4 in file "C:\Program Files2\Microchip\xc8\v2.05\pic\sources\c99\common\memcpy.c"
  8013 ;; Parameters:    Size  Location     Type
  8014 ;;  d1              1    wreg     PTR void 
  8015 ;;		 -> mtouch_button(16), 
  8016 ;;  s1              2    0[BANK0 ] PTR const void 
  8017 ;;		 -> mtouch_button_init(16), 
  8018 ;;  n               2    2[BANK0 ] unsigned int 
  8019 ;; Auto vars:     Size  Location     Type
  8020 ;;  d1              1    8[BANK0 ] PTR void 
  8021 ;;		 -> mtouch_button(16), 
  8022 ;;  s               2    5[BANK0 ] PTR const unsigned char 
  8023 ;;		 -> mtouch_button_init(16), 
  8024 ;;  d               1    9[BANK0 ] PTR unsigned char 
  8025 ;;		 -> mtouch_button(16), 
  8026 ;;  tmp             1    7[BANK0 ] unsigned char 
  8027 ;; Return value:  Size  Location     Type
  8028 ;;                  1    wreg      PTR void 
  8029 ;; Registers used:
  8030 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath
  8031 ;; Tracked objects:
  8032 ;;		On entry : 0/0
  8033 ;;		On exit  : 0/0
  8034 ;;		Unchanged: 0/0
  8035 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8036 ;;      Params:         0       4       0       0       0       0       0       0
  8037 ;;      Locals:         0       5       0       0       0       0       0       0
  8038 ;;      Temps:          0       1       0       0       0       0       0       0
  8039 ;;      Totals:         0      10       0       0       0       0       0       0
  8040 ;;Total ram usage:       10 bytes
  8041 ;; Hardware stack levels used:    1
  8042 ;; Hardware stack levels required when called:    4
  8043 ;; This function calls:
  8044 ;;		Nothing
  8045 ;; This function is called by:
  8046 ;;		_MTOUCH_Button_InitializeAll
  8047 ;; This function uses a non-reentrant model
  8048 ;;
  8049                           
  8050                           
  8051                           ;psect for function _memcpy
  8052  0CBA                     _memcpy:	
  8053                           
  8054                           ;incstack = 0
  8055                           ; Regs used in _memcpy: [wreg-fsr1h+status,2+status,0+pclath]
  8056                           ;memcpy@d1 stored from wreg
  8057  0CBA  0140               	movlb	0	; select bank0
  8058  0CBB  00D2               	movwf	memcpy@d1
  8059  0CBC  084B               	movf	memcpy@s1+1,w
  8060  0CBD  00D0               	movwf	memcpy@s+1
  8061  0CBE  084A               	movf	memcpy@s1,w
  8062  0CBF  00CF               	movwf	memcpy@s
  8063  0CC0  0852               	movf	memcpy@d1,w
  8064  0CC1  00CE               	movwf	??_memcpy
  8065  0CC2  084E               	movf	??_memcpy,w
  8066  0CC3  00D3               	movwf	memcpy@d
  8067  0CC4                     l3326:	
  8068  0CC4  3001               	movlw	1
  8069  0CC5  02CC               	subwf	memcpy@n,f
  8070  0CC6  3000               	movlw	0
  8071  0CC7  3BCD               	subwfb	memcpy@n+1,f
  8072  0CC8  0A4C               	incf	memcpy@n,w
  8073  0CC9  1903               	btfsc	3,2
  8074  0CCA  0A4D               	incf	memcpy@n+1,w
  8075  0CCB  1903               	btfsc	3,2
  8076  0CCC  0008               	return
  8077  0CCD  084F               	movf	memcpy@s,w
  8078  0CCE  0084               	movwf	4
  8079  0CCF  0850               	movf	memcpy@s+1,w
  8080  0CD0  0085               	movwf	5
  8081  0CD1  0800               	movf	0,w	;code access
  8082  0CD2  00CE               	movwf	??_memcpy
  8083  0CD3  084E               	movf	??_memcpy,w
  8084  0CD4  00D1               	movwf	memcpy@tmp
  8085  0CD5  3001               	movlw	1
  8086  0CD6  07CF               	addwf	memcpy@s,f
  8087  0CD7  3000               	movlw	0
  8088  0CD8  3DD0               	addwfc	memcpy@s+1,f
  8089  0CD9  0851               	movf	memcpy@tmp,w
  8090  0CDA  00CE               	movwf	??_memcpy
  8091  0CDB  0853               	movf	memcpy@d,w
  8092  0CDC  0086               	movwf	6
  8093  0CDD  0187               	clrf	7
  8094  0CDE  084E               	movf	??_memcpy,w
  8095  0CDF  0081               	movwf	1
  8096  0CE0  3001               	movlw	1
  8097  0CE1  00CE               	movwf	??_memcpy
  8098  0CE2  084E               	movf	??_memcpy,w
  8099  0CE3  07D3               	addwf	memcpy@d,f
  8100  0CE4  2CC4               	goto	l3326
  8101  0CE5                     __end_of_memcpy:	
  8102                           
  8103                           	psect	text20
  8104  0986                     __ptext20:	
  8105 ;; *************** function _ADC_Initialize *****************
  8106 ;; Defined at:
  8107 ;;		line 65 in file "mcc_generated_files/adc.c"
  8108 ;; Parameters:    Size  Location     Type
  8109 ;;		None
  8110 ;; Auto vars:     Size  Location     Type
  8111 ;;		None
  8112 ;; Return value:  Size  Location     Type
  8113 ;;                  1    wreg      void 
  8114 ;; Registers used:
  8115 ;;		wreg, status,2
  8116 ;; Tracked objects:
  8117 ;;		On entry : 0/0
  8118 ;;		On exit  : 0/0
  8119 ;;		Unchanged: 0/0
  8120 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8121 ;;      Params:         0       0       0       0       0       0       0       0
  8122 ;;      Locals:         0       0       0       0       0       0       0       0
  8123 ;;      Temps:          0       0       0       0       0       0       0       0
  8124 ;;      Totals:         0       0       0       0       0       0       0       0
  8125 ;;Total ram usage:        0 bytes
  8126 ;; Hardware stack levels used:    1
  8127 ;; Hardware stack levels required when called:    4
  8128 ;; This function calls:
  8129 ;;		Nothing
  8130 ;; This function is called by:
  8131 ;;		_SYSTEM_Initialize
  8132 ;; This function uses a non-reentrant model
  8133 ;;
  8134                           
  8135                           
  8136                           ;psect for function _ADC_Initialize
  8137  0986                     _ADC_Initialize:	
  8138                           
  8139                           ;mcc_generated_files/adc.c: 70:     ADCON0 = 0x01;
  8140                           
  8141                           ;incstack = 0
  8142                           ; Regs used in _ADC_Initialize: [wreg+status,2]
  8143  0986  3001               	movlw	1
  8144  0987  0141               	movlb	1	; select bank1
  8145  0988  009D               	movwf	29	;volatile
  8146                           
  8147                           ;mcc_generated_files/adc.c: 73:     ADCON1 = 0xD0;
  8148  0989  30D0               	movlw	208
  8149  098A  009E               	movwf	30	;volatile
  8150                           
  8151                           ;mcc_generated_files/adc.c: 76:     ADRESL = 0x00;
  8152  098B  019B               	clrf	27	;volatile
  8153                           
  8154                           ;mcc_generated_files/adc.c: 79:     ADRESH = 0x00;
  8155  098C  019C               	clrf	28	;volatile
  8156  098D  0008               	return
  8157  098E                     __end_of_ADC_Initialize:	
  8158                           
  8159                           	psect	text21
  8160  0BD7                     __ptext21:	
  8161 ;; *************** function _MTOUCH_Service_Mainloop *****************
  8162 ;; Defined at:
  8163 ;;		line 95 in file "mcc_generated_files/mtouch/mtouch.c"
  8164 ;; Parameters:    Size  Location     Type
  8165 ;;		None
  8166 ;; Auto vars:     Size  Location     Type
  8167 ;;		None
  8168 ;; Return value:  Size  Location     Type
  8169 ;;                  1    wreg      _Bool 
  8170 ;; Registers used:
  8171 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8172 ;; Tracked objects:
  8173 ;;		On entry : 0/0
  8174 ;;		On exit  : 0/0
  8175 ;;		Unchanged: 0/0
  8176 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8177 ;;      Params:         0       0       0       0       0       0       0       0
  8178 ;;      Locals:         0       0       0       0       0       0       0       0
  8179 ;;      Temps:          0       1       0       0       0       0       0       0
  8180 ;;      Totals:         0       1       0       0       0       0       0       0
  8181 ;;Total ram usage:        1 bytes
  8182 ;; Hardware stack levels used:    1
  8183 ;; Hardware stack levels required when called:   11
  8184 ;; This function calls:
  8185 ;;		_MTOUCH_Button_ServiceAll
  8186 ;;		_MTOUCH_Sensor_SampleAll
  8187 ;;		_MTOUCH_Sensor_Sampled_ResetAll
  8188 ;;		_MTOUCH_Tick
  8189 ;;		_MTOUCH_needReburst
  8190 ;; This function is called by:
  8191 ;;		_main
  8192 ;;		_touch_example
  8193 ;; This function uses a non-reentrant model
  8194 ;;
  8195                           
  8196                           
  8197                           ;psect for function _MTOUCH_Service_Mainloop
  8198  0BD7                     _MTOUCH_Service_Mainloop:	
  8199                           
  8200                           ;mcc_generated_files/mtouch/mtouch.c: 99:     mtouch_time_toScan = 1;
  8201                           
  8202                           ;incstack = 0
  8203                           ; Regs used in _MTOUCH_Service_Mainloop: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  8204  0BD7  0140               	movlb	0	; select bank0
  8205  0BD8  01C5               	clrf	_mtouch_time_toScan
  8206  0BD9  0AC5               	incf	_mtouch_time_toScan,f
  8207                           
  8208                           ;mcc_generated_files/mtouch/mtouch.c: 102:     {;mcc_generated_files/mtouch/mtouch.c: 10
      +                          3:         if(MTOUCH_Sensor_SampleAll() == 0)
  8209                           
  8210                           ;mcc_generated_files/mtouch/mtouch.c: 101:     if(mtouch_time_toScan)
  8211  0BDA  318A  22BC  318B   	fcall	_MTOUCH_Sensor_SampleAll
  8212  0BDD  3A00               	xorlw	0
  8213  0BDE  1D03               	skipz
  8214  0BDF  2BE2               	goto	l3804
  8215                           
  8216                           ;mcc_generated_files/mtouch/mtouch.c: 104:         return 0;
  8217  0BE0  3000               	movlw	0
  8218  0BE1  0008               	return
  8219  0BE2                     l3804:	
  8220                           
  8221                           ;mcc_generated_files/mtouch/mtouch.c: 107:             MTOUCH_Button_ServiceAll();
  8222  0BE2  318A  2209  318B   	fcall	_MTOUCH_Button_ServiceAll
  8223                           
  8224                           ;mcc_generated_files/mtouch/mtouch.c: 108:             mtouch_time_toScan = MTOUCH_needR
      +                          eburst();
  8225  0BE5  3180  2002  318B   	fcall	_MTOUCH_needReburst
  8226  0BE8  0140               	movlb	0	; select bank0
  8227  0BE9  00E5               	movwf	??_MTOUCH_Service_Mainloop
  8228  0BEA  0865               	movf	??_MTOUCH_Service_Mainloop,w
  8229  0BEB  00C5               	movwf	_mtouch_time_toScan
  8230                           
  8231                           ;mcc_generated_files/mtouch/mtouch.c: 109:             MTOUCH_Sensor_Sampled_ResetAll();
  8232  0BEC  318A  22D1  318B   	fcall	_MTOUCH_Sensor_Sampled_ResetAll
  8233                           
  8234                           ;mcc_generated_files/mtouch/mtouch.c: 110:             MTOUCH_Tick();
  8235  0BEF  3189  2130         	fcall	_MTOUCH_Tick
  8236                           
  8237                           ;mcc_generated_files/mtouch/mtouch.c: 111:             return 1;
  8238  0BF1  3001               	movlw	1
  8239  0BF2  0008               	return
  8240  0BF3                     __end_of_MTOUCH_Service_Mainloop:	
  8241                           
  8242                           	psect	text22
  8243  0002                     __ptext22:	
  8244 ;; *************** function _MTOUCH_needReburst *****************
  8245 ;; Defined at:
  8246 ;;		line 134 in file "mcc_generated_files/mtouch/mtouch.c"
  8247 ;; Parameters:    Size  Location     Type
  8248 ;;		None
  8249 ;; Auto vars:     Size  Location     Type
  8250 ;;  needReburst     1    0        _Bool 
  8251 ;; Return value:  Size  Location     Type
  8252 ;;                  1    wreg      _Bool 
  8253 ;; Registers used:
  8254 ;;		wreg, status,2
  8255 ;; Tracked objects:
  8256 ;;		On entry : 0/0
  8257 ;;		On exit  : 0/0
  8258 ;;		Unchanged: 0/0
  8259 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8260 ;;      Params:         0       0       0       0       0       0       0       0
  8261 ;;      Locals:         0       1       0       0       0       0       0       0
  8262 ;;      Temps:          0       0       0       0       0       0       0       0
  8263 ;;      Totals:         0       1       0       0       0       0       0       0
  8264 ;;Total ram usage:        1 bytes
  8265 ;; Hardware stack levels used:    1
  8266 ;; Hardware stack levels required when called:    4
  8267 ;; This function calls:
  8268 ;;		Nothing
  8269 ;; This function is called by:
  8270 ;;		_MTOUCH_Service_Mainloop
  8271 ;; This function uses a non-reentrant model
  8272 ;;
  8273                           
  8274                           
  8275                           ;psect for function _MTOUCH_needReburst
  8276  0002                     _MTOUCH_needReburst:	
  8277                           
  8278                           ;mcc_generated_files/mtouch/mtouch.c: 138:     return needReburst;
  8279                           
  8280                           ;incstack = 0
  8281                           ; Regs used in _MTOUCH_needReburst: [wreg+status,2]
  8282  0002  3000               	movlw	0
  8283  0003  0008               	return
  8284  0004                     __end_of_MTOUCH_needReburst:	
  8285                           
  8286                           	psect	text23
  8287  0930                     __ptext23:	
  8288 ;; *************** function _MTOUCH_Tick *****************
  8289 ;; Defined at:
  8290 ;;		line 124 in file "mcc_generated_files/mtouch/mtouch.c"
  8291 ;; Parameters:    Size  Location     Type
  8292 ;;		None
  8293 ;; Auto vars:     Size  Location     Type
  8294 ;;		None
  8295 ;; Return value:  Size  Location     Type
  8296 ;;                  1    wreg      void 
  8297 ;; Registers used:
  8298 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8299 ;; Tracked objects:
  8300 ;;		On entry : 0/0
  8301 ;;		On exit  : 0/0
  8302 ;;		Unchanged: 0/0
  8303 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8304 ;;      Params:         0       0       0       0       0       0       0       0
  8305 ;;      Locals:         0       0       0       0       0       0       0       0
  8306 ;;      Temps:          0       0       0       0       0       0       0       0
  8307 ;;      Totals:         0       0       0       0       0       0       0       0
  8308 ;;Total ram usage:        0 bytes
  8309 ;; Hardware stack levels used:    1
  8310 ;; Hardware stack levels required when called:    6
  8311 ;; This function calls:
  8312 ;;		_MTOUCH_Button_Tick
  8313 ;; This function is called by:
  8314 ;;		_MTOUCH_Service_Mainloop
  8315 ;; This function uses a non-reentrant model
  8316 ;;
  8317                           
  8318                           
  8319                           ;psect for function _MTOUCH_Tick
  8320  0930                     _MTOUCH_Tick:	
  8321                           
  8322                           ;mcc_generated_files/mtouch/mtouch.c: 126:     MTOUCH_Button_Tick();
  8323                           
  8324                           ;incstack = 0
  8325                           ; Regs used in _MTOUCH_Tick: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8326  0930  3189  2133         	fcall	_MTOUCH_Button_Tick
  8327  0932  0008               	return
  8328  0933                     __end_of_MTOUCH_Tick:	
  8329                           
  8330                           	psect	text24
  8331  0933                     __ptext24:	
  8332 ;; *************** function _MTOUCH_Button_Tick *****************
  8333 ;; Defined at:
  8334 ;;		line 281 in file "mcc_generated_files/mtouch/mtouch_button.c"
  8335 ;; Parameters:    Size  Location     Type
  8336 ;;		None
  8337 ;; Auto vars:     Size  Location     Type
  8338 ;;		None
  8339 ;; Return value:  Size  Location     Type
  8340 ;;                  1    wreg      void 
  8341 ;; Registers used:
  8342 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8343 ;; Tracked objects:
  8344 ;;		On entry : 0/0
  8345 ;;		On exit  : 0/0
  8346 ;;		Unchanged: 0/0
  8347 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8348 ;;      Params:         0       0       0       0       0       0       0       0
  8349 ;;      Locals:         0       0       0       0       0       0       0       0
  8350 ;;      Temps:          0       0       0       0       0       0       0       0
  8351 ;;      Totals:         0       0       0       0       0       0       0       0
  8352 ;;Total ram usage:        0 bytes
  8353 ;; Hardware stack levels used:    1
  8354 ;; Hardware stack levels required when called:    5
  8355 ;; This function calls:
  8356 ;;		_Button_Tick_helper
  8357 ;; This function is called by:
  8358 ;;		_MTOUCH_Tick
  8359 ;; This function uses a non-reentrant model
  8360 ;;
  8361                           
  8362                           
  8363                           ;psect for function _MTOUCH_Button_Tick
  8364  0933                     _MTOUCH_Button_Tick:	
  8365                           
  8366                           ;mcc_generated_files/mtouch/mtouch_button.c: 283:     Button_Tick_helper(&mtouch_button[
      +                          0]);
  8367                           
  8368                           ;incstack = 0
  8369                           ; Regs used in _MTOUCH_Button_Tick: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8370  0933  30B9               	movlw	(low (_mtouch_button| 0))& (0+255)
  8371  0934  318C  244C         	fcall	_Button_Tick_helper
  8372  0936  0008               	return
  8373  0937                     __end_of_MTOUCH_Button_Tick:	
  8374                           
  8375                           	psect	text25
  8376  0C4C                     __ptext25:	
  8377 ;; *************** function _Button_Tick_helper *****************
  8378 ;; Defined at:
  8379 ;;		line 285 in file "mcc_generated_files/mtouch/mtouch_button.c"
  8380 ;; Parameters:    Size  Location     Type
  8381 ;;  button          1    wreg     PTR struct .
  8382 ;;		 -> mtouch_button(16), 
  8383 ;; Auto vars:     Size  Location     Type
  8384 ;;  button          1    2[BANK0 ] PTR struct .
  8385 ;;		 -> mtouch_button(16), 
  8386 ;; Return value:  Size  Location     Type
  8387 ;;                  1    wreg      void 
  8388 ;; Registers used:
  8389 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  8390 ;; Tracked objects:
  8391 ;;		On entry : 0/0
  8392 ;;		On exit  : 0/0
  8393 ;;		Unchanged: 0/0
  8394 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8395 ;;      Params:         0       0       0       0       0       0       0       0
  8396 ;;      Locals:         0       1       0       0       0       0       0       0
  8397 ;;      Temps:          0       2       0       0       0       0       0       0
  8398 ;;      Totals:         0       3       0       0       0       0       0       0
  8399 ;;Total ram usage:        3 bytes
  8400 ;; Hardware stack levels used:    1
  8401 ;; Hardware stack levels required when called:    4
  8402 ;; This function calls:
  8403 ;;		Nothing
  8404 ;; This function is called by:
  8405 ;;		_MTOUCH_Button_Tick
  8406 ;; This function uses a non-reentrant model
  8407 ;;
  8408                           
  8409                           
  8410                           ;psect for function _Button_Tick_helper
  8411  0C4C                     _Button_Tick_helper:	
  8412                           
  8413                           ;incstack = 0
  8414                           ; Regs used in _Button_Tick_helper: [wreg+fsr1l+fsr1h+status,2+status,0]
  8415                           ;Button_Tick_helper@button stored from wreg
  8416  0C4C  0140               	movlb	0	; select bank0
  8417  0C4D  00CC               	movwf	Button_Tick_helper@button
  8418                           
  8419                           ;mcc_generated_files/mtouch/mtouch_button.c: 285: static void Button_Tick_helper(mtouch_
      +                          button_t* button);mcc_generated_files/mtouch/mtouch_button.c: 286: {;mcc_generated_files
      +                          /mtouch/mtouch_button.c: 288:     if ((button->state) == MTOUCH_BUTTON_STATE_pressed)
  8420  0C4E  084C               	movf	Button_Tick_helper@button,w
  8421  0C4F  3E02               	addlw	2
  8422  0C50  0086               	movwf	6
  8423  0C51  0187               	clrf	7
  8424  0C52  3002               	movlw	2
  8425  0C53  0601               	xorwf	1,w
  8426  0C54  1D03               	btfss	3,2
  8427  0C55  0008               	return
  8428                           
  8429                           ;mcc_generated_files/mtouch/mtouch_button.c: 289:     {;mcc_generated_files/mtouch/mtouc
      +                          h_button.c: 290:         (button->counter)++;
  8430  0C56  084C               	movf	Button_Tick_helper@button,w
  8431  0C57  3E0A               	addlw	10
  8432  0C58  0086               	movwf	6
  8433  0C59  0187               	clrf	7
  8434  0C5A  3001               	movlw	1
  8435  0C5B  0781               	addwf	1,f
  8436  0C5C  3141               	addfsr 1,1
  8437  0C5D  1803               	skipnc
  8438  0C5E  0A81               	incf	1,f
  8439                           
  8440                           ;mcc_generated_files/mtouch/mtouch_button.c: 291:         if (button->counter == (mtouch
      +                          _button_statecounter_t)0)
  8441  0C5F  084C               	movf	Button_Tick_helper@button,w
  8442  0C60  3E0A               	addlw	10
  8443  0C61  0086               	movwf	6
  8444  0C62  0187               	clrf	7
  8445  0C63  0016               	moviw fsr1++
  8446  0C64  0401               	iorwf	1,w
  8447  0C65  1D03               	btfss	3,2
  8448  0C66  0008               	return
  8449                           
  8450                           ;mcc_generated_files/mtouch/mtouch_button.c: 292:         {;mcc_generated_files/mtouch/m
      +                          touch_button.c: 293:             button->counter = (mtouch_button_statecounter_t)0xFFFF;
  8451  0C67  084C               	movf	Button_Tick_helper@button,w
  8452  0C68  3E0A               	addlw	10
  8453  0C69  0086               	movwf	6
  8454  0C6A  0187               	clrf	7
  8455  0C6B  30FF               	movlw	255
  8456  0C6C  3FC0               	movwi [0]fsr1
  8457  0C6D  30FF               	movlw	255
  8458  0C6E  3FC1               	movwi [1]fsr1
  8459  0C6F  0008               	return
  8460  0C70                     __end_of_Button_Tick_helper:	
  8461                           
  8462                           	psect	text26
  8463  0AD1                     __ptext26:	
  8464 ;; *************** function _MTOUCH_Sensor_Sampled_ResetAll *****************
  8465 ;; Defined at:
  8466 ;;		line 625 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  8467 ;; Parameters:    Size  Location     Type
  8468 ;;		None
  8469 ;; Auto vars:     Size  Location     Type
  8470 ;;  sensor          1    2[BANK0 ] PTR struct .
  8471 ;;		 -> mtouch_sensor(9), 
  8472 ;; Return value:  Size  Location     Type
  8473 ;;                  1    wreg      void 
  8474 ;; Registers used:
  8475 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8476 ;; Tracked objects:
  8477 ;;		On entry : 0/0
  8478 ;;		On exit  : 0/0
  8479 ;;		Unchanged: 0/0
  8480 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8481 ;;      Params:         0       0       0       0       0       0       0       0
  8482 ;;      Locals:         0       1       0       0       0       0       0       0
  8483 ;;      Temps:          0       1       0       0       0       0       0       0
  8484 ;;      Totals:         0       2       0       0       0       0       0       0
  8485 ;;Total ram usage:        2 bytes
  8486 ;; Hardware stack levels used:    1
  8487 ;; Hardware stack levels required when called:    5
  8488 ;; This function calls:
  8489 ;;		_Sensor_Sampled_Reset
  8490 ;; This function is called by:
  8491 ;;		_MTOUCH_Initialize
  8492 ;;		_MTOUCH_Service_Mainloop
  8493 ;; This function uses a non-reentrant model
  8494 ;;
  8495                           
  8496                           
  8497                           ;psect for function _MTOUCH_Sensor_Sampled_ResetAll
  8498  0AD1                     _MTOUCH_Sensor_Sampled_ResetAll:	
  8499                           
  8500                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 627:     mtouch_sensor_t* sensor;;mcc_gener
      +                          ated_files/mtouch/mtouch_sensor.c: 628:     for(sensor = &mtouch_sensor[0];sensor<= &mto
      +                          uch_sensor[1u -1];sensor++)
  8501                           
  8502                           ;incstack = 0
  8503                           ; Regs used in _MTOUCH_Sensor_Sampled_ResetAll: [wreg+fsr1l+fsr1h+status,2+status,0+pcla
      +                          th+cstack]
  8504  0AD1  30AC               	movlw	(low (_mtouch_sensor| 0))& (0+255)
  8505  0AD2  0140               	movlb	0	; select bank0
  8506  0AD3  00CB               	movwf	??_MTOUCH_Sensor_Sampled_ResetAll
  8507  0AD4  084B               	movf	??_MTOUCH_Sensor_Sampled_ResetAll,w
  8508  0AD5  00CC               	movwf	MTOUCH_Sensor_Sampled_ResetAll@sensor
  8509  0AD6                     L10:	
  8510  0AD6  30AC               	movlw	(low (_mtouch_sensor| 0))& (0+255)
  8511  0AD7  00CB               	movwf	??_MTOUCH_Sensor_Sampled_ResetAll
  8512  0AD8  084C               	movf	MTOUCH_Sensor_Sampled_ResetAll@sensor,w
  8513  0AD9  024B               	subwf	??_MTOUCH_Sensor_Sampled_ResetAll,w
  8514  0ADA  1C03               	btfss	3,0
  8515  0ADB  0008               	return
  8516                           
  8517                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 629:     {;mcc_generated_files/mtouch/mtouc
      +                          h_sensor.c: 630:         Sensor_Sampled_Reset(sensor);
  8518  0ADC  084C               	movf	MTOUCH_Sensor_Sampled_ResetAll@sensor,w
  8519  0ADD  3189  217E  318A   	fcall	_Sensor_Sampled_Reset
  8520                           
  8521                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 631:     }
  8522  0AE0  3009               	movlw	9
  8523  0AE1  0140               	movlb	0	; select bank0
  8524  0AE2  00CB               	movwf	??_MTOUCH_Sensor_Sampled_ResetAll
  8525  0AE3  084B               	movf	??_MTOUCH_Sensor_Sampled_ResetAll,w
  8526  0AE4  07CC               	addwf	MTOUCH_Sensor_Sampled_ResetAll@sensor,f
  8527  0AE5  2AD6               	goto	L10
  8528  0AE6                     __end_of_MTOUCH_Sensor_Sampled_ResetAll:	
  8529                           
  8530                           	psect	text27
  8531  097E                     __ptext27:	
  8532 ;; *************** function _Sensor_Sampled_Reset *****************
  8533 ;; Defined at:
  8534 ;;		line 642 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  8535 ;; Parameters:    Size  Location     Type
  8536 ;;  sensor          1    wreg     PTR struct .
  8537 ;;		 -> mtouch_sensor(9), 
  8538 ;; Auto vars:     Size  Location     Type
  8539 ;;  sensor          1    0[BANK0 ] PTR struct .
  8540 ;;		 -> mtouch_sensor(9), 
  8541 ;; Return value:  Size  Location     Type
  8542 ;;                  1    wreg      void 
  8543 ;; Registers used:
  8544 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  8545 ;; Tracked objects:
  8546 ;;		On entry : 0/0
  8547 ;;		On exit  : 0/0
  8548 ;;		Unchanged: 0/0
  8549 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8550 ;;      Params:         0       0       0       0       0       0       0       0
  8551 ;;      Locals:         0       1       0       0       0       0       0       0
  8552 ;;      Temps:          0       0       0       0       0       0       0       0
  8553 ;;      Totals:         0       1       0       0       0       0       0       0
  8554 ;;Total ram usage:        1 bytes
  8555 ;; Hardware stack levels used:    1
  8556 ;; Hardware stack levels required when called:    4
  8557 ;; This function calls:
  8558 ;;		Nothing
  8559 ;; This function is called by:
  8560 ;;		_MTOUCH_Sensor_Initialize
  8561 ;;		_MTOUCH_Sensor_Sampled_ResetAll
  8562 ;; This function uses a non-reentrant model
  8563 ;;
  8564                           
  8565                           
  8566                           ;psect for function _Sensor_Sampled_Reset
  8567  097E                     _Sensor_Sampled_Reset:	
  8568                           
  8569                           ;incstack = 0
  8570                           ; Regs used in _Sensor_Sampled_Reset: [wreg+fsr1l+fsr1h+status,2+status,0]
  8571                           ;Sensor_Sampled_Reset@sensor stored from wreg
  8572  097E  0140               	movlb	0	; select bank0
  8573  097F  00CA               	movwf	Sensor_Sampled_Reset@sensor
  8574                           
  8575                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 642: static __attribute__((inline)) void Se
      +                          nsor_Sampled_Reset(mtouch_sensor_t* sensor);mcc_generated_files/mtouch/mtouch_sensor.c: 
      +                          643: {;mcc_generated_files/mtouch/mtouch_sensor.c: 644:     sensor->sampled = 0;
  8576  0980  084A               	movf	Sensor_Sampled_Reset@sensor,w
  8577  0981  3E08               	addlw	8
  8578  0982  0086               	movwf	6
  8579  0983  0187               	clrf	7
  8580  0984  1081               	bcf	1,1
  8581  0985  0008               	return
  8582  0986                     __end_of_Sensor_Sampled_Reset:	
  8583                           
  8584                           	psect	text28
  8585  0ABC                     __ptext28:	
  8586 ;; *************** function _MTOUCH_Sensor_SampleAll *****************
  8587 ;; Defined at:
  8588 ;;		line 195 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  8589 ;; Parameters:    Size  Location     Type
  8590 ;;		None
  8591 ;; Auto vars:     Size  Location     Type
  8592 ;;  sensor          1   26[BANK0 ] enum E6808
  8593 ;; Return value:  Size  Location     Type
  8594 ;;                  1    wreg      _Bool 
  8595 ;; Registers used:
  8596 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8597 ;; Tracked objects:
  8598 ;;		On entry : 0/0
  8599 ;;		On exit  : 0/0
  8600 ;;		Unchanged: 0/0
  8601 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8602 ;;      Params:         0       0       0       0       0       0       0       0
  8603 ;;      Locals:         0       1       0       0       0       0       0       0
  8604 ;;      Temps:          0       1       0       0       0       0       0       0
  8605 ;;      Totals:         0       2       0       0       0       0       0       0
  8606 ;;Total ram usage:        2 bytes
  8607 ;; Hardware stack levels used:    1
  8608 ;; Hardware stack levels required when called:   10
  8609 ;; This function calls:
  8610 ;;		_Sensor_Service
  8611 ;; This function is called by:
  8612 ;;		_MTOUCH_Service_Mainloop
  8613 ;; This function uses a non-reentrant model
  8614 ;;
  8615                           
  8616                           
  8617                           ;psect for function _MTOUCH_Sensor_SampleAll
  8618  0ABC                     _MTOUCH_Sensor_SampleAll:	
  8619                           
  8620                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 197:     enum mtouch_sensor_names sensor;;m
      +                          cc_generated_files/mtouch/mtouch_sensor.c: 198:     for (sensor = 0; sensor < 1u; sensor
      +                          ++)
  8621                           
  8622                           ;incstack = 0
  8623                           ; Regs used in _MTOUCH_Sensor_SampleAll: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  8624  0ABC  0140               	movlb	0	; select bank0
  8625  0ABD  01E4               	clrf	MTOUCH_Sensor_SampleAll@sensor
  8626  0ABE                     l3538:	
  8627                           
  8628                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 199:     {;mcc_generated_files/mtouch/mtouc
      +                          h_sensor.c: 200:         if(Sensor_Service(sensor)!= MTOUCH_SENSOR_ERROR_none)
  8629  0ABE  0864               	movf	MTOUCH_Sensor_SampleAll@sensor,w
  8630  0ABF  318E  2697  318A   	fcall	_Sensor_Service
  8631  0AC2  3A00               	xorlw	0
  8632  0AC3  1903               	skipnz
  8633  0AC4  2AC7               	goto	l3544
  8634                           
  8635                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 201:             return 0;
  8636  0AC5  3000               	movlw	0
  8637  0AC6  0008               	return
  8638  0AC7                     l3544:	
  8639                           
  8640                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 202:     }
  8641  0AC7  3001               	movlw	1
  8642  0AC8  0140               	movlb	0	; select bank0
  8643  0AC9  00E3               	movwf	??_MTOUCH_Sensor_SampleAll
  8644  0ACA  0863               	movf	??_MTOUCH_Sensor_SampleAll,w
  8645  0ACB  07E4               	addwf	MTOUCH_Sensor_SampleAll@sensor,f
  8646  0ACC  0864               	movf	MTOUCH_Sensor_SampleAll@sensor,w
  8647  0ACD  1903               	btfsc	3,2
  8648  0ACE  2ABE               	goto	l3538
  8649                           
  8650                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 203:     return 1;
  8651  0ACF  3001               	movlw	1
  8652  0AD0  0008               	return
  8653  0AD1                     __end_of_MTOUCH_Sensor_SampleAll:	
  8654                           
  8655                           	psect	text29
  8656  0E97                     __ptext29:	
  8657 ;; *************** function _Sensor_Service *****************
  8658 ;; Defined at:
  8659 ;;		line 241 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  8660 ;; Parameters:    Size  Location     Type
  8661 ;;  name            1    wreg     enum E6808
  8662 ;; Auto vars:     Size  Location     Type
  8663 ;;  name            1   22[BANK0 ] enum E6808
  8664 ;;  sensor          1   24[BANK0 ] PTR struct .
  8665 ;;		 -> mtouch_sensor(9), 
  8666 ;;  error           1   23[BANK0 ] enum E6810
  8667 ;; Return value:  Size  Location     Type
  8668 ;;                  1    wreg      enum E6810
  8669 ;; Registers used:
  8670 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8671 ;; Tracked objects:
  8672 ;;		On entry : 0/0
  8673 ;;		On exit  : 0/0
  8674 ;;		Unchanged: 0/0
  8675 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8676 ;;      Params:         0       0       0       0       0       0       0       0
  8677 ;;      Locals:         0       3       0       0       0       0       0       0
  8678 ;;      Temps:          0       2       0       0       0       0       0       0
  8679 ;;      Totals:         0       5       0       0       0       0       0       0
  8680 ;;Total ram usage:        5 bytes
  8681 ;; Hardware stack levels used:    1
  8682 ;; Hardware stack levels required when called:    9
  8683 ;; This function calls:
  8684 ;;		_Sensor_Acquisition
  8685 ;;		_Sensor_DefaultCallback
  8686 ;;		_Sensor_RawSample_Update
  8687 ;;		_Sensor_isEnabled
  8688 ;;		_Sensor_setSampled
  8689 ;;		___bmul
  8690 ;; This function is called by:
  8691 ;;		_MTOUCH_Sensor_SampleAll
  8692 ;; This function uses a non-reentrant model
  8693 ;;
  8694                           
  8695                           
  8696                           ;psect for function _Sensor_Service
  8697  0E97                     _Sensor_Service:	
  8698                           
  8699                           ;incstack = 0
  8700                           ; Regs used in _Sensor_Service: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  8701                           ;Sensor_Service@name stored from wreg
  8702  0E97  0140               	movlb	0	; select bank0
  8703  0E98  00E0               	movwf	Sensor_Service@name
  8704                           
  8705                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 241: static enum mtouch_sensor_error Sensor
      +                          _Service(enum mtouch_sensor_names name);mcc_generated_files/mtouch/mtouch_sensor.c: 242:
      +                           {;mcc_generated_files/mtouch/mtouch_sensor.c: 243:     mtouch_sensor_t* sensor = &mtouc
      +                          h_sensor[name];
  8706  0E99  3009               	movlw	9
  8707  0E9A  00DE               	movwf	??_Sensor_Service
  8708  0E9B  085E               	movf	??_Sensor_Service,w
  8709  0E9C  00CA               	movwf	___bmul@multiplicand
  8710  0E9D  0860               	movf	Sensor_Service@name,w
  8711  0E9E  318A  2249  318E   	fcall	___bmul
  8712  0EA1  3EAC               	addlw	(low (_mtouch_sensor| 0))& (0+255)
  8713  0EA2  0140               	movlb	0	; select bank0
  8714  0EA3  00DF               	movwf	??_Sensor_Service+1
  8715  0EA4  085F               	movf	??_Sensor_Service+1,w
  8716  0EA5  00E2               	movwf	Sensor_Service@sensor
  8717                           
  8718                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 244:     enum mtouch_sensor_error error = S
      +                          ensor_Acquisition(sensor);
  8719  0EA6  0862               	movf	Sensor_Service@sensor,w
  8720  0EA7  318D  2573  318E   	fcall	_Sensor_Acquisition
  8721  0EAA  0140               	movlb	0	; select bank0
  8722  0EAB  00DE               	movwf	??_Sensor_Service
  8723  0EAC  085E               	movf	??_Sensor_Service,w
  8724  0EAD  00E1               	movwf	Sensor_Service@error
  8725                           
  8726                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 247:     switch(error)
  8727  0EAE  2ECC               	goto	l3444
  8728  0EAF                     l3434:	
  8729                           
  8730                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 250:         {;mcc_generated_files/mtouch/m
      +                          touch_sensor.c: 251:             if(Sensor_isEnabled(sensor))
  8731  0EAF  0862               	movf	Sensor_Service@sensor,w
  8732  0EB0  3189  21EC  318E   	fcall	_Sensor_isEnabled
  8733  0EB3  3A00               	xorlw	0
  8734  0EB4  1903               	skipnz
  8735  0EB5  2EE9               	goto	l3446
  8736                           
  8737                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 252:             {;mcc_generated_files/mtou
      +                          ch/mtouch_sensor.c: 257:                 if(!lowpowerActivated)
  8738  0EB6  0140               	movlb	0	; select bank0
  8739  0EB7  0846               	movf	_lowpowerActivated,w
  8740  0EB8  1D03               	btfss	3,2
  8741  0EB9  2EBE               	goto	l133
  8742                           
  8743                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 258:                 {;mcc_generated_files/
      +                          mtouch/mtouch_sensor.c: 259:                     Sensor_RawSample_Update(sensor);
  8744  0EBA  0862               	movf	Sensor_Service@sensor,w
  8745  0EBB  318B  2340  318E   	fcall	_Sensor_RawSample_Update
  8746  0EBE                     l133:	
  8747                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 260:                 }
  8748                           
  8749                           
  8750                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 261:                 Sensor_setSampled(sens
      +                          or);
  8751  0EBE  0140               	movlb	0	; select bank0
  8752  0EBF  0862               	movf	Sensor_Service@sensor,w
  8753  0EC0  3189  2176  318E   	fcall	_Sensor_setSampled
  8754                           
  8755                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 262:                 callback_sampled(name)
      +                          ;
  8756  0EC3  0140               	movlb	0	; select bank0
  8757  0EC4  0860               	movf	Sensor_Service@name,w
  8758  0EC5  00DE               	movwf	??_Sensor_Service
  8759  0EC6  085E               	movf	??_Sensor_Service,w
  8760  0EC7  00CA               	movwf	Sensor_DefaultCallback@sensor
  8761  0EC8  3189  2121  318E   	fcall	_Sensor_DefaultCallback
  8762  0ECB  2EE9               	goto	l3446
  8763  0ECC                     l3444:	
  8764  0ECC  0861               	movf	Sensor_Service@error,w
  8765  0ECD  00DE               	movwf	??_Sensor_Service
  8766  0ECE  01DF               	clrf	??_Sensor_Service+1
  8767  0ECF  1BDE               	btfsc	??_Sensor_Service,7
  8768  0ED0  03DF               	decf	??_Sensor_Service+1,f
  8769                           
  8770                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 2 sub-sw
      +                          itches
  8771                           ; Switch size 1, requested type "simple"
  8772                           ; Number of cases is 2, Range of values is 0 to 255
  8773                           ; switch strategies available:
  8774                           ; Name         Instructions Cycles
  8775                           ; simple_byte            7     4 (average)
  8776                           ; jumptable            260     6 (fixed)
  8777                           ;	Chosen strategy is simple_byte
  8778  0ED1  085F               	movf	??_Sensor_Service+1,w
  8779  0ED2  3A00               	xorlw	0	; case 0
  8780  0ED3  1903               	skipnz
  8781  0ED4  2ED9               	goto	l4410
  8782  0ED5  3AFF               	xorlw	255	; case 255
  8783  0ED6  1903               	skipnz
  8784  0ED7  2EDE               	goto	l4412
  8785  0ED8  2EE9               	goto	l3446
  8786  0ED9                     l4410:	
  8787                           
  8788                           ; Switch size 1, requested type "simple"
  8789                           ; Number of cases is 1, Range of values is 0 to 0
  8790                           ; switch strategies available:
  8791                           ; Name         Instructions Cycles
  8792                           ; simple_byte            4     3 (average)
  8793                           ; direct_byte            8     6 (fixed)
  8794                           ; jumptable            260     6 (fixed)
  8795                           ;	Chosen strategy is simple_byte
  8796  0ED9  085E               	movf	??_Sensor_Service,w
  8797  0EDA  3A00               	xorlw	0	; case 0
  8798  0EDB  1903               	skipnz
  8799  0EDC  2EAF               	goto	l3434
  8800  0EDD  2EE9               	goto	l3446
  8801  0EDE                     l4412:	
  8802                           
  8803                           ; Switch size 1, requested type "simple"
  8804                           ; Number of cases is 3, Range of values is 253 to 255
  8805                           ; switch strategies available:
  8806                           ; Name         Instructions Cycles
  8807                           ; simple_byte           10     6 (average)
  8808                           ; direct_byte           11     5 (fixed)
  8809                           ; jumptable            263     9 (fixed)
  8810                           ;	Chosen strategy is simple_byte
  8811  0EDE  085E               	movf	??_Sensor_Service,w
  8812  0EDF  3AFD               	xorlw	253	; case 253
  8813  0EE0  1903               	skipnz
  8814  0EE1  2EE9               	goto	l3446
  8815  0EE2  3A03               	xorlw	3	; case 254
  8816  0EE3  1903               	skipnz
  8817  0EE4  2EE9               	goto	l3446
  8818  0EE5  3A01               	xorlw	1	; case 255
  8819  0EE6  1903               	skipnz
  8820  0EE7  2EE9               	goto	l3446
  8821  0EE8  2EE9               	goto	l3446
  8822  0EE9                     l3446:	
  8823                           
  8824                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 274:     return error;
  8825  0EE9  0140               	movlb	0	; select bank0
  8826  0EEA  0861               	movf	Sensor_Service@error,w
  8827  0EEB  0008               	return
  8828  0EEC                     __end_of_Sensor_Service:	
  8829                           
  8830                           	psect	text30
  8831  0976                     __ptext30:	
  8832 ;; *************** function _Sensor_setSampled *****************
  8833 ;; Defined at:
  8834 ;;		line 647 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  8835 ;; Parameters:    Size  Location     Type
  8836 ;;  sensor          1    wreg     PTR struct .
  8837 ;;		 -> mtouch_sensor(9), 
  8838 ;; Auto vars:     Size  Location     Type
  8839 ;;  sensor          1    0[BANK0 ] PTR struct .
  8840 ;;		 -> mtouch_sensor(9), 
  8841 ;; Return value:  Size  Location     Type
  8842 ;;                  1    wreg      void 
  8843 ;; Registers used:
  8844 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  8845 ;; Tracked objects:
  8846 ;;		On entry : 0/0
  8847 ;;		On exit  : 0/0
  8848 ;;		Unchanged: 0/0
  8849 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8850 ;;      Params:         0       0       0       0       0       0       0       0
  8851 ;;      Locals:         0       1       0       0       0       0       0       0
  8852 ;;      Temps:          0       0       0       0       0       0       0       0
  8853 ;;      Totals:         0       1       0       0       0       0       0       0
  8854 ;;Total ram usage:        1 bytes
  8855 ;; Hardware stack levels used:    1
  8856 ;; Hardware stack levels required when called:    4
  8857 ;; This function calls:
  8858 ;;		Nothing
  8859 ;; This function is called by:
  8860 ;;		_Sensor_Service
  8861 ;; This function uses a non-reentrant model
  8862 ;;
  8863                           
  8864                           
  8865                           ;psect for function _Sensor_setSampled
  8866  0976                     _Sensor_setSampled:	
  8867                           
  8868                           ;incstack = 0
  8869                           ; Regs used in _Sensor_setSampled: [wreg+fsr1l+fsr1h+status,2+status,0]
  8870                           ;Sensor_setSampled@sensor stored from wreg
  8871  0976  0140               	movlb	0	; select bank0
  8872  0977  00CA               	movwf	Sensor_setSampled@sensor
  8873                           
  8874                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 647: static __attribute__((inline)) void Se
      +                          nsor_setSampled(mtouch_sensor_t* sensor);mcc_generated_files/mtouch/mtouch_sensor.c: 648
      +                          : {;mcc_generated_files/mtouch/mtouch_sensor.c: 649:     sensor->sampled = 1;
  8875  0978  084A               	movf	Sensor_setSampled@sensor,w
  8876  0979  3E08               	addlw	8
  8877  097A  0086               	movwf	6
  8878  097B  0187               	clrf	7
  8879  097C  1481               	bsf	1,1
  8880  097D  0008               	return
  8881  097E                     __end_of_Sensor_setSampled:	
  8882                           
  8883                           	psect	text31
  8884  0B40                     __ptext31:	
  8885 ;; *************** function _Sensor_RawSample_Update *****************
  8886 ;; Defined at:
  8887 ;;		line 508 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  8888 ;; Parameters:    Size  Location     Type
  8889 ;;  sensor          1    wreg     PTR struct .
  8890 ;;		 -> mtouch_sensor(9), 
  8891 ;; Auto vars:     Size  Location     Type
  8892 ;;  sensor          1    0[BANK0 ] PTR struct .
  8893 ;;		 -> mtouch_sensor(9), 
  8894 ;; Return value:  Size  Location     Type
  8895 ;;                  1    wreg      void 
  8896 ;; Registers used:
  8897 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  8898 ;; Tracked objects:
  8899 ;;		On entry : 0/0
  8900 ;;		On exit  : 0/0
  8901 ;;		Unchanged: 0/0
  8902 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8903 ;;      Params:         0       0       0       0       0       0       0       0
  8904 ;;      Locals:         0       1       0       0       0       0       0       0
  8905 ;;      Temps:          0       0       0       0       0       0       0       0
  8906 ;;      Totals:         0       1       0       0       0       0       0       0
  8907 ;;Total ram usage:        1 bytes
  8908 ;; Hardware stack levels used:    1
  8909 ;; Hardware stack levels required when called:    4
  8910 ;; This function calls:
  8911 ;;		Nothing
  8912 ;; This function is called by:
  8913 ;;		_Sensor_Service
  8914 ;; This function uses a non-reentrant model
  8915 ;;
  8916                           
  8917                           
  8918                           ;psect for function _Sensor_RawSample_Update
  8919  0B40                     _Sensor_RawSample_Update:	
  8920                           
  8921                           ;incstack = 0
  8922                           ; Regs used in _Sensor_RawSample_Update: [wreg+fsr1l+fsr1h+status,2+status,0]
  8923                           ;Sensor_RawSample_Update@sensor stored from wreg
  8924  0B40  0140               	movlb	0	; select bank0
  8925  0B41  00CA               	movwf	Sensor_RawSample_Update@sensor
  8926                           
  8927                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 508: static void Sensor_RawSample_Update(mt
      +                          ouch_sensor_t* sensor);mcc_generated_files/mtouch/mtouch_sensor.c: 509: {;mcc_generated_
      +                          files/mtouch/mtouch_sensor.c: 510:     if (INTCONbits.GIE == (uint8_t)1)
  8928  0B42  1F8B               	btfss	11,7	;volatile
  8929  0B43  2B4F               	goto	l3296
  8930                           
  8931                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 511:     {;mcc_generated_files/mtouch/mtouc
      +                          h_sensor.c: 512:         INTCONbits.GIE = (uint8_t)0;
  8932  0B44  138B               	bcf	11,7	;volatile
  8933                           
  8934                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 513:         sensor->rawSample = packet_sam
      +                          ple;
  8935  0B45  084A               	movf	Sensor_RawSample_Update@sensor,w
  8936  0B46  3E06               	addlw	6
  8937  0B47  0086               	movwf	6
  8938  0B48  0187               	clrf	7
  8939  0B49  083A               	movf	_packet_sample,w
  8940  0B4A  3FC0               	movwi [0]fsr1
  8941  0B4B  083B               	movf	_packet_sample+1,w
  8942  0B4C  3FC1               	movwi [1]fsr1
  8943                           
  8944                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 514:         INTCONbits.GIE = (uint8_t)1;
  8945  0B4D  178B               	bsf	11,7	;volatile
  8946                           
  8947                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 515:     }
  8948  0B4E  0008               	return
  8949  0B4F                     l3296:	
  8950                           
  8951                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 517:     {;mcc_generated_files/mtouch/mtouc
      +                          h_sensor.c: 518:         sensor->rawSample = packet_sample;
  8952  0B4F  084A               	movf	Sensor_RawSample_Update@sensor,w
  8953  0B50  3E06               	addlw	6
  8954  0B51  0086               	movwf	6
  8955  0B52  0187               	clrf	7
  8956  0B53  083A               	movf	_packet_sample,w
  8957  0B54  3FC0               	movwi [0]fsr1
  8958  0B55  083B               	movf	_packet_sample+1,w
  8959  0B56  3FC1               	movwi [1]fsr1
  8960  0B57  0008               	return
  8961  0B58                     __end_of_Sensor_RawSample_Update:	
  8962                           
  8963                           	psect	text32
  8964  0921                     __ptext32:	
  8965 ;; *************** function _Sensor_DefaultCallback *****************
  8966 ;; Defined at:
  8967 ;;		line 528 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  8968 ;; Parameters:    Size  Location     Type
  8969 ;;  sensor          1    0[BANK0 ] enum E6808
  8970 ;; Auto vars:     Size  Location     Type
  8971 ;;		None
  8972 ;; Return value:  Size  Location     Type
  8973 ;;                  1    wreg      void 
  8974 ;; Registers used:
  8975 ;;		None
  8976 ;; Tracked objects:
  8977 ;;		On entry : 0/0
  8978 ;;		On exit  : 0/0
  8979 ;;		Unchanged: 0/0
  8980 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8981 ;;      Params:         0       1       0       0       0       0       0       0
  8982 ;;      Locals:         0       0       0       0       0       0       0       0
  8983 ;;      Temps:          0       0       0       0       0       0       0       0
  8984 ;;      Totals:         0       1       0       0       0       0       0       0
  8985 ;;Total ram usage:        1 bytes
  8986 ;; Hardware stack levels used:    1
  8987 ;; Hardware stack levels required when called:    4
  8988 ;; This function calls:
  8989 ;;		Nothing
  8990 ;; This function is called by:
  8991 ;;		_Sensor_Service
  8992 ;; This function uses a non-reentrant model
  8993 ;;
  8994                           
  8995                           
  8996                           ;psect for function _Sensor_DefaultCallback
  8997  0921                     _Sensor_DefaultCallback:	
  8998                           
  8999                           ;incstack = 0
  9000                           ; Regs used in _Sensor_DefaultCallback: []
  9001  0921  0008               	return
  9002  0922                     __end_of_Sensor_DefaultCallback:	
  9003                           
  9004                           	psect	text33
  9005  0D73                     __ptext33:	
  9006 ;; *************** function _Sensor_Acquisition *****************
  9007 ;; Defined at:
  9008 ;;		line 288 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  9009 ;; Parameters:    Size  Location     Type
  9010 ;;  sensor          1    wreg     PTR struct .
  9011 ;;		 -> mtouch_sensor(9), 
  9012 ;; Auto vars:     Size  Location     Type
  9013 ;;  sensor          1   19[BANK0 ] PTR struct .
  9014 ;;		 -> mtouch_sensor(9), 
  9015 ;;  retry           1   18[BANK0 ] unsigned char 
  9016 ;; Return value:  Size  Location     Type
  9017 ;;                  1    wreg      enum E6810
  9018 ;; Registers used:
  9019 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9020 ;; Tracked objects:
  9021 ;;		On entry : 0/0
  9022 ;;		On exit  : 0/0
  9023 ;;		Unchanged: 0/0
  9024 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  9025 ;;      Params:         0       0       0       0       0       0       0       0
  9026 ;;      Locals:         0       2       0       0       0       0       0       0
  9027 ;;      Temps:          0       1       0       0       0       0       0       0
  9028 ;;      Totals:         0       3       0       0       0       0       0       0
  9029 ;;Total ram usage:        3 bytes
  9030 ;; Hardware stack levels used:    1
  9031 ;; Hardware stack levels required when called:    8
  9032 ;; This function calls:
  9033 ;;		_Sensor_Acq_ExecutePacket
  9034 ;;		_Sensor_Scanfrequency_Evaluation
  9035 ;;		_Sensor_isEnabled
  9036 ;;		_Sensor_setActive
  9037 ;;		_Sensor_setInactive
  9038 ;;		_abs
  9039 ;; This function is called by:
  9040 ;;		_Sensor_Service
  9041 ;; This function uses a non-reentrant model
  9042 ;;
  9043                           
  9044                           
  9045                           ;psect for function _Sensor_Acquisition
  9046  0D73                     _Sensor_Acquisition:	
  9047                           
  9048                           ;incstack = 0
  9049                           ; Regs used in _Sensor_Acquisition: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  9050                           ;Sensor_Acquisition@sensor stored from wreg
  9051  0D73  0140               	movlb	0	; select bank0
  9052  0D74  00DD               	movwf	Sensor_Acquisition@sensor
  9053                           
  9054                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 288: static enum mtouch_sensor_error Sensor
      +                          _Acquisition(mtouch_sensor_t* sensor);mcc_generated_files/mtouch/mtouch_sensor.c: 289: {
      +                          ;mcc_generated_files/mtouch/mtouch_sensor.c: 291:     uint8_t retry = (uint8_t)5u;
  9055  0D75  3005               	movlw	5
  9056  0D76  00DB               	movwf	??_Sensor_Acquisition
  9057  0D77  085B               	movf	??_Sensor_Acquisition,w
  9058  0D78  00DC               	movwf	Sensor_Acquisition@retry
  9059                           
  9060                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 293:     if(!Sensor_isEnabled(sensor))
  9061  0D79  085D               	movf	Sensor_Acquisition@sensor,w
  9062  0D7A  3189  21EC  318D   	fcall	_Sensor_isEnabled
  9063  0D7D  3A00               	xorlw	0
  9064  0D7E  1D03               	skipz
  9065  0D7F  2D8A               	goto	l3270
  9066  0D80                     l3260:	
  9067                           
  9068                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 294:         return MTOUCH_SENSOR_ERROR_non
      +                          e;
  9069  0D80  3000               	movlw	0
  9070  0D81  0008               	return
  9071  0D82                     l3264:	
  9072                           
  9073                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 297:     {;mcc_generated_files/mtouch/mtouc
      +                          h_sensor.c: 298:         retry--;
  9074  0D82  3001               	movlw	1
  9075  0D83  0140               	movlb	0	; select bank0
  9076  0D84  02DC               	subwf	Sensor_Acquisition@retry,f
  9077                           
  9078                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 299:         if(retry == 0)
  9079  0D85  085C               	movf	Sensor_Acquisition@retry,w
  9080  0D86  1D03               	btfss	3,2
  9081  0D87  2D8A               	goto	l3270
  9082                           
  9083                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 300:         {;mcc_generated_files/mtouch/m
      +                          touch_sensor.c: 301:             return MTOUCH_SENSOR_ERROR_tooManyRetries;
  9084  0D88  30FC               	movlw	252
  9085  0D89  0008               	return
  9086  0D8A                     l3270:	
  9087                           
  9088                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 296:     while(Sensor_Acq_ExecutePacket(sen
      +                          sor))
  9089  0D8A  0140               	movlb	0	; select bank0
  9090  0D8B  085D               	movf	Sensor_Acquisition@sensor,w
  9091  0D8C  3187  2749  318D   	fcall	_Sensor_Acq_ExecutePacket
  9092  0D8F  3A00               	xorlw	0
  9093  0D90  1D03               	skipz
  9094  0D91  2D82               	goto	l3264
  9095                           
  9096                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 305:     if((mtouch_sensor_packetsample_t)a
      +                          bs(packet_sample - sensor->rawSample) > 100u)
  9097  0D92  0140               	movlb	0	; select bank0
  9098  0D93  085D               	movf	Sensor_Acquisition@sensor,w
  9099  0D94  3E06               	addlw	6
  9100  0D95  0086               	movwf	6
  9101  0D96  0187               	clrf	7
  9102  0D97  3F40               	moviw [0]fsr1
  9103  0D98  023A               	subwf	_packet_sample,w
  9104  0D99  00CA               	movwf	abs@a
  9105  0D9A  3F41               	moviw [1]fsr1
  9106  0D9B  3B3B               	subwfb	_packet_sample+1,w
  9107  0D9C  00CB               	movwf	abs@a+1
  9108  0D9D  318B  2389  318D   	fcall	_abs
  9109  0DA0  3000               	movlw	0
  9110  0DA1  0140               	movlb	0	; select bank0
  9111  0DA2  024B               	subwf	?_abs+1,w
  9112  0DA3  3065               	movlw	101
  9113  0DA4  1903               	skipnz
  9114  0DA5  024A               	subwf	?_abs,w
  9115  0DA6  1C03               	skipc
  9116  0DA7  2DB1               	goto	l3282
  9117                           
  9118                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 306:     {;mcc_generated_files/mtouch/mtouc
      +                          h_sensor.c: 307:         Sensor_setActive(sensor);
  9119  0DA8  085D               	movf	Sensor_Acquisition@sensor,w
  9120  0DA9  3189  2166  318D   	fcall	_Sensor_setActive
  9121                           
  9122                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 308:         return Sensor_Scanfrequency_Ev
      +                          aluation(sensor);
  9123  0DAC  0140               	movlb	0	; select bank0
  9124  0DAD  085D               	movf	Sensor_Acquisition@sensor,w
  9125  0DAE  3186  26E3         	fcall	_Sensor_Scanfrequency_Evaluation
  9126  0DB0  0008               	return
  9127  0DB1                     l3282:	
  9128                           
  9129                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 311:     {;mcc_generated_files/mtouch/mtouc
      +                          h_sensor.c: 312:         Sensor_setInactive(sensor);
  9130  0DB1  085D               	movf	Sensor_Acquisition@sensor,w
  9131  0DB2  3189  216E  318D   	fcall	_Sensor_setInactive
  9132  0DB5  2D80               	goto	l3260
  9133  0DB6                     __end_of_Sensor_Acquisition:	
  9134                           
  9135                           	psect	text34
  9136  0B89                     __ptext34:	
  9137 ;; *************** function _abs *****************
  9138 ;; Defined at:
  9139 ;;		line 1 in file "C:\Program Files2\Microchip\xc8\v2.05\pic\sources\c99\common\abs.c"
  9140 ;; Parameters:    Size  Location     Type
  9141 ;;  a               2    0[BANK0 ] int 
  9142 ;; Auto vars:     Size  Location     Type
  9143 ;;		None
  9144 ;; Return value:  Size  Location     Type
  9145 ;;                  2    0[BANK0 ] int 
  9146 ;; Registers used:
  9147 ;;		wreg, status,2, status,0
  9148 ;; Tracked objects:
  9149 ;;		On entry : 0/0
  9150 ;;		On exit  : 0/0
  9151 ;;		Unchanged: 0/0
  9152 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  9153 ;;      Params:         0       2       0       0       0       0       0       0
  9154 ;;      Locals:         0       0       0       0       0       0       0       0
  9155 ;;      Temps:          0       2       0       0       0       0       0       0
  9156 ;;      Totals:         0       4       0       0       0       0       0       0
  9157 ;;Total ram usage:        4 bytes
  9158 ;; Hardware stack levels used:    1
  9159 ;; Hardware stack levels required when called:    4
  9160 ;; This function calls:
  9161 ;;		Nothing
  9162 ;; This function is called by:
  9163 ;;		_Sensor_Acquisition
  9164 ;; This function uses a non-reentrant model
  9165 ;;
  9166                           
  9167                           
  9168                           ;psect for function _abs
  9169  0B89                     _abs:	
  9170                           
  9171                           ;incstack = 0
  9172                           ; Regs used in _abs: [wreg+status,2+status,0]
  9173  0B89  0140               	movlb	0	; select bank0
  9174  0B8A  084B               	movf	abs@a+1,w
  9175  0B8B  3A80               	xorlw	128
  9176  0B8C  00CC               	movwf	??_abs
  9177  0B8D  3080               	movlw	128
  9178  0B8E  024C               	subwf	??_abs,w
  9179  0B8F  1D03               	skipz
  9180  0B90  2B93               	goto	u1985
  9181  0B91  3001               	movlw	1
  9182  0B92  024A               	subwf	abs@a,w
  9183  0B93                     u1985:	
  9184  0B93  1803               	skipnc
  9185  0B94  0008               	return
  9186  0B95  0140               	movlb	0	; select bank0
  9187  0B96  094A               	comf	abs@a,w
  9188  0B97  00CC               	movwf	??_abs
  9189  0B98  094B               	comf	abs@a+1,w
  9190  0B99  00CD               	movwf	??_abs+1
  9191  0B9A  0ACC               	incf	??_abs,f
  9192  0B9B  1903               	skipnz
  9193  0B9C  0ACD               	incf	??_abs+1,f
  9194  0B9D  084C               	movf	??_abs,w
  9195  0B9E  00CA               	movwf	?_abs
  9196  0B9F  084D               	movf	??_abs+1,w
  9197  0BA0  00CB               	movwf	?_abs+1
  9198  0BA1  0008               	return
  9199  0BA2                     __end_of_abs:	
  9200                           
  9201                           	psect	text35
  9202  096E                     __ptext35:	
  9203 ;; *************** function _Sensor_setInactive *****************
  9204 ;; Defined at:
  9205 ;;		line 593 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  9206 ;; Parameters:    Size  Location     Type
  9207 ;;  sensor          1    wreg     PTR struct .
  9208 ;;		 -> mtouch_sensor(9), 
  9209 ;; Auto vars:     Size  Location     Type
  9210 ;;  sensor          1    0[BANK0 ] PTR struct .
  9211 ;;		 -> mtouch_sensor(9), 
  9212 ;; Return value:  Size  Location     Type
  9213 ;;                  1    wreg      void 
  9214 ;; Registers used:
  9215 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  9216 ;; Tracked objects:
  9217 ;;		On entry : 0/0
  9218 ;;		On exit  : 0/0
  9219 ;;		Unchanged: 0/0
  9220 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  9221 ;;      Params:         0       0       0       0       0       0       0       0
  9222 ;;      Locals:         0       1       0       0       0       0       0       0
  9223 ;;      Temps:          0       0       0       0       0       0       0       0
  9224 ;;      Totals:         0       1       0       0       0       0       0       0
  9225 ;;Total ram usage:        1 bytes
  9226 ;; Hardware stack levels used:    1
  9227 ;; Hardware stack levels required when called:    4
  9228 ;; This function calls:
  9229 ;;		Nothing
  9230 ;; This function is called by:
  9231 ;;		_Sensor_Acquisition
  9232 ;; This function uses a non-reentrant model
  9233 ;;
  9234                           
  9235                           
  9236                           ;psect for function _Sensor_setInactive
  9237  096E                     _Sensor_setInactive:	
  9238                           
  9239                           ;incstack = 0
  9240                           ; Regs used in _Sensor_setInactive: [wreg+fsr1l+fsr1h+status,2+status,0]
  9241                           ;Sensor_setInactive@sensor stored from wreg
  9242  096E  0140               	movlb	0	; select bank0
  9243  096F  00CA               	movwf	Sensor_setInactive@sensor
  9244                           
  9245                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 593: static __attribute__((inline)) void Se
      +                          nsor_setInactive(mtouch_sensor_t* sensor);mcc_generated_files/mtouch/mtouch_sensor.c: 59
      +                          4: {;mcc_generated_files/mtouch/mtouch_sensor.c: 595:     sensor->active = 0;
  9246  0970  084A               	movf	Sensor_setInactive@sensor,w
  9247  0971  3E08               	addlw	8
  9248  0972  0086               	movwf	6
  9249  0973  0187               	clrf	7
  9250  0974  1101               	bcf	1,2
  9251  0975  0008               	return
  9252  0976                     __end_of_Sensor_setInactive:	
  9253                           
  9254                           	psect	text36
  9255  0966                     __ptext36:	
  9256 ;; *************** function _Sensor_setActive *****************
  9257 ;; Defined at:
  9258 ;;		line 588 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  9259 ;; Parameters:    Size  Location     Type
  9260 ;;  sensor          1    wreg     PTR struct .
  9261 ;;		 -> mtouch_sensor(9), 
  9262 ;; Auto vars:     Size  Location     Type
  9263 ;;  sensor          1    0[BANK0 ] PTR struct .
  9264 ;;		 -> mtouch_sensor(9), 
  9265 ;; Return value:  Size  Location     Type
  9266 ;;                  1    wreg      void 
  9267 ;; Registers used:
  9268 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  9269 ;; Tracked objects:
  9270 ;;		On entry : 0/0
  9271 ;;		On exit  : 0/0
  9272 ;;		Unchanged: 0/0
  9273 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  9274 ;;      Params:         0       0       0       0       0       0       0       0
  9275 ;;      Locals:         0       1       0       0       0       0       0       0
  9276 ;;      Temps:          0       0       0       0       0       0       0       0
  9277 ;;      Totals:         0       1       0       0       0       0       0       0
  9278 ;;Total ram usage:        1 bytes
  9279 ;; Hardware stack levels used:    1
  9280 ;; Hardware stack levels required when called:    4
  9281 ;; This function calls:
  9282 ;;		Nothing
  9283 ;; This function is called by:
  9284 ;;		_Sensor_Acquisition
  9285 ;; This function uses a non-reentrant model
  9286 ;;
  9287                           
  9288                           
  9289                           ;psect for function _Sensor_setActive
  9290  0966                     _Sensor_setActive:	
  9291                           
  9292                           ;incstack = 0
  9293                           ; Regs used in _Sensor_setActive: [wreg+fsr1l+fsr1h+status,2+status,0]
  9294                           ;Sensor_setActive@sensor stored from wreg
  9295  0966  0140               	movlb	0	; select bank0
  9296  0967  00CA               	movwf	Sensor_setActive@sensor
  9297                           
  9298                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 588: static __attribute__((inline)) void Se
      +                          nsor_setActive(mtouch_sensor_t* sensor);mcc_generated_files/mtouch/mtouch_sensor.c: 589:
      +                           {;mcc_generated_files/mtouch/mtouch_sensor.c: 590:     sensor->active = 1;
  9299  0968  084A               	movf	Sensor_setActive@sensor,w
  9300  0969  3E08               	addlw	8
  9301  096A  0086               	movwf	6
  9302  096B  0187               	clrf	7
  9303  096C  1501               	bsf	1,2
  9304  096D  0008               	return
  9305  096E                     __end_of_Sensor_setActive:	
  9306                           
  9307                           	psect	text37
  9308  09EC                     __ptext37:	
  9309 ;; *************** function _Sensor_isEnabled *****************
  9310 ;; Defined at:
  9311 ;;		line 573 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  9312 ;; Parameters:    Size  Location     Type
  9313 ;;  sensor          1    wreg     PTR struct .
  9314 ;;		 -> mtouch_sensor(9), 
  9315 ;; Auto vars:     Size  Location     Type
  9316 ;;  sensor          1    0[BANK0 ] PTR struct .
  9317 ;;		 -> mtouch_sensor(9), 
  9318 ;; Return value:  Size  Location     Type
  9319 ;;                  1    wreg      _Bool 
  9320 ;; Registers used:
  9321 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  9322 ;; Tracked objects:
  9323 ;;		On entry : 0/0
  9324 ;;		On exit  : 0/0
  9325 ;;		Unchanged: 0/0
  9326 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  9327 ;;      Params:         0       0       0       0       0       0       0       0
  9328 ;;      Locals:         0       1       0       0       0       0       0       0
  9329 ;;      Temps:          0       0       0       0       0       0       0       0
  9330 ;;      Totals:         0       1       0       0       0       0       0       0
  9331 ;;Total ram usage:        1 bytes
  9332 ;; Hardware stack levels used:    1
  9333 ;; Hardware stack levels required when called:    4
  9334 ;; This function calls:
  9335 ;;		Nothing
  9336 ;; This function is called by:
  9337 ;;		_Sensor_Service
  9338 ;;		_Sensor_Acquisition
  9339 ;; This function uses a non-reentrant model
  9340 ;;
  9341                           
  9342                           
  9343                           ;psect for function _Sensor_isEnabled
  9344  09EC                     _Sensor_isEnabled:	
  9345                           
  9346                           ;incstack = 0
  9347                           ; Regs used in _Sensor_isEnabled: [wreg+fsr1l+fsr1h+status,2+status,0]
  9348                           ;Sensor_isEnabled@sensor stored from wreg
  9349  09EC  0140               	movlb	0	; select bank0
  9350  09ED  00CA               	movwf	Sensor_isEnabled@sensor
  9351                           
  9352                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 573: static _Bool Sensor_isEnabled(mtouch_s
      +                          ensor_t* sensor);mcc_generated_files/mtouch/mtouch_sensor.c: 574: {;mcc_generated_files/
      +                          mtouch/mtouch_sensor.c: 575:     if(sensor!=((void*)0))
  9353  09EE  084A               	movf	Sensor_isEnabled@sensor,w
  9354  09EF  1903               	btfsc	3,2
  9355  09F0  29F8               	goto	l3164
  9356                           
  9357                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 576:         return (_Bool)sensor->enabled;
  9358  09F1  084A               	movf	Sensor_isEnabled@sensor,w
  9359  09F2  3E08               	addlw	8
  9360  09F3  0086               	movwf	6
  9361  09F4  0187               	clrf	7
  9362  09F5  0801               	movf	1,w
  9363  09F6  3901               	andlw	1
  9364  09F7  0008               	return
  9365  09F8                     l3164:	
  9366                           
  9367                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 578:         return 0;
  9368  09F8  3000               	movlw	0
  9369  09F9  0008               	return
  9370  09FA                     __end_of_Sensor_isEnabled:	
  9371                           
  9372                           	psect	text38
  9373  06E3                     __ptext38:	
  9374 ;; *************** function _Sensor_Scanfrequency_Evaluation *****************
  9375 ;; Defined at:
  9376 ;;		line 441 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  9377 ;; Parameters:    Size  Location     Type
  9378 ;;  sensor          1    wreg     PTR struct .
  9379 ;;		 -> mtouch_sensor(9), 
  9380 ;; Auto vars:     Size  Location     Type
  9381 ;;  sensor          1   13[BANK0 ] PTR struct .
  9382 ;;		 -> mtouch_sensor(9), 
  9383 ;;  best_packet_    2   11[BANK0 ] unsigned short 
  9384 ;;  packet_noise    2    9[BANK0 ] unsigned short 
  9385 ;;  i               1   16[BANK0 ] unsigned char 
  9386 ;;  retry           1   15[BANK0 ] unsigned char 
  9387 ;;  best_sample_    1   14[BANK0 ] unsigned char 
  9388 ;; Return value:  Size  Location     Type
  9389 ;;                  1    wreg      enum E6810
  9390 ;; Registers used:
  9391 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9392 ;; Tracked objects:
  9393 ;;		On entry : 0/0
  9394 ;;		On exit  : 0/0
  9395 ;;		Unchanged: 0/0
  9396 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  9397 ;;      Params:         0       0       0       0       0       0       0       0
  9398 ;;      Locals:         0       8       0       0       0       0       0       0
  9399 ;;      Temps:          0       2       0       0       0       0       0       0
  9400 ;;      Totals:         0      10       0       0       0       0       0       0
  9401 ;;Total ram usage:       10 bytes
  9402 ;; Hardware stack levels used:    1
  9403 ;; Hardware stack levels required when called:    7
  9404 ;; This function calls:
  9405 ;;		_Sensor_Acq_ExecutePacket
  9406 ;; This function is called by:
  9407 ;;		_Sensor_Acquisition
  9408 ;; This function uses a non-reentrant model
  9409 ;;
  9410                           
  9411                           
  9412                           ;psect for function _Sensor_Scanfrequency_Evaluation
  9413  06E3                     _Sensor_Scanfrequency_Evaluation:	
  9414                           
  9415                           ;incstack = 0
  9416                           ; Regs used in _Sensor_Scanfrequency_Evaluation: [wreg-fsr1h+status,2+status,0+pclath+cs
      +                          tack]
  9417                           ;Sensor_Scanfrequency_Evaluation@sensor stored from wreg
  9418  06E3  0140               	movlb	0	; select bank0
  9419  06E4  00D7               	movwf	Sensor_Scanfrequency_Evaluation@sensor
  9420                           
  9421                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 441: static enum mtouch_sensor_error Sensor
      +                          _Scanfrequency_Evaluation(mtouch_sensor_t* sensor);mcc_generated_files/mtouch/mtouch_sen
      +                          sor.c: 442: {;mcc_generated_files/mtouch/mtouch_sensor.c: 443:     uint8_t i;;mcc_genera
      +                          ted_files/mtouch/mtouch_sensor.c: 444:     const mtouch_sensor_sampleperiod_t frequency_
      +                          hop[5] = {3,13,14,20,13};;mcc_generated_files/mtouch/mtouch_sensor.c: 445:     mtouch_se
      +                          nsor_packetnoise_t packet_noise_Max;;mcc_generated_files/mtouch/mtouch_sensor.c: 446:   
      +                            mtouch_sensor_sampleperiod_t best_sample_period;
  9422  06E5  0839               	movf	_packet_noise+1,w
  9423  06E6  00D2               	movwf	??_Sensor_Scanfrequency_Evaluation+1
  9424  06E7  0838               	movf	_packet_noise,w
  9425  06E8  00D1               	movwf	??_Sensor_Scanfrequency_Evaluation
  9426  06E9  36D2               	lsrf	??_Sensor_Scanfrequency_Evaluation+1,f
  9427  06EA  0CD1               	rrf	??_Sensor_Scanfrequency_Evaluation,f
  9428  06EB  36D2               	lsrf	??_Sensor_Scanfrequency_Evaluation+1,f
  9429  06EC  0CD1               	rrf	??_Sensor_Scanfrequency_Evaluation,f
  9430  06ED  0838               	movf	_packet_noise,w
  9431  06EE  0751               	addwf	??_Sensor_Scanfrequency_Evaluation,w
  9432  06EF  00D3               	movwf	Sensor_Scanfrequency_Evaluation@packet_noise_Max
  9433  06F0  0839               	movf	_packet_noise+1,w
  9434  06F1  3D52               	addwfc	??_Sensor_Scanfrequency_Evaluation+1,w
  9435  06F2  00D4               	movwf	Sensor_Scanfrequency_Evaluation@packet_noise_Max+1
  9436                           
  9437                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 451:     best_sample_period = sample_period
      +                          ;
  9438  06F3  086F               	movf	_sample_period,w
  9439  06F4  00D1               	movwf	??_Sensor_Scanfrequency_Evaluation
  9440  06F5  0851               	movf	??_Sensor_Scanfrequency_Evaluation,w
  9441  06F6  00D8               	movwf	Sensor_Scanfrequency_Evaluation@best_sample_period
  9442                           
  9443                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 452:     best_packet_sample = packet_sample
      +                          ;
  9444  06F7  083B               	movf	_packet_sample+1,w
  9445  06F8  00D6               	movwf	Sensor_Scanfrequency_Evaluation@best_packet_sample+1
  9446  06F9  083A               	movf	_packet_sample,w
  9447  06FA  00D5               	movwf	Sensor_Scanfrequency_Evaluation@best_packet_sample
  9448                           
  9449                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 455:     for(i=(uint8_t)0;i<(uint8_t)5;i++)
  9450  06FB  01DA               	clrf	Sensor_Scanfrequency_Evaluation@i
  9451  06FC                     l3186:	
  9452                           
  9453                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 456:     {;mcc_generated_files/mtouch/mtouc
      +                          h_sensor.c: 457:         sample_period += frequency_hop[i];
  9454  06FC  085A               	movf	Sensor_Scanfrequency_Evaluation@i,w
  9455  06FD  3E1F               	addlw	low (Sensor_Scanfrequency_Evaluation@frequency_hop| (0+32768))
  9456  06FE  0084               	movwf	4
  9457  06FF  3088               	movlw	high (Sensor_Scanfrequency_Evaluation@frequency_hop| (0+32768))
  9458  0700  1803               	skipnc
  9459  0701  3E01               	addlw	1
  9460  0702  0085               	movwf	5
  9461  0703  0800               	movf	0,w	;code access
  9462  0704  00D1               	movwf	??_Sensor_Scanfrequency_Evaluation
  9463  0705  0851               	movf	??_Sensor_Scanfrequency_Evaluation,w
  9464  0706  07EF               	addwf	_sample_period,f
  9465                           
  9466                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 458:         if(sample_period > ((mtouch_se
      +                          nsor_sampleperiod_t)255))
  9467  0707  30C8               	movlw	200
  9468  0708  026F               	subwf	_sample_period,w
  9469  0709  1803               	skipnc
  9470  070A  2F0F               	goto	l3194
  9471                           
  9472                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 464:         {;mcc_generated_files/mtouch/m
      +                          touch_sensor.c: 465:             sample_period += ((mtouch_sensor_sampleperiod_t)200);
  9473  070B  30C8               	movlw	200
  9474  070C  00D1               	movwf	??_Sensor_Scanfrequency_Evaluation
  9475  070D  0851               	movf	??_Sensor_Scanfrequency_Evaluation,w
  9476  070E  07EF               	addwf	_sample_period,f
  9477  070F                     l3194:	
  9478                           
  9479                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 468:         retry = (uint8_t)5u;
  9480  070F  3005               	movlw	5
  9481  0710  00D1               	movwf	??_Sensor_Scanfrequency_Evaluation
  9482  0711  0851               	movf	??_Sensor_Scanfrequency_Evaluation,w
  9483  0712  00D9               	movwf	Sensor_Scanfrequency_Evaluation@retry
  9484  0713                     l3202:	
  9485                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 470:         while(Sensor_Acq_ExecutePacket
      +                          (sensor))
  9486                           
  9487                           
  9488                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 470:         while(Sensor_Acq_ExecutePacket
      +                          (sensor))
  9489  0713  0857               	movf	Sensor_Scanfrequency_Evaluation@sensor,w
  9490  0714  3187  2749  3186   	fcall	_Sensor_Acq_ExecutePacket
  9491  0717  3A00               	xorlw	0
  9492  0718  1903               	btfsc	3,2
  9493  0719  2F22               	goto	l3204
  9494                           
  9495                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 471:         {;mcc_generated_files/mtouch/m
      +                          touch_sensor.c: 472:             retry--;
  9496  071A  3001               	movlw	1
  9497  071B  0140               	movlb	0	; select bank0
  9498  071C  02D9               	subwf	Sensor_Scanfrequency_Evaluation@retry,f
  9499                           
  9500                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 473:             if(retry == 0)
  9501  071D  0859               	movf	Sensor_Scanfrequency_Evaluation@retry,w
  9502  071E  1D03               	btfss	3,2
  9503  071F  2F13               	goto	l3202
  9504                           
  9505                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 474:             {;mcc_generated_files/mtou
      +                          ch/mtouch_sensor.c: 475:                 return MTOUCH_SENSOR_ERROR_tooManyRetries;
  9506  0720  30FC               	movlw	252
  9507  0721  0008               	return
  9508  0722                     l3204:	
  9509                           
  9510                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 479:         if(packet_noise_Max < packet_n
      +                          oise)
  9511  0722  0140               	movlb	0	; select bank0
  9512  0723  0839               	movf	_packet_noise+1,w
  9513  0724  0254               	subwf	Sensor_Scanfrequency_Evaluation@packet_noise_Max+1,w
  9514  0725  1D03               	skipz
  9515  0726  2F29               	goto	u2025
  9516  0727  0838               	movf	_packet_noise,w
  9517  0728  0253               	subwf	Sensor_Scanfrequency_Evaluation@packet_noise_Max,w
  9518  0729                     u2025:	
  9519  0729  1803               	skipnc
  9520  072A  2F37               	goto	l3208
  9521                           
  9522                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 480:         {;mcc_generated_files/mtouch/m
      +                          touch_sensor.c: 481:             packet_noise_Max = packet_noise;
  9523  072B  0839               	movf	_packet_noise+1,w
  9524  072C  00D4               	movwf	Sensor_Scanfrequency_Evaluation@packet_noise_Max+1
  9525  072D  0838               	movf	_packet_noise,w
  9526  072E  00D3               	movwf	Sensor_Scanfrequency_Evaluation@packet_noise_Max
  9527                           
  9528                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 482:             best_sample_period = sampl
      +                          e_period;
  9529  072F  086F               	movf	_sample_period,w
  9530  0730  00D1               	movwf	??_Sensor_Scanfrequency_Evaluation
  9531  0731  0851               	movf	??_Sensor_Scanfrequency_Evaluation,w
  9532  0732  00D8               	movwf	Sensor_Scanfrequency_Evaluation@best_sample_period
  9533                           
  9534                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 483:             best_packet_sample = packe
      +                          t_sample;
  9535  0733  083B               	movf	_packet_sample+1,w
  9536  0734  00D6               	movwf	Sensor_Scanfrequency_Evaluation@best_packet_sample+1
  9537  0735  083A               	movf	_packet_sample,w
  9538  0736  00D5               	movwf	Sensor_Scanfrequency_Evaluation@best_packet_sample
  9539  0737                     l3208:	
  9540                           
  9541                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 485:     }
  9542  0737  3001               	movlw	1
  9543  0738  00D1               	movwf	??_Sensor_Scanfrequency_Evaluation
  9544  0739  0851               	movf	??_Sensor_Scanfrequency_Evaluation,w
  9545  073A  07DA               	addwf	Sensor_Scanfrequency_Evaluation@i,f
  9546  073B  3005               	movlw	5
  9547  073C  025A               	subwf	Sensor_Scanfrequency_Evaluation@i,w
  9548  073D  1C03               	skipc
  9549  073E  2EFC               	goto	l3186
  9550                           
  9551                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 487:     sample_period = best_sample_period
      +                          ;
  9552  073F  0858               	movf	Sensor_Scanfrequency_Evaluation@best_sample_period,w
  9553  0740  00D1               	movwf	??_Sensor_Scanfrequency_Evaluation
  9554  0741  0851               	movf	??_Sensor_Scanfrequency_Evaluation,w
  9555  0742  00EF               	movwf	_sample_period
  9556                           
  9557                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 488:     packet_sample = best_packet_sample
      +                          ;
  9558  0743  0856               	movf	Sensor_Scanfrequency_Evaluation@best_packet_sample+1,w
  9559  0744  00BB               	movwf	_packet_sample+1
  9560  0745  0855               	movf	Sensor_Scanfrequency_Evaluation@best_packet_sample,w
  9561  0746  00BA               	movwf	_packet_sample
  9562                           
  9563                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 490:     return MTOUCH_SENSOR_ERROR_none;
  9564  0747  3000               	movlw	0
  9565  0748  0008               	return
  9566  0749                     __end_of_Sensor_Scanfrequency_Evaluation:	
  9567                           
  9568                           	psect	text39
  9569  0749                     __ptext39:	
  9570 ;; *************** function _Sensor_Acq_ExecutePacket *****************
  9571 ;; Defined at:
  9572 ;;		line 324 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  9573 ;; Parameters:    Size  Location     Type
  9574 ;;  sensor          1    wreg     PTR struct .
  9575 ;;		 -> mtouch_sensor(9), 
  9576 ;; Auto vars:     Size  Location     Type
  9577 ;;  sensor          1    6[BANK0 ] PTR struct .
  9578 ;;		 -> mtouch_sensor(9), 
  9579 ;;  error           1    5[BANK0 ] enum E6810
  9580 ;;  ADCON1_temp     1    4[BANK0 ] unsigned char 
  9581 ;;  ADCON0_temp     1    3[BANK0 ] unsigned char 
  9582 ;; Return value:  Size  Location     Type
  9583 ;;                  1    wreg      enum E6810
  9584 ;; Registers used:
  9585 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9586 ;; Tracked objects:
  9587 ;;		On entry : 0/0
  9588 ;;		On exit  : 0/0
  9589 ;;		Unchanged: 0/0
  9590 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  9591 ;;      Params:         0       0       0       0       0       0       0       0
  9592 ;;      Locals:         0       4       0       0       0       0       0       0
  9593 ;;      Temps:          0       1       0       0       0       0       0       0
  9594 ;;      Totals:         0       5       0       0       0       0       0       0
  9595 ;;Total ram usage:        5 bytes
  9596 ;; Hardware stack levels used:    1
  9597 ;; Hardware stack levels required when called:    6
  9598 ;; This function calls:
  9599 ;;		_MTOUCH_Sensor_Scan_Initialize
  9600 ;;		_Sensor_setScanFunction
  9601 ;;		_TMR2_LoadPeriodRegister
  9602 ;;		_TMR2_SetInterruptHandler
  9603 ;;		_TMR2_StartTimer
  9604 ;;		_TMR2_StopTimer
  9605 ;; This function is called by:
  9606 ;;		_Sensor_Acquisition
  9607 ;;		_Sensor_Scanfrequency_Evaluation
  9608 ;; This function uses a non-reentrant model
  9609 ;;
  9610                           
  9611                           
  9612                           ;psect for function _Sensor_Acq_ExecutePacket
  9613  0749                     _Sensor_Acq_ExecutePacket:	
  9614                           
  9615                           ;incstack = 0
  9616                           ; Regs used in _Sensor_Acq_ExecutePacket: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cst
      +                          ack]
  9617                           ;Sensor_Acq_ExecutePacket@sensor stored from wreg
  9618  0749  0140               	movlb	0	; select bank0
  9619  074A  00D0               	movwf	Sensor_Acq_ExecutePacket@sensor
  9620                           
  9621                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 324: static enum mtouch_sensor_error Sensor
      +                          _Acq_ExecutePacket(mtouch_sensor_t* sensor);mcc_generated_files/mtouch/mtouch_sensor.c: 
      +                          325: {;mcc_generated_files/mtouch/mtouch_sensor.c: 327:     if(!(INTCONbits.GIE & INTCON
      +                          bits.PEIE))
  9622  074B  0E0B               	swapf	11,w	;volatile
  9623  074C  0C89               	rrf	9,f
  9624  074D  0C89               	rrf	9,f
  9625  074E  3901               	andlw	1
  9626  074F  00CC               	movwf	??_Sensor_Acq_ExecutePacket
  9627  0750  0D0B               	rlf	11,w	;volatile
  9628  0751  0D0B               	rlf	11,w	;volatile
  9629  0752  3901               	andlw	1
  9630  0753  054C               	andwf	??_Sensor_Acq_ExecutePacket,w
  9631  0754  1D03               	btfss	3,2
  9632  0755  2F58               	goto	l3096
  9633                           
  9634                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 328:         return MTOUCH_SENSOR_ERROR_int
      +                          errupt_notEnabled;
  9635  0756  30FE               	movlw	254
  9636  0757  0008               	return
  9637  0758                     l3096:	
  9638                           
  9639                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 330:     enum mtouch_sensor_error error = M
      +                          TOUCH_SENSOR_ERROR_none;
  9640  0758  01CF               	clrf	Sensor_Acq_ExecutePacket@error
  9641                           
  9642                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 331:     uint8_t ADCON0_temp;;mcc_generated
      +                          _files/mtouch/mtouch_sensor.c: 332:     uint8_t ADCON1_temp;;mcc_generated_files/mtouch/
      +                          mtouch_sensor.c: 335:     ADCON0_temp = ADCON0;
  9643  0759  0141               	movlb	1	; select bank1
  9644  075A  081D               	movf	29,w	;volatile
  9645  075B  0140               	movlb	0	; select bank0
  9646  075C  00CC               	movwf	??_Sensor_Acq_ExecutePacket
  9647  075D  084C               	movf	??_Sensor_Acq_ExecutePacket,w
  9648  075E  00CD               	movwf	Sensor_Acq_ExecutePacket@ADCON0_temp
  9649                           
  9650                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 336:     ADCON1_temp = ADCON1;
  9651  075F  0141               	movlb	1	; select bank1
  9652  0760  081E               	movf	30,w	;volatile
  9653  0761  0140               	movlb	0	; select bank0
  9654  0762  00CC               	movwf	??_Sensor_Acq_ExecutePacket
  9655  0763  084C               	movf	??_Sensor_Acq_ExecutePacket,w
  9656  0764  00CE               	movwf	Sensor_Acq_ExecutePacket@ADCON1_temp
  9657                           
  9658                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 337:     MTOUCH_Sensor_Scan_Initialize();
  9659  0765  3189  2196  3187   	fcall	_MTOUCH_Sensor_Scan_Initialize
  9660                           
  9661                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 340:     Sensor_setScanFunction(sensor);
  9662  0768  0140               	movlb	0	; select bank0
  9663  0769  0850               	movf	Sensor_Acq_ExecutePacket@sensor,w
  9664  076A  318A  225B  3187   	fcall	_Sensor_setScanFunction
  9665                           
  9666                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 342:     currentScannSensor = sensor->senso
      +                          r_name;
  9667  076D  0140               	movlb	0	; select bank0
  9668  076E  0850               	movf	Sensor_Acq_ExecutePacket@sensor,w
  9669  076F  0086               	movwf	6
  9670  0770  0187               	clrf	7
  9671  0771  0801               	movf	1,w
  9672  0772  00CC               	movwf	??_Sensor_Acq_ExecutePacket
  9673  0773  084C               	movf	??_Sensor_Acq_ExecutePacket,w
  9674  0774  00FD               	movwf	_currentScannSensor
  9675                           
  9676                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 343:     packet_counter = sensor->oversampl
      +                          ing;
  9677  0775  0850               	movf	Sensor_Acq_ExecutePacket@sensor,w
  9678  0776  0086               	movwf	6
  9679  0777  0187               	clrf	7
  9680  0778  3F45               	moviw [5]fsr1
  9681  0779  00FC               	movwf	_packet_counter
  9682                           
  9683                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 344:     packet_sample = 0;
  9684  077A  01BA               	clrf	_packet_sample
  9685  077B  01BB               	clrf	_packet_sample+1
  9686                           
  9687                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 345:     sensor_globalFlags.packet_done = 0
      +                          ;
  9688  077C  1047               	bcf	_sensor_globalFlags,0	;volatile
  9689                           
  9690                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 346:     packet_noise = 0;
  9691  077D  01B8               	clrf	_packet_noise
  9692  077E  01B9               	clrf	_packet_noise+1
  9693                           
  9694                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 348:     TMR2_SetInterruptHandler(Sensor_Ac
      +                          q_ExecuteScan);
  9695  077F  30DB               	movlw	low _Sensor_Acq_ExecuteScan
  9696  0780  00CA               	movwf	TMR2_SetInterruptHandler@InterruptHandler
  9697  0781  3005               	movlw	high _Sensor_Acq_ExecuteScan
  9698  0782  00CB               	movwf	TMR2_SetInterruptHandler@InterruptHandler+1
  9699  0783  3189  2148  3187   	fcall	_TMR2_SetInterruptHandler
  9700                           
  9701                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 349:     TMR2_LoadPeriodRegister(sample_per
      +                          iod);
  9702  0786  0140               	movlb	0	; select bank0
  9703  0787  086F               	movf	_sample_period,w
  9704  0788  3189  2142  3187   	fcall	_TMR2_LoadPeriodRegister
  9705                           
  9706                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 350:     TMR2_StartTimer();
  9707  078B  3189  2127  3187   	fcall	_TMR2_StartTimer
  9708                           
  9709                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 352:     sensor_globalFlags.interrupted = 0
      +                          ;
  9710  078E  0140               	movlb	0	; select bank0
  9711  078F  10C7               	bcf	_sensor_globalFlags,1	;volatile
  9712  0790                     l159:	
  9713                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 361:         }
  9714                           
  9715                           
  9716                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 357:         while(PIR1bits.ADIF == 0)
  9717  0790  014E               	movlb	14	; select bank14
  9718  0791  180D               	btfsc	13,0	;volatile
  9719  0792  2F96               	goto	l162
  9720                           
  9721                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 358:         {;mcc_generated_files/mtouch/m
      +                          touch_sensor.c: 359:             if(sensor_globalFlags.packet_done == (uint8_t)1)
  9722  0793  0140               	movlb	0	; select bank0
  9723  0794  1C47               	btfss	_sensor_globalFlags,0	;volatile
  9724  0795  2F90               	goto	l159
  9725  0796                     l162:	
  9726                           
  9727                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 362:         PIR1bits.ADIF = 0;
  9728  0796  014E               	movlb	14	; select bank14
  9729  0797  100D               	bcf	13,0	;volatile
  9730                           
  9731                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 363:     } while(sensor_globalFlags.packet_
      +                          done == 0);
  9732  0798  0140               	movlb	0	; select bank0
  9733  0799  1C47               	btfss	_sensor_globalFlags,0	;volatile
  9734  079A  2F90               	goto	l159
  9735                           
  9736                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 366:     TMR2_StopTimer();
  9737  079B  3189  212D  3187   	fcall	_TMR2_StopTimer
  9738                           
  9739                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 367:     ADCON0 = ADCON0_temp;
  9740  079E  0140               	movlb	0	; select bank0
  9741  079F  084D               	movf	Sensor_Acq_ExecutePacket@ADCON0_temp,w
  9742  07A0  0141               	movlb	1	; select bank1
  9743  07A1  009D               	movwf	29	;volatile
  9744                           
  9745                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 368:     ADCON1 = ADCON1_temp;
  9746  07A2  0140               	movlb	0	; select bank0
  9747  07A3  084E               	movf	Sensor_Acq_ExecutePacket@ADCON1_temp,w
  9748  07A4  0141               	movlb	1	; select bank1
  9749  07A5  009E               	movwf	30	;volatile
  9750                           
  9751                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 370:     if(sensor_globalFlags.interrupted)
  9752  07A6  0140               	movlb	0	; select bank0
  9753  07A7  1CC7               	btfss	_sensor_globalFlags,1	;volatile
  9754  07A8  2FAD               	goto	l164
  9755                           
  9756                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 371:     {;mcc_generated_files/mtouch/mtouc
      +                          h_sensor.c: 372:         error = MTOUCH_SENSOR_ERROR_interruptedScan;
  9757  07A9  30FA               	movlw	250
  9758  07AA  00CC               	movwf	??_Sensor_Acq_ExecutePacket
  9759  07AB  084C               	movf	??_Sensor_Acq_ExecutePacket,w
  9760  07AC  00CF               	movwf	Sensor_Acq_ExecutePacket@error
  9761  07AD                     l164:	
  9762                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 373:     }
  9763                           
  9764                           
  9765                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 375:     return error;
  9766  07AD  084F               	movf	Sensor_Acq_ExecutePacket@error,w
  9767  07AE  0008               	return
  9768  07AF                     __end_of_Sensor_Acq_ExecutePacket:	
  9769                           
  9770                           	psect	text40
  9771  092D                     __ptext40:	
  9772 ;; *************** function _TMR2_StopTimer *****************
  9773 ;; Defined at:
  9774 ;;		line 125 in file "mcc_generated_files/tmr2.c"
  9775 ;; Parameters:    Size  Location     Type
  9776 ;;		None
  9777 ;; Auto vars:     Size  Location     Type
  9778 ;;		None
  9779 ;; Return value:  Size  Location     Type
  9780 ;;                  1    wreg      void 
  9781 ;; Registers used:
  9782 ;;		status,2, status,0, pclath, cstack
  9783 ;; Tracked objects:
  9784 ;;		On entry : 0/0
  9785 ;;		On exit  : 0/0
  9786 ;;		Unchanged: 0/0
  9787 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  9788 ;;      Params:         0       0       0       0       0       0       0       0
  9789 ;;      Locals:         0       0       0       0       0       0       0       0
  9790 ;;      Temps:          0       0       0       0       0       0       0       0
  9791 ;;      Totals:         0       0       0       0       0       0       0       0
  9792 ;;Total ram usage:        0 bytes
  9793 ;; Hardware stack levels used:    1
  9794 ;; Hardware stack levels required when called:    5
  9795 ;; This function calls:
  9796 ;;		_TMR2_Stop
  9797 ;; This function is called by:
  9798 ;;		_Sensor_Acq_ExecutePacket
  9799 ;; This function uses a non-reentrant model
  9800 ;;
  9801                           
  9802                           
  9803                           ;psect for function _TMR2_StopTimer
  9804  092D                     _TMR2_StopTimer:	
  9805                           
  9806                           ;mcc_generated_files/tmr2.c: 127:     TMR2_Stop();
  9807                           
  9808                           ;incstack = 0
  9809                           ; Regs used in _TMR2_StopTimer: [status,2+status,0+pclath+cstack]
  9810  092D  3189  212A         	fcall	_TMR2_Stop
  9811  092F  0008               	return
  9812  0930                     __end_of_TMR2_StopTimer:	
  9813                           
  9814                           	psect	text41
  9815  092A                     __ptext41:	
  9816 ;; *************** function _TMR2_Stop *****************
  9817 ;; Defined at:
  9818 ;;		line 119 in file "mcc_generated_files/tmr2.c"
  9819 ;; Parameters:    Size  Location     Type
  9820 ;;		None
  9821 ;; Auto vars:     Size  Location     Type
  9822 ;;		None
  9823 ;; Return value:  Size  Location     Type
  9824 ;;                  1    wreg      void 
  9825 ;; Registers used:
  9826 ;;		None
  9827 ;; Tracked objects:
  9828 ;;		On entry : 0/0
  9829 ;;		On exit  : 0/0
  9830 ;;		Unchanged: 0/0
  9831 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  9832 ;;      Params:         0       0       0       0       0       0       0       0
  9833 ;;      Locals:         0       0       0       0       0       0       0       0
  9834 ;;      Temps:          0       0       0       0       0       0       0       0
  9835 ;;      Totals:         0       0       0       0       0       0       0       0
  9836 ;;Total ram usage:        0 bytes
  9837 ;; Hardware stack levels used:    1
  9838 ;; Hardware stack levels required when called:    4
  9839 ;; This function calls:
  9840 ;;		Nothing
  9841 ;; This function is called by:
  9842 ;;		_TMR2_StopTimer
  9843 ;; This function uses a non-reentrant model
  9844 ;;
  9845                           
  9846                           
  9847                           ;psect for function _TMR2_Stop
  9848  092A                     _TMR2_Stop:	
  9849                           
  9850                           ;mcc_generated_files/tmr2.c: 122:     T2CONbits.TMR2ON = 0;
  9851                           
  9852                           ;incstack = 0
  9853                           ; Regs used in _TMR2_Stop: []
  9854  092A  0145               	movlb	5	; select bank5
  9855  092B  138E               	bcf	14,7	;volatile
  9856  092C  0008               	return
  9857  092D                     __end_of_TMR2_Stop:	
  9858                           
  9859                           	psect	text42
  9860  0927                     __ptext42:	
  9861 ;; *************** function _TMR2_StartTimer *****************
  9862 ;; Defined at:
  9863 ;;		line 114 in file "mcc_generated_files/tmr2.c"
  9864 ;; Parameters:    Size  Location     Type
  9865 ;;		None
  9866 ;; Auto vars:     Size  Location     Type
  9867 ;;		None
  9868 ;; Return value:  Size  Location     Type
  9869 ;;                  1    wreg      void 
  9870 ;; Registers used:
  9871 ;;		status,2, status,0, pclath, cstack
  9872 ;; Tracked objects:
  9873 ;;		On entry : 0/0
  9874 ;;		On exit  : 0/0
  9875 ;;		Unchanged: 0/0
  9876 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  9877 ;;      Params:         0       0       0       0       0       0       0       0
  9878 ;;      Locals:         0       0       0       0       0       0       0       0
  9879 ;;      Temps:          0       0       0       0       0       0       0       0
  9880 ;;      Totals:         0       0       0       0       0       0       0       0
  9881 ;;Total ram usage:        0 bytes
  9882 ;; Hardware stack levels used:    1
  9883 ;; Hardware stack levels required when called:    5
  9884 ;; This function calls:
  9885 ;;		_TMR2_Start
  9886 ;; This function is called by:
  9887 ;;		_Sensor_Acq_ExecutePacket
  9888 ;; This function uses a non-reentrant model
  9889 ;;
  9890                           
  9891                           
  9892                           ;psect for function _TMR2_StartTimer
  9893  0927                     _TMR2_StartTimer:	
  9894                           
  9895                           ;mcc_generated_files/tmr2.c: 116:     TMR2_Start();
  9896                           
  9897                           ;incstack = 0
  9898                           ; Regs used in _TMR2_StartTimer: [status,2+status,0+pclath+cstack]
  9899  0927  3189  2124         	fcall	_TMR2_Start
  9900  0929  0008               	return
  9901  092A                     __end_of_TMR2_StartTimer:	
  9902                           
  9903                           	psect	text43
  9904  0924                     __ptext43:	
  9905 ;; *************** function _TMR2_Start *****************
  9906 ;; Defined at:
  9907 ;;		line 108 in file "mcc_generated_files/tmr2.c"
  9908 ;; Parameters:    Size  Location     Type
  9909 ;;		None
  9910 ;; Auto vars:     Size  Location     Type
  9911 ;;		None
  9912 ;; Return value:  Size  Location     Type
  9913 ;;                  1    wreg      void 
  9914 ;; Registers used:
  9915 ;;		None
  9916 ;; Tracked objects:
  9917 ;;		On entry : 0/0
  9918 ;;		On exit  : 0/0
  9919 ;;		Unchanged: 0/0
  9920 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  9921 ;;      Params:         0       0       0       0       0       0       0       0
  9922 ;;      Locals:         0       0       0       0       0       0       0       0
  9923 ;;      Temps:          0       0       0       0       0       0       0       0
  9924 ;;      Totals:         0       0       0       0       0       0       0       0
  9925 ;;Total ram usage:        0 bytes
  9926 ;; Hardware stack levels used:    1
  9927 ;; Hardware stack levels required when called:    4
  9928 ;; This function calls:
  9929 ;;		Nothing
  9930 ;; This function is called by:
  9931 ;;		_TMR2_StartTimer
  9932 ;; This function uses a non-reentrant model
  9933 ;;
  9934                           
  9935                           
  9936                           ;psect for function _TMR2_Start
  9937  0924                     _TMR2_Start:	
  9938                           
  9939                           ;mcc_generated_files/tmr2.c: 111:     T2CONbits.TMR2ON = 1;
  9940                           
  9941                           ;incstack = 0
  9942                           ; Regs used in _TMR2_Start: []
  9943  0924  0145               	movlb	5	; select bank5
  9944  0925  178E               	bsf	14,7	;volatile
  9945  0926  0008               	return
  9946  0927                     __end_of_TMR2_Start:	
  9947                           
  9948                           	psect	text44
  9949  0948                     __ptext44:	
  9950 ;; *************** function _TMR2_SetInterruptHandler *****************
  9951 ;; Defined at:
  9952 ;;		line 178 in file "mcc_generated_files/tmr2.c"
  9953 ;; Parameters:    Size  Location     Type
  9954 ;;  InterruptHan    2    0[BANK0 ] PTR FTN()void 
  9955 ;;		 -> TMR2_DefaultInterruptHandler(1), Sensor_Acq_ExecuteScan(1), 
  9956 ;; Auto vars:     Size  Location     Type
  9957 ;;		None
  9958 ;; Return value:  Size  Location     Type
  9959 ;;                  1    wreg      void 
  9960 ;; Registers used:
  9961 ;;		wreg
  9962 ;; Tracked objects:
  9963 ;;		On entry : 0/0
  9964 ;;		On exit  : 0/0
  9965 ;;		Unchanged: 0/0
  9966 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  9967 ;;      Params:         0       2       0       0       0       0       0       0
  9968 ;;      Locals:         0       0       0       0       0       0       0       0
  9969 ;;      Temps:          0       0       0       0       0       0       0       0
  9970 ;;      Totals:         0       2       0       0       0       0       0       0
  9971 ;;Total ram usage:        2 bytes
  9972 ;; Hardware stack levels used:    1
  9973 ;; Hardware stack levels required when called:    4
  9974 ;; This function calls:
  9975 ;;		Nothing
  9976 ;; This function is called by:
  9977 ;;		_Sensor_Acq_ExecutePacket
  9978 ;;		_TMR2_Initialize
  9979 ;; This function uses a non-reentrant model
  9980 ;;
  9981                           
  9982                           
  9983                           ;psect for function _TMR2_SetInterruptHandler
  9984  0948                     _TMR2_SetInterruptHandler:	
  9985                           
  9986                           ;mcc_generated_files/tmr2.c: 179:     TMR2_InterruptHandler = InterruptHandler;
  9987                           
  9988                           ;incstack = 0
  9989                           ; Regs used in _TMR2_SetInterruptHandler: [wreg]
  9990  0948  0140               	movlb	0	; select bank0
  9991  0949  084B               	movf	TMR2_SetInterruptHandler@InterruptHandler+1,w
  9992  094A  00B3               	movwf	_TMR2_InterruptHandler+1
  9993  094B  084A               	movf	TMR2_SetInterruptHandler@InterruptHandler,w
  9994  094C  00B2               	movwf	_TMR2_InterruptHandler
  9995  094D  0008               	return
  9996  094E                     __end_of_TMR2_SetInterruptHandler:	
  9997                           
  9998                           	psect	text45
  9999  0942                     __ptext45:	
 10000 ;; *************** function _TMR2_LoadPeriodRegister *****************
 10001 ;; Defined at:
 10002 ;;		line 160 in file "mcc_generated_files/tmr2.c"
 10003 ;; Parameters:    Size  Location     Type
 10004 ;;  periodVal       1    wreg     unsigned char 
 10005 ;; Auto vars:     Size  Location     Type
 10006 ;;  periodVal       1    1[BANK0 ] unsigned char 
 10007 ;; Return value:  Size  Location     Type
 10008 ;;                  1    wreg      void 
 10009 ;; Registers used:
 10010 ;;		wreg, status,2, status,0, pclath, cstack
 10011 ;; Tracked objects:
 10012 ;;		On entry : 0/0
 10013 ;;		On exit  : 0/0
 10014 ;;		Unchanged: 0/0
 10015 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 10016 ;;      Params:         0       0       0       0       0       0       0       0
 10017 ;;      Locals:         0       1       0       0       0       0       0       0
 10018 ;;      Temps:          0       0       0       0       0       0       0       0
 10019 ;;      Totals:         0       1       0       0       0       0       0       0
 10020 ;;Total ram usage:        1 bytes
 10021 ;; Hardware stack levels used:    1
 10022 ;; Hardware stack levels required when called:    5
 10023 ;; This function calls:
 10024 ;;		_TMR2_Period8BitSet
 10025 ;; This function is called by:
 10026 ;;		_Sensor_Acq_ExecutePacket
 10027 ;; This function uses a non-reentrant model
 10028 ;;
 10029                           
 10030                           
 10031                           ;psect for function _TMR2_LoadPeriodRegister
 10032  0942                     _TMR2_LoadPeriodRegister:	
 10033                           
 10034                           ;incstack = 0
 10035                           ; Regs used in _TMR2_LoadPeriodRegister: [wreg+status,2+status,0+pclath+cstack]
 10036                           ;TMR2_LoadPeriodRegister@periodVal stored from wreg
 10037  0942  0140               	movlb	0	; select bank0
 10038  0943  00CB               	movwf	TMR2_LoadPeriodRegister@periodVal
 10039                           
 10040                           ;mcc_generated_files/tmr2.c: 160: void TMR2_LoadPeriodRegister(uint8_t periodVal);mcc_ge
      +                          nerated_files/tmr2.c: 161: {;mcc_generated_files/tmr2.c: 162:    TMR2_Period8BitSet(peri
      +                          odVal);
 10041  0944  084B               	movf	TMR2_LoadPeriodRegister@periodVal,w
 10042  0945  3189  213C         	fcall	_TMR2_Period8BitSet
 10043  0947  0008               	return
 10044  0948                     __end_of_TMR2_LoadPeriodRegister:	
 10045                           
 10046                           	psect	text46
 10047  093C                     __ptext46:	
 10048 ;; *************** function _TMR2_Period8BitSet *****************
 10049 ;; Defined at:
 10050 ;;		line 155 in file "mcc_generated_files/tmr2.c"
 10051 ;; Parameters:    Size  Location     Type
 10052 ;;  periodVal       1    wreg     unsigned char 
 10053 ;; Auto vars:     Size  Location     Type
 10054 ;;  periodVal       1    0[BANK0 ] unsigned char 
 10055 ;; Return value:  Size  Location     Type
 10056 ;;                  1    wreg      void 
 10057 ;; Registers used:
 10058 ;;		wreg
 10059 ;; Tracked objects:
 10060 ;;		On entry : 0/0
 10061 ;;		On exit  : 0/0
 10062 ;;		Unchanged: 0/0
 10063 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 10064 ;;      Params:         0       0       0       0       0       0       0       0
 10065 ;;      Locals:         0       1       0       0       0       0       0       0
 10066 ;;      Temps:          0       0       0       0       0       0       0       0
 10067 ;;      Totals:         0       1       0       0       0       0       0       0
 10068 ;;Total ram usage:        1 bytes
 10069 ;; Hardware stack levels used:    1
 10070 ;; Hardware stack levels required when called:    4
 10071 ;; This function calls:
 10072 ;;		Nothing
 10073 ;; This function is called by:
 10074 ;;		_TMR2_LoadPeriodRegister
 10075 ;; This function uses a non-reentrant model
 10076 ;;
 10077                           
 10078                           
 10079                           ;psect for function _TMR2_Period8BitSet
 10080  093C                     _TMR2_Period8BitSet:	
 10081                           
 10082                           ;incstack = 0
 10083                           ; Regs used in _TMR2_Period8BitSet: [wreg]
 10084                           ;TMR2_Period8BitSet@periodVal stored from wreg
 10085  093C  0140               	movlb	0	; select bank0
 10086  093D  00CA               	movwf	TMR2_Period8BitSet@periodVal
 10087                           
 10088                           ;mcc_generated_files/tmr2.c: 155: void TMR2_Period8BitSet(uint8_t periodVal);mcc_generat
      +                          ed_files/tmr2.c: 156: {;mcc_generated_files/tmr2.c: 157:    PR2 = periodVal;
 10089  093E  084A               	movf	TMR2_Period8BitSet@periodVal,w
 10090  093F  0145               	movlb	5	; select bank5
 10091  0940  008D               	movwf	13	;volatile
 10092  0941  0008               	return
 10093  0942                     __end_of_TMR2_Period8BitSet:	
 10094                           
 10095                           	psect	text47
 10096  0A5B                     __ptext47:	
 10097 ;; *************** function _Sensor_setScanFunction *****************
 10098 ;; Defined at:
 10099 ;;		line 540 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
 10100 ;; Parameters:    Size  Location     Type
 10101 ;;  sensor          1    wreg     PTR struct .
 10102 ;;		 -> mtouch_sensor(9), 
 10103 ;; Auto vars:     Size  Location     Type
 10104 ;;  sensor          1    0[BANK0 ] PTR struct .
 10105 ;;		 -> mtouch_sensor(9), 
 10106 ;; Return value:  Size  Location     Type
 10107 ;;                  1    wreg      void 
 10108 ;; Registers used:
 10109 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 10110 ;; Tracked objects:
 10111 ;;		On entry : 0/0
 10112 ;;		On exit  : 0/0
 10113 ;;		Unchanged: 0/0
 10114 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 10115 ;;      Params:         0       0       0       0       0       0       0       0
 10116 ;;      Locals:         0       1       0       0       0       0       0       0
 10117 ;;      Temps:          0       0       0       0       0       0       0       0
 10118 ;;      Totals:         0       1       0       0       0       0       0       0
 10119 ;;Total ram usage:        1 bytes
 10120 ;; Hardware stack levels used:    1
 10121 ;; Hardware stack levels required when called:    4
 10122 ;; This function calls:
 10123 ;;		Nothing
 10124 ;; This function is called by:
 10125 ;;		_Sensor_Acq_ExecutePacket
 10126 ;; This function uses a non-reentrant model
 10127 ;;
 10128                           
 10129                           
 10130                           ;psect for function _Sensor_setScanFunction
 10131  0A5B                     _Sensor_setScanFunction:	
 10132                           
 10133                           ;incstack = 0
 10134                           ; Regs used in _Sensor_setScanFunction: [wreg+fsr1l+fsr1h+status,2+status,0]
 10135                           ;Sensor_setScanFunction@sensor stored from wreg
 10136  0A5B  0140               	movlb	0	; select bank0
 10137  0A5C  00CA               	movwf	Sensor_setScanFunction@sensor
 10138                           
 10139                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 540: static void Sensor_setScanFunction(mto
      +                          uch_sensor_t* sensor);mcc_generated_files/mtouch/mtouch_sensor.c: 541: {;mcc_generated_f
      +                          iles/mtouch/mtouch_sensor.c: 542:     Sensor_scanA = sensor->scanA;
 10140  0A5D  0A4A               	incf	Sensor_setScanFunction@sensor,w
 10141  0A5E  0086               	movwf	6
 10142  0A5F  0187               	clrf	7
 10143  0A60  3F40               	moviw [0]fsr1
 10144  0A61  00ED               	movwf	_Sensor_scanA
 10145  0A62  3F41               	moviw [1]fsr1
 10146  0A63  00EE               	movwf	_Sensor_scanA+1
 10147                           
 10148                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 543:     Sensor_scanB = sensor->scanB;
 10149  0A64  084A               	movf	Sensor_setScanFunction@sensor,w
 10150  0A65  3E03               	addlw	3
 10151  0A66  0086               	movwf	6
 10152  0A67  0187               	clrf	7
 10153  0A68  3F40               	moviw [0]fsr1
 10154  0A69  00EB               	movwf	_Sensor_scanB
 10155  0A6A  3F41               	moviw [1]fsr1
 10156  0A6B  00EC               	movwf	_Sensor_scanB+1
 10157  0A6C  0008               	return
 10158  0A6D                     __end_of_Sensor_setScanFunction:	
 10159                           
 10160                           	psect	text48
 10161  0996                     __ptext48:	
 10162 ;; *************** function _MTOUCH_Sensor_Scan_Initialize *****************
 10163 ;; Defined at:
 10164 ;;		line 178 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
 10165 ;; Parameters:    Size  Location     Type
 10166 ;;		None
 10167 ;; Auto vars:     Size  Location     Type
 10168 ;;		None
 10169 ;; Return value:  Size  Location     Type
 10170 ;;                  1    wreg      void 
 10171 ;; Registers used:
 10172 ;;		wreg, status,2, status,0
 10173 ;; Tracked objects:
 10174 ;;		On entry : 0/0
 10175 ;;		On exit  : 0/0
 10176 ;;		Unchanged: 0/0
 10177 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 10178 ;;      Params:         0       0       0       0       0       0       0       0
 10179 ;;      Locals:         0       0       0       0       0       0       0       0
 10180 ;;      Temps:          0       0       0       0       0       0       0       0
 10181 ;;      Totals:         0       0       0       0       0       0       0       0
 10182 ;;Total ram usage:        0 bytes
 10183 ;; Hardware stack levels used:    1
 10184 ;; Hardware stack levels required when called:    4
 10185 ;; This function calls:
 10186 ;;		Nothing
 10187 ;; This function is called by:
 10188 ;;		_Sensor_Acq_ExecutePacket
 10189 ;;		_MTOUCH_Initialize
 10190 ;; This function uses a non-reentrant model
 10191 ;;
 10192                           
 10193                           
 10194                           ;psect for function _MTOUCH_Sensor_Scan_Initialize
 10195  0996                     _MTOUCH_Sensor_Scan_Initialize:	
 10196                           
 10197                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 180:     T2CONbits.T2CKPS = 0x0;
 10198                           
 10199                           ;incstack = 0
 10200                           ; Regs used in _MTOUCH_Sensor_Scan_Initialize: [wreg+status,2+status,0]
 10201  0996  308F               	movlw	-113
 10202  0997  0145               	movlb	5	; select bank5
 10203  0998  058E               	andwf	14,f	;volatile
 10204                           
 10205                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 181:     T2CLKCON = 0x1;
 10206  0999  3001               	movlw	1
 10207  099A  0090               	movwf	16	;volatile
 10208                           
 10209                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 183:     ADCON0 = (uint8_t)0;
 10210  099B  0141               	movlb	1	; select bank1
 10211  099C  019D               	clrf	29	;volatile
 10212                           
 10213                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 184:     ADCON1 = (uint8_t)( 0x1<<7 | 0x5<<
      +                          4 | 0x0 );
 10214  099D  30D0               	movlw	208
 10215  099E  009E               	movwf	30	;volatile
 10216  099F  0008               	return
 10217  09A0                     __end_of_MTOUCH_Sensor_Scan_Initialize:	
 10218                           
 10219                           	psect	text49
 10220  0A09                     __ptext49:	
 10221 ;; *************** function _MTOUCH_Button_ServiceAll *****************
 10222 ;; Defined at:
 10223 ;;		line 173 in file "mcc_generated_files/mtouch/mtouch_button.c"
 10224 ;; Parameters:    Size  Location     Type
 10225 ;;		None
 10226 ;; Auto vars:     Size  Location     Type
 10227 ;;  button          1   23[BANK0 ] enum E6960
 10228 ;; Return value:  Size  Location     Type
 10229 ;;                  1    wreg      void 
 10230 ;; Registers used:
 10231 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10232 ;; Tracked objects:
 10233 ;;		On entry : 0/0
 10234 ;;		On exit  : 0/0
 10235 ;;		Unchanged: 0/0
 10236 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 10237 ;;      Params:         0       0       0       0       0       0       0       0
 10238 ;;      Locals:         0       1       0       0       0       0       0       0
 10239 ;;      Temps:          0       1       0       0       0       0       0       0
 10240 ;;      Totals:         0       2       0       0       0       0       0       0
 10241 ;;Total ram usage:        2 bytes
 10242 ;; Hardware stack levels used:    1
 10243 ;; Hardware stack levels required when called:    9
 10244 ;; This function calls:
 10245 ;;		_Button_Service
 10246 ;; This function is called by:
 10247 ;;		_MTOUCH_Service_Mainloop
 10248 ;; This function uses a non-reentrant model
 10249 ;;
 10250                           
 10251                           
 10252                           ;psect for function _MTOUCH_Button_ServiceAll
 10253  0A09                     _MTOUCH_Button_ServiceAll:	
 10254                           
 10255                           ;mcc_generated_files/mtouch/mtouch_button.c: 175:     enum mtouch_button_names button;;m
      +                          cc_generated_files/mtouch/mtouch_button.c: 178:     for (button = 0; button < 1u; button
      +                          ++)
 10256                           
 10257                           ;incstack = 0
 10258                           ; Regs used in _MTOUCH_Button_ServiceAll: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 10259  0A09  0140               	movlb	0	; select bank0
 10260  0A0A  01E1               	clrf	MTOUCH_Button_ServiceAll@button
 10261  0A0B                     l3604:	
 10262                           
 10263                           ;mcc_generated_files/mtouch/mtouch_button.c: 179:     {;mcc_generated_files/mtouch/mtouc
      +                          h_button.c: 180:         Button_Service(button);
 10264  0A0B  0861               	movf	MTOUCH_Button_ServiceAll@button,w
 10265  0A0C  3187  27AF  318A   	fcall	_Button_Service
 10266                           
 10267                           ;mcc_generated_files/mtouch/mtouch_button.c: 181:     }
 10268  0A0F  3001               	movlw	1
 10269  0A10  0140               	movlb	0	; select bank0
 10270  0A11  00E0               	movwf	??_MTOUCH_Button_ServiceAll
 10271  0A12  0860               	movf	??_MTOUCH_Button_ServiceAll,w
 10272  0A13  07E1               	addwf	MTOUCH_Button_ServiceAll@button,f
 10273  0A14  0861               	movf	MTOUCH_Button_ServiceAll@button,w
 10274  0A15  1D03               	btfss	3,2
 10275  0A16  0008               	return
 10276  0A17  2A0B               	goto	l3604
 10277  0A18                     __end_of_MTOUCH_Button_ServiceAll:	
 10278                           
 10279                           	psect	text50
 10280  07AF                     __ptext50:	
 10281 ;; *************** function _Button_Service *****************
 10282 ;; Defined at:
 10283 ;;		line 184 in file "mcc_generated_files/mtouch/mtouch_button.c"
 10284 ;; Parameters:    Size  Location     Type
 10285 ;;  name            1    wreg     enum E6960
 10286 ;; Auto vars:     Size  Location     Type
 10287 ;;  name            1   20[BANK0 ] enum E6960
 10288 ;;  button          1   21[BANK0 ] PTR struct .
 10289 ;;		 -> mtouch_button(16), 
 10290 ;; Return value:  Size  Location     Type
 10291 ;;                  1    wreg      void 
 10292 ;; Registers used:
 10293 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10294 ;; Tracked objects:
 10295 ;;		On entry : 0/0
 10296 ;;		On exit  : 0/0
 10297 ;;		Unchanged: 0/0
 10298 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 10299 ;;      Params:         0       0       0       0       0       0       0       0
 10300 ;;      Locals:         0       2       0       0       0       0       0       0
 10301 ;;      Temps:          0       2       0       0       0       0       0       0
 10302 ;;      Totals:         0       4       0       0       0       0       0       0
 10303 ;;Total ram usage:        4 bytes
 10304 ;; Hardware stack levels used:    1
 10305 ;; Hardware stack levels required when called:    8
 10306 ;; This function calls:
 10307 ;;		_Button_Deviation_Update
 10308 ;;		_Button_Reading_Update
 10309 ;;		_Button_State_Initializing
 10310 ;;		_Button_State_NotPressed
 10311 ;;		_Button_State_Pressed
 10312 ;;		_MTOUCH_Button_Initialize
 10313 ;;		_MTOUCH_Sensor_isCalibrated
 10314 ;;		_MTOUCH_Sensor_wasSampled
 10315 ;; This function is called by:
 10316 ;;		_MTOUCH_Button_ServiceAll
 10317 ;; This function uses a non-reentrant model
 10318 ;;
 10319                           
 10320                           
 10321                           ;psect for function _Button_Service
 10322  07AF                     _Button_Service:	
 10323                           
 10324                           ;incstack = 0
 10325                           ; Regs used in _Button_Service: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 10326                           ;Button_Service@name stored from wreg
 10327  07AF  0140               	movlb	0	; select bank0
 10328  07B0  00DE               	movwf	Button_Service@name
 10329                           
 10330                           ;mcc_generated_files/mtouch/mtouch_button.c: 184: static void Button_Service(enum mtouch
      +                          _button_names name);mcc_generated_files/mtouch/mtouch_button.c: 185: {;mcc_generated_fil
      +                          es/mtouch/mtouch_button.c: 186:     mtouch_button_t* button = &mtouch_button[name];
 10331  07B1  085E               	movf	Button_Service@name,w
 10332  07B2  00DC               	movwf	??_Button_Service
 10333  07B3  3003               	movlw	3
 10334  07B4                     u2395:	
 10335  07B4  35DC               	lslf	??_Button_Service,f
 10336  07B5  3EFF               	addlw	-1
 10337  07B6  1D03               	skipz
 10338  07B7  2FB4               	goto	u2395
 10339  07B8  355C               	lslf	??_Button_Service,w
 10340  07B9  3EB9               	addlw	(low (_mtouch_button| 0))& (0+255)
 10341  07BA  00DD               	movwf	??_Button_Service+1
 10342  07BB  085D               	movf	??_Button_Service+1,w
 10343  07BC  00DF               	movwf	Button_Service@button
 10344                           
 10345                           ;mcc_generated_files/mtouch/mtouch_button.c: 188:     if (MTOUCH_Sensor_wasSampled(butto
      +                          n->sensor) && MTOUCH_Sensor_isCalibrated(button->sensor))
 10346  07BD  0A5F               	incf	Button_Service@button,w
 10347  07BE  0086               	movwf	6
 10348  07BF  0187               	clrf	7
 10349  07C0  0801               	movf	1,w
 10350  07C1  318A  2294  3187   	fcall	_MTOUCH_Sensor_wasSampled
 10351  07C4  3A00               	xorlw	0
 10352  07C5  1903               	skipnz
 10353  07C6  0008               	return
 10354  07C7  0140               	movlb	0	; select bank0
 10355  07C8  0A5F               	incf	Button_Service@button,w
 10356  07C9  0086               	movwf	6
 10357  07CA  0187               	clrf	7
 10358  07CB  0801               	movf	1,w
 10359  07CC  3189  2122  3187   	fcall	_MTOUCH_Sensor_isCalibrated
 10360  07CF  3A00               	xorlw	0
 10361  07D0  1903               	skipnz
 10362  07D1  0008               	return
 10363                           
 10364                           ;mcc_generated_files/mtouch/mtouch_button.c: 189:     {;mcc_generated_files/mtouch/mtouc
      +                          h_button.c: 190:         Button_Reading_Update(button);
 10365  07D2  0140               	movlb	0	; select bank0
 10366  07D3  085F               	movf	Button_Service@button,w
 10367  07D4  3189  21DE  3187   	fcall	_Button_Reading_Update
 10368                           
 10369                           ;mcc_generated_files/mtouch/mtouch_button.c: 191:         Button_Deviation_Update(button
      +                          );
 10370  07D7  0140               	movlb	0	; select bank0
 10371  07D8  085F               	movf	Button_Service@button,w
 10372  07D9  3186  2660  3187   	fcall	_Button_Deviation_Update
 10373                           
 10374                           ;mcc_generated_files/mtouch/mtouch_button.c: 193:         if (button->state >= (uint8_t)
      +                          (sizeof(Button_StateMachine)/sizeof(button_statemachine_state_t)))
 10375  07DC  0140               	movlb	0	; select bank0
 10376  07DD  085F               	movf	Button_Service@button,w
 10377  07DE  3E02               	addlw	2
 10378  07DF  0086               	movwf	6
 10379  07E0  0187               	clrf	7
 10380  07E1  3003               	movlw	3
 10381  07E2  0201               	subwf	1,w
 10382  07E3  1C03               	skipc
 10383  07E4  2FEC               	goto	l3494
 10384                           
 10385                           ;mcc_generated_files/mtouch/mtouch_button.c: 194:         {;mcc_generated_files/mtouch/m
      +                          touch_button.c: 195:             MTOUCH_Button_Initialize(button->name);
 10386  07E5  085F               	movf	Button_Service@button,w
 10387  07E6  0086               	movwf	6
 10388  07E7  0187               	clrf	7
 10389  07E8  0801               	movf	1,w
 10390  07E9  318D  2541  3187   	fcall	_MTOUCH_Button_Initialize
 10391  07EC                     l3494:	
 10392                           
 10393                           ;mcc_generated_files/mtouch/mtouch_button.c: 197:         Button_StateMachine[(uint8_t)b
      +                          utton->state](button);
 10394  07EC  0140               	movlb	0	; select bank0
 10395  07ED  085F               	movf	Button_Service@button,w
 10396  07EE  00DC               	movwf	??_Button_Service
 10397  07EF  085C               	movf	??_Button_Service,w
 10398  07F0  00D7               	movwf	Button_State_Pressed@button
 10399  07F1  085F               	movf	Button_Service@button,w
 10400  07F2  3E02               	addlw	2
 10401  07F3  0086               	movwf	6
 10402  07F4  0187               	clrf	7
 10403  07F5  3501               	lslf	1,w
 10404  07F6  3EA0               	addlw	(low (_Button_StateMachine| 0))& (0+255)
 10405  07F7  0086               	movwf	6
 10406  07F8  0187               	clrf	7
 10407  07F9  3F41               	moviw [1]fsr1
 10408  07FA  008A               	movwf	10
 10409  07FB  3F40               	moviw [0]fsr1
 10410  07FC  000A               	callw
 10411  07FD  3187               	pagesel	$
 10412  07FE  0008               	return
 10413  07FF                     __end_of_Button_Service:	
 10414                           
 10415                           	psect	text51
 10416  0A94                     __ptext51:	
 10417 ;; *************** function _MTOUCH_Sensor_wasSampled *****************
 10418 ;; Defined at:
 10419 ;;		line 634 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
 10420 ;; Parameters:    Size  Location     Type
 10421 ;;  sensor          1    wreg     enum E6808
 10422 ;; Auto vars:     Size  Location     Type
 10423 ;;  sensor          1    5[BANK0 ] enum E6808
 10424 ;; Return value:  Size  Location     Type
 10425 ;;                  1    wreg      _Bool 
 10426 ;; Registers used:
 10427 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10428 ;; Tracked objects:
 10429 ;;		On entry : 0/0
 10430 ;;		On exit  : 0/0
 10431 ;;		Unchanged: 0/0
 10432 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 10433 ;;      Params:         0       0       0       0       0       0       0       0
 10434 ;;      Locals:         0       1       0       0       0       0       0       0
 10435 ;;      Temps:          0       1       0       0       0       0       0       0
 10436 ;;      Totals:         0       2       0       0       0       0       0       0
 10437 ;;Total ram usage:        2 bytes
 10438 ;; Hardware stack levels used:    1
 10439 ;; Hardware stack levels required when called:    5
 10440 ;; This function calls:
 10441 ;;		___bmul
 10442 ;; This function is called by:
 10443 ;;		_Button_Service
 10444 ;; This function uses a non-reentrant model
 10445 ;;
 10446                           
 10447                           
 10448                           ;psect for function _MTOUCH_Sensor_wasSampled
 10449  0A94                     _MTOUCH_Sensor_wasSampled:	
 10450                           
 10451                           ;incstack = 0
 10452                           ; Regs used in _MTOUCH_Sensor_wasSampled: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cst
      +                          ack]
 10453                           ;MTOUCH_Sensor_wasSampled@sensor stored from wreg
 10454  0A94  0140               	movlb	0	; select bank0
 10455  0A95  00CF               	movwf	MTOUCH_Sensor_wasSampled@sensor
 10456                           
 10457                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 634: _Bool MTOUCH_Sensor_wasSampled(enum mt
      +                          ouch_sensor_names sensor);mcc_generated_files/mtouch/mtouch_sensor.c: 635: {;mcc_generat
      +                          ed_files/mtouch/mtouch_sensor.c: 636:     if(sensor < 1u)
 10458  0A96  084F               	movf	MTOUCH_Sensor_wasSampled@sensor,w
 10459  0A97  1D03               	btfss	3,2
 10460  0A98  2AA6               	goto	l3312
 10461                           
 10462                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 637:         return (_Bool)mtouch_sensor[se
      +                          nsor].sampled;
 10463  0A99  3009               	movlw	9
 10464  0A9A  00CE               	movwf	??_MTOUCH_Sensor_wasSampled
 10465  0A9B  084E               	movf	??_MTOUCH_Sensor_wasSampled,w
 10466  0A9C  00CA               	movwf	___bmul@multiplicand
 10467  0A9D  084F               	movf	MTOUCH_Sensor_wasSampled@sensor,w
 10468  0A9E  318A  2249         	fcall	___bmul
 10469  0AA0  3EB4               	addlw	(low ((_mtouch_sensor| 0+8)))& (0+255)
 10470  0AA1  0086               	movwf	6
 10471  0AA2  0187               	clrf	7
 10472  0AA3  0C01               	rrf	1,w
 10473  0AA4  3901               	andlw	1
 10474  0AA5  0008               	return
 10475  0AA6                     l3312:	
 10476                           
 10477                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 639:         return 0;
 10478  0AA6  3000               	movlw	0
 10479  0AA7  0008               	return
 10480  0AA8                     __end_of_MTOUCH_Sensor_wasSampled:	
 10481                           
 10482                           	psect	text52
 10483  0922                     __ptext52:	
 10484 ;; *************** function _MTOUCH_Sensor_isCalibrated *****************
 10485 ;; Defined at:
 10486 ;;		line 607 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
 10487 ;; Parameters:    Size  Location     Type
 10488 ;;  sensor          1    wreg     enum E6808
 10489 ;; Auto vars:     Size  Location     Type
 10490 ;;  sensor          1    0[COMMON] enum E6808
 10491 ;; Return value:  Size  Location     Type
 10492 ;;                  1    wreg      _Bool 
 10493 ;; Registers used:
 10494 ;;		wreg
 10495 ;; Tracked objects:
 10496 ;;		On entry : 0/0
 10497 ;;		On exit  : 0/0
 10498 ;;		Unchanged: 0/0
 10499 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 10500 ;;      Params:         0       0       0       0       0       0       0       0
 10501 ;;      Locals:         0       0       0       0       0       0       0       0
 10502 ;;      Temps:          0       0       0       0       0       0       0       0
 10503 ;;      Totals:         0       0       0       0       0       0       0       0
 10504 ;;Total ram usage:        0 bytes
 10505 ;; Hardware stack levels used:    1
 10506 ;; Hardware stack levels required when called:    4
 10507 ;; This function calls:
 10508 ;;		Nothing
 10509 ;; This function is called by:
 10510 ;;		_Button_Service
 10511 ;; This function uses a non-reentrant model
 10512 ;;
 10513                           
 10514                           
 10515                           ;psect for function _MTOUCH_Sensor_isCalibrated
 10516  0922                     _MTOUCH_Sensor_isCalibrated:	
 10517                           
 10518                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 607: _Bool MTOUCH_Sensor_isCalibrated(enum 
      +                          mtouch_sensor_names sensor);mcc_generated_files/mtouch/mtouch_sensor.c: 608: {;mcc_gener
      +                          ated_files/mtouch/mtouch_sensor.c: 610:     return 1;
 10519                           
 10520                           ;incstack = 0
 10521                           ; Regs used in _MTOUCH_Sensor_isCalibrated: [wreg]
 10522  0922  3001               	movlw	1
 10523  0923  0008               	return
 10524  0924                     __end_of_MTOUCH_Sensor_isCalibrated:	
 10525                           
 10526                           	psect	text53
 10527  04C1                     __ptext53:	
 10528 ;; *************** function _Button_State_NotPressed *****************
 10529 ;; Defined at:
 10530 ;;		line 221 in file "mcc_generated_files/mtouch/mtouch_button.c"
 10531 ;; Parameters:    Size  Location     Type
 10532 ;;  button          1   13[BANK0 ] PTR struct .
 10533 ;;		 -> mtouch_button(16), 
 10534 ;; Auto vars:     Size  Location     Type
 10535 ;;		None
 10536 ;; Return value:  Size  Location     Type
 10537 ;;                  1    wreg      void 
 10538 ;; Registers used:
 10539 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10540 ;; Tracked objects:
 10541 ;;		On entry : 0/0
 10542 ;;		On exit  : 0/0
 10543 ;;		Unchanged: 0/0
 10544 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 10545 ;;      Params:         0       1       0       0       0       0       0       0
 10546 ;;      Locals:         0       0       0       0       0       0       0       0
 10547 ;;      Temps:          0       2       0       0       0       0       0       0
 10548 ;;      Totals:         0       3       0       0       0       0       0       0
 10549 ;;Total ram usage:        3 bytes
 10550 ;; Hardware stack levels used:    1
 10551 ;; Hardware stack levels required when called:    6
 10552 ;; This function calls:
 10553 ;;		_Button_Baseline_Update
 10554 ;;		_Button_DefaultCallback
 10555 ;;		_MTOUCH_Button_Initialize
 10556 ;; This function is called by:
 10557 ;;		_Button_Service
 10558 ;; This function uses a non-reentrant model
 10559 ;;
 10560                           
 10561                           
 10562                           ;psect for function _Button_State_NotPressed
 10563  04C1                     _Button_State_NotPressed:	
 10564                           
 10565                           ;mcc_generated_files/mtouch/mtouch_button.c: 221: static void Button_State_NotPressed(mt
      +                          ouch_button_t* button);mcc_generated_files/mtouch/mtouch_button.c: 222: {;mcc_generated_
      +                          files/mtouch/mtouch_button.c: 224:     if ((button->deviation) < (mtouch_button_deviatio
      +                          n_t)(-button->threshold))
 10566                           
 10567                           ;incstack = 0
 10568                           ; Regs used in _Button_State_NotPressed: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+csta
      +                          ck]
 10569  04C1  0140               	movlb	0	; select bank0
 10570  04C2  0857               	movf	Button_State_NotPressed@button,w
 10571  04C3  3E09               	addlw	9
 10572  04C4  0086               	movwf	6
 10573  04C5  0187               	clrf	7
 10574  04C6  0801               	movf	1,w
 10575  04C7  3A80               	xorlw	128
 10576  04C8  00D8               	movwf	??_Button_State_NotPressed
 10577  04C9  0857               	movf	Button_State_NotPressed@button,w
 10578  04CA  3E0E               	addlw	14
 10579  04CB  0086               	movwf	6
 10580  04CC  0187               	clrf	7
 10581  04CD  0301               	decf	1,w
 10582  04CE  3AFF               	xorlw	255
 10583  04CF  3A80               	xorlw	128
 10584  04D0  02D8               	subwf	??_Button_State_NotPressed,f
 10585  04D1  1803               	skipnc
 10586  04D2  2CFA               	goto	l3370
 10587                           
 10588                           ;mcc_generated_files/mtouch/mtouch_button.c: 225:     {;mcc_generated_files/mtouch/mtouc
      +                          h_button.c: 226:         (button->counter)++;
 10589  04D3  0857               	movf	Button_State_NotPressed@button,w
 10590  04D4  3E0A               	addlw	10
 10591  04D5  0086               	movwf	6
 10592  04D6  0187               	clrf	7
 10593  04D7  3001               	movlw	1
 10594  04D8  0781               	addwf	1,f
 10595  04D9  3141               	addfsr 1,1
 10596  04DA  1803               	skipnc
 10597  04DB  0A81               	incf	1,f
 10598                           
 10599                           ;mcc_generated_files/mtouch/mtouch_button.c: 227:         if ((button->counter) > (mtouc
      +                          h_button_statecounter_t)((mtouch_button_statecounter_t)64u))
 10600  04DC  0857               	movf	Button_State_NotPressed@button,w
 10601  04DD  3E0A               	addlw	10
 10602  04DE  0086               	movwf	6
 10603  04DF  0187               	clrf	7
 10604  04E0  3F40               	moviw [0]fsr1
 10605  04E1  00D8               	movwf	??_Button_State_NotPressed
 10606  04E2  3F41               	moviw [1]fsr1
 10607  04E3  00D9               	movwf	??_Button_State_NotPressed+1
 10608  04E4  3000               	movlw	0
 10609  04E5  0259               	subwf	??_Button_State_NotPressed+1,w
 10610  04E6  3041               	movlw	65
 10611  04E7  1903               	skipnz
 10612  04E8  0258               	subwf	??_Button_State_NotPressed,w
 10613  04E9  1C03               	skipc
 10614  04EA  2D33               	goto	l357
 10615                           
 10616                           ;mcc_generated_files/mtouch/mtouch_button.c: 228:         {;mcc_generated_files/mtouch/m
      +                          touch_button.c: 229:             button->counter = (mtouch_button_statecounter_t)0;
 10617  04EB  0857               	movf	Button_State_NotPressed@button,w
 10618  04EC  3E0A               	addlw	10
 10619  04ED  0086               	movwf	6
 10620  04EE  0187               	clrf	7
 10621  04EF  3000               	movlw	0
 10622  04F0  3FC0               	movwi [0]fsr1
 10623  04F1  3FC1               	movwi [1]fsr1
 10624                           
 10625                           ;mcc_generated_files/mtouch/mtouch_button.c: 230:             MTOUCH_Button_Initialize(b
      +                          utton->name);
 10626  04F2  0857               	movf	Button_State_NotPressed@button,w
 10627  04F3  0086               	movwf	6
 10628  04F4  0187               	clrf	7
 10629  04F5  0801               	movf	1,w
 10630  04F6  318D  2541  3184   	fcall	_MTOUCH_Button_Initialize
 10631  04F9  2D33               	goto	l357
 10632  04FA                     l3370:	
 10633  04FA  0857               	movf	Button_State_NotPressed@button,w
 10634  04FB  3E09               	addlw	9
 10635  04FC  0086               	movwf	6
 10636  04FD  0187               	clrf	7
 10637  04FE  0801               	movf	1,w
 10638  04FF  00D8               	movwf	??_Button_State_NotPressed
 10639  0500  01D9               	clrf	??_Button_State_NotPressed+1
 10640  0501  1BD8               	btfsc	??_Button_State_NotPressed,7
 10641  0502  03D9               	decf	??_Button_State_NotPressed+1,f
 10642  0503  0857               	movf	Button_State_NotPressed@button,w
 10643  0504  3E0E               	addlw	14
 10644  0505  0086               	movwf	6
 10645  0506  0187               	clrf	7
 10646  0507  0859               	movf	??_Button_State_NotPressed+1,w
 10647  0508  3A80               	xorlw	128
 10648  0509  3C80               	sublw	128
 10649  050A  1D03               	skipz
 10650  050B  2D0E               	goto	u2275
 10651  050C  0858               	movf	??_Button_State_NotPressed,w
 10652  050D  0201               	subwf	1,w
 10653  050E                     u2275:	
 10654  050E  1803               	skipnc
 10655  050F  2D2B               	goto	l3376
 10656                           
 10657                           ;mcc_generated_files/mtouch/mtouch_button.c: 235:     {;mcc_generated_files/mtouch/mtouc
      +                          h_button.c: 237:         button->state = MTOUCH_BUTTON_STATE_pressed;
 10658  0510  3002               	movlw	2
 10659  0511  0140               	movlb	0	; select bank0
 10660  0512  00D8               	movwf	??_Button_State_NotPressed
 10661  0513  0857               	movf	Button_State_NotPressed@button,w
 10662  0514  3E02               	addlw	2
 10663  0515  0086               	movwf	6
 10664  0516  0187               	clrf	7
 10665  0517  0858               	movf	??_Button_State_NotPressed,w
 10666  0518  0081               	movwf	1
 10667                           
 10668                           ;mcc_generated_files/mtouch/mtouch_button.c: 238:         button->counter = (mtouch_butt
      +                          on_statecounter_t)0;
 10669  0519  0857               	movf	Button_State_NotPressed@button,w
 10670  051A  3E0A               	addlw	10
 10671  051B  0086               	movwf	6
 10672  051C  0187               	clrf	7
 10673  051D  3000               	movlw	0
 10674  051E  3FC0               	movwi [0]fsr1
 10675  051F  3FC1               	movwi [1]fsr1
 10676                           
 10677                           ;mcc_generated_files/mtouch/mtouch_button.c: 239:         callback_pressed(button->name)
      +                          ;
 10678  0520  0857               	movf	Button_State_NotPressed@button,w
 10679  0521  0086               	movwf	6
 10680  0522  0187               	clrf	7
 10681  0523  0801               	movf	1,w
 10682  0524  00D8               	movwf	??_Button_State_NotPressed
 10683  0525  0858               	movf	??_Button_State_NotPressed,w
 10684  0526  00CA               	movwf	Button_DefaultCallback@button
 10685  0527  3189  211F  3184   	fcall	_Button_DefaultCallback
 10686                           
 10687                           ;mcc_generated_files/mtouch/mtouch_button.c: 240:     }
 10688  052A  2D33               	goto	l357
 10689  052B                     l3376:	
 10690                           
 10691                           ;mcc_generated_files/mtouch/mtouch_button.c: 242:     {;mcc_generated_files/mtouch/mtouc
      +                          h_button.c: 244:         button->counter = (mtouch_button_statecounter_t)0;
 10692  052B  0140               	movlb	0	; select bank0
 10693  052C  0857               	movf	Button_State_NotPressed@button,w
 10694  052D  3E0A               	addlw	10
 10695  052E  0086               	movwf	6
 10696  052F  0187               	clrf	7
 10697  0530  3000               	movlw	0
 10698  0531  3FC0               	movwi [0]fsr1
 10699  0532  3FC1               	movwi [1]fsr1
 10700  0533                     l357:	
 10701                           
 10702                           ;mcc_generated_files/mtouch/mtouch_button.c: 249:     (button->baseline_count)++;
 10703  0533  0140               	movlb	0	; select bank0
 10704  0534  0857               	movf	Button_State_NotPressed@button,w
 10705  0535  3E0C               	addlw	12
 10706  0536  0086               	movwf	6
 10707  0537  0187               	clrf	7
 10708  0538  3001               	movlw	1
 10709  0539  0781               	addwf	1,f
 10710  053A  3141               	addfsr 1,1
 10711  053B  1803               	skipnc
 10712  053C  0A81               	incf	1,f
 10713                           
 10714                           ;mcc_generated_files/mtouch/mtouch_button.c: 250:     if ((button->baseline_count) == ((
      +                          mtouch_button_baselinecounter_t)64u))
 10715  053D  0857               	movf	Button_State_NotPressed@button,w
 10716  053E  3E0C               	addlw	12
 10717  053F  0086               	movwf	6
 10718  0540  0187               	clrf	7
 10719  0541  0016               	moviw fsr1++
 10720  0542  3A40               	xorlw	64
 10721  0543  00D8               	movwf	??_Button_State_NotPressed
 10722  0544  0016               	moviw fsr1++
 10723  0545  04D8               	iorwf	??_Button_State_NotPressed,f
 10724  0546  1D03               	btfss	3,2
 10725  0547  0008               	return
 10726                           
 10727                           ;mcc_generated_files/mtouch/mtouch_button.c: 251:     {;mcc_generated_files/mtouch/mtouc
      +                          h_button.c: 252:         button->baseline_count = (mtouch_button_baselinecounter_t)0;
 10728  0548  0857               	movf	Button_State_NotPressed@button,w
 10729  0549  3E0C               	addlw	12
 10730  054A  0086               	movwf	6
 10731  054B  0187               	clrf	7
 10732  054C  3000               	movlw	0
 10733  054D  3FC0               	movwi [0]fsr1
 10734  054E  3FC1               	movwi [1]fsr1
 10735                           
 10736                           ;mcc_generated_files/mtouch/mtouch_button.c: 253:         Button_Baseline_Update(button)
      +                          ;
 10737  054F  0857               	movf	Button_State_NotPressed@button,w
 10738  0550  3185  2553         	fcall	_Button_Baseline_Update
 10739  0552  0008               	return
 10740  0553                     __end_of_Button_State_NotPressed:	
 10741                           
 10742                           	psect	text54
 10743  0F42                     __ptext54:	
 10744 ;; *************** function _Button_State_Initializing *****************
 10745 ;; Defined at:
 10746 ;;		line 201 in file "mcc_generated_files/mtouch/mtouch_button.c"
 10747 ;; Parameters:    Size  Location     Type
 10748 ;;  button          1   13[BANK0 ] PTR struct .
 10749 ;;		 -> mtouch_button(16), 
 10750 ;; Auto vars:     Size  Location     Type
 10751 ;;		None
 10752 ;; Return value:  Size  Location     Type
 10753 ;;                  1    wreg      void 
 10754 ;; Registers used:
 10755 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10756 ;; Tracked objects:
 10757 ;;		On entry : 0/0
 10758 ;;		On exit  : 0/0
 10759 ;;		Unchanged: 0/0
 10760 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 10761 ;;      Params:         0       1       0       0       0       0       0       0
 10762 ;;      Locals:         0       0       0       0       0       0       0       0
 10763 ;;      Temps:          0       4       0       0       0       0       0       0
 10764 ;;      Totals:         0       5       0       0       0       0       0       0
 10765 ;;Total ram usage:        5 bytes
 10766 ;; Hardware stack levels used:    1
 10767 ;; Hardware stack levels required when called:    7
 10768 ;; This function calls:
 10769 ;;		_Button_Baseline_Initialize
 10770 ;;		_Button_Baseline_Update
 10771 ;; This function is called by:
 10772 ;;		_Button_Service
 10773 ;; This function uses a non-reentrant model
 10774 ;;
 10775                           
 10776                           
 10777                           ;psect for function _Button_State_Initializing
 10778  0F42                     _Button_State_Initializing:	
 10779                           
 10780                           ;mcc_generated_files/mtouch/mtouch_button.c: 201: static void Button_State_Initializing(
      +                          mtouch_button_t* button);mcc_generated_files/mtouch/mtouch_button.c: 202: {;mcc_generate
      +                          d_files/mtouch/mtouch_button.c: 204:     if ((button->counter) <= (mtouch_button_stateco
      +                          unter_t)((mtouch_button_baselinecounter_t)16u)/2)
 10781                           
 10782                           ;incstack = 0
 10783                           ; Regs used in _Button_State_Initializing: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cs
      +                          tack]
 10784  0F42  0140               	movlb	0	; select bank0
 10785  0F43  0857               	movf	Button_State_Initializing@button,w
 10786  0F44  3E0A               	addlw	10
 10787  0F45  0086               	movwf	6
 10788  0F46  0187               	clrf	7
 10789  0F47  3F40               	moviw [0]fsr1
 10790  0F48  00D8               	movwf	??_Button_State_Initializing
 10791  0F49  3F41               	moviw [1]fsr1
 10792  0F4A  00D9               	movwf	??_Button_State_Initializing+1
 10793  0F4B  3000               	movlw	0
 10794  0F4C  0259               	subwf	??_Button_State_Initializing+1,w
 10795  0F4D  3009               	movlw	9
 10796  0F4E  1903               	skipnz
 10797  0F4F  0258               	subwf	??_Button_State_Initializing,w
 10798  0F50  1803               	skipnc
 10799  0F51  2F57               	goto	l3354
 10800                           
 10801                           ;mcc_generated_files/mtouch/mtouch_button.c: 205:     {;mcc_generated_files/mtouch/mtouc
      +                          h_button.c: 206:         Button_Baseline_Initialize(button);
 10802  0F52  0857               	movf	Button_State_Initializing@button,w
 10803  0F53  318C  24E5  318F   	fcall	_Button_Baseline_Initialize
 10804                           
 10805                           ;mcc_generated_files/mtouch/mtouch_button.c: 207:     } else {
 10806  0F56  2F5B               	goto	l3356
 10807  0F57                     l3354:	
 10808                           
 10809                           ;mcc_generated_files/mtouch/mtouch_button.c: 208:         Button_Baseline_Update(button)
      +                          ;
 10810  0F57  0857               	movf	Button_State_Initializing@button,w
 10811  0F58  3185  2553  318F   	fcall	_Button_Baseline_Update
 10812  0F5B                     l3356:	
 10813                           
 10814                           ;mcc_generated_files/mtouch/mtouch_button.c: 212:     (button->counter)++;
 10815  0F5B  0140               	movlb	0	; select bank0
 10816  0F5C  0857               	movf	Button_State_Initializing@button,w
 10817  0F5D  3E0A               	addlw	10
 10818  0F5E  0086               	movwf	6
 10819  0F5F  0187               	clrf	7
 10820  0F60  3001               	movlw	1
 10821  0F61  0781               	addwf	1,f
 10822  0F62  3141               	addfsr 1,1
 10823  0F63  1803               	skipnc
 10824  0F64  0A81               	incf	1,f
 10825                           
 10826                           ;mcc_generated_files/mtouch/mtouch_button.c: 213:     if ((button->counter) >= (mtouch_b
      +                          utton_statecounter_t)((mtouch_button_baselinecounter_t)16u))
 10827  0F65  0857               	movf	Button_State_Initializing@button,w
 10828  0F66  3E0A               	addlw	10
 10829  0F67  0086               	movwf	6
 10830  0F68  0187               	clrf	7
 10831  0F69  3F40               	moviw [0]fsr1
 10832  0F6A  00D8               	movwf	??_Button_State_Initializing
 10833  0F6B  3F41               	moviw [1]fsr1
 10834  0F6C  00D9               	movwf	??_Button_State_Initializing+1
 10835  0F6D  3000               	movlw	0
 10836  0F6E  0259               	subwf	??_Button_State_Initializing+1,w
 10837  0F6F  3010               	movlw	16
 10838  0F70  1903               	skipnz
 10839  0F71  0258               	subwf	??_Button_State_Initializing,w
 10840  0F72  1C03               	skipc
 10841  0F73  0008               	return
 10842                           
 10843                           ;mcc_generated_files/mtouch/mtouch_button.c: 214:     {;mcc_generated_files/mtouch/mtouc
      +                          h_button.c: 215:         button->reading = (mtouch_button_reading_t)((button->baseline)>
      +                          >((uint8_t)4u));
 10844  0F74  0857               	movf	Button_State_Initializing@button,w
 10845  0F75  3E05               	addlw	5
 10846  0F76  0086               	movwf	6
 10847  0F77  0187               	clrf	7
 10848  0F78  3F40               	moviw [0]fsr1
 10849  0F79  00D8               	movwf	??_Button_State_Initializing
 10850  0F7A  3F41               	moviw [1]fsr1
 10851  0F7B  00D9               	movwf	??_Button_State_Initializing+1
 10852  0F7C  3F42               	moviw [2]fsr1
 10853  0F7D  00DA               	movwf	??_Button_State_Initializing+2
 10854  0F7E  3F43               	moviw [3]fsr1
 10855  0F7F  00DB               	movwf	??_Button_State_Initializing+3
 10856  0F80  3004               	movlw	4
 10857  0F81                     u2245:	
 10858  0F81  36DB               	lsrf	??_Button_State_Initializing+3,f
 10859  0F82  0CDA               	rrf	??_Button_State_Initializing+2,f
 10860  0F83  0CD9               	rrf	??_Button_State_Initializing+1,f
 10861  0F84  0CD8               	rrf	??_Button_State_Initializing,f
 10862  0F85  0B89               	decfsz	9,f
 10863  0F86  2F81               	goto	u2245
 10864  0F87  0857               	movf	Button_State_Initializing@button,w
 10865  0F88  3E03               	addlw	3
 10866  0F89  0086               	movwf	6
 10867  0F8A  0187               	clrf	7
 10868  0F8B  0858               	movf	??_Button_State_Initializing,w
 10869  0F8C  3FC0               	movwi [0]fsr1
 10870  0F8D  0859               	movf	??_Button_State_Initializing+1,w
 10871  0F8E  3FC1               	movwi [1]fsr1
 10872                           
 10873                           ;mcc_generated_files/mtouch/mtouch_button.c: 216:         button->state = MTOUCH_BUTTON_
      +                          STATE_notPressed;
 10874  0F8F  0857               	movf	Button_State_Initializing@button,w
 10875  0F90  3E02               	addlw	2
 10876  0F91  0086               	movwf	6
 10877  0F92  0187               	clrf	7
 10878  0F93  0181               	clrf	1
 10879  0F94  0A81               	incf	1,f
 10880                           
 10881                           ;mcc_generated_files/mtouch/mtouch_button.c: 217:         button->counter = (mtouch_butt
      +                          on_statecounter_t)0;
 10882  0F95  0857               	movf	Button_State_Initializing@button,w
 10883  0F96  3E0A               	addlw	10
 10884  0F97  0086               	movwf	6
 10885  0F98  0187               	clrf	7
 10886  0F99  3000               	movlw	0
 10887  0F9A  3FC0               	movwi [0]fsr1
 10888  0F9B  3FC1               	movwi [1]fsr1
 10889  0F9C  0008               	return
 10890  0F9D                     __end_of_Button_State_Initializing:	
 10891                           
 10892                           	psect	text55
 10893  0EEC                     __ptext55:	
 10894 ;; *************** function _Button_State_Pressed *****************
 10895 ;; Defined at:
 10896 ;;		line 257 in file "mcc_generated_files/mtouch/mtouch_button.c"
 10897 ;; Parameters:    Size  Location     Type
 10898 ;;  button          1   13[BANK0 ] PTR struct .
 10899 ;;		 -> mtouch_button(16), 
 10900 ;; Auto vars:     Size  Location     Type
 10901 ;;		None
 10902 ;; Return value:  Size  Location     Type
 10903 ;;                  1    wreg      void 
 10904 ;; Registers used:
 10905 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10906 ;; Tracked objects:
 10907 ;;		On entry : 0/0
 10908 ;;		On exit  : 0/0
 10909 ;;		Unchanged: 0/0
 10910 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 10911 ;;      Params:         0       1       0       0       0       0       0       0
 10912 ;;      Locals:         0       0       0       0       0       0       0       0
 10913 ;;      Temps:          0       2       0       0       0       0       0       0
 10914 ;;      Totals:         0       3       0       0       0       0       0       0
 10915 ;;Total ram usage:        3 bytes
 10916 ;; Hardware stack levels used:    1
 10917 ;; Hardware stack levels required when called:    6
 10918 ;; This function calls:
 10919 ;;		_Button_DefaultCallback
 10920 ;;		_MTOUCH_Button_Initialize
 10921 ;; This function is called by:
 10922 ;;		_Button_Service
 10923 ;; This function uses a non-reentrant model
 10924 ;;
 10925                           
 10926                           
 10927                           ;psect for function _Button_State_Pressed
 10928  0EEC                     _Button_State_Pressed:	
 10929                           
 10930                           ;mcc_generated_files/mtouch/mtouch_button.c: 257: static void Button_State_Pressed(mtouc
      +                          h_button_t* button);mcc_generated_files/mtouch/mtouch_button.c: 258: {;mcc_generated_fil
      +                          es/mtouch/mtouch_button.c: 260:     if ((button->counter) >= ((mtouch_button_statecounte
      +                          r_t)1000u))
 10931                           
 10932                           ;incstack = 0
 10933                           ; Regs used in _Button_State_Pressed: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 10934  0EEC  0140               	movlb	0	; select bank0
 10935  0EED  0857               	movf	Button_State_Pressed@button,w
 10936  0EEE  3E0A               	addlw	10
 10937  0EEF  0086               	movwf	6
 10938  0EF0  0187               	clrf	7
 10939  0EF1  3F40               	moviw [0]fsr1
 10940  0EF2  00D8               	movwf	??_Button_State_Pressed
 10941  0EF3  3F41               	moviw [1]fsr1
 10942  0EF4  00D9               	movwf	??_Button_State_Pressed+1
 10943  0EF5  3003               	movlw	3
 10944  0EF6  0259               	subwf	??_Button_State_Pressed+1,w
 10945  0EF7  30E8               	movlw	232
 10946  0EF8  1903               	skipnz
 10947  0EF9  0258               	subwf	??_Button_State_Pressed,w
 10948  0EFA  1C03               	skipc
 10949  0EFB  2F0E               	goto	l3386
 10950                           
 10951                           ;mcc_generated_files/mtouch/mtouch_button.c: 261:     {;mcc_generated_files/mtouch/mtouc
      +                          h_button.c: 262:         MTOUCH_Button_Initialize(button->name);
 10952  0EFC  0857               	movf	Button_State_Pressed@button,w
 10953  0EFD  0086               	movwf	6
 10954  0EFE  0187               	clrf	7
 10955  0EFF  0801               	movf	1,w
 10956  0F00  318D  2541  318E   	fcall	_MTOUCH_Button_Initialize
 10957                           
 10958                           ;mcc_generated_files/mtouch/mtouch_button.c: 263:         callback_notPressed(button->na
      +                          me);
 10959  0F03  0140               	movlb	0	; select bank0
 10960  0F04  0857               	movf	Button_State_Pressed@button,w
 10961  0F05  0086               	movwf	6
 10962  0F06  0187               	clrf	7
 10963  0F07  0801               	movf	1,w
 10964  0F08  00D8               	movwf	??_Button_State_Pressed
 10965  0F09  0858               	movf	??_Button_State_Pressed,w
 10966  0F0A  00CA               	movwf	Button_DefaultCallback@button
 10967  0F0B  3189  211F         	fcall	_Button_DefaultCallback
 10968                           
 10969                           ;mcc_generated_files/mtouch/mtouch_button.c: 264:     }
 10970  0F0D  0008               	return
 10971  0F0E                     l3386:	
 10972  0F0E  0857               	movf	Button_State_Pressed@button,w
 10973  0F0F  3E09               	addlw	9
 10974  0F10  0086               	movwf	6
 10975  0F11  0187               	clrf	7
 10976  0F12  0801               	movf	1,w
 10977  0F13  3A80               	xorlw	128
 10978  0F14  00D8               	movwf	??_Button_State_Pressed
 10979  0F15  0857               	movf	Button_State_Pressed@button,w
 10980  0F16  3E0E               	addlw	14
 10981  0F17  0086               	movwf	6
 10982  0F18  0187               	clrf	7
 10983  0F19  0857               	movf	Button_State_Pressed@button,w
 10984  0F1A  3E0E               	addlw	14
 10985  0F1B  0084               	movwf	4
 10986  0F1C  0185               	clrf	5
 10987  0F1D  3600               	lsrf	0,w
 10988  0F1E  0201               	subwf	1,w
 10989  0F1F  3A80               	xorlw	128
 10990  0F20  02D8               	subwf	??_Button_State_Pressed,f
 10991  0F21  1803               	skipnc
 10992  0F22  0008               	return
 10993                           
 10994                           ;mcc_generated_files/mtouch/mtouch_button.c: 268:     {;mcc_generated_files/mtouch/mtouc
      +                          h_button.c: 269:         button->state = MTOUCH_BUTTON_STATE_notPressed;
 10995  0F23  0857               	movf	Button_State_Pressed@button,w
 10996  0F24  3E02               	addlw	2
 10997  0F25  0086               	movwf	6
 10998  0F26  0187               	clrf	7
 10999  0F27  0181               	clrf	1
 11000  0F28  0A81               	incf	1,f
 11001                           
 11002                           ;mcc_generated_files/mtouch/mtouch_button.c: 270:         button->counter = (mtouch_butt
      +                          on_statecounter_t)0;
 11003  0F29  0857               	movf	Button_State_Pressed@button,w
 11004  0F2A  3E0A               	addlw	10
 11005  0F2B  0086               	movwf	6
 11006  0F2C  0187               	clrf	7
 11007  0F2D  3000               	movlw	0
 11008  0F2E  3FC0               	movwi [0]fsr1
 11009  0F2F  3FC1               	movwi [1]fsr1
 11010                           
 11011                           ;mcc_generated_files/mtouch/mtouch_button.c: 271:         button->baseline_count = (mtou
      +                          ch_button_baselinecounter_t)((0xffff))-((mtouch_button_baselinecounter_t)1024u);
 11012  0F30  0857               	movf	Button_State_Pressed@button,w
 11013  0F31  3E0C               	addlw	12
 11014  0F32  0086               	movwf	6
 11015  0F33  0187               	clrf	7
 11016  0F34  30FF               	movlw	255
 11017  0F35  3FC0               	movwi [0]fsr1
 11018  0F36  30FB               	movlw	251
 11019  0F37  3FC1               	movwi [1]fsr1
 11020                           
 11021                           ;mcc_generated_files/mtouch/mtouch_button.c: 272:         callback_notPressed(button->na
      +                          me);
 11022  0F38  0857               	movf	Button_State_Pressed@button,w
 11023  0F39  0086               	movwf	6
 11024  0F3A  0187               	clrf	7
 11025  0F3B  0801               	movf	1,w
 11026  0F3C  00D8               	movwf	??_Button_State_Pressed
 11027  0F3D  0858               	movf	??_Button_State_Pressed,w
 11028  0F3E  00CA               	movwf	Button_DefaultCallback@button
 11029  0F3F  3189  211F         	fcall	_Button_DefaultCallback
 11030  0F41  0008               	return
 11031  0F42                     __end_of_Button_State_Pressed:	
 11032                           
 11033                           	psect	text56
 11034  0D41                     __ptext56:	
 11035 ;; *************** function _MTOUCH_Button_Initialize *****************
 11036 ;; Defined at:
 11037 ;;		line 143 in file "mcc_generated_files/mtouch/mtouch_button.c"
 11038 ;; Parameters:    Size  Location     Type
 11039 ;;  name            1    wreg     enum E6960
 11040 ;; Auto vars:     Size  Location     Type
 11041 ;;  name            1    2[BANK0 ] enum E6960
 11042 ;;  button          1    3[BANK0 ] PTR struct .
 11043 ;;		 -> mtouch_button(16), 
 11044 ;; Return value:  Size  Location     Type
 11045 ;;                  1    wreg      void 
 11046 ;; Registers used:
 11047 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11048 ;; Tracked objects:
 11049 ;;		On entry : 0/0
 11050 ;;		On exit  : 0/0
 11051 ;;		Unchanged: 0/0
 11052 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 11053 ;;      Params:         0       0       0       0       0       0       0       0
 11054 ;;      Locals:         0       2       0       0       0       0       0       0
 11055 ;;      Temps:          0       2       0       0       0       0       0       0
 11056 ;;      Totals:         0       4       0       0       0       0       0       0
 11057 ;;Total ram usage:        4 bytes
 11058 ;; Hardware stack levels used:    1
 11059 ;; Hardware stack levels required when called:    5
 11060 ;; This function calls:
 11061 ;;		_MTOUCH_Sensor_Calibrate
 11062 ;; This function is called by:
 11063 ;;		_MTOUCH_Button_InitializeAll
 11064 ;;		_Button_Service
 11065 ;;		_Button_State_NotPressed
 11066 ;;		_Button_State_Pressed
 11067 ;; This function uses a non-reentrant model
 11068 ;;
 11069                           
 11070                           
 11071                           ;psect for function _MTOUCH_Button_Initialize
 11072  0D41                     _MTOUCH_Button_Initialize:	
 11073                           
 11074                           ;incstack = 0
 11075                           ; Regs used in _MTOUCH_Button_Initialize: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cst
      +                          ack]
 11076                           ;MTOUCH_Button_Initialize@name stored from wreg
 11077  0D41  0140               	movlb	0	; select bank0
 11078  0D42  00CC               	movwf	MTOUCH_Button_Initialize@name
 11079                           
 11080                           ;mcc_generated_files/mtouch/mtouch_button.c: 143: void MTOUCH_Button_Initialize(enum mto
      +                          uch_button_names name);mcc_generated_files/mtouch/mtouch_button.c: 144: {;mcc_generated_
      +                          files/mtouch/mtouch_button.c: 145:     mtouch_button_t* button = &mtouch_button[name];
 11081  0D43  084C               	movf	MTOUCH_Button_Initialize@name,w
 11082  0D44  00CA               	movwf	??_MTOUCH_Button_Initialize
 11083  0D45  3003               	movlw	3
 11084  0D46                     u2045:	
 11085  0D46  35CA               	lslf	??_MTOUCH_Button_Initialize,f
 11086  0D47  3EFF               	addlw	-1
 11087  0D48  1D03               	skipz
 11088  0D49  2D46               	goto	u2045
 11089  0D4A  354A               	lslf	??_MTOUCH_Button_Initialize,w
 11090  0D4B  3EB9               	addlw	(low (_mtouch_button| 0))& (0+255)
 11091  0D4C  00CB               	movwf	??_MTOUCH_Button_Initialize+1
 11092  0D4D  084B               	movf	??_MTOUCH_Button_Initialize+1,w
 11093  0D4E  00CD               	movwf	MTOUCH_Button_Initialize@button
 11094                           
 11095                           ;mcc_generated_files/mtouch/mtouch_button.c: 147:     button->state = MTOUCH_BUTTON_STAT
      +                          E_initializing;
 11096  0D4F  084D               	movf	MTOUCH_Button_Initialize@button,w
 11097  0D50  3E02               	addlw	2
 11098  0D51  0086               	movwf	6
 11099  0D52  0187               	clrf	7
 11100  0D53  0181               	clrf	1
 11101                           
 11102                           ;mcc_generated_files/mtouch/mtouch_button.c: 148:     button->baseline = (mtouch_button_
      +                          baseline_t)0;
 11103  0D54  084D               	movf	MTOUCH_Button_Initialize@button,w
 11104  0D55  3E05               	addlw	5
 11105  0D56  0086               	movwf	6
 11106  0D57  0187               	clrf	7
 11107  0D58  3000               	movlw	0
 11108  0D59  3FC0               	movwi [0]fsr1
 11109  0D5A  3000               	movlw	0
 11110  0D5B  3FC1               	movwi [1]fsr1
 11111  0D5C  3FC2               	movwi [2]fsr1
 11112  0D5D  3FC3               	movwi [3]fsr1
 11113                           
 11114                           ;mcc_generated_files/mtouch/mtouch_button.c: 149:     button->counter = (mtouch_button_s
      +                          tatecounter_t)0;
 11115  0D5E  084D               	movf	MTOUCH_Button_Initialize@button,w
 11116  0D5F  3E0A               	addlw	10
 11117  0D60  0086               	movwf	6
 11118  0D61  0187               	clrf	7
 11119  0D62  3000               	movlw	0
 11120  0D63  3FC0               	movwi [0]fsr1
 11121  0D64  3FC1               	movwi [1]fsr1
 11122                           
 11123                           ;mcc_generated_files/mtouch/mtouch_button.c: 150:     button->baseline_count = (mtouch_b
      +                          utton_baselinecounter_t)0;
 11124  0D65  084D               	movf	MTOUCH_Button_Initialize@button,w
 11125  0D66  3E0C               	addlw	12
 11126  0D67  0086               	movwf	6
 11127  0D68  0187               	clrf	7
 11128  0D69  3000               	movlw	0
 11129  0D6A  3FC0               	movwi [0]fsr1
 11130  0D6B  3FC1               	movwi [1]fsr1
 11131                           
 11132                           ;mcc_generated_files/mtouch/mtouch_button.c: 152:     MTOUCH_Sensor_Calibrate(button->se
      +                          nsor);
 11133  0D6C  0A4D               	incf	MTOUCH_Button_Initialize@button,w
 11134  0D6D  0086               	movwf	6
 11135  0D6E  0187               	clrf	7
 11136  0D6F  0801               	movf	1,w
 11137  0D70  3189  2120         	fcall	_MTOUCH_Sensor_Calibrate
 11138  0D72  0008               	return
 11139  0D73                     __end_of_MTOUCH_Button_Initialize:	
 11140                           
 11141                           	psect	text57
 11142  0920                     __ptext57:	
 11143 ;; *************** function _MTOUCH_Sensor_Calibrate *****************
 11144 ;; Defined at:
 11145 ;;		line 613 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
 11146 ;; Parameters:    Size  Location     Type
 11147 ;;  sensor          1    wreg     enum E6808
 11148 ;; Auto vars:     Size  Location     Type
 11149 ;;  sensor          1    0[COMMON] enum E6808
 11150 ;; Return value:  Size  Location     Type
 11151 ;;                  1    wreg      void 
 11152 ;; Registers used:
 11153 ;;		wreg
 11154 ;; Tracked objects:
 11155 ;;		On entry : 0/0
 11156 ;;		On exit  : 0/0
 11157 ;;		Unchanged: 0/0
 11158 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 11159 ;;      Params:         0       0       0       0       0       0       0       0
 11160 ;;      Locals:         0       0       0       0       0       0       0       0
 11161 ;;      Temps:          0       0       0       0       0       0       0       0
 11162 ;;      Totals:         0       0       0       0       0       0       0       0
 11163 ;;Total ram usage:        0 bytes
 11164 ;; Hardware stack levels used:    1
 11165 ;; Hardware stack levels required when called:    4
 11166 ;; This function calls:
 11167 ;;		Nothing
 11168 ;; This function is called by:
 11169 ;;		_MTOUCH_Button_Initialize
 11170 ;; This function uses a non-reentrant model
 11171 ;;
 11172                           
 11173                           
 11174                           ;psect for function _MTOUCH_Sensor_Calibrate
 11175  0920                     _MTOUCH_Sensor_Calibrate:	
 11176                           
 11177                           ;incstack = 0
 11178                           ; Regs used in _MTOUCH_Sensor_Calibrate: [wreg]
 11179  0920  0008               	return
 11180  0921                     __end_of_MTOUCH_Sensor_Calibrate:	
 11181                           
 11182                           	psect	text58
 11183  091F                     __ptext58:	
 11184 ;; *************** function _Button_DefaultCallback *****************
 11185 ;; Defined at:
 11186 ;;		line 507 in file "mcc_generated_files/mtouch/mtouch_button.c"
 11187 ;; Parameters:    Size  Location     Type
 11188 ;;  button          1    0[BANK0 ] enum E6960
 11189 ;; Auto vars:     Size  Location     Type
 11190 ;;		None
 11191 ;; Return value:  Size  Location     Type
 11192 ;;                  1    wreg      void 
 11193 ;; Registers used:
 11194 ;;		None
 11195 ;; Tracked objects:
 11196 ;;		On entry : 0/0
 11197 ;;		On exit  : 0/0
 11198 ;;		Unchanged: 0/0
 11199 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 11200 ;;      Params:         0       1       0       0       0       0       0       0
 11201 ;;      Locals:         0       0       0       0       0       0       0       0
 11202 ;;      Temps:          0       0       0       0       0       0       0       0
 11203 ;;      Totals:         0       1       0       0       0       0       0       0
 11204 ;;Total ram usage:        1 bytes
 11205 ;; Hardware stack levels used:    1
 11206 ;; Hardware stack levels required when called:    4
 11207 ;; This function calls:
 11208 ;;		Nothing
 11209 ;; This function is called by:
 11210 ;;		_Button_State_NotPressed
 11211 ;;		_Button_State_Pressed
 11212 ;; This function uses a non-reentrant model
 11213 ;;
 11214                           
 11215                           
 11216                           ;psect for function _Button_DefaultCallback
 11217  091F                     _Button_DefaultCallback:	
 11218                           
 11219                           ;incstack = 0
 11220                           ; Regs used in _Button_DefaultCallback: []
 11221  091F  0008               	return
 11222  0920                     __end_of_Button_DefaultCallback:	
 11223                           
 11224                           	psect	text59
 11225  0553                     __ptext59:	
 11226 ;; *************** function _Button_Baseline_Update *****************
 11227 ;; Defined at:
 11228 ;;		line 461 in file "mcc_generated_files/mtouch/mtouch_button.c"
 11229 ;; Parameters:    Size  Location     Type
 11230 ;;  button          1    wreg     PTR struct .
 11231 ;;		 -> mtouch_button(16), 
 11232 ;; Auto vars:     Size  Location     Type
 11233 ;;  button          1    6[BANK0 ] PTR struct .
 11234 ;;		 -> mtouch_button(16), 
 11235 ;; Return value:  Size  Location     Type
 11236 ;;                  1    wreg      void 
 11237 ;; Registers used:
 11238 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 11239 ;; Tracked objects:
 11240 ;;		On entry : 0/0
 11241 ;;		On exit  : 0/0
 11242 ;;		Unchanged: 0/0
 11243 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 11244 ;;      Params:         0       0       0       0       0       0       0       0
 11245 ;;      Locals:         0       1       0       0       0       0       0       0
 11246 ;;      Temps:          0       6       0       0       0       0       0       0
 11247 ;;      Totals:         0       7       0       0       0       0       0       0
 11248 ;;Total ram usage:        7 bytes
 11249 ;; Hardware stack levels used:    1
 11250 ;; Hardware stack levels required when called:    4
 11251 ;; This function calls:
 11252 ;;		Nothing
 11253 ;; This function is called by:
 11254 ;;		_Button_State_Initializing
 11255 ;;		_Button_State_NotPressed
 11256 ;; This function uses a non-reentrant model
 11257 ;;
 11258                           
 11259                           
 11260                           ;psect for function _Button_Baseline_Update
 11261  0553                     _Button_Baseline_Update:	
 11262                           
 11263                           ;incstack = 0
 11264                           ; Regs used in _Button_Baseline_Update: [wreg+fsr1l+fsr1h+status,2+status,0]
 11265                           ;Button_Baseline_Update@button stored from wreg
 11266  0553  0140               	movlb	0	; select bank0
 11267  0554  00D0               	movwf	Button_Baseline_Update@button
 11268                           
 11269                           ;mcc_generated_files/mtouch/mtouch_button.c: 461: static void Button_Baseline_Update(mto
      +                          uch_button_t* button);mcc_generated_files/mtouch/mtouch_button.c: 462: {;mcc_generated_f
      +                          iles/mtouch/mtouch_button.c: 463:     if (GIE == (uint8_t)1)
 11270  0555  1F8B               	btfss	11,7	;volatile
 11271  0556  2D9A               	goto	l3242
 11272                           
 11273                           ;mcc_generated_files/mtouch/mtouch_button.c: 464:     {;mcc_generated_files/mtouch/mtouc
      +                          h_button.c: 465:         GIE = (uint8_t)0;
 11274  0557  138B               	bcf	11,7	;volatile
 11275                           
 11276                           ;mcc_generated_files/mtouch/mtouch_button.c: 466:         button->baseline -= (button->b
      +                          aseline) >> ((uint8_t)4u);
 11277  0558  0850               	movf	Button_Baseline_Update@button,w
 11278  0559  3E05               	addlw	5
 11279  055A  0086               	movwf	6
 11280  055B  0187               	clrf	7
 11281  055C  3F40               	moviw [0]fsr1
 11282  055D  00CA               	movwf	??_Button_Baseline_Update
 11283  055E  3F41               	moviw [1]fsr1
 11284  055F  00CB               	movwf	??_Button_Baseline_Update+1
 11285  0560  3F42               	moviw [2]fsr1
 11286  0561  00CC               	movwf	??_Button_Baseline_Update+2
 11287  0562  3F43               	moviw [3]fsr1
 11288  0563  00CD               	movwf	??_Button_Baseline_Update+3
 11289  0564  3004               	movlw	4
 11290  0565                     u2075:	
 11291  0565  36CD               	lsrf	??_Button_Baseline_Update+3,f
 11292  0566  0CCC               	rrf	??_Button_Baseline_Update+2,f
 11293  0567  0CCB               	rrf	??_Button_Baseline_Update+1,f
 11294  0568  0CCA               	rrf	??_Button_Baseline_Update,f
 11295  0569  0B89               	decfsz	9,f
 11296  056A  2D65               	goto	u2075
 11297  056B  0850               	movf	Button_Baseline_Update@button,w
 11298  056C  3E05               	addlw	5
 11299  056D  0086               	movwf	6
 11300  056E  0187               	clrf	7
 11301  056F  084A               	movf	??_Button_Baseline_Update,w
 11302  0570  0281               	subwf	1,f
 11303  0571  3141               	addfsr 1,1
 11304  0572  084B               	movf	??_Button_Baseline_Update+1,w
 11305  0573  3B81               	subwfb	1,f
 11306  0574  3141               	addfsr 1,1
 11307  0575  084C               	movf	??_Button_Baseline_Update+2,w
 11308  0576  3B81               	subwfb	1,f
 11309  0577  3141               	addfsr 1,1
 11310  0578  084D               	movf	??_Button_Baseline_Update+3,w
 11311  0579  3B81               	subwfb	1,f
 11312  057A  317D               	addfsr 1,-3
 11313                           
 11314                           ;mcc_generated_files/mtouch/mtouch_button.c: 467:         button->baseline += button->re
      +                          ading;
 11315  057B  0850               	movf	Button_Baseline_Update@button,w
 11316  057C  3E03               	addlw	3
 11317  057D  0086               	movwf	6
 11318  057E  0187               	clrf	7
 11319  057F  3F40               	moviw [0]fsr1
 11320  0580  00CA               	movwf	??_Button_Baseline_Update
 11321  0581  3F41               	moviw [1]fsr1
 11322  0582  00CB               	movwf	??_Button_Baseline_Update+1
 11323  0583  084A               	movf	??_Button_Baseline_Update,w
 11324  0584  00CC               	movwf	??_Button_Baseline_Update+2
 11325  0585  084B               	movf	??_Button_Baseline_Update+1,w
 11326  0586  00CD               	movwf	??_Button_Baseline_Update+3
 11327  0587  01CE               	clrf	??_Button_Baseline_Update+4
 11328  0588  01CF               	clrf	??_Button_Baseline_Update+5
 11329  0589  0850               	movf	Button_Baseline_Update@button,w
 11330  058A  3E05               	addlw	5
 11331  058B  0086               	movwf	6
 11332  058C  0187               	clrf	7
 11333  058D  084C               	movf	??_Button_Baseline_Update+2,w
 11334  058E  0781               	addwf	1,f
 11335  058F  3141               	addfsr 1,1
 11336  0590  084D               	movf	??_Button_Baseline_Update+3,w
 11337  0591  3D81               	addwfc	1,f
 11338  0592  3141               	addfsr 1,1
 11339  0593  084E               	movf	??_Button_Baseline_Update+4,w
 11340  0594  3D81               	addwfc	1,f
 11341  0595  3141               	addfsr 1,1
 11342  0596  084F               	movf	??_Button_Baseline_Update+5,w
 11343  0597  3D81               	addwfc	1,f
 11344                           
 11345                           ;mcc_generated_files/mtouch/mtouch_button.c: 468:         GIE = (uint8_t)1;
 11346  0598  178B               	bsf	11,7	;volatile
 11347                           
 11348                           ;mcc_generated_files/mtouch/mtouch_button.c: 469:     }
 11349  0599  0008               	return
 11350  059A                     l3242:	
 11351                           
 11352                           ;mcc_generated_files/mtouch/mtouch_button.c: 471:     {;mcc_generated_files/mtouch/mtouc
      +                          h_button.c: 472:         button->baseline -= (button->baseline) >> ((uint8_t)4u);
 11353  059A  0850               	movf	Button_Baseline_Update@button,w
 11354  059B  3E05               	addlw	5
 11355  059C  0086               	movwf	6
 11356  059D  0187               	clrf	7
 11357  059E  3F40               	moviw [0]fsr1
 11358  059F  00CA               	movwf	??_Button_Baseline_Update
 11359  05A0  3F41               	moviw [1]fsr1
 11360  05A1  00CB               	movwf	??_Button_Baseline_Update+1
 11361  05A2  3F42               	moviw [2]fsr1
 11362  05A3  00CC               	movwf	??_Button_Baseline_Update+2
 11363  05A4  3F43               	moviw [3]fsr1
 11364  05A5  00CD               	movwf	??_Button_Baseline_Update+3
 11365  05A6  3004               	movlw	4
 11366  05A7                     u2085:	
 11367  05A7  36CD               	lsrf	??_Button_Baseline_Update+3,f
 11368  05A8  0CCC               	rrf	??_Button_Baseline_Update+2,f
 11369  05A9  0CCB               	rrf	??_Button_Baseline_Update+1,f
 11370  05AA  0CCA               	rrf	??_Button_Baseline_Update,f
 11371  05AB  0B89               	decfsz	9,f
 11372  05AC  2DA7               	goto	u2085
 11373  05AD  0850               	movf	Button_Baseline_Update@button,w
 11374  05AE  3E05               	addlw	5
 11375  05AF  0086               	movwf	6
 11376  05B0  0187               	clrf	7
 11377  05B1  084A               	movf	??_Button_Baseline_Update,w
 11378  05B2  0281               	subwf	1,f
 11379  05B3  3141               	addfsr 1,1
 11380  05B4  084B               	movf	??_Button_Baseline_Update+1,w
 11381  05B5  3B81               	subwfb	1,f
 11382  05B6  3141               	addfsr 1,1
 11383  05B7  084C               	movf	??_Button_Baseline_Update+2,w
 11384  05B8  3B81               	subwfb	1,f
 11385  05B9  3141               	addfsr 1,1
 11386  05BA  084D               	movf	??_Button_Baseline_Update+3,w
 11387  05BB  3B81               	subwfb	1,f
 11388  05BC  317D               	addfsr 1,-3
 11389                           
 11390                           ;mcc_generated_files/mtouch/mtouch_button.c: 473:         button->baseline += button->re
      +                          ading;
 11391  05BD  0850               	movf	Button_Baseline_Update@button,w
 11392  05BE  3E03               	addlw	3
 11393  05BF  0086               	movwf	6
 11394  05C0  0187               	clrf	7
 11395  05C1  3F40               	moviw [0]fsr1
 11396  05C2  00CA               	movwf	??_Button_Baseline_Update
 11397  05C3  3F41               	moviw [1]fsr1
 11398  05C4  00CB               	movwf	??_Button_Baseline_Update+1
 11399  05C5  084A               	movf	??_Button_Baseline_Update,w
 11400  05C6  00CC               	movwf	??_Button_Baseline_Update+2
 11401  05C7  084B               	movf	??_Button_Baseline_Update+1,w
 11402  05C8  00CD               	movwf	??_Button_Baseline_Update+3
 11403  05C9  01CE               	clrf	??_Button_Baseline_Update+4
 11404  05CA  01CF               	clrf	??_Button_Baseline_Update+5
 11405  05CB  0850               	movf	Button_Baseline_Update@button,w
 11406  05CC  3E05               	addlw	5
 11407  05CD  0086               	movwf	6
 11408  05CE  0187               	clrf	7
 11409  05CF  084C               	movf	??_Button_Baseline_Update+2,w
 11410  05D0  0781               	addwf	1,f
 11411  05D1  3141               	addfsr 1,1
 11412  05D2  084D               	movf	??_Button_Baseline_Update+3,w
 11413  05D3  3D81               	addwfc	1,f
 11414  05D4  3141               	addfsr 1,1
 11415  05D5  084E               	movf	??_Button_Baseline_Update+4,w
 11416  05D6  3D81               	addwfc	1,f
 11417  05D7  3141               	addfsr 1,1
 11418  05D8  084F               	movf	??_Button_Baseline_Update+5,w
 11419  05D9  3D81               	addwfc	1,f
 11420  05DA  0008               	return
 11421  05DB                     __end_of_Button_Baseline_Update:	
 11422                           
 11423                           	psect	text60
 11424  0CE5                     __ptext60:	
 11425 ;; *************** function _Button_Baseline_Initialize *****************
 11426 ;; Defined at:
 11427 ;;		line 455 in file "mcc_generated_files/mtouch/mtouch_button.c"
 11428 ;; Parameters:    Size  Location     Type
 11429 ;;  button          1    wreg     PTR struct .
 11430 ;;		 -> mtouch_button(16), 
 11431 ;; Auto vars:     Size  Location     Type
 11432 ;;  button          1   12[BANK0 ] PTR struct .
 11433 ;;		 -> mtouch_button(16), 
 11434 ;; Return value:  Size  Location     Type
 11435 ;;                  1    wreg      void 
 11436 ;; Registers used:
 11437 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11438 ;; Tracked objects:
 11439 ;;		On entry : 0/0
 11440 ;;		On exit  : 0/0
 11441 ;;		Unchanged: 0/0
 11442 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 11443 ;;      Params:         0       0       0       0       0       0       0       0
 11444 ;;      Locals:         0       1       0       0       0       0       0       0
 11445 ;;      Temps:          0       4       0       0       0       0       0       0
 11446 ;;      Totals:         0       5       0       0       0       0       0       0
 11447 ;;Total ram usage:        5 bytes
 11448 ;; Hardware stack levels used:    1
 11449 ;; Hardware stack levels required when called:    6
 11450 ;; This function calls:
 11451 ;;		_MTOUCH_Sensor_RawSample_Get
 11452 ;; This function is called by:
 11453 ;;		_Button_State_Initializing
 11454 ;; This function uses a non-reentrant model
 11455 ;;
 11456                           
 11457                           
 11458                           ;psect for function _Button_Baseline_Initialize
 11459  0CE5                     _Button_Baseline_Initialize:	
 11460                           
 11461                           ;incstack = 0
 11462                           ; Regs used in _Button_Baseline_Initialize: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
 11463                           ;Button_Baseline_Initialize@button stored from wreg
 11464  0CE5  0140               	movlb	0	; select bank0
 11465  0CE6  00D6               	movwf	Button_Baseline_Initialize@button
 11466                           
 11467                           ;mcc_generated_files/mtouch/mtouch_button.c: 455: static void Button_Baseline_Initialize
      +                          (mtouch_button_t* button);mcc_generated_files/mtouch/mtouch_button.c: 456: {;mcc_generat
      +                          ed_files/mtouch/mtouch_button.c: 457:     button->baseline = MTOUCH_Sensor_RawSample_Get
      +                          (button->sensor);
 11468  0CE7  0A56               	incf	Button_Baseline_Initialize@button,w
 11469  0CE8  0086               	movwf	6
 11470  0CE9  0187               	clrf	7
 11471  0CEA  0801               	movf	1,w
 11472  0CEB  318B  2328  318C   	fcall	_MTOUCH_Sensor_RawSample_Get
 11473  0CEE  0140               	movlb	0	; select bank0
 11474  0CEF  084E               	movf	?_MTOUCH_Sensor_RawSample_Get,w
 11475  0CF0  00D2               	movwf	??_Button_Baseline_Initialize
 11476  0CF1  084F               	movf	?_MTOUCH_Sensor_RawSample_Get+1,w
 11477  0CF2  00D3               	movwf	??_Button_Baseline_Initialize+1
 11478  0CF3  01D4               	clrf	??_Button_Baseline_Initialize+2
 11479  0CF4  01D5               	clrf	??_Button_Baseline_Initialize+3
 11480  0CF5  0856               	movf	Button_Baseline_Initialize@button,w
 11481  0CF6  3E05               	addlw	5
 11482  0CF7  0086               	movwf	6
 11483  0CF8  0187               	clrf	7
 11484  0CF9  0852               	movf	??_Button_Baseline_Initialize,w
 11485  0CFA  3FC0               	movwi [0]fsr1
 11486  0CFB  0853               	movf	??_Button_Baseline_Initialize+1,w
 11487  0CFC  3FC1               	movwi [1]fsr1
 11488  0CFD  0854               	movf	??_Button_Baseline_Initialize+2,w
 11489  0CFE  3FC2               	movwi [2]fsr1
 11490  0CFF  0855               	movf	??_Button_Baseline_Initialize+3,w
 11491  0D00  3FC3               	movwi [3]fsr1
 11492                           
 11493                           ;mcc_generated_files/mtouch/mtouch_button.c: 458:     button->baseline <<= ((uint8_t)4u)
      +                          ;
 11494  0D01  0856               	movf	Button_Baseline_Initialize@button,w
 11495  0D02  3E05               	addlw	5
 11496  0D03  0086               	movwf	6
 11497  0D04  0187               	clrf	7
 11498  0D05  3004               	movlw	4
 11499  0D06                     u2055:	
 11500  0D06  3581               	lslf	1,f
 11501  0D07  3141               	addfsr 1,1
 11502  0D08  0D81               	rlf	1,f
 11503  0D09  3141               	addfsr 1,1
 11504  0D0A  0D81               	rlf	1,f
 11505  0D0B  3141               	addfsr 1,1
 11506  0D0C  0D81               	rlf	1,f
 11507  0D0D  317D               	addfsr 1,-3
 11508  0D0E  0B89               	decfsz	9,f
 11509  0D0F  2D06               	goto	u2055
 11510  0D10  0008               	return
 11511  0D11                     __end_of_Button_Baseline_Initialize:	
 11512                           
 11513                           	psect	text61
 11514  09DE                     __ptext61:	
 11515 ;; *************** function _Button_Reading_Update *****************
 11516 ;; Defined at:
 11517 ;;		line 428 in file "mcc_generated_files/mtouch/mtouch_button.c"
 11518 ;; Parameters:    Size  Location     Type
 11519 ;;  button          1    wreg     PTR struct .
 11520 ;;		 -> mtouch_button(16), 
 11521 ;; Auto vars:     Size  Location     Type
 11522 ;;  button          1   11[BANK0 ] PTR struct .
 11523 ;;		 -> mtouch_button(16), 
 11524 ;; Return value:  Size  Location     Type
 11525 ;;                  1    wreg      void 
 11526 ;; Registers used:
 11527 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11528 ;; Tracked objects:
 11529 ;;		On entry : 0/0
 11530 ;;		On exit  : 0/0
 11531 ;;		Unchanged: 0/0
 11532 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 11533 ;;      Params:         0       0       0       0       0       0       0       0
 11534 ;;      Locals:         0       1       0       0       0       0       0       0
 11535 ;;      Temps:          0       0       0       0       0       0       0       0
 11536 ;;      Totals:         0       1       0       0       0       0       0       0
 11537 ;;Total ram usage:        1 bytes
 11538 ;; Hardware stack levels used:    1
 11539 ;; Hardware stack levels required when called:    7
 11540 ;; This function calls:
 11541 ;;		_Button_Reading_Update_Helper
 11542 ;; This function is called by:
 11543 ;;		_Button_Service
 11544 ;; This function uses a non-reentrant model
 11545 ;;
 11546                           
 11547                           
 11548                           ;psect for function _Button_Reading_Update
 11549  09DE                     _Button_Reading_Update:	
 11550                           
 11551                           ;incstack = 0
 11552                           ; Regs used in _Button_Reading_Update: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 11553                           ;Button_Reading_Update@button stored from wreg
 11554  09DE  0140               	movlb	0	; select bank0
 11555  09DF  00D5               	movwf	Button_Reading_Update@button
 11556                           
 11557                           ;mcc_generated_files/mtouch/mtouch_button.c: 428: static void Button_Reading_Update(mtou
      +                          ch_button_t* button);mcc_generated_files/mtouch/mtouch_button.c: 429: {;mcc_generated_fi
      +                          les/mtouch/mtouch_button.c: 430:     if (GIE == (uint8_t) 1)
 11558  09E0  1F8B               	btfss	11,7	;volatile
 11559  09E1  29E8               	goto	l3336
 11560                           
 11561                           ;mcc_generated_files/mtouch/mtouch_button.c: 431:     {;mcc_generated_files/mtouch/mtouc
      +                          h_button.c: 432:         GIE = (uint8_t) 0;
 11562  09E2  138B               	bcf	11,7	;volatile
 11563                           
 11564                           ;mcc_generated_files/mtouch/mtouch_button.c: 433:         Button_Reading_Update_Helper(b
      +                          utton);
 11565  09E3  0855               	movf	Button_Reading_Update@button,w
 11566  09E4  318D  25FC         	fcall	_Button_Reading_Update_Helper
 11567                           
 11568                           ;mcc_generated_files/mtouch/mtouch_button.c: 434:         GIE = (uint8_t) 1;
 11569  09E6  178B               	bsf	11,7	;volatile
 11570                           
 11571                           ;mcc_generated_files/mtouch/mtouch_button.c: 435:     }
 11572  09E7  0008               	return
 11573  09E8                     l3336:	
 11574                           
 11575                           ;mcc_generated_files/mtouch/mtouch_button.c: 437:     {;mcc_generated_files/mtouch/mtouc
      +                          h_button.c: 438:         Button_Reading_Update_Helper(button);
 11576  09E8  0855               	movf	Button_Reading_Update@button,w
 11577  09E9  318D  25FC         	fcall	_Button_Reading_Update_Helper
 11578  09EB  0008               	return
 11579  09EC                     __end_of_Button_Reading_Update:	
 11580                           
 11581                           	psect	text62
 11582  0DFC                     __ptext62:	
 11583 ;; *************** function _Button_Reading_Update_Helper *****************
 11584 ;; Defined at:
 11585 ;;		line 442 in file "mcc_generated_files/mtouch/mtouch_button.c"
 11586 ;; Parameters:    Size  Location     Type
 11587 ;;  button          1    wreg     PTR struct .
 11588 ;;		 -> mtouch_button(16), 
 11589 ;; Auto vars:     Size  Location     Type
 11590 ;;  button          1   10[BANK0 ] PTR struct .
 11591 ;;		 -> mtouch_button(16), 
 11592 ;; Return value:  Size  Location     Type
 11593 ;;                  1    wreg      void 
 11594 ;; Registers used:
 11595 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11596 ;; Tracked objects:
 11597 ;;		On entry : 0/0
 11598 ;;		On exit  : 0/0
 11599 ;;		Unchanged: 0/0
 11600 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 11601 ;;      Params:         0       0       0       0       0       0       0       0
 11602 ;;      Locals:         0       1       0       0       0       0       0       0
 11603 ;;      Temps:          0       2       0       0       0       0       0       0
 11604 ;;      Totals:         0       3       0       0       0       0       0       0
 11605 ;;Total ram usage:        3 bytes
 11606 ;; Hardware stack levels used:    1
 11607 ;; Hardware stack levels required when called:    6
 11608 ;; This function calls:
 11609 ;;		_MTOUCH_Sensor_RawSample_Get
 11610 ;; This function is called by:
 11611 ;;		_Button_Reading_Update
 11612 ;; This function uses a non-reentrant model
 11613 ;;
 11614                           
 11615                           
 11616                           ;psect for function _Button_Reading_Update_Helper
 11617  0DFC                     _Button_Reading_Update_Helper:	
 11618                           
 11619                           ;incstack = 0
 11620                           ; Regs used in _Button_Reading_Update_Helper: [wreg+fsr1l+fsr1h+status,2+status,0+pclath
      +                          +cstack]
 11621                           ;Button_Reading_Update_Helper@button stored from wreg
 11622  0DFC  0140               	movlb	0	; select bank0
 11623  0DFD  00D4               	movwf	Button_Reading_Update_Helper@button
 11624                           
 11625                           ;mcc_generated_files/mtouch/mtouch_button.c: 442: static void Button_Reading_Update_Help
      +                          er(mtouch_button_t* button);mcc_generated_files/mtouch/mtouch_button.c: 443: {;mcc_gener
      +                          ated_files/mtouch/mtouch_button.c: 444:     if (button->state != MTOUCH_BUTTON_STATE_ini
      +                          tializing)
 11626  0DFE  0854               	movf	Button_Reading_Update_Helper@button,w
 11627  0DFF  3E02               	addlw	2
 11628  0E00  0086               	movwf	6
 11629  0E01  0187               	clrf	7
 11630  0E02  0801               	movf	1,w
 11631  0E03  1903               	btfsc	3,2
 11632  0E04  2E35               	goto	l3250
 11633                           
 11634                           ;mcc_generated_files/mtouch/mtouch_button.c: 445:     {;mcc_generated_files/mtouch/mtouc
      +                          h_button.c: 446:         button->reading -= button->reading>>((uint8_t)2u);
 11635  0E05  0854               	movf	Button_Reading_Update_Helper@button,w
 11636  0E06  3E03               	addlw	3
 11637  0E07  0086               	movwf	6
 11638  0E08  0187               	clrf	7
 11639  0E09  3F40               	moviw [0]fsr1
 11640  0E0A  00D2               	movwf	??_Button_Reading_Update_Helper
 11641  0E0B  3F41               	moviw [1]fsr1
 11642  0E0C  00D3               	movwf	??_Button_Reading_Update_Helper+1
 11643  0E0D  36D3               	lsrf	??_Button_Reading_Update_Helper+1,f
 11644  0E0E  0CD2               	rrf	??_Button_Reading_Update_Helper,f
 11645  0E0F  36D3               	lsrf	??_Button_Reading_Update_Helper+1,f
 11646  0E10  0CD2               	rrf	??_Button_Reading_Update_Helper,f
 11647  0E11  0854               	movf	Button_Reading_Update_Helper@button,w
 11648  0E12  3E03               	addlw	3
 11649  0E13  0086               	movwf	6
 11650  0E14  0187               	clrf	7
 11651  0E15  0852               	movf	??_Button_Reading_Update_Helper,w
 11652  0E16  0281               	subwf	1,f
 11653  0E17  3141               	addfsr 1,1
 11654  0E18  0853               	movf	??_Button_Reading_Update_Helper+1,w
 11655  0E19  3B81               	subwfb	1,f
 11656  0E1A  317F               	addfsr 1,-1
 11657                           
 11658                           ;mcc_generated_files/mtouch/mtouch_button.c: 447:         button->reading += MTOUCH_Sens
      +                          or_RawSample_Get(button->sensor) >> ((uint8_t)2u);
 11659  0E1B  0A54               	incf	Button_Reading_Update_Helper@button,w
 11660  0E1C  0086               	movwf	6
 11661  0E1D  0187               	clrf	7
 11662  0E1E  0801               	movf	1,w
 11663  0E1F  318B  2328         	fcall	_MTOUCH_Sensor_RawSample_Get
 11664  0E21  0140               	movlb	0	; select bank0
 11665  0E22  084E               	movf	?_MTOUCH_Sensor_RawSample_Get,w
 11666  0E23  00D2               	movwf	??_Button_Reading_Update_Helper
 11667  0E24  084F               	movf	?_MTOUCH_Sensor_RawSample_Get+1,w
 11668  0E25  00D3               	movwf	??_Button_Reading_Update_Helper+1
 11669  0E26  36D3               	lsrf	??_Button_Reading_Update_Helper+1,f
 11670  0E27  0CD2               	rrf	??_Button_Reading_Update_Helper,f
 11671  0E28  36D3               	lsrf	??_Button_Reading_Update_Helper+1,f
 11672  0E29  0CD2               	rrf	??_Button_Reading_Update_Helper,f
 11673  0E2A  0854               	movf	Button_Reading_Update_Helper@button,w
 11674  0E2B  3E03               	addlw	3
 11675  0E2C  0086               	movwf	6
 11676  0E2D  0187               	clrf	7
 11677  0E2E  0852               	movf	??_Button_Reading_Update_Helper,w
 11678  0E2F  0781               	addwf	1,f
 11679  0E30  3141               	addfsr 1,1
 11680  0E31  0853               	movf	??_Button_Reading_Update_Helper+1,w
 11681  0E32  3D81               	addwfc	1,f
 11682  0E33  317F               	addfsr 1,-1
 11683                           
 11684                           ;mcc_generated_files/mtouch/mtouch_button.c: 448:     }
 11685  0E34  0008               	return
 11686  0E35                     l3250:	
 11687                           
 11688                           ;mcc_generated_files/mtouch/mtouch_button.c: 450:     {;mcc_generated_files/mtouch/mtouc
      +                          h_button.c: 451:         button->reading = MTOUCH_Sensor_RawSample_Get(button->sensor);
 11689  0E35  0A54               	incf	Button_Reading_Update_Helper@button,w
 11690  0E36  0086               	movwf	6
 11691  0E37  0187               	clrf	7
 11692  0E38  0801               	movf	1,w
 11693  0E39  318B  2328         	fcall	_MTOUCH_Sensor_RawSample_Get
 11694  0E3B  0140               	movlb	0	; select bank0
 11695  0E3C  0854               	movf	Button_Reading_Update_Helper@button,w
 11696  0E3D  3E03               	addlw	3
 11697  0E3E  0086               	movwf	6
 11698  0E3F  0187               	clrf	7
 11699  0E40  084E               	movf	?_MTOUCH_Sensor_RawSample_Get,w
 11700  0E41  3FC0               	movwi [0]fsr1
 11701  0E42  084F               	movf	?_MTOUCH_Sensor_RawSample_Get+1,w
 11702  0E43  3FC1               	movwi [1]fsr1
 11703  0E44  0008               	return
 11704  0E45                     __end_of_Button_Reading_Update_Helper:	
 11705                           
 11706                           	psect	text63
 11707  0B28                     __ptext63:	
 11708 ;; *************** function _MTOUCH_Sensor_RawSample_Get *****************
 11709 ;; Defined at:
 11710 ;;		line 498 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
 11711 ;; Parameters:    Size  Location     Type
 11712 ;;  name            1    wreg     enum E6808
 11713 ;; Auto vars:     Size  Location     Type
 11714 ;;  name            1    7[BANK0 ] enum E6808
 11715 ;; Return value:  Size  Location     Type
 11716 ;;                  2    4[BANK0 ] unsigned short 
 11717 ;; Registers used:
 11718 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11719 ;; Tracked objects:
 11720 ;;		On entry : 0/0
 11721 ;;		On exit  : 0/0
 11722 ;;		Unchanged: 0/0
 11723 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 11724 ;;      Params:         0       2       0       0       0       0       0       0
 11725 ;;      Locals:         0       1       0       0       0       0       0       0
 11726 ;;      Temps:          0       1       0       0       0       0       0       0
 11727 ;;      Totals:         0       4       0       0       0       0       0       0
 11728 ;;Total ram usage:        4 bytes
 11729 ;; Hardware stack levels used:    1
 11730 ;; Hardware stack levels required when called:    5
 11731 ;; This function calls:
 11732 ;;		___bmul
 11733 ;; This function is called by:
 11734 ;;		_Button_Reading_Update_Helper
 11735 ;;		_Button_Baseline_Initialize
 11736 ;; This function uses a non-reentrant model
 11737 ;;
 11738                           
 11739                           
 11740                           ;psect for function _MTOUCH_Sensor_RawSample_Get
 11741  0B28                     _MTOUCH_Sensor_RawSample_Get:	
 11742                           
 11743                           ;incstack = 0
 11744                           ; Regs used in _MTOUCH_Sensor_RawSample_Get: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+
      +                          cstack]
 11745                           ;MTOUCH_Sensor_RawSample_Get@name stored from wreg
 11746  0B28  0140               	movlb	0	; select bank0
 11747  0B29  00D1               	movwf	MTOUCH_Sensor_RawSample_Get@name
 11748                           
 11749                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 498: mtouch_sensor_sample_t MTOUCH_Sensor_R
      +                          awSample_Get(enum mtouch_sensor_names name);mcc_generated_files/mtouch/mtouch_sensor.c: 
      +                          499: {;mcc_generated_files/mtouch/mtouch_sensor.c: 500:     if (name < 1u)
 11750  0B2A  0851               	movf	MTOUCH_Sensor_RawSample_Get@name,w
 11751  0B2B  1D03               	btfss	3,2
 11752  0B2C  2B3D               	goto	l3146
 11753                           
 11754                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 501:     {;mcc_generated_files/mtouch/mtouc
      +                          h_sensor.c: 502:         return mtouch_sensor[name].rawSample;
 11755  0B2D  3009               	movlw	9
 11756  0B2E  00D0               	movwf	??_MTOUCH_Sensor_RawSample_Get
 11757  0B2F  0850               	movf	??_MTOUCH_Sensor_RawSample_Get,w
 11758  0B30  00CA               	movwf	___bmul@multiplicand
 11759  0B31  0851               	movf	MTOUCH_Sensor_RawSample_Get@name,w
 11760  0B32  318A  2249         	fcall	___bmul
 11761  0B34  3EB2               	addlw	(low ((_mtouch_sensor| 0+6)))& (0+255)
 11762  0B35  0086               	movwf	6
 11763  0B36  0187               	clrf	7
 11764  0B37  3F40               	moviw [0]fsr1
 11765  0B38  0140               	movlb	0	; select bank0
 11766  0B39  00CE               	movwf	?_MTOUCH_Sensor_RawSample_Get
 11767  0B3A  3F41               	moviw [1]fsr1
 11768  0B3B  00CF               	movwf	?_MTOUCH_Sensor_RawSample_Get+1
 11769  0B3C  0008               	return
 11770  0B3D                     l3146:	
 11771                           
 11772                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 505:         return (mtouch_sensor_sample_t
      +                          )0;
 11773  0B3D  01CE               	clrf	?_MTOUCH_Sensor_RawSample_Get
 11774  0B3E  01CF               	clrf	?_MTOUCH_Sensor_RawSample_Get+1
 11775  0B3F  0008               	return
 11776  0B40                     __end_of_MTOUCH_Sensor_RawSample_Get:	
 11777                           
 11778                           	psect	text64
 11779  0A49                     __ptext64:	
 11780 ;; *************** function ___bmul *****************
 11781 ;; Defined at:
 11782 ;;		line 4 in file "C:\Program Files2\Microchip\xc8\v2.05\pic\sources\c99\common\Umul8.c"
 11783 ;; Parameters:    Size  Location     Type
 11784 ;;  multiplier      1    wreg     unsigned char 
 11785 ;;  multiplicand    1    0[BANK0 ] unsigned char 
 11786 ;; Auto vars:     Size  Location     Type
 11787 ;;  multiplier      1    3[BANK0 ] unsigned char 
 11788 ;;  product         1    2[BANK0 ] unsigned char 
 11789 ;; Return value:  Size  Location     Type
 11790 ;;                  1    wreg      unsigned char 
 11791 ;; Registers used:
 11792 ;;		wreg, status,2, status,0
 11793 ;; Tracked objects:
 11794 ;;		On entry : 0/0
 11795 ;;		On exit  : 0/0
 11796 ;;		Unchanged: 0/0
 11797 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 11798 ;;      Params:         0       1       0       0       0       0       0       0
 11799 ;;      Locals:         0       2       0       0       0       0       0       0
 11800 ;;      Temps:          0       1       0       0       0       0       0       0
 11801 ;;      Totals:         0       4       0       0       0       0       0       0
 11802 ;;Total ram usage:        4 bytes
 11803 ;; Hardware stack levels used:    1
 11804 ;; Hardware stack levels required when called:    4
 11805 ;; This function calls:
 11806 ;;		Nothing
 11807 ;; This function is called by:
 11808 ;;		_MTOUCH_Sensor_Initialize
 11809 ;;		_Sensor_Service
 11810 ;;		_Sensor_Acq_ExecuteScan
 11811 ;;		_MTOUCH_Sensor_RawSample_Get
 11812 ;;		_MTOUCH_Sensor_Enable
 11813 ;;		_MTOUCH_Sensor_wasSampled
 11814 ;;		_MTOUCH_Sensor_isAnySensorActive
 11815 ;;		_MTOUCH_Sensor_Disable
 11816 ;;		_MTOUCH_Sensor_isEnabled
 11817 ;;		_MTOUCH_Sensor_isActive
 11818 ;;		_MTOUCH_Sensor_Oversampling_Get
 11819 ;;		_MTOUCH_Sensor_Oversampling_Set
 11820 ;; This function uses a non-reentrant model
 11821 ;;
 11822                           
 11823                           
 11824                           ;psect for function ___bmul
 11825  0A49                     ___bmul:	
 11826                           
 11827                           ;incstack = 0
 11828                           ; Regs used in ___bmul: [wreg+status,2+status,0]
 11829                           ;___bmul@multiplier stored from wreg
 11830  0A49  0140               	movlb	0	; select bank0
 11831  0A4A  00CD               	movwf	___bmul@multiplier
 11832  0A4B  01CC               	clrf	___bmul@product
 11833  0A4C                     l3078:	
 11834  0A4C  1C4D               	btfss	___bmul@multiplier,0
 11835  0A4D  2A52               	goto	l3082
 11836  0A4E  084A               	movf	___bmul@multiplicand,w
 11837  0A4F  00CB               	movwf	??___bmul
 11838  0A50  084B               	movf	??___bmul,w
 11839  0A51  07CC               	addwf	___bmul@product,f
 11840  0A52                     l3082:	
 11841  0A52  1003               	clrc
 11842  0A53  0DCA               	rlf	___bmul@multiplicand,f
 11843  0A54  1003               	clrc
 11844  0A55  0CCD               	rrf	___bmul@multiplier,f
 11845  0A56  084D               	movf	___bmul@multiplier,w
 11846  0A57  1D03               	btfss	3,2
 11847  0A58  2A4C               	goto	l3078
 11848  0A59  084C               	movf	___bmul@product,w
 11849  0A5A  0008               	return
 11850  0A5B                     __end_of___bmul:	
 11851                           
 11852                           	psect	text65
 11853  0660                     __ptext65:	
 11854 ;; *************** function _Button_Deviation_Update *****************
 11855 ;; Defined at:
 11856 ;;		line 379 in file "mcc_generated_files/mtouch/mtouch_button.c"
 11857 ;; Parameters:    Size  Location     Type
 11858 ;;  button          1    wreg     PTR struct .
 11859 ;;		 -> mtouch_button(16), 
 11860 ;; Auto vars:     Size  Location     Type
 11861 ;;  button          1   10[BANK0 ] PTR struct .
 11862 ;;		 -> mtouch_button(16), 
 11863 ;;  deviation       4   11[BANK0 ] long 
 11864 ;; Return value:  Size  Location     Type
 11865 ;;                  1    wreg      void 
 11866 ;; Registers used:
 11867 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 11868 ;; Tracked objects:
 11869 ;;		On entry : 0/0
 11870 ;;		On exit  : 0/0
 11871 ;;		Unchanged: 0/0
 11872 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 11873 ;;      Params:         0       0       0       0       0       0       0       0
 11874 ;;      Locals:         0       5       0       0       0       0       0       0
 11875 ;;      Temps:          0      10       0       0       0       0       0       0
 11876 ;;      Totals:         0      15       0       0       0       0       0       0
 11877 ;;Total ram usage:       15 bytes
 11878 ;; Hardware stack levels used:    1
 11879 ;; Hardware stack levels required when called:    4
 11880 ;; This function calls:
 11881 ;;		Nothing
 11882 ;; This function is called by:
 11883 ;;		_Button_Service
 11884 ;; This function uses a non-reentrant model
 11885 ;;
 11886                           
 11887                           
 11888                           ;psect for function _Button_Deviation_Update
 11889  0660                     _Button_Deviation_Update:	
 11890                           
 11891                           ;incstack = 0
 11892                           ; Regs used in _Button_Deviation_Update: [wreg+fsr1l+fsr1h+status,2+status,0]
 11893                           ;Button_Deviation_Update@button stored from wreg
 11894  0660  0140               	movlb	0	; select bank0
 11895  0661  00D4               	movwf	Button_Deviation_Update@button
 11896                           
 11897                           ;mcc_generated_files/mtouch/mtouch_button.c: 379: static void Button_Deviation_Update(mt
      +                          ouch_button_t* button);mcc_generated_files/mtouch/mtouch_button.c: 380: {;mcc_generated_
      +                          files/mtouch/mtouch_button.c: 381:     int32_t deviation;;mcc_generated_files/mtouch/mto
      +                          uch_button.c: 383:     deviation = (int32_t)((int32_t)(button->reading) - (int32_t)((but
      +                          ton->baseline)>>((uint8_t)4u)));
 11898  0662  0854               	movf	Button_Deviation_Update@button,w
 11899  0663  3E05               	addlw	5
 11900  0664  0086               	movwf	6
 11901  0665  0187               	clrf	7
 11902  0666  3F40               	moviw [0]fsr1
 11903  0667  00CA               	movwf	??_Button_Deviation_Update
 11904  0668  3F41               	moviw [1]fsr1
 11905  0669  00CB               	movwf	??_Button_Deviation_Update+1
 11906  066A  3F42               	moviw [2]fsr1
 11907  066B  00CC               	movwf	??_Button_Deviation_Update+2
 11908  066C  3F43               	moviw [3]fsr1
 11909  066D  00CD               	movwf	??_Button_Deviation_Update+3
 11910  066E  3004               	movlw	4
 11911  066F                     u2185:	
 11912  066F  36CD               	lsrf	??_Button_Deviation_Update+3,f
 11913  0670  0CCC               	rrf	??_Button_Deviation_Update+2,f
 11914  0671  0CCB               	rrf	??_Button_Deviation_Update+1,f
 11915  0672  0CCA               	rrf	??_Button_Deviation_Update,f
 11916  0673  0B89               	decfsz	9,f
 11917  0674  2E6F               	goto	u2185
 11918  0675  0854               	movf	Button_Deviation_Update@button,w
 11919  0676  3E03               	addlw	3
 11920  0677  0086               	movwf	6
 11921  0678  0187               	clrf	7
 11922  0679  3F40               	moviw [0]fsr1
 11923  067A  00CE               	movwf	??_Button_Deviation_Update+4
 11924  067B  3F41               	moviw [1]fsr1
 11925  067C  00CF               	movwf	??_Button_Deviation_Update+5
 11926  067D  084E               	movf	??_Button_Deviation_Update+4,w
 11927  067E  00D0               	movwf	??_Button_Deviation_Update+6
 11928  067F  084F               	movf	??_Button_Deviation_Update+5,w
 11929  0680  00D1               	movwf	??_Button_Deviation_Update+7
 11930  0681  01D2               	clrf	??_Button_Deviation_Update+8
 11931  0682  01D3               	clrf	??_Button_Deviation_Update+9
 11932  0683  084A               	movf	??_Button_Deviation_Update,w
 11933  0684  02D0               	subwf	??_Button_Deviation_Update+6,f
 11934  0685  084B               	movf	??_Button_Deviation_Update+1,w
 11935  0686  3BD1               	subwfb	??_Button_Deviation_Update+7,f
 11936  0687  084C               	movf	??_Button_Deviation_Update+2,w
 11937  0688  3BD2               	subwfb	??_Button_Deviation_Update+8,f
 11938  0689  084D               	movf	??_Button_Deviation_Update+3,w
 11939  068A  3BD3               	subwfb	??_Button_Deviation_Update+9,f
 11940  068B  0853               	movf	??_Button_Deviation_Update+9,w
 11941  068C  00D8               	movwf	Button_Deviation_Update@deviation+3
 11942  068D  0852               	movf	??_Button_Deviation_Update+8,w
 11943  068E  00D7               	movwf	Button_Deviation_Update@deviation+2
 11944  068F  0851               	movf	??_Button_Deviation_Update+7,w
 11945  0690  00D6               	movwf	Button_Deviation_Update@deviation+1
 11946  0691  0850               	movf	??_Button_Deviation_Update+6,w
 11947  0692  00D5               	movwf	Button_Deviation_Update@deviation
 11948                           
 11949                           ;mcc_generated_files/mtouch/mtouch_button.c: 386:     deviation = deviation >> (button->
      +                          scaling);
 11950  0693  0855               	movf	Button_Deviation_Update@deviation,w
 11951  0694  00CA               	movwf	??_Button_Deviation_Update
 11952  0695  0856               	movf	Button_Deviation_Update@deviation+1,w
 11953  0696  00CB               	movwf	??_Button_Deviation_Update+1
 11954  0697  0857               	movf	Button_Deviation_Update@deviation+2,w
 11955  0698  00CC               	movwf	??_Button_Deviation_Update+2
 11956  0699  0858               	movf	Button_Deviation_Update@deviation+3,w
 11957  069A  00CD               	movwf	??_Button_Deviation_Update+3
 11958  069B  0854               	movf	Button_Deviation_Update@button,w
 11959  069C  3E0F               	addlw	15
 11960  069D  0086               	movwf	6
 11961  069E  0187               	clrf	7
 11962  069F  0A01               	incf	1,w
 11963  06A0  2EA5               	goto	u2190
 11964  06A1                     u2195:	
 11965  06A1  37CD               	asrf	??_Button_Deviation_Update+3,f
 11966  06A2  0CCC               	rrf	??_Button_Deviation_Update+2,f
 11967  06A3  0CCB               	rrf	??_Button_Deviation_Update+1,f
 11968  06A4  0CCA               	rrf	??_Button_Deviation_Update,f
 11969  06A5                     u2190:	
 11970  06A5  0B89               	decfsz	9,f
 11971  06A6  2EA1               	goto	u2195
 11972  06A7  084D               	movf	??_Button_Deviation_Update+3,w
 11973  06A8  00D8               	movwf	Button_Deviation_Update@deviation+3
 11974  06A9  084C               	movf	??_Button_Deviation_Update+2,w
 11975  06AA  00D7               	movwf	Button_Deviation_Update@deviation+2
 11976  06AB  084B               	movf	??_Button_Deviation_Update+1,w
 11977  06AC  00D6               	movwf	Button_Deviation_Update@deviation+1
 11978  06AD  084A               	movf	??_Button_Deviation_Update,w
 11979  06AE  00D5               	movwf	Button_Deviation_Update@deviation
 11980                           
 11981                           ;mcc_generated_files/mtouch/mtouch_button.c: 389:     if (deviation > ((0x7f)))
 11982  06AF  1BD8               	btfsc	Button_Deviation_Update@deviation+3,7
 11983  06B0  2EC6               	goto	l3344
 11984  06B1  0858               	movf	Button_Deviation_Update@deviation+3,w
 11985  06B2  1D03               	btfss	3,2
 11986  06B3  2EBE               	goto	l3342
 11987  06B4  0857               	movf	Button_Deviation_Update@deviation+2,w
 11988  06B5  1D03               	btfss	3,2
 11989  06B6  2EBE               	goto	l3342
 11990  06B7  0856               	movf	Button_Deviation_Update@deviation+1,w
 11991  06B8  1D03               	btfss	3,2
 11992  06B9  2EBE               	goto	l3342
 11993  06BA  3080               	movlw	128
 11994  06BB  0255               	subwf	Button_Deviation_Update@deviation,w
 11995  06BC  1C03               	btfss	3,0
 11996  06BD  2EC6               	goto	l3344
 11997  06BE                     l3342:	
 11998                           
 11999                           ;mcc_generated_files/mtouch/mtouch_button.c: 390:     {;mcc_generated_files/mtouch/mtouc
      +                          h_button.c: 391:         deviation = ((0x7f));
 12000  06BE  3000               	movlw	0
 12001  06BF  00D8               	movwf	Button_Deviation_Update@deviation+3
 12002  06C0  3000               	movlw	0
 12003  06C1  00D7               	movwf	Button_Deviation_Update@deviation+2
 12004  06C2  3000               	movlw	0
 12005  06C3  00D6               	movwf	Button_Deviation_Update@deviation+1
 12006  06C4  307F               	movlw	127
 12007  06C5  00D5               	movwf	Button_Deviation_Update@deviation
 12008  06C6                     l3344:	
 12009                           
 12010                           ;mcc_generated_files/mtouch/mtouch_button.c: 393:     if (deviation < ((-1-0x7f)))
 12011  06C6  1FD8               	btfss	Button_Deviation_Update@deviation+3,7
 12012  06C7  2EDA               	goto	l3348
 12013  06C8  3080               	movlw	128
 12014  06C9  0255               	subwf	Button_Deviation_Update@deviation,w
 12015  06CA  30FF               	movlw	255
 12016  06CB  3B56               	subwfb	Button_Deviation_Update@deviation+1,w
 12017  06CC  30FF               	movlw	255
 12018  06CD  3B57               	subwfb	Button_Deviation_Update@deviation+2,w
 12019  06CE  30FF               	movlw	255
 12020  06CF  3B58               	subwfb	Button_Deviation_Update@deviation+3,w
 12021  06D0  1803               	btfsc	3,0
 12022  06D1  2EDA               	goto	l3348
 12023                           
 12024                           ;mcc_generated_files/mtouch/mtouch_button.c: 394:     {;mcc_generated_files/mtouch/mtouc
      +                          h_button.c: 395:         deviation = ((-1-0x7f));
 12025  06D2  30FF               	movlw	255
 12026  06D3  00D8               	movwf	Button_Deviation_Update@deviation+3
 12027  06D4  30FF               	movlw	255
 12028  06D5  00D7               	movwf	Button_Deviation_Update@deviation+2
 12029  06D6  30FF               	movlw	255
 12030  06D7  00D6               	movwf	Button_Deviation_Update@deviation+1
 12031  06D8  3080               	movlw	128
 12032  06D9  00D5               	movwf	Button_Deviation_Update@deviation
 12033  06DA                     l3348:	
 12034                           
 12035                           ;mcc_generated_files/mtouch/mtouch_button.c: 398:     button->deviation = (mtouch_button
      +                          _deviation_t)deviation;
 12036  06DA  0855               	movf	Button_Deviation_Update@deviation,w
 12037  06DB  00CA               	movwf	??_Button_Deviation_Update
 12038  06DC  0854               	movf	Button_Deviation_Update@button,w
 12039  06DD  3E09               	addlw	9
 12040  06DE  0086               	movwf	6
 12041  06DF  0187               	clrf	7
 12042  06E0  084A               	movf	??_Button_Deviation_Update,w
 12043  06E1  0081               	movwf	1
 12044  06E2  0008               	return
 12045  06E3                     __end_of_Button_Deviation_Update:	
 12046                           
 12047                           	psect	text66
 12048  0BA2                     __ptext66:	
 12049 ;; *************** function _MTOUCH_Button_isPressed *****************
 12050 ;; Defined at:
 12051 ;;		line 354 in file "mcc_generated_files/mtouch/mtouch_button.c"
 12052 ;; Parameters:    Size  Location     Type
 12053 ;;  name            1    wreg     enum E6960
 12054 ;; Auto vars:     Size  Location     Type
 12055 ;;  name            1    1[BANK0 ] enum E6960
 12056 ;; Return value:  Size  Location     Type
 12057 ;;                  1    wreg      _Bool 
 12058 ;; Registers used:
 12059 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 12060 ;; Tracked objects:
 12061 ;;		On entry : 0/0
 12062 ;;		On exit  : 0/0
 12063 ;;		Unchanged: 0/0
 12064 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 12065 ;;      Params:         0       0       0       0       0       0       0       0
 12066 ;;      Locals:         0       1       0       0       0       0       0       0
 12067 ;;      Temps:          0       1       0       0       0       0       0       0
 12068 ;;      Totals:         0       2       0       0       0       0       0       0
 12069 ;;Total ram usage:        2 bytes
 12070 ;; Hardware stack levels used:    1
 12071 ;; Hardware stack levels required when called:    4
 12072 ;; This function calls:
 12073 ;;		Nothing
 12074 ;; This function is called by:
 12075 ;;		_main
 12076 ;;		_touch_example
 12077 ;;		_MTOUCH_Button_Buttonmask_Get
 12078 ;; This function uses a non-reentrant model
 12079 ;;
 12080                           
 12081                           
 12082                           ;psect for function _MTOUCH_Button_isPressed
 12083  0BA2                     _MTOUCH_Button_isPressed:	
 12084                           
 12085                           ;incstack = 0
 12086                           ; Regs used in _MTOUCH_Button_isPressed: [wreg+fsr1l+fsr1h+status,2+status,0]
 12087                           ;MTOUCH_Button_isPressed@name stored from wreg
 12088  0BA2  0140               	movlb	0	; select bank0
 12089  0BA3  00CB               	movwf	MTOUCH_Button_isPressed@name
 12090                           
 12091                           ;mcc_generated_files/mtouch/mtouch_button.c: 354: _Bool MTOUCH_Button_isPressed(enum mto
      +                          uch_button_names name);mcc_generated_files/mtouch/mtouch_button.c: 355: {;mcc_generated_
      +                          files/mtouch/mtouch_button.c: 356:     if(name < 1u)
 12092  0BA4  084B               	movf	MTOUCH_Button_isPressed@name,w
 12093  0BA5  1D03               	btfss	3,2
 12094  0BA6  2BBA               	goto	l3830
 12095                           
 12096                           ;mcc_generated_files/mtouch/mtouch_button.c: 357:         return (_Bool)((mtouch_button[
      +                          name].state == MTOUCH_BUTTON_STATE_pressed) ? 1 : 0);
 12097  0BA7  084B               	movf	MTOUCH_Button_isPressed@name,w
 12098  0BA8  00CA               	movwf	??_MTOUCH_Button_isPressed
 12099  0BA9  3003               	movlw	3
 12100  0BAA                     u2695:	
 12101  0BAA  35CA               	lslf	??_MTOUCH_Button_isPressed,f
 12102  0BAB  3EFF               	addlw	-1
 12103  0BAC  1D03               	skipz
 12104  0BAD  2BAA               	goto	u2695
 12105  0BAE  354A               	lslf	??_MTOUCH_Button_isPressed,w
 12106  0BAF  3EBB               	addlw	(low ((_mtouch_button| 0+2)))& (0+255)
 12107  0BB0  0086               	movwf	6
 12108  0BB1  0187               	clrf	7
 12109  0BB2  3002               	movlw	2
 12110  0BB3  0601               	xorwf	1,w
 12111  0BB4  1D03               	btfss	3,2
 12112  0BB5  2BB8               	goto	u2700
 12113  0BB6  3001               	movlw	1
 12114  0BB7  0008               	return
 12115  0BB8                     u2700:	
 12116  0BB8  3000               	movlw	0
 12117  0BB9  0008               	return
 12118  0BBA                     l3830:	
 12119                           
 12120                           ;mcc_generated_files/mtouch/mtouch_button.c: 359:         return 0;
 12121  0BBA  3000               	movlw	0
 12122  0BBB  0008               	return
 12123  0BBC                     __end_of_MTOUCH_Button_isPressed:	
 12124                           
 12125                           	psect	text67
 12126  0C2D                     __ptext67:	
 12127 ;; *************** function _ADC_GetConversion *****************
 12128 ;; Defined at:
 12129 ;;		line 110 in file "mcc_generated_files/adc.c"
 12130 ;; Parameters:    Size  Location     Type
 12131 ;;  channel         1    wreg     enum E6747
 12132 ;; Auto vars:     Size  Location     Type
 12133 ;;  channel         1    3[BANK0 ] enum E6747
 12134 ;; Return value:  Size  Location     Type
 12135 ;;                  2    0[BANK0 ] unsigned short 
 12136 ;; Registers used:
 12137 ;;		wreg, status,2, status,0
 12138 ;; Tracked objects:
 12139 ;;		On entry : 0/0
 12140 ;;		On exit  : 0/0
 12141 ;;		Unchanged: 0/0
 12142 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 12143 ;;      Params:         0       2       0       0       0       0       0       0
 12144 ;;      Locals:         0       1       0       0       0       0       0       0
 12145 ;;      Temps:          0       1       0       0       0       0       0       0
 12146 ;;      Totals:         0       4       0       0       0       0       0       0
 12147 ;;Total ram usage:        4 bytes
 12148 ;; Hardware stack levels used:    1
 12149 ;; Hardware stack levels required when called:    4
 12150 ;; This function calls:
 12151 ;;		Nothing
 12152 ;; This function is called by:
 12153 ;;		_main
 12154 ;; This function uses a non-reentrant model
 12155 ;;
 12156                           
 12157                           
 12158                           ;psect for function _ADC_GetConversion
 12159  0C2D                     _ADC_GetConversion:	
 12160                           
 12161                           ;incstack = 0
 12162                           ; Regs used in _ADC_GetConversion: [wreg+status,2+status,0]
 12163                           ;ADC_GetConversion@channel stored from wreg
 12164  0C2D  0140               	movlb	0	; select bank0
 12165  0C2E  00CD               	movwf	ADC_GetConversion@channel
 12166                           
 12167                           ;mcc_generated_files/adc.c: 110: adc_result_t ADC_GetConversion(adc_channel_t channel);m
      +                          cc_generated_files/adc.c: 111: {;mcc_generated_files/adc.c: 113:     ADCON0bits.CHS = ch
      +                          annel;
 12168  0C2F  084D               	movf	ADC_GetConversion@channel,w
 12169  0C30  00CC               	movwf	??_ADC_GetConversion
 12170  0C31  0DCC               	rlf	??_ADC_GetConversion,f
 12171  0C32  0DCC               	rlf	??_ADC_GetConversion,f
 12172  0C33  0141               	movlb	1	; select bank1
 12173  0C34  081D               	movf	29,w	;volatile
 12174  0C35  0140               	movlb	0	; select bank0
 12175  0C36  064C               	xorwf	??_ADC_GetConversion,w
 12176  0C37  3903               	andlw	-253
 12177  0C38  064C               	xorwf	??_ADC_GetConversion,w
 12178  0C39  0141               	movlb	1	; select bank1
 12179  0C3A  009D               	movwf	29	;volatile
 12180                           
 12181                           ;mcc_generated_files/adc.c: 116:     ADCON0bits.ADON = 1;
 12182  0C3B  141D               	bsf	29,0	;volatile
 12183                           
 12184                           ;mcc_generated_files/adc.c: 119:     _delay((unsigned long)((5)*(16000000/4000000.0)));
 12185  0C3C  3006               	movlw	6
 12186  0C3D                     u3757:	
 12187  0C3D  0B89               	decfsz	9,f
 12188  0C3E  2C3D               	goto	u3757
 12189  0C3F  3200               	nop2
 12190                           
 12191                           ;mcc_generated_files/adc.c: 122:     ADCON0bits.GOnDONE = 1;
 12192  0C40  0141               	movlb	1	; select bank1
 12193  0C41  149D               	bsf	29,1	;volatile
 12194  0C42                     l722:	
 12195                           ;mcc_generated_files/adc.c: 126:     {;mcc_generated_files/adc.c: 127:     }
 12196                           
 12197                           
 12198                           ;mcc_generated_files/adc.c: 125:     while (ADCON0bits.GOnDONE)
 12199  0C42  189D               	btfsc	29,1	;volatile
 12200  0C43  2C42               	goto	l722
 12201                           
 12202                           ;mcc_generated_files/adc.c: 130:     return ((adc_result_t)((ADRESH << 8) + ADRESL));
 12203  0C44  081C               	movf	28,w	;volatile
 12204  0C45  0140               	movlb	0	; select bank0
 12205  0C46  00CB               	movwf	?_ADC_GetConversion+1
 12206  0C47  0141               	movlb	1	; select bank1
 12207  0C48  081B               	movf	27,w	;volatile
 12208  0C49  0140               	movlb	0	; select bank0
 12209  0C4A  00CA               	movwf	?_ADC_GetConversion
 12210  0C4B  0008               	return
 12211  0C4C                     __end_of_ADC_GetConversion:	
 12212                           
 12213                           	psect	intentry
 12214  0004                     __pintentry:	
 12215 ;; *************** function _INTERRUPT_InterruptManager *****************
 12216 ;; Defined at:
 12217 ;;		line 52 in file "mcc_generated_files/interrupt_manager.c"
 12218 ;; Parameters:    Size  Location     Type
 12219 ;;		None
 12220 ;; Auto vars:     Size  Location     Type
 12221 ;;		None
 12222 ;; Return value:  Size  Location     Type
 12223 ;;                  1    wreg      void 
 12224 ;; Registers used:
 12225 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12226 ;; Tracked objects:
 12227 ;;		On entry : 0/0
 12228 ;;		On exit  : 0/0
 12229 ;;		Unchanged: 0/0
 12230 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 12231 ;;      Params:         0       0       0       0       0       0       0       0
 12232 ;;      Locals:         0       0       0       0       0       0       0       0
 12233 ;;      Temps:          0       0       0       0       0       0       0       0
 12234 ;;      Totals:         0       0       0       0       0       0       0       0
 12235 ;;Total ram usage:        0 bytes
 12236 ;; Hardware stack levels used:    1
 12237 ;; Hardware stack levels required when called:    3
 12238 ;; This function calls:
 12239 ;;		_TMR0_ISR
 12240 ;;		_TMR1_ISR
 12241 ;;		_TMR2_ISR
 12242 ;; This function is called by:
 12243 ;;		Interrupt level 1
 12244 ;; This function uses a non-reentrant model
 12245 ;;
 12246                           
 12247  0004                     _INTERRUPT_InterruptManager:	
 12248                           
 12249                           ;incstack = 0
 12250  0004  147E               	bsf	126,0	;set compiler interrupt flag (level 1)
 12251                           
 12252                           ; Regs used in _INTERRUPT_InterruptManager: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 12253  0005  3180               	pagesel	$
 12254                           
 12255                           ;mcc_generated_files/interrupt_manager.c: 55:     if(PIE0bits.TMR0IE == 1 && PIR0bits.TM
      +                          R0IF == 1)
 12256  0006  014E               	movlb	14	; select bank14
 12257  0007  1A96               	btfsc	22,5	;volatile
 12258  0008  1E8C               	btfss	12,5	;volatile
 12259  0009  280E               	goto	i1l534
 12260                           
 12261                           ;mcc_generated_files/interrupt_manager.c: 56:     {;mcc_generated_files/interrupt_manage
      +                          r.c: 57:         TMR0_ISR();
 12262  000A  3189  21C4  3180   	fcall	_TMR0_ISR
 12263                           
 12264                           ;mcc_generated_files/interrupt_manager.c: 58:     }
 12265  000D  281C               	goto	i1l542
 12266  000E                     i1l534:	
 12267                           ;mcc_generated_files/interrupt_manager.c: 59:     else if(INTCONbits.PEIE == 1)
 12268                           
 12269  000E  1F0B               	btfss	11,6	;volatile
 12270  000F  281C               	goto	i1l542
 12271                           
 12272                           ;mcc_generated_files/interrupt_manager.c: 60:     {;mcc_generated_files/interrupt_manage
      +                          r.c: 61:         if(PIE4bits.TMR2IE == 1 && PIR4bits.TMR2IF == 1)
 12273  0010  189A               	btfsc	26,1	;volatile
 12274  0011  1C90               	btfss	16,1	;volatile
 12275  0012  2817               	goto	i1l537
 12276                           
 12277                           ;mcc_generated_files/interrupt_manager.c: 62:         {;mcc_generated_files/interrupt_ma
      +                          nager.c: 63:             TMR2_ISR();
 12278  0013  3189  21D1  3180   	fcall	_TMR2_ISR
 12279                           
 12280                           ;mcc_generated_files/interrupt_manager.c: 64:         }
 12281  0016  281C               	goto	i1l542
 12282  0017                     i1l537:	
 12283                           ;mcc_generated_files/interrupt_manager.c: 65:         else if(PIE4bits.TMR1IE == 1 && PI
      +                          R4bits.TMR1IF == 1)
 12284                           
 12285  0017  181A               	btfsc	26,0	;volatile
 12286  0018  1C10               	btfss	16,0	;volatile
 12287  0019  281C               	goto	i1l542
 12288                           
 12289                           ;mcc_generated_files/interrupt_manager.c: 66:         {;mcc_generated_files/interrupt_ma
      +                          nager.c: 67:             TMR1_ISR();
 12290  001A  318A  2280         	fcall	_TMR1_ISR
 12291  001C                     i1l542:	
 12292                           ;mcc_generated_files/interrupt_manager.c: 75:     {;mcc_generated_files/interrupt_manage
      +                          r.c: 77:     }
 12293                           
 12294                           ;mcc_generated_files/interrupt_manager.c: 68:         }
 12295                           
 12296  001C  107E               	bcf	126,0	;clear compiler interrupt flag (level 1)
 12297  001D  0009               	retfie
 12298  001E                     __end_of_INTERRUPT_InterruptManager:	
 12299                           
 12300                           	psect	text69
 12301  09D1                     __ptext69:	
 12302 ;; *************** function _TMR2_ISR *****************
 12303 ;; Defined at:
 12304 ;;		line 165 in file "mcc_generated_files/tmr2.c"
 12305 ;; Parameters:    Size  Location     Type
 12306 ;;		None
 12307 ;; Auto vars:     Size  Location     Type
 12308 ;;		None
 12309 ;; Return value:  Size  Location     Type
 12310 ;;                  1    wreg      void 
 12311 ;; Registers used:
 12312 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12313 ;; Tracked objects:
 12314 ;;		On entry : 0/0
 12315 ;;		On exit  : 0/0
 12316 ;;		Unchanged: 0/0
 12317 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 12318 ;;      Params:         0       0       0       0       0       0       0       0
 12319 ;;      Locals:         0       0       0       0       0       0       0       0
 12320 ;;      Temps:          0       0       0       0       0       0       0       0
 12321 ;;      Totals:         0       0       0       0       0       0       0       0
 12322 ;;Total ram usage:        0 bytes
 12323 ;; Hardware stack levels used:    1
 12324 ;; Hardware stack levels required when called:    2
 12325 ;; This function calls:
 12326 ;;		Absolute function
 12327 ;;		_Sensor_Acq_ExecuteScan
 12328 ;;		_TMR2_DefaultInterruptHandler
 12329 ;; This function is called by:
 12330 ;;		_INTERRUPT_InterruptManager
 12331 ;; This function uses a non-reentrant model
 12332 ;;
 12333                           
 12334                           
 12335                           ;psect for function _TMR2_ISR
 12336  09D1                     _TMR2_ISR:	
 12337                           
 12338                           ;mcc_generated_files/tmr2.c: 169:     PIR4bits.TMR2IF = 0;
 12339                           
 12340                           ;incstack = 0
 12341                           ; Regs used in _TMR2_ISR: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 12342  09D1  014E               	movlb	14	; select bank14
 12343  09D2  1090               	bcf	16,1	;volatile
 12344                           
 12345                           ;mcc_generated_files/tmr2.c: 171:     if(TMR2_InterruptHandler)
 12346  09D3  0140               	movlb	0	; select bank0
 12347  09D4  0832               	movf	_TMR2_InterruptHandler,w
 12348  09D5  0433               	iorwf	_TMR2_InterruptHandler+1,w
 12349  09D6  1903               	btfsc	3,2
 12350  09D7  0008               	return
 12351                           
 12352                           ;mcc_generated_files/tmr2.c: 172:     {;mcc_generated_files/tmr2.c: 173:         TMR2_In
      +                          terruptHandler();
 12353  09D8  0833               	movf	_TMR2_InterruptHandler+1,w
 12354  09D9  008A               	movwf	10
 12355  09DA  0832               	movf	_TMR2_InterruptHandler,w
 12356  09DB  000A               	callw
 12357  09DC  3189               	pagesel	$
 12358  09DD  0008               	return
 12359  09DE                     __end_of_TMR2_ISR:	
 12360                           
 12361                           	psect	text70
 12362  05DB                     __ptext70:	
 12363 ;; *************** function _Sensor_Acq_ExecuteScan *****************
 12364 ;; Defined at:
 12365 ;;		line 389 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
 12366 ;; Parameters:    Size  Location     Type
 12367 ;;		None
 12368 ;; Auto vars:     Size  Location     Type
 12369 ;;  result          2    6[COMMON] unsigned short 
 12370 ;; Return value:  Size  Location     Type
 12371 ;;                  1    wreg      void 
 12372 ;; Registers used:
 12373 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12374 ;; Tracked objects:
 12375 ;;		On entry : 0/0
 12376 ;;		On exit  : 0/0
 12377 ;;		Unchanged: 0/0
 12378 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 12379 ;;      Params:         0       0       0       0       0       0       0       0
 12380 ;;      Locals:         2       0       0       0       0       0       0       0
 12381 ;;      Temps:          2       0       0       0       0       0       0       0
 12382 ;;      Totals:         4       0       0       0       0       0       0       0
 12383 ;;Total ram usage:        4 bytes
 12384 ;; Hardware stack levels used:    1
 12385 ;; Hardware stack levels required when called:    1
 12386 ;; This function calls:
 12387 ;;		_MTOUCH_CVD_ScanA_0
 12388 ;;		_MTOUCH_CVD_ScanB_0
 12389 ;;		i1___bmul
 12390 ;;		i1_abs
 12391 ;; This function is called by:
 12392 ;;		_Sensor_Acq_ExecutePacket
 12393 ;;		_TMR2_ISR
 12394 ;; This function uses a non-reentrant model
 12395 ;;
 12396                           
 12397                           
 12398                           ;psect for function _Sensor_Acq_ExecuteScan
 12399  05DB                     _Sensor_Acq_ExecuteScan:	
 12400  05DB                     i1l167:	
 12401                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 391:     while(ADCON0bits.GOnDONE);
 12402                           
 12403                           ;incstack = 0
 12404                           ; Regs used in _Sensor_Acq_ExecuteScan: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 12405                           
 12406  05DB  0141               	movlb	1	; select bank1
 12407  05DC  189D               	btfsc	29,1	;volatile
 12408  05DD  2DDB               	goto	i1l167
 12409                           
 12410                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 393:     mtouch_sensor_adcsample_t result =
      +                           ADRES;
 12411  05DE  081C               	movf	28,w	;volatile
 12412  05DF  00F7               	movwf	Sensor_Acq_ExecuteScan@result+1
 12413  05E0  081B               	movf	27,w	;volatile
 12414  05E1  00F6               	movwf	Sensor_Acq_ExecuteScan@result
 12415                           
 12416                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 394:     static mtouch_sensor_adcsample_t l
      +                          ast_a,last_b;;mcc_generated_files/mtouch/mtouch_sensor.c: 396:     if(sensor_globalFlags
      +                          .packet_done)
 12417  05E2  0140               	movlb	0	; select bank0
 12418  05E3  1847               	btfsc	_sensor_globalFlags,0	;volatile
 12419  05E4  0008               	return
 12420                           
 12421                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 399:     if (packet_counter != (uint8_t)0)
 12422  05E5  087C               	movf	_packet_counter,w
 12423  05E6  1D03               	btfss	3,2
 12424  05E7  2DF5               	goto	i1l3568
 12425  05E8  2E4D               	goto	i1l3588
 12426  05E9                     i1l3562:	
 12427  05E9  086E               	movf	_Sensor_scanA+1,w
 12428  05EA  008A               	movwf	10
 12429  05EB  086D               	movf	_Sensor_scanA,w
 12430  05EC  000A               	callw
 12431  05ED  3185               	pagesel	$
 12432  05EE  2E06               	goto	i1l3570
 12433  05EF                     i1l3564:	
 12434  05EF  086C               	movf	_Sensor_scanB+1,w
 12435  05F0  008A               	movwf	10
 12436  05F1  086B               	movf	_Sensor_scanB,w
 12437  05F2  000A               	callw
 12438  05F3  3185               	pagesel	$
 12439  05F4  2E06               	goto	i1l3570
 12440  05F5                     i1l3568:	
 12441  05F5  087C               	movf	_packet_counter,w
 12442  05F6  3901               	andlw	1
 12443  05F7  00F4               	movwf	??_Sensor_Acq_ExecuteScan
 12444  05F8  01F5               	clrf	??_Sensor_Acq_ExecuteScan+1
 12445                           
 12446                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 12447                           ; Switch size 1, requested type "simple"
 12448                           ; Number of cases is 1, Range of values is 0 to 0
 12449                           ; switch strategies available:
 12450                           ; Name         Instructions Cycles
 12451                           ; simple_byte            4     3 (average)
 12452                           ; direct_byte            8     6 (fixed)
 12453                           ; jumptable            260     6 (fixed)
 12454                           ;	Chosen strategy is simple_byte
 12455  05F9  0875               	movf	??_Sensor_Acq_ExecuteScan+1,w
 12456  05FA  3A00               	xorlw	0	; case 0
 12457  05FB  1903               	skipnz
 12458  05FC  2DFE               	goto	i1l4414
 12459  05FD  2E06               	goto	i1l3570
 12460  05FE                     i1l4414:	
 12461                           
 12462                           ; Switch size 1, requested type "simple"
 12463                           ; Number of cases is 2, Range of values is 0 to 1
 12464                           ; switch strategies available:
 12465                           ; Name         Instructions Cycles
 12466                           ; simple_byte            7     4 (average)
 12467                           ; direct_byte           10     6 (fixed)
 12468                           ; jumptable            260     6 (fixed)
 12469                           ;	Chosen strategy is simple_byte
 12470  05FE  0874               	movf	??_Sensor_Acq_ExecuteScan,w
 12471  05FF  3A00               	xorlw	0	; case 0
 12472  0600  1903               	skipnz
 12473  0601  2DE9               	goto	i1l3562
 12474  0602  3A01               	xorlw	1	; case 1
 12475  0603  1903               	skipnz
 12476  0604  2DEF               	goto	i1l3564
 12477  0605  2E06               	goto	i1l3570
 12478  0606                     i1l3570:	
 12479  0606  3009               	movlw	9
 12480  0607  00F4               	movwf	??_Sensor_Acq_ExecuteScan
 12481  0608  0874               	movf	??_Sensor_Acq_ExecuteScan,w
 12482  0609  00F0               	movwf	i1___bmul@multiplicand
 12483  060A  087D               	movf	_currentScannSensor,w
 12484  060B  318A  2227  3185   	fcall	i1___bmul
 12485  060E  3EB1               	addlw	(low ((_mtouch_sensor| 0+5)))& (0+255)
 12486  060F  0086               	movwf	6
 12487  0610  0187               	clrf	7
 12488  0611  0801               	movf	1,w
 12489  0612  067C               	xorwf	_packet_counter,w
 12490  0613  1903               	skipnz
 12491  0614  2E4A               	goto	i1l3586
 12492  0615  1C7C               	btfss	_packet_counter,0
 12493  0616  2E35               	goto	i1l3580
 12494  0617  3000               	movlw	0
 12495  0618  00F4               	movwf	??_Sensor_Acq_ExecuteScan
 12496  0619  3004               	movlw	4
 12497  061A  00F5               	movwf	??_Sensor_Acq_ExecuteScan+1
 12498  061B  0876               	movf	Sensor_Acq_ExecuteScan@result,w
 12499  061C  0274               	subwf	??_Sensor_Acq_ExecuteScan,w
 12500  061D  00F6               	movwf	Sensor_Acq_ExecuteScan@result
 12501  061E  0877               	movf	Sensor_Acq_ExecuteScan@result+1,w
 12502  061F  3B75               	subwfb	??_Sensor_Acq_ExecuteScan+1,w
 12503  0620  00F7               	movwf	Sensor_Acq_ExecuteScan@result+1
 12504  0621  0876               	movf	Sensor_Acq_ExecuteScan@result,w
 12505  0622  0140               	movlb	0	; select bank0
 12506  0623  0236               	subwf	Sensor_Acq_ExecuteScan@last_a,w
 12507  0624  00F0               	movwf	i1abs@a
 12508  0625  0877               	movf	Sensor_Acq_ExecuteScan@result+1,w
 12509  0626  3B37               	subwfb	Sensor_Acq_ExecuteScan@last_a+1,w
 12510  0627  00F1               	movwf	i1abs@a+1
 12511  0628  318B  2311  3185   	fcall	i1_abs
 12512  062B  0870               	movf	?i1_abs,w
 12513  062C  0140               	movlb	0	; select bank0
 12514  062D  07B8               	addwf	_packet_noise,f
 12515  062E  0871               	movf	?i1_abs+1,w
 12516  062F  3DB9               	addwfc	_packet_noise+1,f
 12517  0630  0877               	movf	Sensor_Acq_ExecuteScan@result+1,w
 12518  0631  00B7               	movwf	Sensor_Acq_ExecuteScan@last_a+1
 12519  0632  0876               	movf	Sensor_Acq_ExecuteScan@result,w
 12520  0633  00B6               	movwf	Sensor_Acq_ExecuteScan@last_a
 12521  0634  2E46               	goto	i1l3584
 12522  0635                     i1l3580:	
 12523  0635  0876               	movf	Sensor_Acq_ExecuteScan@result,w
 12524  0636  027A               	subwf	Sensor_Acq_ExecuteScan@last_b,w
 12525  0637  00F0               	movwf	i1abs@a
 12526  0638  0877               	movf	Sensor_Acq_ExecuteScan@result+1,w
 12527  0639  3B7B               	subwfb	Sensor_Acq_ExecuteScan@last_b+1,w
 12528  063A  00F1               	movwf	i1abs@a+1
 12529  063B  318B  2311         	fcall	i1_abs
 12530  063D  0870               	movf	?i1_abs,w
 12531  063E  0140               	movlb	0	; select bank0
 12532  063F  07B8               	addwf	_packet_noise,f
 12533  0640  0871               	movf	?i1_abs+1,w
 12534  0641  3DB9               	addwfc	_packet_noise+1,f
 12535  0642  0877               	movf	Sensor_Acq_ExecuteScan@result+1,w
 12536  0643  00FB               	movwf	Sensor_Acq_ExecuteScan@last_b+1
 12537  0644  0876               	movf	Sensor_Acq_ExecuteScan@result,w
 12538  0645  00FA               	movwf	Sensor_Acq_ExecuteScan@last_b
 12539  0646                     i1l3584:	
 12540  0646  0876               	movf	Sensor_Acq_ExecuteScan@result,w
 12541  0647  07BA               	addwf	_packet_sample,f
 12542  0648  0877               	movf	Sensor_Acq_ExecuteScan@result+1,w
 12543  0649  3DBB               	addwfc	_packet_sample+1,f
 12544  064A                     i1l3586:	
 12545  064A  3001               	movlw	1
 12546  064B  02FC               	subwf	_packet_counter,f
 12547  064C  0008               	return
 12548  064D                     i1l3588:	
 12549  064D  0876               	movf	Sensor_Acq_ExecuteScan@result,w
 12550  064E  07BA               	addwf	_packet_sample,f
 12551  064F  0877               	movf	Sensor_Acq_ExecuteScan@result+1,w
 12552  0650  3DBB               	addwfc	_packet_sample+1,f
 12553  0651  0876               	movf	Sensor_Acq_ExecuteScan@result,w
 12554  0652  027A               	subwf	Sensor_Acq_ExecuteScan@last_b,w
 12555  0653  00F0               	movwf	i1abs@a
 12556  0654  0877               	movf	Sensor_Acq_ExecuteScan@result+1,w
 12557  0655  3B7B               	subwfb	Sensor_Acq_ExecuteScan@last_b+1,w
 12558  0656  00F1               	movwf	i1abs@a+1
 12559  0657  318B  2311         	fcall	i1_abs
 12560  0659  0870               	movf	?i1_abs,w
 12561  065A  0140               	movlb	0	; select bank0
 12562  065B  07B8               	addwf	_packet_noise,f
 12563  065C  0871               	movf	?i1_abs+1,w
 12564  065D  3DB9               	addwfc	_packet_noise+1,f
 12565  065E  1447               	bsf	_sensor_globalFlags,0	;volatile
 12566  065F  0008               	return
 12567  0660                     __end_of_Sensor_Acq_ExecuteScan:	
 12568                           
 12569                           	psect	text71
 12570  091E                     __ptext71:	
 12571 ;; *************** function _TMR2_DefaultInterruptHandler *****************
 12572 ;; Defined at:
 12573 ;;		line 182 in file "mcc_generated_files/tmr2.c"
 12574 ;; Parameters:    Size  Location     Type
 12575 ;;		None
 12576 ;; Auto vars:     Size  Location     Type
 12577 ;;		None
 12578 ;; Return value:  Size  Location     Type
 12579 ;;                  1    wreg      void 
 12580 ;; Registers used:
 12581 ;;		None
 12582 ;; Tracked objects:
 12583 ;;		On entry : 0/0
 12584 ;;		On exit  : 0/0
 12585 ;;		Unchanged: 0/0
 12586 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 12587 ;;      Params:         0       0       0       0       0       0       0       0
 12588 ;;      Locals:         0       0       0       0       0       0       0       0
 12589 ;;      Temps:          0       0       0       0       0       0       0       0
 12590 ;;      Totals:         0       0       0       0       0       0       0       0
 12591 ;;Total ram usage:        0 bytes
 12592 ;; Hardware stack levels used:    1
 12593 ;; This function calls:
 12594 ;;		Nothing
 12595 ;; This function is called by:
 12596 ;;		_TMR2_Initialize
 12597 ;;		_TMR2_ISR
 12598 ;; This function uses a non-reentrant model
 12599 ;;
 12600                           
 12601                           
 12602                           ;psect for function _TMR2_DefaultInterruptHandler
 12603  091E                     _TMR2_DefaultInterruptHandler:	
 12604                           
 12605                           ;incstack = 0
 12606                           ; Regs used in _TMR2_DefaultInterruptHandler: []
 12607  091E  0008               	return
 12608  091F                     __end_of_TMR2_DefaultInterruptHandler:	
 12609                           
 12610                           	psect	text72
 12611  0B11                     __ptext72:	
 12612 ;; *************** function i1_abs *****************
 12613 ;; Defined at:
 12614 ;;		line 1 in file "C:\Program Files2\Microchip\xc8\v2.05\pic\sources\c99\common\abs.c"
 12615 ;; Parameters:    Size  Location     Type
 12616 ;;  a               2    0[COMMON] int 
 12617 ;; Auto vars:     Size  Location     Type
 12618 ;;		None
 12619 ;; Return value:  Size  Location     Type
 12620 ;;                  2    0[COMMON] int 
 12621 ;; Registers used:
 12622 ;;		wreg, status,2, status,0
 12623 ;; Tracked objects:
 12624 ;;		On entry : 0/0
 12625 ;;		On exit  : 0/0
 12626 ;;		Unchanged: 0/0
 12627 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 12628 ;;      Params:         2       0       0       0       0       0       0       0
 12629 ;;      Locals:         0       0       0       0       0       0       0       0
 12630 ;;      Temps:          2       0       0       0       0       0       0       0
 12631 ;;      Totals:         4       0       0       0       0       0       0       0
 12632 ;;Total ram usage:        4 bytes
 12633 ;; Hardware stack levels used:    1
 12634 ;; This function calls:
 12635 ;;		Nothing
 12636 ;; This function is called by:
 12637 ;;		_Sensor_Acq_ExecuteScan
 12638 ;; This function uses a non-reentrant model
 12639 ;;
 12640                           
 12641                           
 12642                           ;psect for function i1_abs
 12643  0B11                     i1_abs:	
 12644                           
 12645                           ;incstack = 0
 12646                           ; Regs used in i1_abs: [wreg+status,2+status,0]
 12647  0B11  0871               	movf	i1abs@a+1,w
 12648  0B12  3A80               	xorlw	128
 12649  0B13  00F2               	movwf	??i1_abs
 12650  0B14  3080               	movlw	128
 12651  0B15  0272               	subwf	??i1_abs,w
 12652  0B16  1D03               	skipz
 12653  0B17  2B1A               	goto	u247_25
 12654  0B18  3001               	movlw	1
 12655  0B19  0270               	subwf	i1abs@a,w
 12656  0B1A                     u247_25:	
 12657  0B1A  1803               	skipnc
 12658  0B1B  0008               	return
 12659  0B1C  0970               	comf	i1abs@a,w
 12660  0B1D  00F2               	movwf	??i1_abs
 12661  0B1E  0971               	comf	i1abs@a+1,w
 12662  0B1F  00F3               	movwf	??i1_abs+1
 12663  0B20  0AF2               	incf	??i1_abs,f
 12664  0B21  1903               	skipnz
 12665  0B22  0AF3               	incf	??i1_abs+1,f
 12666  0B23  0872               	movf	??i1_abs,w
 12667  0B24  00F0               	movwf	?i1_abs
 12668  0B25  0873               	movf	??i1_abs+1,w
 12669  0B26  00F1               	movwf	?i1_abs+1
 12670  0B27  0008               	return
 12671  0B28                     __end_ofi1_abs:	
 12672                           
 12673                           	psect	text73
 12674  0A27                     __ptext73:	
 12675 ;; *************** function i1___bmul *****************
 12676 ;; Defined at:
 12677 ;;		line 4 in file "C:\Program Files2\Microchip\xc8\v2.05\pic\sources\c99\common\Umul8.c"
 12678 ;; Parameters:    Size  Location     Type
 12679 ;;  multiplier      1    wreg     unsigned char 
 12680 ;;  multiplicand    1    0[COMMON] unsigned char 
 12681 ;; Auto vars:     Size  Location     Type
 12682 ;;  multiplier      1    2[COMMON] unsigned char 
 12683 ;;  __bmul          1    3[COMMON] unsigned char 
 12684 ;; Return value:  Size  Location     Type
 12685 ;;                  1    wreg      unsigned char 
 12686 ;; Registers used:
 12687 ;;		wreg, status,2, status,0
 12688 ;; Tracked objects:
 12689 ;;		On entry : 0/0
 12690 ;;		On exit  : 0/0
 12691 ;;		Unchanged: 0/0
 12692 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 12693 ;;      Params:         1       0       0       0       0       0       0       0
 12694 ;;      Locals:         2       0       0       0       0       0       0       0
 12695 ;;      Temps:          1       0       0       0       0       0       0       0
 12696 ;;      Totals:         4       0       0       0       0       0       0       0
 12697 ;;Total ram usage:        4 bytes
 12698 ;; Hardware stack levels used:    1
 12699 ;; This function calls:
 12700 ;;		Nothing
 12701 ;; This function is called by:
 12702 ;;		_Sensor_Acq_ExecuteScan
 12703 ;; This function uses a non-reentrant model
 12704 ;;
 12705                           
 12706                           
 12707                           ;psect for function i1___bmul
 12708  0A27                     i1___bmul:	
 12709                           
 12710                           ;incstack = 0
 12711                           ; Regs used in i1___bmul: [wreg+status,2+status,0]
 12712                           ;i1___bmul@multiplier stored from wreg
 12713  0A27  00F2               	movwf	i1___bmul@multiplier
 12714  0A28  01F3               	clrf	i1___bmul@product
 12715  0A29                     i1l3520:	
 12716  0A29  1C72               	btfss	i1___bmul@multiplier,0
 12717  0A2A  2A2F               	goto	i1l3524
 12718  0A2B  0870               	movf	i1___bmul@multiplicand,w
 12719  0A2C  00F1               	movwf	??i1___bmul
 12720  0A2D  0871               	movf	??i1___bmul,w
 12721  0A2E  07F3               	addwf	i1___bmul@product,f
 12722  0A2F                     i1l3524:	
 12723  0A2F  1003               	clrc
 12724  0A30  0DF0               	rlf	i1___bmul@multiplicand,f
 12725  0A31  1003               	clrc
 12726  0A32  0CF2               	rrf	i1___bmul@multiplier,f
 12727  0A33  0872               	movf	i1___bmul@multiplier,w
 12728  0A34  1D03               	btfss	3,2
 12729  0A35  2A29               	goto	i1l3520
 12730  0A36  0873               	movf	i1___bmul@product,w
 12731  0A37  0008               	return
 12732  0A38                     __end_ofi1___bmul:	
 12733                           
 12734                           	psect	text74
 12735  0C95                     __ptext74:	
 12736 ;; *************** function _MTOUCH_CVD_ScanB_0 *****************
 12737 ;; Defined at:
 12738 ;;		line 119 in file "mcc_generated_files/mtouch/mtouch_sensor_scan.c"
 12739 ;; Parameters:    Size  Location     Type
 12740 ;;		None
 12741 ;; Auto vars:     Size  Location     Type
 12742 ;;		None
 12743 ;; Return value:  Size  Location     Type
 12744 ;;                  1    wreg      void 
 12745 ;; Registers used:
 12746 ;;		wreg
 12747 ;; Tracked objects:
 12748 ;;		On entry : 0/0
 12749 ;;		On exit  : 0/0
 12750 ;;		Unchanged: 0/0
 12751 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 12752 ;;      Params:         0       0       0       0       0       0       0       0
 12753 ;;      Locals:         0       0       0       0       0       0       0       0
 12754 ;;      Temps:          0       0       0       0       0       0       0       0
 12755 ;;      Totals:         0       0       0       0       0       0       0       0
 12756 ;;Total ram usage:        0 bytes
 12757 ;; Hardware stack levels used:    1
 12758 ;; This function calls:
 12759 ;;		Nothing
 12760 ;; This function is called by:
 12761 ;;		_Sensor_Acq_ExecuteScan
 12762 ;; This function uses a non-reentrant model
 12763 ;;
 12764                           
 12765                           
 12766                           ;psect for function _MTOUCH_CVD_ScanB_0
 12767  0C95                     _MTOUCH_CVD_ScanB_0:	
 12768                           
 12769                           ;incstack = 0
 12770                           ; Regs used in _MTOUCH_CVD_ScanB_0: [wreg]
 12771  0C95  0140               	banksel	24	;# 
 12772  0C96  1298               	bcf	24,5	;# 
 12773  0C97  0141               	banksel	157	;# 
 12774  0C98  3015               	movlw	21	;# 
 12775  0C99  009D               	movwf	29	;# 
 12776                           
 12777                           ;mcc_generated_files/mtouch/mtouch_sensor_scan.c: 131:     _delay(16u);
 12778  0C9A  3005               	movlw	5
 12779  0C9B                     u376_27:	
 12780  0C9B  0B89               	decfsz	9,f
 12781  0C9C  2C9B               	goto	u376_27
 12782  0C9D  0000               	nop
 12783  0C9E  3071               	movlw	113	;# 
 12784  0C9F  009D               	movwf	29	;# 
 12785  0CA0  0140               	banksel	24	;# 
 12786  0CA1  1698               	bsf	24,5	;# 
 12787  0CA2  0141               	banksel	157	;# 
 12788  0CA3  3012               	movlw	18	;# 
 12789  0CA4  0084               	movwf	4	;# 
 12790  0CA5  3000               	movlw	0	;# 
 12791  0CA6  0085               	movwf	5	;# 
 12792  0CA7  3018               	movlw	24	;# 
 12793  0CA8  0086               	movwf	6	;# 
 12794  0CA9  3000               	movlw	0	;# 
 12795  0CAA  0087               	movwf	7	;# 
 12796  0CAB  3015               	movlw	21	;# 
 12797  0CAC  1680               	bsf	0,5	;# 
 12798                           
 12799                           ;mcc_generated_files/mtouch/mtouch_sensor_scan.c: 155:     _delay(0u);
 12800  0CAD  009D               	movwf	29	;# 
 12801                           
 12802                           ;mcc_generated_files/mtouch/mtouch_sensor_scan.c: 162:     _delay(8u);
 12803  0CAE  3200               	nop2	;2 cycle nop
 12804  0CAF  3200               	nop2	;2 cycle nop
 12805  0CB0  3200               	nop2	;2 cycle nop
 12806  0CB1  3200               	nop2	;2 cycle nop
 12807  0CB2  0141               	banksel	157	;# 
 12808  0CB3  149D               	bsf	29,1	;# 
 12809                           
 12810                           ;mcc_generated_files/mtouch/mtouch_sensor_scan.c: 169:     _delay(3u);
 12811  0CB4  3200               	nop2	;2 cycle nop
 12812  0CB5  0000               	nop
 12813  0CB6  0140               	banksel	24	;# 
 12814  0CB7  1298               	bcf	24,5	;# 
 12815  0CB8  1280               	bcf	0,5	;# 
 12816  0CB9  0008               	return
 12817  0CBA                     __end_of_MTOUCH_CVD_ScanB_0:	
 12818                           
 12819                           	psect	text75
 12820  0C70                     __ptext75:	
 12821 ;; *************** function _MTOUCH_CVD_ScanA_0 *****************
 12822 ;; Defined at:
 12823 ;;		line 50 in file "mcc_generated_files/mtouch/mtouch_sensor_scan.c"
 12824 ;; Parameters:    Size  Location     Type
 12825 ;;		None
 12826 ;; Auto vars:     Size  Location     Type
 12827 ;;		None
 12828 ;; Return value:  Size  Location     Type
 12829 ;;                  1    wreg      void 
 12830 ;; Registers used:
 12831 ;;		wreg
 12832 ;; Tracked objects:
 12833 ;;		On entry : 0/0
 12834 ;;		On exit  : 0/0
 12835 ;;		Unchanged: 0/0
 12836 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 12837 ;;      Params:         0       0       0       0       0       0       0       0
 12838 ;;      Locals:         0       0       0       0       0       0       0       0
 12839 ;;      Temps:          0       0       0       0       0       0       0       0
 12840 ;;      Totals:         0       0       0       0       0       0       0       0
 12841 ;;Total ram usage:        0 bytes
 12842 ;; Hardware stack levels used:    1
 12843 ;; This function calls:
 12844 ;;		Nothing
 12845 ;; This function is called by:
 12846 ;;		_Sensor_Acq_ExecuteScan
 12847 ;; This function uses a non-reentrant model
 12848 ;;
 12849                           
 12850                           
 12851                           ;psect for function _MTOUCH_CVD_ScanA_0
 12852  0C70                     _MTOUCH_CVD_ScanA_0:	
 12853                           
 12854                           ;incstack = 0
 12855                           ; Regs used in _MTOUCH_CVD_ScanA_0: [wreg]
 12856  0C70  0140               	banksel	24	;# 
 12857  0C71  1698               	bsf	24,5	;# 
 12858  0C72  0141               	banksel	157	;# 
 12859  0C73  3015               	movlw	21	;# 
 12860  0C74  009D               	movwf	29	;# 
 12861                           
 12862                           ;mcc_generated_files/mtouch/mtouch_sensor_scan.c: 62:     _delay(16u);
 12863  0C75  3005               	movlw	5
 12864  0C76                     u377_27:	
 12865  0C76  0B89               	decfsz	9,f
 12866  0C77  2C76               	goto	u377_27
 12867  0C78  0000               	nop
 12868  0C79  3071               	movlw	113	;# 
 12869  0C7A  009D               	movwf	29	;# 
 12870  0C7B  0140               	banksel	24	;# 
 12871  0C7C  1298               	bcf	24,5	;# 
 12872  0C7D  0141               	banksel	157	;# 
 12873  0C7E  3012               	movlw	18	;# 
 12874  0C7F  0084               	movwf	4	;# 
 12875  0C80  3000               	movlw	0	;# 
 12876  0C81  0085               	movwf	5	;# 
 12877  0C82  3018               	movlw	24	;# 
 12878  0C83  0086               	movwf	6	;# 
 12879  0C84  3000               	movlw	0	;# 
 12880  0C85  0087               	movwf	7	;# 
 12881  0C86  3015               	movlw	21	;# 
 12882  0C87  1680               	bsf	0,5	;# 
 12883                           
 12884                           ;mcc_generated_files/mtouch/mtouch_sensor_scan.c: 86:     _delay(0u);
 12885  0C88  009D               	movwf	29	;# 
 12886                           
 12887                           ;mcc_generated_files/mtouch/mtouch_sensor_scan.c: 92:     _delay(8u);
 12888  0C89  3200               	nop2	;2 cycle nop
 12889  0C8A  3200               	nop2	;2 cycle nop
 12890  0C8B  3200               	nop2	;2 cycle nop
 12891  0C8C  3200               	nop2	;2 cycle nop
 12892  0C8D  0141               	banksel	157	;# 
 12893  0C8E  149D               	bsf	29,1	;# 
 12894                           
 12895                           ;mcc_generated_files/mtouch/mtouch_sensor_scan.c: 99:     _delay(3u);
 12896  0C8F  3200               	nop2	;2 cycle nop
 12897  0C90  0000               	nop
 12898  0C91  0140               	banksel	24	;# 
 12899  0C92  1698               	bsf	24,5	;# 
 12900  0C93  1280               	bcf	0,5	;# 
 12901  0C94  0008               	return
 12902  0C95                     __end_of_MTOUCH_CVD_ScanA_0:	
 12903                           
 12904                           	psect	text76
 12905  0A80                     __ptext76:	
 12906 ;; *************** function _TMR1_ISR *****************
 12907 ;; Defined at:
 12908 ;;		line 164 in file "mcc_generated_files/tmr1.c"
 12909 ;; Parameters:    Size  Location     Type
 12910 ;;		None
 12911 ;; Auto vars:     Size  Location     Type
 12912 ;;		None
 12913 ;; Return value:  Size  Location     Type
 12914 ;;                  1    wreg      void 
 12915 ;; Registers used:
 12916 ;;		wreg, status,2, status,0, pclath, cstack
 12917 ;; Tracked objects:
 12918 ;;		On entry : 0/0
 12919 ;;		On exit  : 0/0
 12920 ;;		Unchanged: 0/0
 12921 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 12922 ;;      Params:         0       0       0       0       0       0       0       0
 12923 ;;      Locals:         0       0       0       0       0       0       0       0
 12924 ;;      Temps:          0       0       0       0       0       0       0       0
 12925 ;;      Totals:         0       0       0       0       0       0       0       0
 12926 ;;Total ram usage:        0 bytes
 12927 ;; Hardware stack levels used:    1
 12928 ;; Hardware stack levels required when called:    1
 12929 ;; This function calls:
 12930 ;;		Absolute function
 12931 ;;		_TMR1_DefaultInterruptHandler
 12932 ;;		_TMR1_WriteTimer
 12933 ;;		_v_1s_service_routine
 12934 ;; This function is called by:
 12935 ;;		_INTERRUPT_InterruptManager
 12936 ;; This function uses a non-reentrant model
 12937 ;;
 12938                           
 12939                           
 12940                           ;psect for function _TMR1_ISR
 12941  0A80                     _TMR1_ISR:	
 12942                           
 12943                           ;mcc_generated_files/tmr1.c: 168:     PIR4bits.TMR1IF = 0;
 12944                           
 12945                           ;incstack = 0
 12946                           ; Regs used in _TMR1_ISR: [wreg+status,2+status,0+pclath+cstack]
 12947  0A80  014E               	movlb	14	; select bank14
 12948  0A81  1010               	bcf	16,0	;volatile
 12949                           
 12950                           ;mcc_generated_files/tmr1.c: 169:     TMR1_WriteTimer(timer1ReloadVal);
 12951  0A82  0879               	movf	_timer1ReloadVal+1,w	;volatile
 12952  0A83  00F1               	movwf	TMR1_WriteTimer@timerVal+1
 12953  0A84  0878               	movf	_timer1ReloadVal,w	;volatile
 12954  0A85  00F0               	movwf	TMR1_WriteTimer@timerVal
 12955  0A86  3189  21FA  318A   	fcall	_TMR1_WriteTimer
 12956                           
 12957                           ;mcc_generated_files/tmr1.c: 171:     if(TMR1_InterruptHandler)
 12958  0A89  0140               	movlb	0	; select bank0
 12959  0A8A  0830               	movf	_TMR1_InterruptHandler,w
 12960  0A8B  0431               	iorwf	_TMR1_InterruptHandler+1,w
 12961  0A8C  1903               	btfsc	3,2
 12962  0A8D  0008               	return
 12963                           
 12964                           ;mcc_generated_files/tmr1.c: 172:     {;mcc_generated_files/tmr1.c: 173:         TMR1_In
      +                          terruptHandler();
 12965  0A8E  0831               	movf	_TMR1_InterruptHandler+1,w
 12966  0A8F  008A               	movwf	10
 12967  0A90  0830               	movf	_TMR1_InterruptHandler,w
 12968  0A91  000A               	callw
 12969  0A92  318A               	pagesel	$
 12970  0A93  0008               	return
 12971  0A94                     __end_of_TMR1_ISR:	
 12972                           
 12973                           	psect	text77
 12974  091D                     __ptext77:	
 12975 ;; *************** function _TMR1_DefaultInterruptHandler *****************
 12976 ;; Defined at:
 12977 ;;		line 182 in file "mcc_generated_files/tmr1.c"
 12978 ;; Parameters:    Size  Location     Type
 12979 ;;		None
 12980 ;; Auto vars:     Size  Location     Type
 12981 ;;		None
 12982 ;; Return value:  Size  Location     Type
 12983 ;;                  1    wreg      void 
 12984 ;; Registers used:
 12985 ;;		None
 12986 ;; Tracked objects:
 12987 ;;		On entry : 0/0
 12988 ;;		On exit  : 0/0
 12989 ;;		Unchanged: 0/0
 12990 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 12991 ;;      Params:         0       0       0       0       0       0       0       0
 12992 ;;      Locals:         0       0       0       0       0       0       0       0
 12993 ;;      Temps:          0       0       0       0       0       0       0       0
 12994 ;;      Totals:         0       0       0       0       0       0       0       0
 12995 ;;Total ram usage:        0 bytes
 12996 ;; Hardware stack levels used:    1
 12997 ;; This function calls:
 12998 ;;		Nothing
 12999 ;; This function is called by:
 13000 ;;		_TMR1_Initialize
 13001 ;;		_TMR1_ISR
 13002 ;; This function uses a non-reentrant model
 13003 ;;
 13004                           
 13005                           
 13006                           ;psect for function _TMR1_DefaultInterruptHandler
 13007  091D                     _TMR1_DefaultInterruptHandler:	
 13008                           
 13009                           ;incstack = 0
 13010                           ; Regs used in _TMR1_DefaultInterruptHandler: []
 13011  091D  0008               	return
 13012  091E                     __end_of_TMR1_DefaultInterruptHandler:	
 13013                           
 13014                           	psect	text78
 13015  09A0                     __ptext78:	
 13016 ;; *************** function _v_1s_service_routine *****************
 13017 ;; Defined at:
 13018 ;;		line 79 in file "main.c"
 13019 ;; Parameters:    Size  Location     Type
 13020 ;;		None
 13021 ;; Auto vars:     Size  Location     Type
 13022 ;;		None
 13023 ;; Return value:  Size  Location     Type
 13024 ;;                  1    wreg      void 
 13025 ;; Registers used:
 13026 ;;		wreg, status,2, status,0
 13027 ;; Tracked objects:
 13028 ;;		On entry : 0/0
 13029 ;;		On exit  : 0/0
 13030 ;;		Unchanged: 0/0
 13031 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 13032 ;;      Params:         0       0       0       0       0       0       0       0
 13033 ;;      Locals:         0       0       0       0       0       0       0       0
 13034 ;;      Temps:          0       0       0       0       0       0       0       0
 13035 ;;      Totals:         0       0       0       0       0       0       0       0
 13036 ;;Total ram usage:        0 bytes
 13037 ;; Hardware stack levels used:    1
 13038 ;; This function calls:
 13039 ;;		Nothing
 13040 ;; This function is called by:
 13041 ;;		_main
 13042 ;;		_TMR1_ISR
 13043 ;; This function uses a non-reentrant model
 13044 ;;
 13045                           
 13046                           
 13047                           ;psect for function _v_1s_service_routine
 13048  09A0                     _v_1s_service_routine:	
 13049                           
 13050                           ;main.c: 81:     if (u8_DIMMING_START_COUNTDOWN_SEC) {
 13051                           
 13052                           ;incstack = 0
 13053                           ; Regs used in _v_1s_service_routine: [wreg+status,2+status,0]
 13054  09A0  0140               	movlb	0	; select bank0
 13055  09A1  083E               	movf	_u8_DIMMING_START_COUNTDOWN_SEC,w
 13056  09A2  1903               	btfsc	3,2
 13057  09A3  29A6               	goto	i1l930
 13058                           
 13059                           ;main.c: 82:         u8_DIMMING_START_COUNTDOWN_SEC--;
 13060  09A4  3001               	movlw	1
 13061  09A5  02BE               	subwf	_u8_DIMMING_START_COUNTDOWN_SEC,f
 13062  09A6                     i1l930:	
 13063                           ;main.c: 83:     }
 13064                           
 13065                           
 13066                           ;main.c: 85:     if (u8_SLEEPING_START_COUNTDOWN_SEC) {
 13067  09A6  083D               	movf	_u8_SLEEPING_START_COUNTDOWN_SEC,w
 13068  09A7  1903               	btfsc	3,2
 13069  09A8  0008               	return
 13070                           
 13071                           ;main.c: 86:         u8_SLEEPING_START_COUNTDOWN_SEC--;
 13072  09A9  3001               	movlw	1
 13073  09AA  02BD               	subwf	_u8_SLEEPING_START_COUNTDOWN_SEC,f
 13074  09AB  0008               	return
 13075  09AC                     __end_of_v_1s_service_routine:	
 13076                           
 13077                           	psect	text79
 13078  09FA                     __ptext79:	
 13079 ;; *************** function _TMR1_WriteTimer *****************
 13080 ;; Defined at:
 13081 ;;		line 127 in file "mcc_generated_files/tmr1.c"
 13082 ;; Parameters:    Size  Location     Type
 13083 ;;  timerVal        2    0[COMMON] unsigned short 
 13084 ;; Auto vars:     Size  Location     Type
 13085 ;;		None
 13086 ;; Return value:  Size  Location     Type
 13087 ;;                  1    wreg      void 
 13088 ;; Registers used:
 13089 ;;		wreg, status,2
 13090 ;; Tracked objects:
 13091 ;;		On entry : 0/0
 13092 ;;		On exit  : 0/0
 13093 ;;		Unchanged: 0/0
 13094 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 13095 ;;      Params:         2       0       0       0       0       0       0       0
 13096 ;;      Locals:         0       0       0       0       0       0       0       0
 13097 ;;      Temps:          0       0       0       0       0       0       0       0
 13098 ;;      Totals:         2       0       0       0       0       0       0       0
 13099 ;;Total ram usage:        2 bytes
 13100 ;; Hardware stack levels used:    1
 13101 ;; This function calls:
 13102 ;;		Nothing
 13103 ;; This function is called by:
 13104 ;;		_TMR1_ISR
 13105 ;;		_TMR1_Reload
 13106 ;; This function uses a non-reentrant model
 13107 ;;
 13108                           
 13109                           
 13110                           ;psect for function _TMR1_WriteTimer
 13111  09FA                     _TMR1_WriteTimer:	
 13112                           
 13113                           ;mcc_generated_files/tmr1.c: 127: void TMR1_WriteTimer(uint16_t timerVal);mcc_generated_
      +                          files/tmr1.c: 128: {;mcc_generated_files/tmr1.c: 129:     if (T1CONbits.nT1SYNC == 1)
 13114                           
 13115                           ;incstack = 0
 13116                           ; Regs used in _TMR1_WriteTimer: [wreg+status,2]
 13117  09FA  0144               	movlb	4	; select bank4
 13118  09FB  1D0E               	btfss	14,2	;volatile
 13119  09FC  2A04               	goto	i1l3722
 13120                           
 13121                           ;mcc_generated_files/tmr1.c: 130:     {;mcc_generated_files/tmr1.c: 132:         T1CONbi
      +                          ts.TMR1ON = 0;
 13122  09FD  100E               	bcf	14,0	;volatile
 13123                           
 13124                           ;mcc_generated_files/tmr1.c: 135:         TMR1H = (timerVal >> 8);
 13125  09FE  0871               	movf	TMR1_WriteTimer@timerVal+1,w
 13126  09FF  008D               	movwf	13	;volatile
 13127                           
 13128                           ;mcc_generated_files/tmr1.c: 136:         TMR1L = timerVal;
 13129  0A00  0870               	movf	TMR1_WriteTimer@timerVal,w
 13130  0A01  008C               	movwf	12	;volatile
 13131                           
 13132                           ;mcc_generated_files/tmr1.c: 139:         T1CONbits.TMR1ON =1;
 13133  0A02  140E               	bsf	14,0	;volatile
 13134                           
 13135                           ;mcc_generated_files/tmr1.c: 140:     }
 13136  0A03  0008               	return
 13137  0A04                     i1l3722:	
 13138                           
 13139                           ;mcc_generated_files/tmr1.c: 142:     {;mcc_generated_files/tmr1.c: 144:         TMR1H =
      +                           (timerVal >> 8);
 13140  0A04  0871               	movf	TMR1_WriteTimer@timerVal+1,w
 13141  0A05  008D               	movwf	13	;volatile
 13142                           
 13143                           ;mcc_generated_files/tmr1.c: 145:         TMR1L = timerVal;
 13144  0A06  0870               	movf	TMR1_WriteTimer@timerVal,w
 13145  0A07  008C               	movwf	12	;volatile
 13146  0A08  0008               	return
 13147  0A09                     __end_of_TMR1_WriteTimer:	
 13148                           
 13149                           	psect	text80
 13150  09C4                     __ptext80:	
 13151 ;; *************** function _TMR0_ISR *****************
 13152 ;; Defined at:
 13153 ;;		line 121 in file "mcc_generated_files/tmr0.c"
 13154 ;; Parameters:    Size  Location     Type
 13155 ;;		None
 13156 ;; Auto vars:     Size  Location     Type
 13157 ;;		None
 13158 ;; Return value:  Size  Location     Type
 13159 ;;                  1    wreg      void 
 13160 ;; Registers used:
 13161 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13162 ;; Tracked objects:
 13163 ;;		On entry : 0/0
 13164 ;;		On exit  : 0/0
 13165 ;;		Unchanged: 0/0
 13166 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 13167 ;;      Params:         0       0       0       0       0       0       0       0
 13168 ;;      Locals:         0       0       0       0       0       0       0       0
 13169 ;;      Temps:          0       0       0       0       0       0       0       0
 13170 ;;      Totals:         0       0       0       0       0       0       0       0
 13171 ;;Total ram usage:        0 bytes
 13172 ;; Hardware stack levels used:    1
 13173 ;; Hardware stack levels required when called:    2
 13174 ;; This function calls:
 13175 ;;		Absolute function
 13176 ;;		_TMR0_DefaultInterruptHandler
 13177 ;;		_v_1ms_service_routine
 13178 ;; This function is called by:
 13179 ;;		_INTERRUPT_InterruptManager
 13180 ;; This function uses a non-reentrant model
 13181 ;;
 13182                           
 13183                           
 13184                           ;psect for function _TMR0_ISR
 13185  09C4                     _TMR0_ISR:	
 13186                           
 13187                           ;mcc_generated_files/tmr0.c: 124:     PIR0bits.TMR0IF = 0;
 13188                           
 13189                           ;incstack = 0
 13190                           ; Regs used in _TMR0_ISR: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 13191  09C4  014E               	movlb	14	; select bank14
 13192  09C5  128C               	bcf	12,5	;volatile
 13193                           
 13194                           ;mcc_generated_files/tmr0.c: 125:     if(TMR0_InterruptHandler)
 13195  09C6  0140               	movlb	0	; select bank0
 13196  09C7  0834               	movf	_TMR0_InterruptHandler,w
 13197  09C8  0435               	iorwf	_TMR0_InterruptHandler+1,w
 13198  09C9  1903               	btfsc	3,2
 13199  09CA  0008               	return
 13200                           
 13201                           ;mcc_generated_files/tmr0.c: 126:     {;mcc_generated_files/tmr0.c: 127:         TMR0_In
      +                          terruptHandler();
 13202  09CB  0835               	movf	_TMR0_InterruptHandler+1,w
 13203  09CC  008A               	movwf	10
 13204  09CD  0834               	movf	_TMR0_InterruptHandler,w
 13205  09CE  000A               	callw
 13206  09CF  3189               	pagesel	$
 13207  09D0  0008               	return
 13208  09D1                     __end_of_TMR0_ISR:	
 13209                           
 13210                           	psect	text81
 13211  091C                     __ptext81:	
 13212 ;; *************** function _TMR0_DefaultInterruptHandler *****************
 13213 ;; Defined at:
 13214 ;;		line 138 in file "mcc_generated_files/tmr0.c"
 13215 ;; Parameters:    Size  Location     Type
 13216 ;;		None
 13217 ;; Auto vars:     Size  Location     Type
 13218 ;;		None
 13219 ;; Return value:  Size  Location     Type
 13220 ;;                  1    wreg      void 
 13221 ;; Registers used:
 13222 ;;		None
 13223 ;; Tracked objects:
 13224 ;;		On entry : 0/0
 13225 ;;		On exit  : 0/0
 13226 ;;		Unchanged: 0/0
 13227 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 13228 ;;      Params:         0       0       0       0       0       0       0       0
 13229 ;;      Locals:         0       0       0       0       0       0       0       0
 13230 ;;      Temps:          0       0       0       0       0       0       0       0
 13231 ;;      Totals:         0       0       0       0       0       0       0       0
 13232 ;;Total ram usage:        0 bytes
 13233 ;; Hardware stack levels used:    1
 13234 ;; This function calls:
 13235 ;;		Nothing
 13236 ;; This function is called by:
 13237 ;;		_TMR0_Initialize
 13238 ;;		_TMR0_ISR
 13239 ;; This function uses a non-reentrant model
 13240 ;;
 13241                           
 13242                           
 13243                           ;psect for function _TMR0_DefaultInterruptHandler
 13244  091C                     _TMR0_DefaultInterruptHandler:	
 13245                           
 13246                           ;incstack = 0
 13247                           ; Regs used in _TMR0_DefaultInterruptHandler: []
 13248  091C  0008               	return
 13249  091D                     __end_of_TMR0_DefaultInterruptHandler:	
 13250                           
 13251                           	psect	text82
 13252  0F9D                     __ptext82:	
 13253 ;; *************** function _v_1ms_service_routine *****************
 13254 ;; Defined at:
 13255 ;;		line 97 in file "main.c"
 13256 ;; Parameters:    Size  Location     Type
 13257 ;;		None
 13258 ;; Auto vars:     Size  Location     Type
 13259 ;;		None
 13260 ;; Return value:  Size  Location     Type
 13261 ;;                  1    wreg      void 
 13262 ;; Registers used:
 13263 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13264 ;; Tracked objects:
 13265 ;;		On entry : 0/0
 13266 ;;		On exit  : 0/0
 13267 ;;		Unchanged: 0/0
 13268 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 13269 ;;      Params:         0       0       0       0       0       0       0       0
 13270 ;;      Locals:         0       0       0       0       0       0       0       0
 13271 ;;      Temps:          2       0       0       0       0       0       0       0
 13272 ;;      Totals:         2       0       0       0       0       0       0       0
 13273 ;;Total ram usage:        2 bytes
 13274 ;; Hardware stack levels used:    1
 13275 ;; Hardware stack levels required when called:    1
 13276 ;; This function calls:
 13277 ;;		i1_MTOUCH_Button_isPressed
 13278 ;; This function is called by:
 13279 ;;		_main
 13280 ;;		_TMR0_ISR
 13281 ;; This function uses a non-reentrant model
 13282 ;;
 13283                           
 13284                           
 13285                           ;psect for function _v_1ms_service_routine
 13286  0F9D                     _v_1ms_service_routine:	
 13287                           
 13288                           ;main.c: 99:     if (u8_TOUCH_DELAY_COUNTDOWN && !MTOUCH_Button_isPressed(I_K1)) {
 13289                           
 13290                           ;incstack = 0
 13291                           ; Regs used in _v_1ms_service_routine: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 13292  0F9D  0140               	movlb	0	; select bank0
 13293  0F9E  083C               	movf	_u8_TOUCH_DELAY_COUNTDOWN,w
 13294  0F9F  1903               	btfsc	3,2
 13295  0FA0  2FAB               	goto	i1l935
 13296  0FA1  3000               	movlw	0
 13297  0FA2  318B  2370  318F   	fcall	i1_MTOUCH_Button_isPressed
 13298  0FA5  3A00               	xorlw	0
 13299  0FA6  1D03               	skipz
 13300  0FA7  2FAB               	goto	i1l935
 13301                           
 13302                           ;main.c: 100:         u8_TOUCH_DELAY_COUNTDOWN--;
 13303  0FA8  3001               	movlw	1
 13304  0FA9  0140               	movlb	0	; select bank0
 13305  0FAA  02BC               	subwf	_u8_TOUCH_DELAY_COUNTDOWN,f
 13306  0FAB                     i1l935:	
 13307                           ;main.c: 101:     }
 13308                           
 13309                           
 13310                           ;main.c: 103:     if (u8_SLEEPING_START_COUNTDOWN_SEC) {
 13311  0FAB  0140               	movlb	0	; select bank0
 13312  0FAC  083D               	movf	_u8_SLEEPING_START_COUNTDOWN_SEC,w
 13313  0FAD  1903               	btfsc	3,2
 13314  0FAE  2FF8               	goto	i1l3776
 13315                           
 13316                           ;main.c: 105:         LATC = 0xFF;
 13317  0FAF  30FF               	movlw	255
 13318  0FB0  009A               	movwf	26	;volatile
 13319  0FB1  1399               	bcf	25,7	;volatile
 13320  0FB2  1319               	bcf	25,6	;volatile
 13321  0FB3  1299               	bcf	25,5	;volatile
 13322  0FB4  1219               	bcf	25,4	;volatile
 13323  0FB5  1098               	bcf	24,1	;volatile
 13324  0FB6  1018               	bcf	24,0	;volatile
 13325  0FB7  2FD0               	goto	i1l3764
 13326  0FB8                     i1l951:	
 13327                           ;main.c: 116:                 do { LATAbits.LATA0 = 1; } while(0);
 13328                           
 13329  0FB8  1418               	bsf	24,0	;volatile
 13330                           
 13331                           ;main.c: 117:                 do { LATBbits.LATB7 = 1; } while(0);
 13332  0FB9  1799               	bsf	25,7	;volatile
 13333                           
 13334                           ;main.c: 118:                 LATC = u8_PATTERN[u8_DIG11];
 13335  0FBA  0843               	movf	_u8_DIG11,w
 13336  0FBB  2FC7               	goto	L14
 13337  0FBC                     i1l957:	
 13338                           ;main.c: 121:                 do { LATBbits.LATB6 = 1; } while(0);
 13339                           
 13340                           ;main.c: 119:                 break;
 13341                           
 13342  0FBC  1719               	bsf	25,6	;volatile
 13343                           
 13344                           ;main.c: 122:                 LATC = u8_PATTERN[u8_DIG12];
 13345  0FBD  0842               	movf	_u8_DIG12,w
 13346  0FBE  2FC7               	goto	L14
 13347  0FBF                     i1l960:	
 13348                           ;main.c: 125:                 do { LATBbits.LATB5 = 1; } while(0);
 13349                           
 13350                           ;main.c: 123:                 break;
 13351                           
 13352  0FBF  1699               	bsf	25,5	;volatile
 13353                           
 13354                           ;main.c: 126:                 LATC = u8_PATTERN[u8_DIG13];
 13355  0FC0  0841               	movf	_u8_DIG13,w
 13356  0FC1  2FC7               	goto	L14
 13357  0FC2                     i1l963:	
 13358                           ;main.c: 129:                 do { LATBbits.LATB4 = 1; } while(0);
 13359                           
 13360                           ;main.c: 127:                 break;
 13361                           
 13362  0FC2  1619               	bsf	25,4	;volatile
 13363                           
 13364                           ;main.c: 130:                 LATC = u8_PATTERN[u8_DIG21];
 13365  0FC3  0840               	movf	_u8_DIG21,w
 13366  0FC4  2FC7               	goto	L14
 13367  0FC5                     i1l966:	
 13368                           ;main.c: 133:                 do { LATAbits.LATA1 = 1; } while(0);
 13369                           
 13370                           ;main.c: 131:                 break;
 13371                           
 13372  0FC5  1498               	bsf	24,1	;volatile
 13373                           
 13374                           ;main.c: 134:                 LATC = u8_PATTERN[u8_DIG22];
 13375  0FC6  083F               	movf	_u8_DIG22,w
 13376  0FC7                     L14:	
 13377  0FC7  3EFF               	addlw	low (_u8_PATTERN| (0+32768))
 13378  0FC8  0084               	movwf	4
 13379  0FC9  3087               	movlw	high (_u8_PATTERN| (0+32768))
 13380  0FCA  1803               	skipnc
 13381  0FCB  3E01               	addlw	1
 13382  0FCC  0085               	movwf	5
 13383  0FCD  0800               	movf	0,w	;code access
 13384  0FCE  009A               	movwf	26	;volatile
 13385                           
 13386                           ;main.c: 135:                 break;
 13387  0FCF  2FE9               	goto	i1l3766
 13388  0FD0                     i1l3764:	
 13389  0FD0  0844               	movf	_u8_DIG_CHANNEL,w
 13390  0FD1  00F2               	movwf	??_v_1ms_service_routine
 13391  0FD2  01F3               	clrf	??_v_1ms_service_routine+1
 13392                           
 13393                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 13394                           ; Switch size 1, requested type "simple"
 13395                           ; Number of cases is 1, Range of values is 0 to 0
 13396                           ; switch strategies available:
 13397                           ; Name         Instructions Cycles
 13398                           ; simple_byte            4     3 (average)
 13399                           ; direct_byte            8     6 (fixed)
 13400                           ; jumptable            260     6 (fixed)
 13401                           ;	Chosen strategy is simple_byte
 13402  0FD3  0873               	movf	??_v_1ms_service_routine+1,w
 13403  0FD4  3A00               	xorlw	0	; case 0
 13404  0FD5  1903               	skipnz
 13405  0FD6  2FD8               	goto	i1l4416
 13406  0FD7  2FE9               	goto	i1l3766
 13407  0FD8                     i1l4416:	
 13408                           
 13409                           ; Switch size 1, requested type "simple"
 13410                           ; Number of cases is 5, Range of values is 0 to 12
 13411                           ; switch strategies available:
 13412                           ; Name         Instructions Cycles
 13413                           ; simple_byte           16     9 (average)
 13414                           ; direct_byte           32     6 (fixed)
 13415                           ; jumptable            260     6 (fixed)
 13416                           ;	Chosen strategy is simple_byte
 13417  0FD8  0872               	movf	??_v_1ms_service_routine,w
 13418  0FD9  3A00               	xorlw	0	; case 0
 13419  0FDA  1903               	skipnz
 13420  0FDB  2FB8               	goto	i1l951
 13421  0FDC  3A03               	xorlw	3	; case 3
 13422  0FDD  1903               	skipnz
 13423  0FDE  2FBC               	goto	i1l957
 13424  0FDF  3A05               	xorlw	5	; case 6
 13425  0FE0  1903               	skipnz
 13426  0FE1  2FBF               	goto	i1l960
 13427  0FE2  3A0F               	xorlw	15	; case 9
 13428  0FE3  1903               	skipnz
 13429  0FE4  2FC2               	goto	i1l963
 13430  0FE5  3A05               	xorlw	5	; case 12
 13431  0FE6  1903               	skipnz
 13432  0FE7  2FC5               	goto	i1l966
 13433  0FE8  2FE9               	goto	i1l3766
 13434  0FE9                     i1l3766:	
 13435                           
 13436                           ;main.c: 139:         if (u8_DIMMING_START_COUNTDOWN_SEC) {
 13437  0FE9  083E               	movf	_u8_DIMMING_START_COUNTDOWN_SEC,w
 13438  0FEA  1903               	btfsc	3,2
 13439  0FEB  2FEE               	goto	i1l3770
 13440                           
 13441                           ;main.c: 141:             u8_DIG_CHANNEL += 3;
 13442  0FEC  3003               	movlw	3
 13443  0FED  2FEF               	goto	L15
 13444  0FEE                     i1l3770:	
 13445                           ;main.c: 142:         } else {
 13446                           
 13447                           
 13448                           ;main.c: 144:             u8_DIG_CHANNEL++;
 13449  0FEE  3001               	movlw	1
 13450  0FEF                     L15:	
 13451  0FEF  00F2               	movwf	??_v_1ms_service_routine
 13452  0FF0  0872               	movf	??_v_1ms_service_routine,w
 13453  0FF1  07C4               	addwf	_u8_DIG_CHANNEL,f
 13454                           
 13455                           ;main.c: 149:         if (u8_DIG_CHANNEL >= 15) {
 13456  0FF2  300F               	movlw	15
 13457  0FF3  0244               	subwf	_u8_DIG_CHANNEL,w
 13458  0FF4  1C03               	skipc
 13459  0FF5  0008               	return
 13460                           
 13461                           ;main.c: 150:             u8_DIG_CHANNEL = 0;
 13462  0FF6  01C4               	clrf	_u8_DIG_CHANNEL
 13463  0FF7  0008               	return
 13464  0FF8                     i1l3776:	
 13465                           
 13466                           ;main.c: 154:         LATC = 0x00;
 13467  0FF8  019A               	clrf	26	;volatile
 13468  0FF9  1399               	bcf	25,7	;volatile
 13469  0FFA  1319               	bcf	25,6	;volatile
 13470  0FFB  1299               	bcf	25,5	;volatile
 13471  0FFC  1219               	bcf	25,4	;volatile
 13472  0FFD  1098               	bcf	24,1	;volatile
 13473  0FFE  1018               	bcf	24,0	;volatile
 13474  0FFF  0008               	return
 13475  1000                     __end_of_v_1ms_service_routine:	
 13476                           
 13477                           	psect	text83
 13478  0B70                     __ptext83:	
 13479 ;; *************** function i1_MTOUCH_Button_isPressed *****************
 13480 ;; Defined at:
 13481 ;;		line 354 in file "mcc_generated_files/mtouch/mtouch_button.c"
 13482 ;; Parameters:    Size  Location     Type
 13483 ;;  name            1    wreg     enum E6960
 13484 ;; Auto vars:     Size  Location     Type
 13485 ;;  name            1    1[COMMON] enum E6960
 13486 ;; Return value:  Size  Location     Type
 13487 ;;                  1    wreg      _Bool 
 13488 ;; Registers used:
 13489 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 13490 ;; Tracked objects:
 13491 ;;		On entry : 0/0
 13492 ;;		On exit  : 0/0
 13493 ;;		Unchanged: 0/0
 13494 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 13495 ;;      Params:         0       0       0       0       0       0       0       0
 13496 ;;      Locals:         1       0       0       0       0       0       0       0
 13497 ;;      Temps:          1       0       0       0       0       0       0       0
 13498 ;;      Totals:         2       0       0       0       0       0       0       0
 13499 ;;Total ram usage:        2 bytes
 13500 ;; Hardware stack levels used:    1
 13501 ;; This function calls:
 13502 ;;		Nothing
 13503 ;; This function is called by:
 13504 ;;		_v_1ms_service_routine
 13505 ;; This function uses a non-reentrant model
 13506 ;;
 13507                           
 13508                           
 13509                           ;psect for function i1_MTOUCH_Button_isPressed
 13510  0B70                     i1_MTOUCH_Button_isPressed:	
 13511                           
 13512                           ;incstack = 0
 13513                           ; Regs used in i1_MTOUCH_Button_isPressed: [wreg+fsr1l+fsr1h+status,2+status,0]
 13514                           ;i1MTOUCH_Button_isPressed@name stored from wreg
 13515  0B70  00F1               	movwf	i1MTOUCH_Button_isPressed@name
 13516                           
 13517                           ;mcc_generated_files/mtouch/mtouch_button.c: 354: _Bool MTOUCH_Button_isPressed(enum mto
      +                          uch_button_names name);mcc_generated_files/mtouch/mtouch_button.c: 355: {;mcc_generated_
      +                          files/mtouch/mtouch_button.c: 356:     if(name < 1u)
 13518  0B71  0871               	movf	i1MTOUCH_Button_isPressed@name,w
 13519  0B72  1D03               	btfss	3,2
 13520  0B73  2B87               	goto	i1l3510
 13521                           
 13522                           ;mcc_generated_files/mtouch/mtouch_button.c: 357:         return (_Bool)((mtouch_button[
      +                          name].state == MTOUCH_BUTTON_STATE_pressed) ? 1 : 0);
 13523  0B74  0871               	movf	i1MTOUCH_Button_isPressed@name,w
 13524  0B75  00F0               	movwf	??i1_MTOUCH_Button_isPressed
 13525  0B76  3003               	movlw	3
 13526  0B77                     u244_25:	
 13527  0B77  35F0               	lslf	??i1_MTOUCH_Button_isPressed,f
 13528  0B78  3EFF               	addlw	-1
 13529  0B79  1D03               	skipz
 13530  0B7A  2B77               	goto	u244_25
 13531  0B7B  3570               	lslf	??i1_MTOUCH_Button_isPressed,w
 13532  0B7C  3EBB               	addlw	(low ((_mtouch_button| 0+2)))& (0+255)
 13533  0B7D  0086               	movwf	6
 13534  0B7E  0187               	clrf	7
 13535  0B7F  3002               	movlw	2
 13536  0B80  0601               	xorwf	1,w
 13537  0B81  1D03               	btfss	3,2
 13538  0B82  2B85               	goto	u245_20
 13539  0B83  3001               	movlw	1
 13540  0B84  0008               	return
 13541  0B85                     u245_20:	
 13542  0B85  3000               	movlw	0
 13543  0B86  0008               	return
 13544  0B87                     i1l3510:	
 13545                           
 13546                           ;mcc_generated_files/mtouch/mtouch_button.c: 359:         return 0;
 13547  0B87  3000               	movlw	0
 13548  0B88  0008               	return
 13549  0B89                     __end_ofi1_MTOUCH_Button_isPressed:	
 13550  007E                     btemp	set	126	;btemp
 13551  007E                     int$flags	set	126
 13552  007E                     wtemp0	set	126


Data Sizes:
    Strings     0
    Constant    37
    Data        26
    BSS         68
    Persistent  32
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      8      14
    BANK0            80     33      80
    BANK1            80      0      41
    BANK2            80      0       0
    BANK3            80      0       0
    BANK4            80      0       0
    BANK5            80      0       0
    BANK6            16      0       0

Pointer List with Targets:

    Sensor_Scanfrequency_Evaluation@sensor.scanB	const PTR FTN()void  size(2) Largest target is 0
		 -> MTOUCH_CVD_ScanB_0(), 

    Sensor_Scanfrequency_Evaluation@sensor.scanA	const PTR FTN()void  size(2) Largest target is 0
		 -> MTOUCH_CVD_ScanA_0(), 

    Button_Service$2243$0	PTR struct . size(1) Largest target is 16
		 -> mtouch_button(BANK1[16]), 

    Button_Service$2243	PTR FTN(PTR struct .,)void  size(2) Largest target is 1
		 -> Button_State_Pressed(), Button_State_NotPressed(), Button_State_Initializing(), 

    Button_StateMachine$0	PTR struct . size(1) Largest target is 16
		 -> mtouch_button(BANK1[16]), 

    memcpy@d1	PTR void  size(1) Largest target is 16
		 -> mtouch_button(BANK1[16]), 

    memcpy@d	PTR unsigned char  size(1) Largest target is 16
		 -> mtouch_button(BANK1[16]), 

    memcpy@s1	PTR const void  size(2) Largest target is 16
		 -> mtouch_button_init(CODE[16]), 

    memcpy@s	PTR const unsigned char  size(2) Largest target is 16
		 -> mtouch_button_init(CODE[16]), 

    TMR1_SetInterruptHandler@InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> v_1s_service_routine(), TMR1_DefaultInterruptHandler(), 

    TMR1_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> v_1s_service_routine(), TMR1_DefaultInterruptHandler(), Absolute function(), 

    TMR2_SetInterruptHandler@InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> TMR2_DefaultInterruptHandler(), Sensor_Acq_ExecuteScan(), 

    TMR2_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> TMR2_DefaultInterruptHandler(), Absolute function(), Sensor_Acq_ExecuteScan(), 

    TMR0_SetInterruptHandler@InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> v_1ms_service_routine(), TMR0_DefaultInterruptHandler(), 

    TMR0_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> v_1ms_service_routine(), Absolute function(), TMR0_DefaultInterruptHandler(), 

    Button_Baseline_Update@button	PTR struct . size(1) Largest target is 16
		 -> mtouch_button(BANK1[16]), 

    Button_Baseline_Initialize@button	PTR struct . size(1) Largest target is 16
		 -> mtouch_button(BANK1[16]), 

    Button_Reading_Update_Helper@button	PTR struct . size(1) Largest target is 16
		 -> mtouch_button(BANK1[16]), 

    Button_Reading_Update@button	PTR struct . size(1) Largest target is 16
		 -> mtouch_button(BANK1[16]), 

    Button_Deviation_Update@button	PTR struct . size(1) Largest target is 16
		 -> mtouch_button(BANK1[16]), 

    Button_Tick_helper@button	PTR struct . size(1) Largest target is 16
		 -> mtouch_button(BANK1[16]), 

    Button_State_Pressed@button	PTR struct . size(1) Largest target is 16
		 -> mtouch_button(BANK1[16]), 

    Button_State_NotPressed@button	PTR struct . size(1) Largest target is 16
		 -> mtouch_button(BANK1[16]), 

    Button_State_Initializing@button	PTR struct . size(1) Largest target is 16
		 -> mtouch_button(BANK1[16]), 

    Button_Service@button	PTR struct . size(1) Largest target is 16
		 -> mtouch_button(BANK1[16]), 

    sp__memcpy	PTR void  size(1) Largest target is 16
		 -> mtouch_button(BANK1[16]), 

    MTOUCH_Button_Initialize@button	PTR struct . size(1) Largest target is 16
		 -> mtouch_button(BANK1[16]), 

    Button_StateMachine	PTR FTN(PTR struct .,)void [3] size(2) Largest target is 1
		 -> Button_State_Pressed(), Button_State_NotPressed(), Button_State_Initializing(), 

    callback_notPressed	PTR FTN(enum E6960,)void  size(2) Largest target is 1
		 -> Button_DefaultCallback(), 

    callback_pressed	PTR FTN(enum E6960,)void  size(2) Largest target is 1
		 -> Button_DefaultCallback(), 

    Sensor_setSampled@sensor.scanB	const PTR FTN()void  size(2) Largest target is 1
		 -> MTOUCH_CVD_ScanB_0(), 

    Sensor_setSampled@sensor.scanA	const PTR FTN()void  size(2) Largest target is 1
		 -> MTOUCH_CVD_ScanA_0(), 

    Sensor_setSampled@sensor	PTR struct . size(1) Largest target is 9
		 -> mtouch_sensor(BANK1[9]), 

    Sensor_Sampled_Reset@sensor.scanB	const PTR FTN()void  size(2) Largest target is 1
		 -> MTOUCH_CVD_ScanB_0(), 

    Sensor_Sampled_Reset@sensor.scanA	const PTR FTN()void  size(2) Largest target is 1
		 -> MTOUCH_CVD_ScanA_0(), 

    Sensor_Sampled_Reset@sensor	PTR struct . size(1) Largest target is 9
		 -> mtouch_sensor(BANK1[9]), 

    MTOUCH_Sensor_Sampled_ResetAll@sensor	PTR struct . size(1) Largest target is 9
		 -> mtouch_sensor(BANK1[9]), 

    Sensor_setInactive@sensor.scanB	const PTR FTN()void  size(2) Largest target is 1
		 -> MTOUCH_CVD_ScanB_0(), 

    Sensor_setInactive@sensor.scanA	const PTR FTN()void  size(2) Largest target is 1
		 -> MTOUCH_CVD_ScanA_0(), 

    Sensor_setInactive@sensor	PTR struct . size(1) Largest target is 9
		 -> mtouch_sensor(BANK1[9]), 

    Sensor_setActive@sensor.scanB	const PTR FTN()void  size(2) Largest target is 1
		 -> MTOUCH_CVD_ScanB_0(), 

    Sensor_setActive@sensor.scanA	const PTR FTN()void  size(2) Largest target is 1
		 -> MTOUCH_CVD_ScanA_0(), 

    Sensor_setActive@sensor	PTR struct . size(1) Largest target is 9
		 -> mtouch_sensor(BANK1[9]), 

    Sensor_isEnabled@sensor.scanB	const PTR FTN()void  size(2) Largest target is 1
		 -> MTOUCH_CVD_ScanB_0(), 

    Sensor_isEnabled@sensor.scanA	const PTR FTN()void  size(2) Largest target is 1
		 -> MTOUCH_CVD_ScanA_0(), 

    Sensor_isEnabled@sensor	PTR struct . size(1) Largest target is 9
		 -> mtouch_sensor(BANK1[9]), 

    Sensor_setScanFunction@sensor.scanB	const PTR FTN()void  size(2) Largest target is 1
		 -> MTOUCH_CVD_ScanB_0(), 

    Sensor_setScanFunction@sensor.scanA	const PTR FTN()void  size(2) Largest target is 1
		 -> MTOUCH_CVD_ScanA_0(), 

    Sensor_setScanFunction@sensor	PTR struct . size(1) Largest target is 9
		 -> mtouch_sensor(BANK1[9]), 

    Sensor_RawSample_Update@sensor.scanB	const PTR FTN()void  size(2) Largest target is 1
		 -> MTOUCH_CVD_ScanB_0(), 

    Sensor_RawSample_Update@sensor.scanA	const PTR FTN()void  size(2) Largest target is 1
		 -> MTOUCH_CVD_ScanA_0(), 

    Sensor_RawSample_Update@sensor	PTR struct . size(1) Largest target is 9
		 -> mtouch_sensor(BANK1[9]), 

    Sensor_Scanfrequency_Evaluation@sensor	PTR struct . size(1) Largest target is 9
		 -> mtouch_sensor(BANK1[9]), 

    Sensor_Acq_ExecutePacket@sensor.scanB	const PTR FTN()void  size(2) Largest target is 1
		 -> MTOUCH_CVD_ScanB_0(), 

    Sensor_Acq_ExecutePacket@sensor.scanA	const PTR FTN()void  size(2) Largest target is 1
		 -> MTOUCH_CVD_ScanA_0(), 

    Sensor_Acq_ExecutePacket@sensor	PTR struct . size(1) Largest target is 9
		 -> mtouch_sensor(BANK1[9]), 

    Sensor_Acquisition@sensor.scanB	const PTR FTN()void  size(2) Largest target is 1
		 -> MTOUCH_CVD_ScanB_0(), 

    Sensor_Acquisition@sensor.scanA	const PTR FTN()void  size(2) Largest target is 1
		 -> MTOUCH_CVD_ScanA_0(), 

    Sensor_Acquisition@sensor	PTR struct . size(1) Largest target is 9
		 -> mtouch_sensor(BANK1[9]), 

    Sensor_Service@sensor	PTR struct . size(1) Largest target is 9
		 -> mtouch_sensor(BANK1[9]), 

    S61$scanB	const PTR FTN()void  size(2) Largest target is 1
		 -> MTOUCH_CVD_ScanB_0(), 

    mtouch_sensor.scanB	const PTR FTN()void  size(2) Largest target is 1
		 -> MTOUCH_CVD_ScanB_0(), 

    S61$scanA	const PTR FTN()void  size(2) Largest target is 1
		 -> MTOUCH_CVD_ScanA_0(), 

    mtouch_sensor.scanA	const PTR FTN()void  size(2) Largest target is 1
		 -> MTOUCH_CVD_ScanA_0(), 

    Sensor_scanB	PTR FTN()void  size(2) Largest target is 1
		 -> MTOUCH_CVD_ScanB_0(), 

    Sensor_scanA	PTR FTN()void  size(2) Largest target is 1
		 -> MTOUCH_CVD_ScanA_0(), 

    callback_sampled	PTR FTN(enum E6808,)void  size(2) Largest target is 1
		 -> Sensor_DefaultCallback(), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _INTERRUPT_InterruptManager in COMMON

    _TMR2_ISR->_Sensor_Acq_ExecuteScan
    _Sensor_Acq_ExecuteScan->i1___bmul
    _Sensor_Acq_ExecuteScan->i1_abs
    _TMR1_ISR->_TMR1_WriteTimer
    _TMR0_ISR->_v_1ms_service_routine
    _v_1ms_service_routine->i1_MTOUCH_Button_isPressed

Critical Paths under _main in BANK0

    _main->_MTOUCH_Service_Mainloop
    ___awmod->___awdiv
    _TMR2_Initialize->_TMR2_SetInterruptHandler
    _TMR1_Initialize->_TMR1_SetInterruptHandler
    _TMR0_Initialize->_TMR0_SetInterruptHandler
    _MTOUCH_Initialize->_MTOUCH_Button_InitializeAll
    _MTOUCH_Sensor_InitializeAll->_MTOUCH_Sensor_Initialize
    _MTOUCH_Sensor_Initialize->_MTOUCH_Sensor_Enable
    _MTOUCH_Sensor_Enable->___bmul
    _MTOUCH_Button_InitializeAll->_memcpy
    _MTOUCH_Service_Mainloop->_MTOUCH_Sensor_SampleAll
    _MTOUCH_Button_Tick->_Button_Tick_helper
    _MTOUCH_Sensor_Sampled_ResetAll->_Sensor_Sampled_Reset
    _MTOUCH_Sensor_SampleAll->_Sensor_Service
    _Sensor_Service->_Sensor_Acquisition
    _Sensor_Acquisition->_Sensor_Scanfrequency_Evaluation
    _Sensor_Scanfrequency_Evaluation->_Sensor_Acq_ExecutePacket
    _Sensor_Acq_ExecutePacket->_TMR2_LoadPeriodRegister
    _Sensor_Acq_ExecutePacket->_TMR2_SetInterruptHandler
    _TMR2_LoadPeriodRegister->_TMR2_Period8BitSet
    _MTOUCH_Button_ServiceAll->_Button_Service
    _Button_Service->_Button_State_Initializing
    _MTOUCH_Sensor_wasSampled->___bmul
    _Button_State_Initializing->_Button_Baseline_Initialize
    _Button_Baseline_Initialize->_MTOUCH_Sensor_RawSample_Get
    _Button_Reading_Update->_Button_Reading_Update_Helper
    _Button_Reading_Update_Helper->_MTOUCH_Sensor_RawSample_Get
    _MTOUCH_Sensor_RawSample_Get->___bmul

Critical Paths under _INTERRUPT_InterruptManager in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK6

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 5     5      0   14129
                                             28 BANK0      5     5      0
                  _ADC_GetConversion
            _MTOUCH_Button_isPressed
            _MTOUCH_Service_Mainloop
                  _SYSTEM_Initialize
           _TMR0_SetInterruptHandler
           _TMR1_SetInterruptHandler
                            ___awdiv
                            ___awmod
                             ___lmul
              _v_get_slope_intercept
 ---------------------------------------------------------------------------------
 (1) _v_get_slope_intercept                                2     0      2     394
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (1) ___lmul                                              12     4      8     396
                                              0 BANK0     12     4      8
 ---------------------------------------------------------------------------------
 (1) ___awmod                                              7     3      4    1664
                                              9 BANK0      7     3      4
                            ___awdiv (ARG)
 ---------------------------------------------------------------------------------
 (1) ___awdiv                                              9     5      4    1668
                                              0 BANK0      9     5      4
 ---------------------------------------------------------------------------------
 (1) _SYSTEM_Initialize                                    0     0      0    2221
                     _ADC_Initialize
                  _MTOUCH_Initialize
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
                     _PMD_Initialize
                    _TMR0_Initialize
                    _TMR1_Initialize
                    _TMR2_Initialize
 ---------------------------------------------------------------------------------
 (2) _TMR2_Initialize                                      0     0      0     174
           _TMR2_SetInterruptHandler
 ---------------------------------------------------------------------------------
 (2) _TMR1_Initialize                                      0     0      0     174
           _TMR1_SetInterruptHandler
 ---------------------------------------------------------------------------------
 (1) _TMR1_SetInterruptHandler                             2     0      2     174
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (2) _TMR0_Initialize                                      0     0      0     174
           _TMR0_SetInterruptHandler
 ---------------------------------------------------------------------------------
 (1) _TMR0_SetInterruptHandler                             2     0      2     174
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (2) _PMD_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PIN_MANAGER_Initialize                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _MTOUCH_Initialize                                    0     0      0    1699
        _MTOUCH_Button_InitializeAll
        _MTOUCH_Sensor_InitializeAll
     _MTOUCH_Sensor_Sampled_ResetAll
      _MTOUCH_Sensor_Scan_Initialize
 ---------------------------------------------------------------------------------
 (3) _MTOUCH_Sensor_InitializeAll                          2     2      0    1014
                                              8 BANK0      2     2      0
           _MTOUCH_Sensor_Initialize
 ---------------------------------------------------------------------------------
 (4) _MTOUCH_Sensor_Initialize                             2     2      0     946
                                              6 BANK0      2     2      0
               _MTOUCH_Sensor_Enable
               _Sensor_Sampled_Reset
                             ___bmul
 ---------------------------------------------------------------------------------
 (5) _MTOUCH_Sensor_Enable                                 2     2      0     429
                                              4 BANK0      2     2      0
                             ___bmul
 ---------------------------------------------------------------------------------
 (3) _MTOUCH_Button_InitializeAll                          2     2      0     529
                                             10 BANK0      2     2      0
           _MTOUCH_Button_Initialize
                             _memcpy
 ---------------------------------------------------------------------------------
 (4) _memcpy                                              10     6      4     328
                                              0 BANK0     10     6      4
 ---------------------------------------------------------------------------------
 (2) _ADC_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _MTOUCH_Service_Mainloop                              1     1      0    7372
                                             27 BANK0      1     1      0
           _MTOUCH_Button_ServiceAll
            _MTOUCH_Sensor_SampleAll
     _MTOUCH_Sensor_Sampled_ResetAll
                        _MTOUCH_Tick
                 _MTOUCH_needReburst
 ---------------------------------------------------------------------------------
 (2) _MTOUCH_needReburst                                   1     1      0      23
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _MTOUCH_Tick                                          0     0      0     121
                 _MTOUCH_Button_Tick
 ---------------------------------------------------------------------------------
 (3) _MTOUCH_Button_Tick                                   0     0      0     121
                 _Button_Tick_helper
 ---------------------------------------------------------------------------------
 (4) _Button_Tick_helper                                   3     3      0     121
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (3) _MTOUCH_Sensor_Sampled_ResetAll                       2     2      0     156
                                              1 BANK0      2     2      0
               _Sensor_Sampled_Reset
 ---------------------------------------------------------------------------------
 (4) _Sensor_Sampled_Reset                                 1     1      0      88
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _MTOUCH_Sensor_SampleAll                              2     2      0    2840
                                             25 BANK0      2     2      0
                     _Sensor_Service
 ---------------------------------------------------------------------------------
 (3) _Sensor_Service                                       5     5      0    2772
                                             20 BANK0      5     5      0
                 _Sensor_Acquisition
             _Sensor_DefaultCallback
            _Sensor_RawSample_Update
                   _Sensor_isEnabled
                  _Sensor_setSampled
                             ___bmul
 ---------------------------------------------------------------------------------
 (4) _Sensor_setSampled                                    1     1      0      55
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (4) _Sensor_RawSample_Update                              1     1      0      77
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (4) _Sensor_DefaultCallback                               1     0      1      53
                                              0 BANK0      1     0      1
 ---------------------------------------------------------------------------------
 (4) _Sensor_Acquisition                                   3     3      0    1914
                                             17 BANK0      3     3      0
           _Sensor_Acq_ExecutePacket
    _Sensor_Scanfrequency_Evaluation
                   _Sensor_isEnabled
                   _Sensor_setActive
                 _Sensor_setInactive
                                _abs
 ---------------------------------------------------------------------------------
 (5) _abs                                                  4     2      2     292
                                              0 BANK0      4     2      2
 ---------------------------------------------------------------------------------
 (5) _Sensor_setInactive                                   1     1      0      55
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (5) _Sensor_setActive                                     1     1      0      55
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (4) _Sensor_isEnabled                                     1     1      0     110
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (5) _Sensor_Scanfrequency_Evaluation                     10    10      0     716
                                              7 BANK0     10    10      0
           _Sensor_Acq_ExecutePacket
 ---------------------------------------------------------------------------------
 (6) _Sensor_Acq_ExecutePacket                             5     5      0     497
                                              2 BANK0      5     5      0
      _MTOUCH_Sensor_Scan_Initialize
             _Sensor_setScanFunction
            _TMR2_LoadPeriodRegister
           _TMR2_SetInterruptHandler
                    _TMR2_StartTimer
                     _TMR2_StopTimer
 ---------------------------------------------------------------------------------
 (7) _TMR2_StopTimer                                       0     0      0       0
                          _TMR2_Stop
 ---------------------------------------------------------------------------------
 (8) _TMR2_Stop                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _TMR2_StartTimer                                      0     0      0       0
                         _TMR2_Start
 ---------------------------------------------------------------------------------
 (8) _TMR2_Start                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _TMR2_SetInterruptHandler                             2     0      2     174
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (7) _TMR2_LoadPeriodRegister                              1     1      0      44
                                              1 BANK0      1     1      0
                 _TMR2_Period8BitSet
 ---------------------------------------------------------------------------------
 (8) _TMR2_Period8BitSet                                   1     1      0      22
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (7) _Sensor_setScanFunction                               1     1      0      77
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (3) _MTOUCH_Sensor_Scan_Initialize                        0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _MTOUCH_Button_ServiceAll                             2     2      0    4232
                                             22 BANK0      2     2      0
                     _Button_Service
 ---------------------------------------------------------------------------------
 (3) _Button_Service                                       4     4      0    4164
                                             18 BANK0      4     4      0
            _Button_Deviation_Update
              _Button_Reading_Update
          _Button_State_Initializing *
            _Button_State_NotPressed *
               _Button_State_Pressed *
           _MTOUCH_Button_Initialize
         _MTOUCH_Sensor_isCalibrated
           _MTOUCH_Sensor_wasSampled
 ---------------------------------------------------------------------------------
 (4) _MTOUCH_Sensor_wasSampled                             2     2      0     429
                                              4 BANK0      2     2      0
                             ___bmul
 ---------------------------------------------------------------------------------
 (4) _MTOUCH_Sensor_isCalibrated                           1     1      0       0
 ---------------------------------------------------------------------------------
 (4) _Button_State_Pressed                                 3     2      1     565
                                             13 BANK0      3     2      1
             _Button_DefaultCallback
           _MTOUCH_Button_Initialize
 ---------------------------------------------------------------------------------
 (4) _Button_State_NotPressed                              3     2      1     904
                                             13 BANK0      3     2      1
             _Button_Baseline_Update
             _Button_DefaultCallback
           _MTOUCH_Button_Initialize
 ---------------------------------------------------------------------------------
 (4) _MTOUCH_Button_Initialize                             4     4      0     133
                                              0 BANK0      4     4      0
            _MTOUCH_Sensor_Calibrate
 ---------------------------------------------------------------------------------
 (5) _MTOUCH_Sensor_Calibrate                              1     1      0       0
 ---------------------------------------------------------------------------------
 (5) _Button_DefaultCallback                               1     0      1     159
                                              0 BANK0      1     0      1
 ---------------------------------------------------------------------------------
 (4) _Button_State_Initializing                            5     4      1     995
                                             13 BANK0      5     4      1
         _Button_Baseline_Initialize
             _Button_Baseline_Update
 ---------------------------------------------------------------------------------
 (5) _Button_Baseline_Update                               7     7      0     260
                                              0 BANK0      7     7      0
 ---------------------------------------------------------------------------------
 (5) _Button_Baseline_Initialize                           5     5      0     537
                                              8 BANK0      5     5      0
        _MTOUCH_Sensor_RawSample_Get
 ---------------------------------------------------------------------------------
 (4) _Button_Reading_Update                                1     1      0     726
                                             11 BANK0      1     1      0
       _Button_Reading_Update_Helper
 ---------------------------------------------------------------------------------
 (5) _Button_Reading_Update_Helper                         3     3      0     649
                                              8 BANK0      3     3      0
        _MTOUCH_Sensor_RawSample_Get
 ---------------------------------------------------------------------------------
 (6) _MTOUCH_Sensor_RawSample_Get                          4     2      2     429
                                              4 BANK0      4     2      2
                             ___bmul
 ---------------------------------------------------------------------------------
 (5) ___bmul                                               4     3      1     385
                                              0 BANK0      4     3      1
 ---------------------------------------------------------------------------------
 (4) _Button_Deviation_Update                             15    15      0     213
                                              0 BANK0     15    15      0
 ---------------------------------------------------------------------------------
 (1) _MTOUCH_Button_isPressed                              2     2      0      44
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _ADC_GetConversion                                    4     2      2      22
                                              0 BANK0      4     2      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 8
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (9) _INTERRUPT_InterruptManager                           0     0      0     693
                           _TMR0_ISR
                           _TMR1_ISR
                           _TMR2_ISR
 ---------------------------------------------------------------------------------
 (10) _TMR2_ISR                                            0     0      0     409
                   Absolute function *
             _Sensor_Acq_ExecuteScan *
       _TMR2_DefaultInterruptHandler *
 ---------------------------------------------------------------------------------
 (11) _TMR2_DefaultInterruptHandler                        0     0      0       0
 ---------------------------------------------------------------------------------
 (11) _Sensor_Acq_ExecuteScan                              4     4      0     409
                                              4 COMMON     4     4      0
                 _MTOUCH_CVD_ScanA_0 *
                 _MTOUCH_CVD_ScanB_0 *
                           i1___bmul
                              i1_abs
 ---------------------------------------------------------------------------------
 (12) i1_abs                                               4     2      2     144
                                              0 COMMON     4     2      2
 ---------------------------------------------------------------------------------
 (12) i1___bmul                                            4     3      1      87
                                              0 COMMON     4     3      1
 ---------------------------------------------------------------------------------
 (12) _MTOUCH_CVD_ScanB_0                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (12) _MTOUCH_CVD_ScanA_0                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (10) _TMR1_ISR                                            0     0      0     240
                   Absolute function *
       _TMR1_DefaultInterruptHandler *
                    _TMR1_WriteTimer
               _v_1s_service_routine *
 ---------------------------------------------------------------------------------
 (11) _v_1s_service_routine                                0     0      0       0
 ---------------------------------------------------------------------------------
 (11) _TMR1_WriteTimer                                     2     0      2     240
                                              0 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (11) _TMR1_DefaultInterruptHandler                        0     0      0       0
 ---------------------------------------------------------------------------------
 (10) _TMR0_ISR                                            0     0      0      44
                   Absolute function *
       _TMR0_DefaultInterruptHandler *
              _v_1ms_service_routine *
 ---------------------------------------------------------------------------------
 (11) _v_1ms_service_routine                               2     2      0      44
                                              2 COMMON     2     2      0
          i1_MTOUCH_Button_isPressed
 ---------------------------------------------------------------------------------
 (12) i1_MTOUCH_Button_isPressed                           2     2      0      44
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (11) _TMR0_DefaultInterruptHandler                        0     0      0       0
 ---------------------------------------------------------------------------------
 (11) Absolute function(Fake)                              0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 12
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ADC_GetConversion
   _MTOUCH_Button_isPressed
   _MTOUCH_Service_Mainloop
     _MTOUCH_Button_ServiceAll
       _Button_Service
         _Button_Deviation_Update
         _Button_Reading_Update
           _Button_Reading_Update_Helper
             _MTOUCH_Sensor_RawSample_Get
               ___bmul
         _Button_State_Initializing *
           _Button_Baseline_Initialize
             _MTOUCH_Sensor_RawSample_Get
               ___bmul
           _Button_Baseline_Update
         _Button_State_NotPressed *
           _Button_Baseline_Update
           _Button_DefaultCallback
           _MTOUCH_Button_Initialize
             _MTOUCH_Sensor_Calibrate
         _Button_State_Pressed *
           _Button_DefaultCallback
           _MTOUCH_Button_Initialize
             _MTOUCH_Sensor_Calibrate
         _MTOUCH_Button_Initialize *
           _MTOUCH_Sensor_Calibrate
         _MTOUCH_Sensor_isCalibrated *
         _MTOUCH_Sensor_wasSampled *
           ___bmul
     _MTOUCH_Sensor_SampleAll
       _Sensor_Service
         _Sensor_Acquisition
           _Sensor_Acq_ExecutePacket
             _MTOUCH_Sensor_Scan_Initialize
             _Sensor_setScanFunction
             _TMR2_LoadPeriodRegister
               _TMR2_Period8BitSet
             _TMR2_SetInterruptHandler
             _TMR2_StartTimer
               _TMR2_Start
             _TMR2_StopTimer
               _TMR2_Stop
           _Sensor_Scanfrequency_Evaluation
             _Sensor_Acq_ExecutePacket
               _MTOUCH_Sensor_Scan_Initialize
               _Sensor_setScanFunction
               _TMR2_LoadPeriodRegister
                 _TMR2_Period8BitSet
               _TMR2_SetInterruptHandler
               _TMR2_StartTimer
                 _TMR2_Start
               _TMR2_StopTimer
                 _TMR2_Stop
           _Sensor_isEnabled
           _Sensor_setActive
           _Sensor_setInactive
           _abs
         _Sensor_DefaultCallback
         _Sensor_RawSample_Update
         _Sensor_isEnabled
         _Sensor_setSampled
         ___bmul
     _MTOUCH_Sensor_Sampled_ResetAll
       _Sensor_Sampled_Reset
     _MTOUCH_Tick
       _MTOUCH_Button_Tick
         _Button_Tick_helper
     _MTOUCH_needReburst
   _SYSTEM_Initialize
     _ADC_Initialize
     _MTOUCH_Initialize
       _MTOUCH_Button_InitializeAll
         _MTOUCH_Button_Initialize
           _MTOUCH_Sensor_Calibrate
         _memcpy
       _MTOUCH_Sensor_InitializeAll
         _MTOUCH_Sensor_Initialize
           _MTOUCH_Sensor_Enable
             ___bmul
           _Sensor_Sampled_Reset
           ___bmul
       _MTOUCH_Sensor_Sampled_ResetAll
         _Sensor_Sampled_Reset
       _MTOUCH_Sensor_Scan_Initialize
     _OSCILLATOR_Initialize
     _PIN_MANAGER_Initialize
     _PMD_Initialize
     _TMR0_Initialize
       _TMR0_SetInterruptHandler
     _TMR1_Initialize
       _TMR1_SetInterruptHandler
     _TMR2_Initialize
       _TMR2_SetInterruptHandler
   _TMR0_SetInterruptHandler
   _TMR1_SetInterruptHandler
   ___awdiv
   ___awmod
     ___awdiv (ARG)
   ___lmul
   _v_get_slope_intercept

 _INTERRUPT_InterruptManager (ROOT)
   _TMR0_ISR
     Absolute function(Fake) *
     _TMR0_DefaultInterruptHandler *
     _v_1ms_service_routine *
       i1_MTOUCH_Button_isPressed
   _TMR1_ISR
     Absolute function(Fake) *
     _TMR1_DefaultInterruptHandler *
     _TMR1_WriteTimer *
     _v_1s_service_routine *
   _TMR2_ISR
     Absolute function(Fake) *
     _Sensor_Acq_ExecuteScan *
       _MTOUCH_CVD_ScanA_0 *
       _MTOUCH_CVD_ScanB_0 *
       i1___bmul *
       i1_abs *
     _TMR2_DefaultInterruptHandler *

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             1F0      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      8       E       2      100.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
ABS                  0      0      87       4        0.0%
BITBANK0            50      0       0       5        0.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BANK0               50     21      50       6      100.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BITBANK1            50      0       0       7        0.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BANK1               50      0      29       8       51.3%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BITBANK2            50      0       0       9        0.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BANK2               50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BITBANK3            50      0       0      11        0.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BANK3               50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BITBANK4            50      0       0      13        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BANK4               50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BITBANK5            50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BANK5               50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BITBANK6            10      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BANK6               10      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
DATA                 0      0      87      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%
BITSFR32             0      0       0      33        0.0%
SFR32                0      0       0      33        0.0%
BITSFR33             0      0       0      34        0.0%
SFR33                0      0       0      34        0.0%
BITSFR34             0      0       0      35        0.0%
SFR34                0      0       0      35        0.0%
BITSFR35             0      0       0      36        0.0%
SFR35                0      0       0      36        0.0%
BITSFR36             0      0       0      37        0.0%
SFR36                0      0       0      37        0.0%
BITSFR37             0      0       0      38        0.0%
SFR37                0      0       0      38        0.0%
BITSFR38             0      0       0      39        0.0%
SFR38                0      0       0      39        0.0%
BITSFR39             0      0       0      40        0.0%
SFR39                0      0       0      40        0.0%
BITSFR40             0      0       0      41        0.0%
SFR40                0      0       0      41        0.0%
BITSFR41             0      0       0      42        0.0%
SFR41                0      0       0      42        0.0%
BITSFR42             0      0       0      43        0.0%
SFR42                0      0       0      43        0.0%
BITSFR43             0      0       0      44        0.0%
SFR43                0      0       0      44        0.0%
BITSFR44             0      0       0      45        0.0%
SFR44                0      0       0      45        0.0%
BITSFR45             0      0       0      46        0.0%
SFR45                0      0       0      46        0.0%
BITSFR46             0      0       0      47        0.0%
SFR46                0      0       0      47        0.0%
BITSFR47             0      0       0      48        0.0%
SFR47                0      0       0      48        0.0%
BITSFR48             0      0       0      49        0.0%
SFR48                0      0       0      49        0.0%
BITSFR49             0      0       0      50        0.0%
SFR49                0      0       0      50        0.0%
BITSFR50             0      0       0      51        0.0%
SFR50                0      0       0      51        0.0%
BITSFR51             0      0       0      52        0.0%
SFR51                0      0       0      52        0.0%
BITSFR52             0      0       0      53        0.0%
SFR52                0      0       0      53        0.0%
BITSFR53             0      0       0      54        0.0%
SFR53                0      0       0      54        0.0%
BITSFR54             0      0       0      55        0.0%
SFR54                0      0       0      55        0.0%
BITSFR55             0      0       0      56        0.0%
SFR55                0      0       0      56        0.0%
BITSFR56             0      0       0      57        0.0%
SFR56                0      0       0      57        0.0%
BITSFR57             0      0       0      58        0.0%
SFR57                0      0       0      58        0.0%
BITSFR58             0      0       0      59        0.0%
SFR58                0      0       0      59        0.0%
BITSFR59             0      0       0      60        0.0%
SFR59                0      0       0      60        0.0%
BITSFR60             0      0       0      61        0.0%
SFR60                0      0       0      61        0.0%
BITSFR61             0      0       0      62        0.0%
SFR61                0      0       0      62        0.0%
BITSFR62             0      0       0      63        0.0%
SFR62                0      0       0      63        0.0%
BITSFR63             0      0       0      64        0.0%
SFR63                0      0       0      64        0.0%


Microchip Technology PIC Macro Assembler V2.05 build -831301201 
Symbol Table                                                                                   Sun Jan 05 11:41:02 2020

                    __end_of_TMR2_SetInterruptHandler 094E                          ?_MTOUCH_Sensor_RawSample_Get 004E  
                                          __CFG_CP$ON 0000                                        ___bmul@product 004C  
                              _Sensor_setScanFunction 0A5B                       __size_of_Sensor_Acq_ExecuteScan 0085  
                                        ___awdiv@sign 0050                            __end_of_Sensor_setInactive 0976  
                                                 LATA 0018                                           __CFG_LVP$ON 0000  
                                                 l133 0EBE                                                   l162 0796  
                                                 l164 07AD                                                   l159 0790  
                                                 l357 0533                                                   l722 0C42  
                                                 l590 09C1                                                   _GIE 005F  
                                                 _PR2 028D                                       _timer1ReloadVal 0078  
                                                 _abs 0B89                               __size_of_PMD_Initialize 0008  
                                        ___awmod@sign 0059                                       _TMR2_Initialize 0AFB  
                                        __CFG_BORV$LO 0000                                                   wreg 0009  
                    ??_MTOUCH_Sensor_Sampled_ResetAll 004B                       ?_MTOUCH_Sensor_Sampled_ResetAll 0070  
                    __size_of_MTOUCH_Sensor_SampleAll 0015                                         __CFG_BBEN$OFF 0000  
                   __size_of_MTOUCH_Sensor_Initialize 0013                             ?_MTOUCH_Sensor_Initialize 0070  
                                                INDF0 0000                                                  FSR0H 0005  
                                                FSR1H 0007                                                  FSR0L 0004  
                                                FSR1L 0006                                    _MTOUCH_CVD_ScanA_0 0C70  
                                  _MTOUCH_CVD_ScanB_0 0C95                                          __CFG_ZCD$OFF 0000  
                                                l1022 01C4                                                  l1018 017F  
                                                l1035 0333                                                  ?_abs 004A  
                                                l1036 0344                                                  l3202 0713  
                                                l4010 0DC8                                                  l3204 0722  
                                                l4020 0DDA                                                  l4006 0DC1  
                                                l3312 0AA6                                                  l3208 0737  
                                                l4032 0DF7                                                  l4024 0DE6  
                                                l3082 0A52                                                  l3146 0B3D  
                                                l3250 0E35                                                  l3242 059A  
                                                l4018 0DCE                                                  l4210 010D  
                                                l3164 09F8                                                  l3260 0D80  
                                                l4028 0DEF                                                  l4204 00F7  
                                                l3342 06BE                                                  l3078 0A4C  
                                                l3270 0D8A                                                  l3326 0CC4  
                                                l4230 01A7                                                  l4214 0115  
                                                l3344 06C6                                                  l3336 09E8  
                                                l3096 0758                                                  l3264 0D82  
                                                l3424 0A1A                                                  l4208 00FF  
                                                l3354 0F57                                                  l3370 04FA  
                                                l3194 070F                                                  l3186 06FC  
                                                l3282 0DB1                                                  l4410 0ED9  
                                                l3434 0EAF                                                  l4242 01ED  
                                                l3348 06DA                                                  l3356 0F5B  
                                                l3604 0A0B                                                  l4412 0EDE  
                                                l3444 0ECC                                                  l4308 035F  
                                                l4316 039E                                                  l3446 0EE9  
                                                l4254 021B                                                  l3376 052B  
                                                l3296 0B4F                                                  l3544 0AC7  
                                                l4328 03BF                                                  l4280 02AD  
                                                l4248 0200                                                  l3386 0F0E  
                                                l3538 0ABE                                                  l4282 02B3  
                                                l4266 0241                                                  l4258 022C  
                                                l4194 00B0                                                  l3804 0BE2  
                                                l3476 0C02                                                  l4276 0299  
                                                l3830 0BBA                                                  l3494 07EC  
                                                l4278 029F                                                  l3920 0444  
                                                l3912 0412                                                  l3904 03E0  
                                                l4296 0322                                                  l3932 048F  
                                                l3924 045D                                                  l3916 042B  
                                                l3908 03F9                                                  l3942 0D1A  
                                                l3936 04A8                                                  l3928 0476  
                                                l3962 0E50                                                  l3946 0D24  
                                                TRISA 0012                                                  l3980 0E6F  
                                                l3990 0E8A                                                  l3968 0E5B  
                                                l3994 0E92                                                  l3986 0E81  
                                                l3978 0E63                         ?_Button_Reading_Update_Helper 0070  
                                                u2025 0729                                                  u2045 0D46  
                                                u3005 0E82                                                  _LATA 0018  
                                                _LATB 0019                                                  u2055 0D06  
                                                _LATC 001A                                                  u2075 0565  
                                                u2085 05A7                                                  u2245 0F81  
                                                u2190 06A5                                                  u2185 066F  
                                                u3065 0DD1                                                  _T2PR 028D  
                                                u2195 06A1                                                  u2275 050E  
                                                u2700 0BB8                                                  u3085 0DE0  
                                                u3095 0DE7                                                  u2395 07B4  
                                                u3515 019E                                                  u3605 0238  
                                                u3525 01B1                                                  u3445 00DA  
                                                u3615 027C                                                  u3535 01BD  
                                                u2905 0D25                                                  u3705 035A  
                                                u3545 01CE                                                  u2915 0D2C  
                                                u3555 01DA                                                  u3475 014E  
                                                _PMD0 0796                                                  u3645 02EC  
                                                u3565 020A                                                  _PMD1 0797  
                                                _PMD2 0798                                                  u2695 0BAA  
                                                u3575 0216                                                  u3495 0177  
                                                _PMD3 0799                                                  _PMD4 079A  
                                                u1985 0B93                                                  u3665 0319  
                                                u3585 0225                                                  _PMD5 079B  
                                                u3675 032C                                                  u3757 0C3D  
                                                u2965 0E66                                                  u3685 033D  
                                                u3695 034E                                                  u2985 0E70  
                                                u2995 0E7A                                                  _PLLR 4480  
                          Button_State_Pressed@button 0057                                                  _TMR2 028C  
                                                _WPUA 1F39                                                  _WPUB 1F44  
                                                _WPUC 1F4F                     __size_of_Sensor_Acq_ExecutePacket 0066  
                           ?_Sensor_Acq_ExecutePacket 0070                                         __CFG_FCMEN$ON 0000  
                                  _MTOUCH_needReburst 0002                                                  abs@a 004A  
                                                _main 0051                  __size_of_MTOUCH_Button_InitializeAll 001C  
                                                fsr0h 0005                                                  fsr1h 0007  
                                                indf0 0000                                                  fsr0l 0004  
                                                indf1 0001                                                  fsr1l 0006  
                __size_of_MTOUCH_Sensor_InitializeAll 000F                                                  btemp 007E  
                                 ?_MTOUCH_CVD_ScanA_0 0070                                   ?_MTOUCH_CVD_ScanB_0 0070  
                                                start 001E                            ??_TMR1_SetInterruptHandler 004C  
                                       __CFG_CSWEN$ON 0000                                     ___bmul@multiplier 004D  
                                       __CFG_MCLRE$ON 0000                                   ?_MTOUCH_needReburst 0070  
                                               ADCON0 009D  __end_ofSensor_Scanfrequency_Evaluation@frequency_hop 0824  
        Sensor_Scanfrequency_Evaluation@frequency_hop 081F                              ?_MTOUCH_Service_Mainloop 0070  
                    __size_of_MTOUCH_Button_isPressed 001A                         __size_of_Button_State_Pressed 0056  
                                               ??_abs 004C                           ?_Button_Baseline_Initialize 0070  
                             __end_of_TMR0_Initialize 0ABC                         ??_MTOUCH_Sensor_RawSample_Get 0050  
                       Sensor_RawSample_Update@sensor 004A                        ??_TMR0_DefaultInterruptHandler 0070  
                           __size_of_Sensor_isEnabled 000E                        __size_of_OSCILLATOR_Initialize 000C  
                       __end_of_OSCILLATOR_Initialize 09C4     Sensor_Scanfrequency_Evaluation@best_packet_sample 0055  
                                               ?_main 0070                                       __end_of___awdiv 0E97  
                                               _ADRES 009B                                         __CFG_WDTE$OFF 0000  
                                     __end_of___awmod 0DFC                                  ??_MTOUCH_CVD_ScanA_0 0070  
                                ??_MTOUCH_CVD_ScanB_0 0070                                                 _T1CLK 0211  
                                     ___awdiv@divisor 004A                                                 _T1CON 020E  
                                               _T2CON 028E                                                 _T2HLT 028F  
                             __size_of_Button_Service 0050                                                 _T2TMR 028C  
                                               _T2RST 0291                                                 i1l167 05DB  
                                               i1l542 001C                                                 i1l534 000E  
                                               i1l537 0017                                                 i1l930 09A6  
                                               i1l951 0FB8                                                 i1l935 0FAB  
                                               i1l960 0FBF                                                 i1l963 0FC2  
                                               i1l957 0FBC                                                 i1l966 0FC5  
                                     ___awdiv@counter 004F                                                 _OSCEN 0891  
                                               _TMR0H 059D                                                 _TMR1H 020D  
                                               _TMR0L 059C                                                 _TMR1L 020C  
                                               _TRISA 0012                                                 _TRISB 0013  
                                               _TRISC 0014                                                 i1_abs 0B11  
                   __size_of_TMR0_SetInterruptHandler 0006                       __size_of_Button_DefaultCallback 0001  
                                 ___lmul@multiplicand 004E                             ?_TMR0_SetInterruptHandler 004A  
                                ??_MTOUCH_needReburst 004A                                      __end_of_TMR0_ISR 09D1  
                                    __end_of_TMR1_ISR 0A94                                      __end_of_TMR2_ISR 09DE  
                                       __CFG_WRTB$OFF 0000                                         __CFG_WRTC$OFF 0000  
                     __size_of_Sensor_DefaultCallback 0001                               __size_of_Sensor_Service 0055  
                                  __size_of_TMR2_Stop 0003                                           ?_TMR2_Start 0070  
               __end_of_MTOUCH_Sensor_Scan_Initialize 09A0                __size_of_MTOUCH_Sensor_Scan_Initialize 000A  
                       _MTOUCH_Sensor_Scan_Initialize 0996                               Sensor_setSampled@sensor 004A  
                              _Sensor_Acq_ExecuteScan 05DB                      __size_of_Button_State_NotPressed 0092  
                                    __end_ofi1___bmul 0A38                               __end_of_TMR1_Initialize 0BD7  
                                               pclath 000A                                  _Sensor_Sampled_Reset 097E  
                                               status 0003                                                 wtemp0 007E  
                          __end_of_TMR2_Period8BitSet 0942                                       _TMR2_StartTimer 0927  
                    __size_of_TMR2_LoadPeriodRegister 0006                             __size_of_Sensor_setActive 0008  
                                     _TMR1_WriteTimer 09FA                                Sensor_isEnabled@sensor 004A  
                              ?_v_get_slope_intercept 004A                                       __initialization 0020  
                     _i16_R_SENSOR_TEMPERATURE_10xDEG 002C                                          __end_of_main 03C2  
                                      __CFG_SAFEN$OFF 0000                               ??_v_1ms_service_routine 0072  
                             __end_of_TMR2_Initialize 0B11                           ?_INTERRUPT_InterruptManager 0070  
                    __end_of_MTOUCH_Button_Initialize 0D73                              _TMR2_SetInterruptHandler 0948  
                                              ??_main 0066                               _MTOUCH_Sensor_Calibrate 0920  
                        __end_of_v_1s_service_routine 09AC                               ??_Button_Reading_Update 0055  
                                              ?i1_abs 0070                  MTOUCH_Sensor_Sampled_ResetAll@sensor 004C  
                            ?_Button_Deviation_Update 0070                                          ?_MTOUCH_Tick 0070  
                        Button_Baseline_Update@button 0050                                                _ADCON0 009D  
                                              _ADCON1 009E                  __size_of_MTOUCH_Sensor_RawSample_Get 0018  
                                              _ADRESH 009C                                                _ADRESL 009B  
                                    ___awdiv@dividend 004C                                                _ANSELA 1F38  
                                              _ANSELB 1F43                                                _ANSELC 1F4E  
                                              _T0CON0 059E                                                _T0CON1 059F  
                                              _T1GATE 0210                                                _T1GCON 020F  
                             TMR1_WriteTimer@timerVal 0070                                                _ODCONA 1F3A  
                                              _ODCONB 1F45                                                _ODCONC 1F50  
                                              i1l3510 0B87                                                i1l3520 0A29  
                                              i1l3524 0A2F                                                i1l4414 05FE  
                                              i1l4416 0FD8                                                i1l3722 0A04  
                                              i1l3570 0606                                                i1l3562 05E9  
                                              i1l3580 0635                                                i1l3564 05EF  
                                              i1l3584 0646                                                i1l3568 05F5  
                                      __CFG_WDTCCS$SC 0000                                                i1l3770 0FEE  
                                              i1l3586 064A                                                i1l3764 0FD0  
                                              i1l3588 064D                                                i1l3766 0FE9  
                                              i1l3776 0FF8                                                _INLVLA 1F3C  
                                              _INLVLB 1F47                                 ?_Sensor_Sampled_Reset 0070  
                                              _INLVLC 1F52                                                u244_25 0B77  
                                              u245_20 0B85                                                u247_25 0B1A  
                                              u376_27 0C9B                                                u377_27 0C76  
                                              _OSCFRQ 0893                     MTOUCH_Button_InitializeAll@button 0055  
                                              i1abs@a 0070                        ??_Button_Reading_Update_Helper 0052  
                              _Button_DefaultCallback 091F                       __end_of_MTOUCH_Service_Mainloop 0BF3  
                                      __CFG_PWRTE$OFF 0000                                                _u32_Cn 00B5  
                                              _u32_Mn 0028                           ??i1_MTOUCH_Button_isPressed 0070  
                                          _u8_PATTERN 07FF                  __end_of_TMR1_DefaultInterruptHandler 091E  
               __size_of_TMR1_DefaultInterruptHandler 0001                          _TMR1_DefaultInterruptHandler 091D  
                              _Sensor_DefaultCallback 0921                                         _packet_sample 003A  
                                              ___bmul 0A49                                                ___lmul 0D11  
                        Sensor_DefaultCallback@sensor 004A                                             ??___awdiv 004E  
                                      __CFG_STVREN$ON 0000                                             ??___awmod 0057  
                                   __end_of_TMR2_Stop 092D                                   __size_of_TMR2_Start 0003  
                                 _u16_ADCsample_COUNT 002E                                                _memcpy 0CBA  
                                    ?_TMR0_Initialize 0070                                      ___awdiv@quotient 0051  
                                     ___awmod@divisor 0053                      __end_of_MTOUCH_Button_ServiceAll 0A18  
                                     ___awmod@counter 0058                                        _PMD_Initialize 098E  
                             _MTOUCH_Sensor_SampleAll 0ABC                          Button_DefaultCallback@button 004A  
                            ?_Sensor_RawSample_Update 0070                              ADC_GetConversion@channel 004D  
                          __end_of_Sensor_Acquisition 0DB6                               ?_Button_Baseline_Update 0070  
                             __end_of_TMR2_StartTimer 092A              TMR1_SetInterruptHandler@InterruptHandler 004A  
            TMR2_SetInterruptHandler@InterruptHandler 004A              TMR0_SetInterruptHandler@InterruptHandler 004A  
                             __end_of_TMR1_WriteTimer 0A09                       MTOUCH_Sensor_RawSample_Get@name 0051  
                                    ?_TMR1_Initialize 0070                                     _SYSTEM_Initialize 0B58  
                             __end_of__initialization 004D                   __size_of_Button_Baseline_Initialize 002C  
                      ?_MTOUCH_Sensor_Scan_Initialize 0070                 Sensor_Scanfrequency_Evaluation@sensor 0057  
                                  ?_SYSTEM_Initialize 0070                                   _Button_StateMachine 00A0  
                          __end_of_Button_Tick_helper 0C70                         MTOUCH_Sensor_Calibrate@sensor 0070  
                                 ___bmul@multiplicand 004A                                         __end_ofi1_abs 0B28  
                             ?_Sensor_setScanFunction 0070                                        __pcstackCOMMON 0070  
                             _MTOUCH_Button_isPressed 0BA2                                          __pidataBANK0 0937  
                                        __pidataBANK1 0AE6                                   ??_SYSTEM_Initialize 0056  
                                           ?_TMR0_ISR 0070                                             ?_TMR1_ISR 0070  
                                           ?_TMR2_ISR 0070                         ?_TMR1_DefaultInterruptHandler 0070  
                          __end_of_MTOUCH_Button_Tick 0937                      __end_of_MTOUCH_Sensor_Initialize 0A80  
                           ??_MTOUCH_Sensor_Calibrate 004A                                      _Sensor_isEnabled 09EC  
                                    ?_TMR2_Initialize 0070                       __end_of_Button_Deviation_Update 06E3  
                              __end_of_PMD_Initialize 0996                                             ?i1___bmul 0070  
                            Sensor_setInactive@sensor 004A                                        _Button_Service 07AF  
                    __end_of_Sensor_Acq_ExecutePacket 07AF                            ?_Button_State_Initializing 0057  
                                Button_Service@button 005F                             i1_MTOUCH_Button_isPressed 0B70  
                                             ??i1_abs 0072                        __end_of_Button_Baseline_Update 05DB  
                                Sensor_Service@sensor 0062                              _MTOUCH_Button_Initialize 0D41  
                                      _Sensor_Service 0E97                                      i1___bmul@product 0073  
                             _Button_State_NotPressed 04C1                         __size_of_MTOUCH_Sensor_Enable 0011  
                                  _Sensor_setInactive 096E                             __end_of_SYSTEM_Initialize 0B70  
                                   _lowpowerActivated 0046                      MTOUCH_Sensor_isCalibrated@sensor 0070  
                              ??_Sensor_Sampled_Reset 004A                                            __pbssBANK0 0020  
                                          __pbssBANK1 00B5                               _TMR2_LoadPeriodRegister 0942  
                                 ?_Sensor_setInactive 0070                                      _Sensor_setActive 0966  
                                  Sensor_Service@name 0060                            __end_of_mtouch_button_init 081F  
                      __end_of_Sensor_setScanFunction 0A6D                                  _v_1s_service_routine 09A0  
                                          __pmaintext 0051                                               ?___bmul 004A  
                    __end_of_TMR0_SetInterruptHandler 0954                                               ?___lmul 004A  
                                          ??_TMR0_ISR 0074                                            ??_TMR1_ISR 0072  
                                     __CFG_PPS1WAY$ON 0000                                            ??_TMR2_ISR 0078  
                      MTOUCH_Sensor_wasSampled@sensor 004F                                            __pintentry 0004  
                              __end_of_Button_Service 07FF                                               ?_memcpy 004A  
                                      ___lmul@product 0052                   __end_of_MTOUCH_Button_InitializeAll 0C0F  
                         _MTOUCH_Button_InitializeAll 0BF3                   __end_of_MTOUCH_Sensor_InitializeAll 0A27  
                         _MTOUCH_Sensor_InitializeAll 0A18                             ??_MTOUCH_Sensor_SampleAll 0063  
                                          ??i1___bmul 0071                                       ?_PMD_Initialize 0070  
                             __size_of_ADC_Initialize 0008                       __end_of_Sensor_RawSample_Update 0B58  
                                ??_Sensor_setInactive 004A                     __size_of_MTOUCH_Sensor_wasSampled 0014  
                           ?_MTOUCH_Sensor_wasSampled 0070                     __end_of_Button_State_Initializing 0F9D  
                              __end_of_Sensor_Service 0EEC                              _MTOUCH_Button_ServiceAll 0A09  
                             ?_Sensor_Acq_ExecuteScan 0070                                               _OSCCON1 088D  
                                             _OSCCON3 088F                         MTOUCH_Sensor_SampleAll@sensor 0064  
                                             _OSCSTAT 0890                                               _OSCTUNE 0892  
                    __size_of_MTOUCH_Service_Mainloop 001C                                               _SLRCONA 1F3B  
                                             _SLRCONB 1F46                                               _SLRCONC 1F51  
                        __end_of_Button_State_Pressed 0F42                                          ??_TMR2_Start 004A  
                             __size_of_TMR2_StopTimer 0003                                      ?_TMR2_StartTimer 0070  
                    Button_Baseline_Initialize@button 0056                                      ?_TMR1_WriteTimer 0070  
                                __size_of_MTOUCH_Tick 0003                               ??_v_get_slope_intercept 004C  
                               ?_v_1s_service_routine 0070                             ??_MTOUCH_Button_isPressed 004A  
                                      _packet_counter 007C                            ??_TMR2_SetInterruptHandler 004C  
                             Sensor_Acquisition@retry 005C                                       __size_of___bmul 0012  
                                             ___awdiv 0E45                                       __size_of___lmul 0030  
                                             ___awmod 0DB6                        MTOUCH_Button_Initialize@button 004D  
                                     ?_Button_Service 0070                                    _TMR2_Period8BitSet 093C  
                                  __end_of_TMR2_Start 0927                                       __size_of_memcpy 002B  
                      __size_of_v_1ms_service_routine 0063                                               __ptext1 03C2  
                                             __ptext2 0D11                                               __ptext3 0DB6  
                                             __ptext4 0E45                                               __ptext5 0B58  
                                             __ptext6 0AFB                                               __ptext7 0BBC  
                                             __ptext8 0954                                               __ptext9 0AA8  
                       __end_of_v_1ms_service_routine 1000                           TMR2_Period8BitSet@periodVal 004A  
                         Button_Reading_Update@button 0055                        ??_TMR1_DefaultInterruptHandler 0070  
                         __size_of_MTOUCH_CVD_ScanA_0 0025                                       __CFG_WRTAPP$OFF 0000  
                         __size_of_MTOUCH_CVD_ScanB_0 0025                                             _T1CONbits 020E  
                            _MTOUCH_Sensor_Initialize 0A6D                        __end_of_Sensor_Acq_ExecuteScan 0660  
                               _OSCILLATOR_Initialize 09B8                                             _T2CONbits 028E  
                                        __size_of_abs 0019                             ??_Button_State_NotPressed 0058  
                                     ?_Sensor_Service 0070                                      ___awmod@dividend 0055  
                   __size_of_TMR1_SetInterruptHandler 0006                                   ?_TMR2_Period8BitSet 0070  
                            ??_PIN_MANAGER_Initialize 004A                             ?_TMR1_SetInterruptHandler 004A  
                                           _T2HLTbits 028F                                       __CFG_WRTSAF$OFF 0000  
                                 i1___bmul@multiplier 0072                        __size_of_Button_Reading_Update 000E  
                         __size_of_MTOUCH_needReburst 0002                         __end_of_Button_Reading_Update 09EC  
                   MTOUCH_Sensor_InitializeAll@sensor 0053                              _Sensor_Acq_ExecutePacket 0749  
                                    _callback_sampled 00AA                             ??_TMR2_LoadPeriodRegister 004B  
                          __size_of_SYSTEM_Initialize 0018                                               clrloop0 095B  
                                    _callback_pressed 00A8                        MTOUCH_Sensor_Initialize@sensor 0051  
                                end_of_initialization 004D                                             _T2RSTbits 0291  
                             ?_Button_DefaultCallback 004A                                               memcpy@d 0053  
                                             memcpy@n 004C                                               memcpy@s 004F  
                                             init_ram 0960                                               initloop 0961  
                             ?_Sensor_DefaultCallback 004A                      __size_of_Button_Deviation_Update 0083  
                                ??_TMR2_Period8BitSet 004A                          ??_MTOUCH_Sensor_isCalibrated 004A  
                 __end_of_MTOUCH_Sensor_RawSample_Get 0B40                           _MTOUCH_Sensor_RawSample_Get 0B28  
                               __CFG_WDTCPS$WDTCPS_31 0000                              _TMR0_SetInterruptHandler 094E  
                                           _TMR2_Stop 092A                                Sensor_setActive@sensor 004A  
   Sensor_Scanfrequency_Evaluation@best_sample_period 0058                         Button_Deviation_Update@button 0054  
                          MTOUCH_Sensor_Enable@sensor 004F                                   _callback_notPressed 00A6  
                                    __CFG_FEXTOSC$OFF 0000                   __size_of_MTOUCH_Sensor_isCalibrated 0002  
                      __end_of_Button_DefaultCallback 0920       Sensor_Scanfrequency_Evaluation@packet_noise_Max 0053  
                                  _sensor_globalFlags 0047                          Sensor_Acq_ExecuteScan@last_a 0036  
                        Sensor_Acq_ExecuteScan@last_b 007A                              __end_of_Sensor_isEnabled 09FA  
                      __end_of_Sensor_DefaultCallback 0922                          Sensor_Acq_ExecuteScan@result 0076  
                              ??_v_1s_service_routine 0070                      __size_of_Sensor_RawSample_Update 0018  
                                  _Sensor_Acquisition 0D73                  __end_of_TMR2_DefaultInterruptHandler 091F  
               __size_of_TMR2_DefaultInterruptHandler 0001                          _TMR2_DefaultInterruptHandler 091E  
                                _Button_State_Pressed 0EEC                                        __end_of___bmul 0A5B  
                                      __end_of___lmul 0D41                                   ?_Sensor_Acquisition 0070  
                          ??_MTOUCH_Button_Initialize 004A                       ??_MTOUCH_Sensor_Scan_Initialize 004A  
                                   __size_of_TMR0_ISR 000D                                     __size_of_TMR1_ISR 0014  
                                   __size_of_TMR2_ISR 000D                                        _ADC_Initialize 0986  
                       Sensor_Acq_ExecutePacket@error 004F                                    _Button_Tick_helper 0C4C  
                                          ?_TMR2_Stop 0070                                        __end_of_memcpy 0CE5  
                              ?_OSCILLATOR_Initialize 0070                              __end_of_Sensor_setActive 096E  
                    TMR2_LoadPeriodRegister@periodVal 004B                           ??_Button_State_Initializing 0058  
                                   __size_ofi1___bmul 0011                                   start_initialization 0020  
                             _MTOUCH_Service_Mainloop 0BD7                              __size_of_TMR0_Initialize 0014  
                     __size_of_PIN_MANAGER_Initialize 001E                                    _MTOUCH_Button_Tick 0933  
                                 ?_Button_Tick_helper 0070                                           __end_of_abs 0BA2  
                                      _TMR2_StopTimer 092D                                  ??_Sensor_Acquisition 005B  
                                 ?_MTOUCH_Button_Tick 0070                       Button_State_Initializing@button 0057  
                    __end_of_MTOUCH_Sensor_wasSampled 0AA8                                      __CFG_LPBOREN$OFF 0000  
                                ??_Button_Tick_helper 004A                              __size_of_TMR1_Initialize 001B  
                        __end_of_MTOUCH_Sensor_Enable 0A49                                          _packet_noise 0038  
                                            ??___bmul 004B                                      ??_PMD_Initialize 004A  
                                            ??___lmul 0052                                 ?_Button_State_Pressed 0057  
                              __end_of_ADC_Initialize 098E                            ??_MTOUCH_Button_ServiceAll 0060  
                                         __pdataBANK0 006B                                           __pdataBANK1 00A0  
                                            ??_memcpy 004E                          ??_Button_Baseline_Initialize 0052  
                                       _sample_period 006F                         ?_TMR2_DefaultInterruptHandler 0070  
                                ??_MTOUCH_Button_Tick 004D                                    _mtouch_button_init 080F  
                          Sensor_Sampled_Reset@sensor 004A                                __end_of_TMR2_StopTimer 0930  
                                         __pbssCOMMON 0078                                             ___latbits 0001  
                                       __pcstackBANK0 004A                              __size_of_TMR2_Initialize 0016  
                     _u8_SLEEPING_START_COUNTDOWN_SEC 003D                                    __end_of_u8_PATTERN 080F  
                      MTOUCH_Button_ServiceAll@button 0061                                   Sensor_Service@error 0061  
                       __size_of_Sensor_Sampled_Reset 0008                               _Button_Deviation_Update 0660  
                           _Button_State_Initializing 0F42                    __end_of_MTOUCH_Sensor_isCalibrated 0924  
                          _MTOUCH_Sensor_isCalibrated 0922                        __size_of_v_get_slope_intercept 00FF  
                               _TMR0_InterruptHandler 0034                         __end_of_v_get_slope_intercept 04C1  
                                   _Sensor_setSampled 0976                                _PIN_MANAGER_Initialize 0C0F  
                                    ??_Button_Service 005C                              ?_MTOUCH_Sensor_Calibrate 0070  
                                  ?_Sensor_setSampled 0070                    Button_Reading_Update_Helper@button 0054  
                    __end_of_TMR1_SetInterruptHandler 095A                            ??_MTOUCH_Sensor_Initialize 0050  
                                            ?___awdiv 004A                                              ?___awmod 0053  
                                     ?_ADC_Initialize 0070                                      ??_Sensor_Service 005E  
                          ??_Sensor_Acq_ExecutePacket 004C                          ??_INTERRUPT_InterruptManager 0078  
                                 ??_Sensor_setSampled 004A                                           ??_TMR2_Stop 004A  
                           ??_MTOUCH_Service_Mainloop 0065                           __size_of_Sensor_setInactive 0008  
                                     ?_TMR2_StopTimer 0070                                        __size_ofi1_abs 0017  
                      Sensor_Acq_ExecutePacket@sensor 0050                                         ??_MTOUCH_Tick 004D  
                                __CFG_RSTOSC$HFINTPLL 0000                                              _T2CLKCON 0290  
                        v_get_slope_intercept@u16_adc 004A                                     ??_TMR0_Initialize 004C  
                           __end_of_Sensor_setSampled 097E                                              _LATAbits 0018  
                                            _LATBbits 0019                                    _currentScannSensor 007D  
                             _Sensor_RawSample_Update 0B40                                             clear_ram0 095A  
                                            _PIE0bits 0716                                              _PIE4bits 071A  
                            __size_of_TMR2_StartTimer 0003                                 i1___bmul@multiplicand 0070  
                            __size_of_TMR1_WriteTimer 000F                   __size_of_INTERRUPT_InterruptManager 001A  
                          ??_TMR0_SetInterruptHandler 004C                                              _PIR0bits 070C  
                                            _PIR1bits 070D                                              _PIR4bits 0710  
                              ??_Button_State_Pressed 0058                __end_of_MTOUCH_Sensor_Sampled_ResetAll 0AE6  
             __size_of_MTOUCH_Sensor_Sampled_ResetAll 0015                        _MTOUCH_Sensor_Sampled_ResetAll 0AD1  
                                   __CFG_BBSIZE$BB512 0000                              ?_MTOUCH_Sensor_SampleAll 0070  
                                            _TMR0_ISR 09C4                                              _TMR1_ISR 0A80  
                                            _TMR2_ISR 09D1                              _MTOUCH_Sensor_wasSampled 0A94  
                                  _mtouch_time_toScan 0045                       _i16_F_SENSOR_TEMPERATURE_10xDEG 0048  
                          __end_of_MTOUCH_CVD_ScanA_0 0C95                            __end_of_MTOUCH_CVD_ScanB_0 0CBA  
                            ??_Button_Baseline_Update 004A                                     ??_TMR1_Initialize 004C  
                                            i1___bmul 0A27                                            _ADCON0bits 009D  
                          __end_of_MTOUCH_needReburst 0004                                 _v_1ms_service_routine 0F9D  
                      ??_TMR2_DefaultInterruptHandler 0070                     __size_of_TMR2_SetInterruptHandler 0006  
                           ?_TMR2_SetInterruptHandler 004A                                  _MTOUCH_Sensor_Enable 0A38  
                                   ___lmul@multiplier 004A                              Button_Tick_helper@button 004C  
                           ??_Button_Deviation_Update 004A                                 _Button_Reading_Update 09DE  
                            ??_Sensor_setScanFunction 004A                              ?_MTOUCH_Button_isPressed 0070  
                                   ?_Sensor_isEnabled 0070                                     ??_TMR2_Initialize 004C  
                                 __end_of_MTOUCH_Tick 0933                                     _MTOUCH_Initialize 09AC  
                     __end_of_MTOUCH_Sensor_Calibrate 0921                                    ??_Sensor_isEnabled 004A  
                                  ?_MTOUCH_Initialize 0070                                              _u8_DIG11 0043  
                                            _u8_DIG12 0042                                              _u8_DIG13 0041  
                                            _u8_DIG21 0040                                              _u8_DIG22 003F  
                         __size_of_TMR2_Period8BitSet 0006                                             memcpy@tmp 0051  
                                   _ADC_GetConversion 0C2D                               ??_OSCILLATOR_Initialize 004A  
                  __end_of_Button_Baseline_Initialize 0D11                            _Button_Baseline_Initialize 0CE5  
                            Sensor_Acquisition@sensor 005D                                    ?_ADC_GetConversion 004A  
                                 ??_MTOUCH_Initialize 0056                                      __size_of___awdiv 0052  
                                    __size_of___awmod 0046                              ?_Button_State_NotPressed 0057  
                            _TMR1_SetInterruptHandler 0954                                    Button_Service@name 005E  
                               _TMR1_InterruptHandler 0030                                   ??_ADC_GetConversion 004C  
                                   ?_Sensor_setActive 0070                              ?_TMR2_LoadPeriodRegister 0070  
                                          _T0CON0bits 059E                                          _Sensor_scanA 006D  
                                        _Sensor_scanB 006B                  Sensor_Scanfrequency_Evaluation@retry 0059  
                                  ??_Sensor_setActive 004A                                 ?_MTOUCH_Sensor_Enable 0070  
                                            __ptext10 094E                                              __ptext11 098E  
                                            __ptext20 0986                                              __ptext12 0C0F  
                                            __ptext21 0BD7                                              __ptext13 09B8  
                                          _T1GCONbits 020F                                              __ptext30 0976  
                                            __ptext22 0002                                              __ptext14 09AC  
                                            __ptext31 0B40                                              __ptext23 0930  
                                            __ptext15 0A18                                              __ptext40 092D  
                                            __ptext32 0921                                              __ptext24 0933  
                                            __ptext16 0A6D                                              __ptext41 092A  
                                            __ptext33 0D73                                              __ptext25 0C4C  
                                            __ptext17 0A38                                              __ptext50 07AF  
                                            __ptext42 0927                                              __ptext34 0B89  
                                            __ptext26 0AD1                                              __ptext18 0BF3  
                                            __ptext51 0A94                                              __ptext43 0924  
                                            __ptext35 096E                                              __ptext27 097E  
                                            __ptext19 0CBA                                              __ptext60 0CE5  
                                            __ptext52 0922                                              __ptext44 0948  
                                            __ptext36 0966                                              __ptext28 0ABC  
                                            __ptext61 09DE                                              __ptext53 04C1  
                                            __ptext45 0942                                              __ptext37 09EC  
                                            __ptext29 0E97                                              __ptext70 05DB  
                                            __ptext62 0DFC                                              __ptext54 0F42  
                                            __ptext46 093C                                              __ptext38 06E3  
                                            __ptext71 091E                                              __ptext63 0B28  
                                            __ptext55 0EEC                                              __ptext47 0A5B  
                                            __ptext39 0749                                              __ptext80 09C4  
                                            __ptext72 0B11                                              __ptext64 0A49  
                                            __ptext56 0D41                                              __ptext48 0996  
                                            __ptext81 091C                                              __ptext73 0A27  
                                            __ptext65 0660                                              __ptext57 0920  
                                            __ptext49 0A09                                              __ptext82 0F9D  
                                            __ptext74 0C95                                              __ptext66 0BA2  
                                            __ptext58 091F                                              __ptext83 0B70  
                                            __ptext75 0C70                                              __ptext67 0C2D  
                                            __ptext59 0553                                              __ptext76 0A80  
                                            __ptext77 091D                                              __ptext69 09D1  
                                            __ptext78 09A0                                              __ptext79 09FA  
                           __end_of_MTOUCH_Initialize 09B8                             ??_Sensor_RawSample_Update 004A  
                 Sensor_Acq_ExecutePacket@ADCON0_temp 004D                   Sensor_Acq_ExecutePacket@ADCON1_temp 004E  
                          __size_of_Sensor_setSampled 0008                                         __size_of_main 0371  
                     __end_of_MTOUCH_Sensor_SampleAll 0AD1                  __end_of_TMR0_DefaultInterruptHandler 091D  
               __size_of_TMR0_DefaultInterruptHandler 0001                          _TMR0_DefaultInterruptHandler 091C  
                    Sensor_Scanfrequency_Evaluation@i 005A                             __end_of_ADC_GetConversion 0C4C  
                                __CFG_WDTCWS$WDTCWS_7 0000                         __size_of_v_1s_service_routine 000C  
                        Sensor_setScanFunction@sensor 004A                              _u8_TOUCH_DELAY_COUNTDOWN 003C  
                                            int$flags 007E                              ??_Sensor_Acq_ExecuteScan 0074  
                  __size_of_Button_State_Initializing 005B                                     ??_TMR2_StartTimer 004A  
                  __end_of_INTERRUPT_InterruptManager 001E                            _INTERRUPT_InterruptManager 0004  
                                   ??_TMR1_WriteTimer 0072                       __size_of_Button_Baseline_Update 0088  
                        ?_MTOUCH_Button_InitializeAll 0070                          ?_MTOUCH_Sensor_InitializeAll 0070  
                              ?_v_1ms_service_routine 0070                                         _mtouch_button 00B9  
                                          _INTCONbits 000B                                         _mtouch_sensor 00AC  
                                            memcpy@d1 0052                                              memcpy@s1 004A  
                     __end_of_MTOUCH_Button_isPressed 0BBC                                     __CFG_BOREN$NSLEEP 0000  
                                         _MTOUCH_Tick 0930                                ?_Button_Reading_Update 0070  
                    Button_Deviation_Update@deviation 0055                          MTOUCH_Button_Initialize@name 004C  
                              _i32_F_SENSOR_ADCsample 0024                                _i32_R_SENSOR_ADCsample 0020  
                   __size_of_MTOUCH_Button_Initialize 0032                                              intlevel1 0000  
                           ?_MTOUCH_Button_Initialize 0070                           __size_of_Sensor_Acquisition 0043  
                     __size_of_Sensor_setScanFunction 0012               __end_of_Sensor_Scanfrequency_Evaluation 0749  
            __size_of_Sensor_Scanfrequency_Evaluation 0066                     ??_Sensor_Scanfrequency_Evaluation 0051  
                    ?_Sensor_Scanfrequency_Evaluation 0070                       _Sensor_Scanfrequency_Evaluation 06E3  
                             ?_PIN_MANAGER_Initialize 0070                        _u8_DIMMING_START_COUNTDOWN_SEC 003E  
                                   __CFG_CLKOUTEN$OFF 0000                           ?_MTOUCH_Sensor_isCalibrated 0070  
                  __size_ofi1_MTOUCH_Button_isPressed 0019                            ?i1_MTOUCH_Button_isPressed 0070  
                                    ??_ADC_Initialize 004A                         ?_TMR0_DefaultInterruptHandler 0070  
                         __size_of_Button_Tick_helper 0024                       __end_of_Button_State_NotPressed 0553  
                        __end_of_Sensor_Sampled_Reset 0986                                      ??_TMR2_StopTimer 004A  
                     __end_of_TMR2_LoadPeriodRegister 0948                           __size_of_MTOUCH_Button_Tick 0004  
                                       __pstringtext1 07FF                                         __pstringtext2 081F  
                                       __pstringtext3 080F                         ??_MTOUCH_Button_InitializeAll 0054  
                            ??_Button_DefaultCallback 004B                         ??_MTOUCH_Sensor_InitializeAll 0052  
                                     _TMR0_Initialize 0AA8                      __size_of_MTOUCH_Sensor_Calibrate 0001  
                              ??_MTOUCH_Sensor_Enable 004E                              ??_Sensor_DefaultCallback 004B  
                       i1MTOUCH_Button_isPressed@name 0071                  __end_of_Button_Reading_Update_Helper 0E45  
               __size_of_Button_Reading_Update_Helper 0049                          _Button_Reading_Update_Helper 0DFC  
                                          _TMR2_Start 0924                     __size_of_MTOUCH_Button_ServiceAll 000F  
                           ?_MTOUCH_Button_ServiceAll 0070                         Button_State_NotPressed@button 0057  
                          __size_of_MTOUCH_Initialize 000C                        __end_of_PIN_MANAGER_Initialize 0C2D  
                              _Button_Baseline_Update 0553                           MTOUCH_Button_isPressed@name 004B  
                               _TMR2_InterruptHandler 0032                            ??_MTOUCH_Sensor_wasSampled 004E  
                          __size_of_ADC_GetConversion 001F                                       _TMR1_Initialize 0BBC  
                   __end_ofi1_MTOUCH_Button_isPressed 0B89                                        _u8_DIG_CHANNEL 0044  
                               _v_get_slope_intercept 03C2  
